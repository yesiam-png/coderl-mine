[
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums\u00a0and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        m = {}\n        for i, x in enumerate(nums):\n            y = target - x\n            if y in m:\n                return [m[y], i]\n            m[x] = i\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,7,11,15], target = 9) == [0,1]\n    assert candidate(nums = [3,2,4], target = 6) == [1,2]\n    assert candidate(nums = [3,3], target = 6) == [0,1]\n\n\ncheck(Solution().twoSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(\n        self, l1: Optional[ListNode], l2: Optional[ListNode]\n    ) -> Optional[ListNode]:\n        dummy = ListNode()\n        carry, curr = 0, dummy\n        while l1 or l2 or carry:\n            s = (l1.val if l1 else 0) + (l2.val if l2 else 0) + carry\n            carry, val = divmod(s, 10)\n            curr.next = ListNode(val)\n            curr = curr.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(l1 = list_node([2,4,3]), l2 = list_node([5,6,4])), list_node([7,0,8]))\n    assert is_same_list(candidate(l1 = list_node([0]), l2 = list_node([0])), list_node([0]))\n    assert is_same_list(candidate(l1 = list_node([9,9,9,9,9,9,9]), l2 = list_node([9,9,9,9])), list_node([8,9,9,9,0,0,0,1]))\n\n\ncheck(Solution().addTwoNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, find the length of the longest substring without repeating characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ss = set()\n        ans = i = 0\n        for j, c in enumerate(s):\n            while c in ss:\n                ss.remove(s[i])\n                i += 1\n            ss.add(c)\n            ans = max(ans, j - i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcabcbb\") == 3\n    assert candidate(s = \"bbbbb\") == 1\n    assert candidate(s = \"pwwkew\") == 3\n\n\ncheck(Solution().lengthOfLongestSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n```",
        "solutions": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def f(i: int, j: int, k: int) -> int:\n            if i >= m:\n                return nums2[j + k - 1]\n            if j >= n:\n                return nums1[i + k - 1]\n            if k == 1:\n                return min(nums1[i], nums2[j])\n            p = k // 2\n            x = nums1[i + p - 1] if i + p - 1 < m else inf\n            y = nums2[j + p - 1] if j + p - 1 < n else inf\n            return f(i + p, j, k - p) if x < y else f(i, j + p, k - p)\n\n        m, n = len(nums1), len(nums2)\n        a = f(0, 0, (m + n + 1) // 2)\n        b = f(0, 0, (m + n + 2) // 2)\n        return (a + b) / 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,3], nums2 = [2]) == 2.00000\n    assert candidate(nums1 = [1,2], nums2 = [3,4]) == 2.50000\n\n\ncheck(Solution().findMedianSortedArrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n```",
        "solutions": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n        g = [[] for _ in range(numRows)]\n        i, k = 0, -1\n        for c in s:\n            g[i].append(c)\n            if i == 0 or i == numRows - 1:\n                k = -k\n            i += k\n        return ''.join(chain(*g))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"PAYPALISHIRING\", numRows = 3) == \"PAHNAPLSIIGYIR\"\n    assert candidate(s = \"PAYPALISHIRING\", numRows = 4) == \"PINALSIGYAHRPI\"\n    assert candidate(s = \"A\", numRows = 1) == \"A\"\n\n\ncheck(Solution().convert)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n```",
        "solutions": "class Solution:\n    def reverse(self, x: int) -> int:\n        ans = 0\n        mi, mx = -(2**31), 2**31 - 1\n        while x:\n            if ans < mi // 10 + 1 or ans > mx // 10:\n                return 0\n            y = x % 10\n            if x < 0 and y > 0:\n                y -= 10\n            ans = ans * 10 + y\n            x = (x - y) // 10\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 123) == 321\n    assert candidate(x = -123) == -321\n    assert candidate(x = 120) == 21\n    assert candidate(x = 0) == 0\n\n\ncheck(Solution().reverse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nImplement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\n\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros\u00a0until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\n\nReturn the integer as the final result.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def myAtoi(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        if not s:\n            return 0\n        n = len(s)\n        if n == 0:\n            return 0\n        i = 0\n        while s[i] == ' ':\n            i += 1\n            # \u4ec5\u5305\u542b\u7a7a\u683c\n            if i == n:\n                return 0\n        sign = -1 if s[i] == '-' else 1\n        if s[i] in ['-', '+']:\n            i += 1\n        res, flag = 0, (2**31 - 1) // 10\n        while i < n:\n            # \u975e\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\u4f53\n            if not s[i].isdigit():\n                break\n            c = int(s[i])\n            # \u6ea2\u51fa\u5224\u65ad\n            if res > flag or (res == flag and c > 7):\n                return 2**31 - 1 if sign > 0 else -(2**31)\n            res = res * 10 + c\n            i += 1\n        return sign * res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"42\") == 42\n    assert candidate(s = \" -042\") == -42\n    assert candidate(s = \"1337c0d3\") == 1337\n    assert candidate(s = \"0-1\") == 0\n    assert candidate(s = \"words and 987\") == 0\n\n\ncheck(Solution().myAtoi)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer x, return true if x is a palindrome, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPalindrome(self, x: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        if x < 0 or (x and x % 10 == 0):\n            return False\n        y = 0\n        while y < x:\n            y = y * 10 + x % 10\n            x //= 10\n        return x in (y, y // 10)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 121) == True\n    assert candidate(x = -121) == False\n    assert candidate(x = 10) == False\n\n\ncheck(Solution().isPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        i, j = 0, len(height) - 1\n        ans = 0\n        while i < j:\n            t = (j - i) * min(height[i], height[j])\n            ans = max(ans, t)\n            if height[i] < height[j]:\n                i += 1\n            else:\n                j -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([1,8,6,2,5,4,8,3,7]) == 49 \n    assert candidate(height = [1,1]) == 1\n\n\ncheck(Solution().maxArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSeven different symbols represent Roman numerals with the following values:\n\n\n\nSymbol\nValue\n\n\n\n\nI\n1\n\n\nV\n5\n\n\nX\n10\n\n\nL\n50\n\n\nC\n100\n\n\nD\n500\n\n\nM\n1000\n\n\n\nRoman numerals are formed by appending\u00a0the conversions of\u00a0decimal place values\u00a0from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\nIf the value does not start with 4 or\u00a09, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the\u00a0subtractive form\u00a0representing\u00a0one symbol subtracted from the following symbol, for example,\u00a04 is 1 (I) less than 5 (V): IV\u00a0and 9 is 1 (I) less than 10 (X): IX.\u00a0Only the following subtractive forms are used: 4 (IV), 9 (IX),\u00a040 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5\u00a0(V), 50 (L), or 500 (D) multiple times. If you need to append a symbol\u00a04 times\u00a0use the subtractive form.\n\nGiven an integer, convert it to a Roman numeral.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n```",
        "solutions": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        cs = ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I')\n        vs = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        ans = []\n        for c, v in zip(cs, vs):\n            while num >= v:\n                num -= v\n                ans.append(c)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 3) == \"III\"\n    assert candidate(num = 4) == \"IV\"\n    assert candidate(num = 9) == \"IX\"\n    assert candidate(num = 58) == \"LVIII\"\n    assert candidate(num = 1994) == \"MCMXCIV\"\n\n\ncheck(Solution().intToRoman)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nRoman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two ones added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\u00a0\nX can be placed before L (50) and C (100) to make 40 and 90.\u00a0\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        return sum((-1 if d[a] < d[b] else 1) * d[a] for a, b in pairwise(s)) + d[s[-1]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"III\") == 3\n    assert candidate(s = \"LVIII\") == 58\n    assert candidate(s = \"MCMXCIV\") == 1994\n\n\ncheck(Solution().romanToInt)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        for i in range(len(strs[0])):\n            for s in strs[1:]:\n                if len(s) <= i or s[i] != strs[0][i]:\n                    return s[:i]\n        return strs[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert candidate(strs = [\"dog\",\"racecar\",\"car\"]) == \"\"\n\n\ncheck(Solution().longestCommonPrefix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        ans = []\n        for i in range(n - 2):\n            if nums[i] > 0:\n                break\n            if i and nums[i] == nums[i - 1]:\n                continue\n            j, k = i + 1, n - 1\n            while j < k:\n                x = nums[i] + nums[j] + nums[k]\n                if x < 0:\n                    j += 1\n                elif x > 0:\n                    k -= 1\n                else:\n                    ans.append([nums[i], nums[j], nums[k]])\n                    j, k = j + 1, k - 1\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,0,1,2,-1,-4]) == [[-1,-1,2],[-1,0,1]]\n    assert candidate(nums = [0,1,1]) == []\n    assert candidate(nums = [0,0,0]) == [[0,0,0]]\n\n\ncheck(Solution().threeSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        n = len(nums)\n        ans = inf\n        for i, v in enumerate(nums):\n            j, k = i + 1, n - 1\n            while j < k:\n                t = v + nums[j] + nums[k]\n                if t == target:\n                    return t\n                if abs(t - target) < abs(ans - target):\n                    ans = t\n                if t > target:\n                    k -= 1\n                else:\n                    j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,2,1,-4], target = 1) == 2\n    assert candidate(nums = [0,0,0], target = 1) == 0\n\n\ncheck(Solution().threeSumClosest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        d = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"]\n        ans = [\"\"]\n        for i in digits:\n            s = d[int(i) - 2]\n            ans = [a + b for a in ans for b in s]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(digits = \"23\") == [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n    assert candidate(digits = \"\") == []\n    assert candidate(digits = \"2\") == [\"a\",\"b\",\"c\"]\n\n\ncheck(Solution().letterCombinations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n0 <= a, b, c, d\u00a0< n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        n = len(nums)\n        ans = []\n        if n < 4:\n            return ans\n        nums.sort()\n        for i in range(n - 3):\n            if i and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                k, l = j + 1, n - 1\n                while k < l:\n                    x = nums[i] + nums[j] + nums[k] + nums[l]\n                    if x < target:\n                        k += 1\n                    elif x > target:\n                        l -= 1\n                    else:\n                        ans.append([nums[i], nums[j], nums[k], nums[l]])\n                        k, l = k + 1, l - 1\n                        while k < l and nums[k] == nums[k - 1]:\n                            k += 1\n                        while k < l and nums[l] == nums[l + 1]:\n                            l -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,0,-1,0,-2,2], target = 0) == [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n    assert candidate(nums = [2,2,2,2,2], target = 8) == [[2,2,2,2]]\n\n\ncheck(Solution().fourSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list, remove the nth node from the end of the list and return its head.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n        fast = slow = dummy\n        for _ in range(n):\n            fast = fast.next\n        while fast.next:\n            slow, fast = slow.next, fast.next\n        slow.next = slow.next.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), n = 2), list_node([1,2,3,5]))\n    assert is_same_list(candidate(head = list_node([1]), n = 1), list_node([]))\n    assert is_same_list(candidate(head = list_node([1,2]), n = 1), list_node([1]))\n\n\ncheck(Solution().removeNthFromEnd)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stk = []\n        d = {'()', '[]', '{}'}\n        for c in s:\n            if c in '({[':\n                stk.append(c)\n            elif not stk or stk.pop() + c not in d:\n                return False\n        return not stk\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"()\") == True\n    assert candidate(s = \"()[]{}\") == True\n    assert candidate(s = \"(]\") == False\n\n\ncheck(Solution().isValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def dfs(l, r, t):\n            if l > n or r > n or l < r:\n                return\n            if l == n and r == n:\n                ans.append(t)\n                return\n            dfs(l + 1, r, t + '(')\n            dfs(l, r + 1, t + ')')\n\n        ans = []\n        dfs(0, 0, '')\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n    assert candidate(n = 1) == [\"()\"]\n\n\ncheck(Solution().generateParenthesis)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head is None or head.next is None:\n            return head\n        t = self.swapPairs(head.next.next)\n        p = head.next\n        p.next = head\n        head.next = t\n        return p\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4])), list_node([2,1,4,3]))\n    assert is_same_list(candidate(head = list_node([])), list_node([]))\n    assert is_same_list(candidate(head = list_node([1])), list_node([1]))\n\n\ncheck(Solution().swapPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        def reverseList(head):\n            pre, p = None, head\n            while p:\n                q = p.next\n                p.next = pre\n                pre = p\n                p = q\n            return pre\n\n        dummy = ListNode(next=head)\n        pre = cur = dummy\n        while cur.next:\n            for _ in range(k):\n                cur = cur.next\n                if cur is None:\n                    return dummy.next\n            t = cur.next\n            cur.next = None\n            start = pre.next\n            pre.next = reverseList(start)\n            start.next = t\n            pre = start\n            cur = pre\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), k = 2), list_node([2,1,4,3,5]))\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), k = 3), list_node([3,2,1,4,5]))\n\n\ncheck(Solution().reverseKGroup)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n```",
        "solutions": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        n, m = len(haystack), len(needle)\n        for i in range(n - m + 1):\n            if haystack[i : i + m] == needle:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(haystack = \"sadbutsad\", needle = \"sad\") == 0\n    assert candidate(haystack = \"leetcode\", needle = \"leeto\") == -1\n\n\ncheck(Solution().strStr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.\n\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated string because it is not the concatenation of any permutation of words.\n\nReturn an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        cnt = Counter(words)\n        m, n = len(s), len(words)\n        k = len(words[0])\n        ans = []\n        for i in range(k):\n            cnt1 = Counter()\n            l = r = i\n            t = 0\n            while r + k <= m:\n                w = s[r : r + k]\n                r += k\n                if w not in cnt:\n                    l = r\n                    cnt1.clear()\n                    t = 0\n                    continue\n                cnt1[w] += 1\n                t += 1\n                while cnt1[w] > cnt[w]:\n                    remove = s[l : l + k]\n                    l += k\n                    cnt1[remove] -= 1\n                    t -= 1\n                if t == n:\n                    ans.append(l)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]) == [0,9]\n    assert candidate(s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]) == []\n    assert candidate(s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]) == [6,9,12]\n\n\ncheck(Solution().findSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        f = [0] * (n + 1)\n        for i, c in enumerate(s, 1):\n            if c == \")\":\n                if i > 1 and s[i - 2] == \"(\":\n                    f[i] = f[i - 2] + 2\n                else:\n                    j = i - f[i - 1] - 1\n                    if j and s[j - 1] == \"(\":\n                        f[i] = f[i - 1] + 2 + f[j - 1]\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(()\") == 2\n    assert candidate(s = \")()())\") == 4\n    assert candidate(s = \"\") == 0\n\n\ncheck(Solution().longestValidParentheses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target <= nums[mid]:\n                    right = mid\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[n - 1]:\n                    left = mid + 1\n                else:\n                    right = mid\n        return left if nums[left] == target else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,5,6,7,0,1,2], target = 0) == 4\n    assert candidate(nums = [4,5,6,7,0,1,2], target = 3) == -1\n    assert candidate(nums = [1], target = 0) == -1\n\n\ncheck(Solution().search)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        l = bisect_left(nums, target)\n        r = bisect_left(nums, target + 1)\n        return [-1, -1] if l == r else [l, r - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,7,7,8,8,10], target = 8) == [3,4]\n    assert candidate(nums = [5,7,7,8,8,10], target = 6) == [-1,-1]\n    assert candidate(nums = [], target = 0) == [-1,-1]\n\n\ncheck(Solution().searchRange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,6], target = 5) == 2\n    assert candidate(nums = [1,3,5,6], target = 2) == 1\n    assert candidate(nums = [1,3,5,6], target = 7) == 4\n\n\ncheck(Solution().searchInsert)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nDetermine if a\u00a09 x 9 Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0according to the following rules:\n\nEach row\u00a0must contain the\u00a0digits\u00a01-9 without repetition.\nEach column must contain the digits\u00a01-9\u00a0without repetition.\nEach of the nine\u00a03 x 3 sub-boxes of the grid must contain the digits\u00a01-9\u00a0without repetition.\n\nNote:\n\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned\u00a0rules.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        row = [[False] * 9 for _ in range(9)]\n        col = [[False] * 9 for _ in range(9)]\n        sub = [[False] * 9 for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                c = board[i][j]\n                if c == '.':\n                    continue\n                num = int(c) - 1\n                k = i // 3 * 3 + j // 3\n                if row[i][num] or col[j][num] or sub[k][num]:\n                    return False\n                row[i][num] = True\n                col[j][num] = True\n                sub[k][num] = True\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]) == True\n    assert candidate(board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]) == False\n\n\ncheck(Solution().isValidSudoku)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the run-length encoding of countAndSay(n - 1).\n\nRun-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\nGiven a positive integer n, return the nth element of the count-and-say sequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countAndSay(self, n: int) -> str:\n```",
        "solutions": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        s = '1'\n        for _ in range(n - 1):\n            i = 0\n            t = []\n            while i < len(s):\n                j = i\n                while j < len(s) and s[j] == s[i]:\n                    j += 1\n                t.append(str(j - i))\n                t.append(str(s[i]))\n                i = j\n            s = ''.join(t)\n        return s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == \"1211\"\n    assert candidate(n = 1) == \"1\"\n\n\ncheck(Solution().countAndSay)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def dfs(i: int, s: int):\n            if s == 0:\n                ans.append(t[:])\n                return\n            if s < candidates[i]:\n                return\n            for j in range(i, len(candidates)):\n                t.append(candidates[j])\n                dfs(j, s - candidates[j])\n                t.pop()\n\n        candidates.sort()\n        t = []\n        ans = []\n        dfs(0, target)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candidates = [2,3,6,7], target = 7) == [[2,2,3],[7]]\n\n\ncheck(Solution().combinationSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sum to target.\nEach number in candidates\u00a0may only be used once in the combination.\nNote:\u00a0The solution set must not contain duplicate combinations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        def dfs(i: int, s: int):\n            if s == 0:\n                ans.append(t[:])\n                return\n            if i >= len(candidates) or s < candidates[i]:\n                return\n            for j in range(i, len(candidates)):\n                if j > i and candidates[j] == candidates[j - 1]:\n                    continue\n                t.append(candidates[j])\n                dfs(j + 1, s - candidates[j])\n                t.pop()\n\n        candidates.sort()\n        ans = []\n        t = []\n        dfs(0, target)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candidates = [10,1,2,7,6,1,5], target = 8) == [\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n    assert candidate(candidates = [2,5,2,1,2], target = 5) == [\n[1,2,2],\n[5]\n]\n\n\ncheck(Solution().combinationSum2)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        def swap(i, j):\n            nums[i], nums[j] = nums[j], nums[i]\n\n        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n                swap(i, nums[i] - 1)\n        for i in range(n):\n            if i + 1 != nums[i]:\n                return i + 1\n        return n + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,0]) == 3\n    assert candidate(nums = [3,4,-1,1]) == 2\n    assert candidate(nums = [7,8,9,11,12]) == 1\n\n\ncheck(Solution().firstMissingPositive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        left = [height[0]] * n\n        right = [height[-1]] * n\n        for i in range(1, n):\n            left[i] = max(left[i - 1], height[i])\n            right[n - i - 1] = max(right[n - i], height[n - i - 1])\n        return sum(min(l, r) - h for l, r, h in zip(left, right, height))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(height = [0,1,0,2,1,0,1,3,2,1,2,1]) == 6\n    assert candidate(height = [4,2,0,3,2,5]) == 9\n\n\ncheck(Solution().trap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote:\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n```",
        "solutions": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        m, n = len(num1), len(num2)\n        arr = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            a = int(num1[i])\n            for j in range(n - 1, -1, -1):\n                b = int(num2[j])\n                arr[i + j + 1] += a * b\n        for i in range(m + n - 1, 0, -1):\n            arr[i - 1] += arr[i] // 10\n            arr[i] %= 10\n        i = 0 if arr[0] else 1\n        return \"\".join(str(x) for x in arr[i:])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num1 = \"2\", num2 = \"3\") == \"6\"\n    assert candidate(num1 = \"123\", num2 = \"456\") == \"56088\"\n\n\ncheck(Solution().multiply)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n\n0 <= j <= nums[i] and\ni + j < n\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        ans = mx = last = 0\n        for i, x in enumerate(nums[:-1]):\n            mx = max(mx, i + x)\n            if last == i:\n                ans += 1\n                last = mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,1,1,4]) == 2\n    assert candidate(nums = [2,3,0,1,4]) == 2\n\n\ncheck(Solution().jump)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append([\"\".join(row) for row in g])\n                return\n            for j in range(n):\n                if col[j] + dg[i + j] + udg[n - i + j] == 0:\n                    g[i][j] = \"Q\"\n                    col[j] = dg[i + j] = udg[n - i + j] = 1\n                    dfs(i + 1)\n                    col[j] = dg[i + j] = udg[n - i + j] = 0\n                    g[i][j] = \".\"\n\n        ans = []\n        g = [[\".\"] * n for _ in range(n)]\n        col = [0] * n\n        dg = [0] * (n << 1)\n        udg = [0] * (n << 1)\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n    assert candidate(n = 1) == [[\"Q\"]]\n\n\ncheck(Solution().solveNQueens)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the\u00a0n-queens puzzle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalNQueens(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        def dfs(i: int):\n            if i == n:\n                nonlocal ans\n                ans += 1\n                return\n            for j in range(n):\n                a, b = i + j, i - j + n\n                if cols[j] or dg[a] or udg[b]:\n                    continue\n                cols[j] = dg[a] = udg[b] = True\n                dfs(i + 1)\n                cols[j] = dg[a] = udg[b] = False\n\n        cols = [False] * 10\n        dg = [False] * 20\n        udg = [False] * 20\n        ans = 0\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == 2\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().totalNQueens)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, find the subarray with the largest sum, and return its sum.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ans = f = nums[0]\n        for x in nums[1:]:\n            f = max(f, 0) + x\n            ans = max(ans, f)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-2,1,-3,4,-1,2,1,-5,4]) == 6\n    assert candidate(nums = [1]) == 1\n    assert candidate(nums = [5,4,-1,7,8]) == 23\n\n\ncheck(Solution().maxSubArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix, return all elements of the matrix in spiral order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        m, n = len(matrix), len(matrix[0])\n        dirs = (0, 1, 0, -1, 0)\n        i = j = k = 0\n        ans = []\n        vis = set()\n        for _ in range(m * n):\n            ans.append(matrix[i][j])\n            vis.add((i, j))\n            x, y = i + dirs[k], j + dirs[k + 1]\n            if not 0 <= x < m or not 0 <= y < n or (x, y) in vis:\n                k = (k + 1) % 4\n            i = i + dirs[k]\n            j = j + dirs[k + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,6,9,8,7,4,5]\n    assert candidate(matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [1,2,3,4,8,12,11,10,9,5,6,7]\n\n\ncheck(Solution().spiralOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        mx = 0\n        for i, x in enumerate(nums):\n            if mx < i:\n                return False\n            mx = max(mx, i + x)\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,1,1,4]) == True\n    assert candidate(nums = [3,2,1,0,4]) == False\n\n\ncheck(Solution().canJump)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array\u00a0of intervals\u00a0where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        intervals.sort()\n        ans = []\n        st, ed = intervals[0]\n        for s, e in intervals[1:]:\n            if ed < s:\n                ans.append([st, ed])\n                st, ed = s, e\n            else:\n                ed = max(ed, e)\n        ans.append([st, ed])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    assert candidate(intervals = [[1,4],[4,5]]) == [[1,5]]\n\n\ncheck(Solution().merge)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\nNote that you don't need to modify intervals in-place. You can make a new array and return it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def insert(\n        self, intervals: List[List[int]], newInterval: List[int]\n    ) -> List[List[int]]:\n        def merge(intervals: List[List[int]]) -> List[List[int]]:\n            intervals.sort()\n            ans = [intervals[0]]\n            for s, e in intervals[1:]:\n                if ans[-1][1] < s:\n                    ans.append([s, e])\n                else:\n                    ans[-1][1] = max(ans[-1][1], e)\n            return ans\n\n        intervals.append(newInterval)\n        return merge(intervals)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,3],[6,9]], newInterval = [2,5]) == [[1,5],[6,9]]\n    assert candidate(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]) == [[1,2],[3,10],[12,16]]\n\n\ncheck(Solution().insert)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        i = len(s) - 1\n        while i >= 0 and s[i] == ' ':\n            i -= 1\n        j = i\n        while j >= 0 and s[j] != ' ':\n            j -= 1\n        return i - j\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"Hello World\") == 5\n    assert candidate(s = \"   fly me   to   the moon  \") == 4\n    assert candidate(s = \"luffy is still joyboy\") == 6\n\n\ncheck(Solution().lengthOfLastWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        ans = [[0] * n for _ in range(n)]\n        dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        i = j = k = 0\n        for v in range(1, n * n + 1):\n            ans[i][j] = v\n            x, y = i + dirs[k][0], j + dirs[k][1]\n            if x < 0 or y < 0 or x >= n or y >= n or ans[x][y]:\n                k = (k + 1) % 4\n                x, y = i + dirs[k][0], j + dirs[k][1]\n            i, j = x, y\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == [[1,2,3],[8,9,4],[7,6,5]]\n    assert candidate(n = 1) == [[1]]\n\n\ncheck(Solution().generateMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe set [1, 2, 3, ...,\u00a0n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\nGiven n and k, return the kth permutation sequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        ans = []\n        vis = [False] * (n + 1)\n        for i in range(n):\n            fact = 1\n            for j in range(1, n - i):\n                fact *= j\n            for j in range(1, n + 1):\n                if not vis[j]:\n                    if k > fact:\n                        k -= fact\n                    else:\n                        ans.append(str(j))\n                        vis[j] = True\n                        break\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 3) == \"213\"\n    assert candidate(n = 4, k = 9) == \"2314\"\n    assert candidate(n = 3, k = 1) == \"123\"\n\n\ncheck(Solution().getPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked\u00a0list, rotate the list to the right by k places.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if head is None or head.next is None:\n            return head\n        cur, n = head, 0\n        while cur:\n            n += 1\n            cur = cur.next\n        k %= n\n        if k == 0:\n            return head\n        fast = slow = head\n        for _ in range(k):\n            fast = fast.next\n        while fast.next:\n            fast, slow = fast.next, slow.next\n\n        ans = slow.next\n        slow.next = None\n        fast.next = head\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), k = 2), list_node([4,5,1,2,3]))\n    assert is_same_list(candidate(head = list_node([0,1,2]), k = 4), list_node([2,0,1]))\n\n\ncheck(Solution().rotateRight)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [[0] * n for _ in range(m)]\n        f[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if i:\n                    f[i][j] += f[i - 1][j]\n                if j:\n                    f[i][j] += f[i][j - 1]\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 3, n = 7) == 28\n    assert candidate(m = 3, n = 2) == 3\n    assert candidate(m = 7, n = 3) == 28\n    assert candidate(m = 3, n = 3) == 6\n\n\ncheck(Solution().uniquePaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * n for _ in range(m)]\n        f[0][0] = grid[0][0]\n        for i in range(1, m):\n            f[i][0] = f[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            f[0][j] = f[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,3,1],[1,5,1],[4,2,1]]) == 7\n    assert candidate(grid = [[1,2,3],[4,5,6]]) == 12\n\n\ncheck(Solution().minPathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return whether s is a valid number.\n\nFor example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\".\nFormally, a\u00a0valid number is defined using one of the following definitions:\n\nAn integer number followed by an optional exponent.\nA decimal number followed by an optional exponent.\n\nAn integer number is defined with an optional sign '-' or '+' followed by digits.\nA decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions:\n\nDigits followed by a dot '.'.\nDigits followed by a dot '.' followed by digits.\nA dot '.' followed by digits.\n\nAn exponent is defined with an exponent notation 'e' or 'E' followed by an integer number.\nThe digits are defined as one or more digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isNumber(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        n = len(s)\n        i = 0\n        if s[i] in '+-':\n            i += 1\n        if i == n:\n            return False\n        if s[i] == '.' and (i + 1 == n or s[i + 1] in 'eE'):\n            return False\n        dot = e = 0\n        j = i\n        while j < n:\n            if s[j] == '.':\n                if e or dot:\n                    return False\n                dot += 1\n            elif s[j] in 'eE':\n                if e or j == i or j == n - 1:\n                    return False\n                e += 1\n                if s[j + 1] in '+-':\n                    j += 1\n                    if j == n - 1:\n                        return False\n            elif not s[j].isnumeric():\n                return False\n            j += 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0\") == True\n    assert candidate(s = \"e\") == False\n    assert candidate(s = \".\") == False\n\n\ncheck(Solution().isNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            digits[i] += 1\n            digits[i] %= 10\n            if digits[i] != 0:\n                return digits\n        return [1] + digits\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(digits = [1,2,3]) == [1,2,4]\n    assert candidate(digits = [4,3,2,1]) == [4,3,2,2]\n    assert candidate(digits = [0]) == [1]\n\n\ncheck(Solution().plusOne)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two binary strings a and b, return their sum as a binary string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n```",
        "solutions": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        return bin(int(a, 2) + int(b, 2))[2:]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"1010\", b = \"1011\") == \"10101\"\n\n\ncheck(Solution().addBinary)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\n\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n```",
        "solutions": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        l, r = 0, x\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if mid > x // mid:\n                r = mid - 1\n            else:\n                l = mid\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 4) == 2\n    assert candidate(x = 8) == 2\n\n\ncheck(Solution().mySqrt)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return b\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 2\n    assert candidate(n = 3) == 3\n\n\ncheck(Solution().climbStairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\nThe rules of a Unix-style file system are as follows:\n\nA single period '.' represents the current directory.\nA double period '..' represents the previous/parent directory.\nMultiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.\nAny sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.\n\nThe simplified canonical path should follow these rules:\n\nThe path must start with a single slash '/'.\nDirectories within the path must be separated by exactly one slash '/'.\nThe path must not end with a slash '/', unless it is the root directory.\nThe path must not have any single or double periods ('.' and '..') used to denote current or parent directories.\n\nReturn the simplified canonical path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def simplifyPath(self, path: str) -> str:\n```",
        "solutions": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        stk = []\n        for s in path.split('/'):\n            if not s or s == '.':\n                continue\n            if s == '..':\n                if stk:\n                    stk.pop()\n            else:\n                stk.append(s)\n        return '/' + '/'.join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(path = \"/home/\") == \"/home\"\n    assert candidate(path = \"/../\") == \"/\"\n    assert candidate(path = \"/home//foo/\") == \"/home/foo\"\n    assert candidate(path = \"/a/./b/../../c/\") == \"/c\"\n\n\ncheck(Solution().simplifyPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n```",
        "solutions": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for j in range(1, n + 1):\n            f[0][j] = j\n        for i, a in enumerate(word1, 1):\n            f[i][0] = i\n            for j, b in enumerate(word2, 1):\n                if a == b:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1]) + 1\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"horse\", word2 = \"ros\") == 3\n    assert candidate(word1 = \"intention\", word2 = \"execution\") == 5\n\n\ncheck(Solution().minDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix matrix with the following two properties:\n\nEach row is sorted in non-decreasing order.\nThe first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer target, return true if target is in matrix or false otherwise.\nYou must write a solution in O(log(m * n)) time complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n```",
        "solutions": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            x, y = divmod(mid, n)\n            if matrix[x][y] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return matrix[left // n][left % n] == target\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3) == True\n    assert candidate(matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13) == False\n\n\ncheck(Solution().searchMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n```",
        "solutions": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        need = Counter(t)\n        window = Counter()\n        cnt, j, k, mi = 0, 0, -1, inf\n        for i, c in enumerate(s):\n            window[c] += 1\n            if need[c] >= window[c]:\n                cnt += 1\n            while cnt == len(t):\n                if i - j + 1 < mi:\n                    mi = i - j + 1\n                    k = j\n                if need[s[j]] >= window[s[j]]:\n                    cnt -= 1\n                window[s[j]] -= 1\n                j += 1\n        return '' if k < 0 else s[k : k + mi]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ADOBECODEBANC\", t = \"ABC\") == \"BANC\"\n    assert candidate(s = \"a\", t = \"a\") == \"a\"\n\n\ncheck(Solution().minWindow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n```",
        "solutions": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        def dfs(i: int, j: int, k: int) -> bool:\n            if k == len(word) - 1:\n                return board[i][j] == word[k]\n            if board[i][j] != word[k]:\n                return False\n            c = board[i][j]\n            board[i][j] = \"0\"\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                ok = 0 <= x < m and 0 <= y < n and board[x][y] != \"0\"\n                if ok and dfs(x, y, k + 1):\n                    return True\n            board[i][j] = c\n            return False\n\n        m, n = len(board), len(board[0])\n        return any(dfs(i, j, 0) for i in range(m) for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\") == True\n    assert candidate(board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\") == True\n    assert candidate(board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\") == False\n\n\ncheck(Solution().exist)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n```",
        "solutions": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        n = len(nums)\n        l, r = 0, n - 1\n        while l < r:\n            mid = (l + r) >> 1\n            if nums[mid] > nums[r]:\n                if nums[l] <= target <= nums[mid]:\n                    r = mid\n                else:\n                    l = mid + 1\n            elif nums[mid] < nums[r]:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid\n            else:\n                r -= 1\n        return nums[l] == target\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,5,6,0,0,1,2], target = 0) == True\n    assert candidate(nums = [2,5,6,0,0,1,2], target = 3) == False\n\n\ncheck(Solution().search)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = pre = ListNode(next=head)\n        cur = head\n        while cur:\n            while cur.next and cur.next.val == cur.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = cur\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,3,4,4,5])), list_node([1,2,5]))\n    assert is_same_list(candidate(head = list_node([1,1,1,2,3])), list_node([2,3]))\n\n\ncheck(Solution().deleteDuplicates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        cur = head\n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,1,2])), list_node([1,2]))\n    assert is_same_list(candidate(head = list_node([1,1,2,3,3])), list_node([1,2,3]))\n\n\ncheck(Solution().deleteDuplicates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        stk = []\n        left = [-1] * n\n        right = [n] * n\n        for i, h in enumerate(heights):\n            while stk and heights[stk[-1]] >= h:\n                right[stk[-1]] = i\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        return max(h * (right[i] - left[i] - 1) for i, h in enumerate(heights))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [2,1,5,6,2,3]) == 10\n    assert candidate( heights = [2,4]) ==  4\n\n\ncheck(Solution().largestRectangleArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a rows x cols\u00a0binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        heights = [0] * len(matrix[0])\n        ans = 0\n        for row in matrix:\n            for j, v in enumerate(row):\n                if v == \"1\":\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        stk = []\n        left = [-1] * n\n        right = [n] * n\n        for i, h in enumerate(heights):\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            h = heights[i]\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        return max(h * (right[i] - left[i] - 1) for i, h in enumerate(heights))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]) == 6\n    assert candidate(matrix = [[\"0\"]]) == 0\n    assert candidate(matrix = [[\"1\"]]) == 1\n\n\ncheck(Solution().maximalRectangle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        d1, d2 = ListNode(), ListNode()\n        t1, t2 = d1, d2\n        while head:\n            if head.val < x:\n                t1.next = head\n                t1 = t1.next\n            else:\n                t2.next = head\n                t2 = t2.next\n            head = head.next\n        t1.next = d2.next\n        t2.next = None\n        return d1.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,4,3,2,5,2]), x = 3), list_node([1,2,2,4,3,5]))\n    assert is_same_list(candidate(head = list_node([2,1]), x = 2), list_node([1,2]))\n\n\ncheck(Solution().partition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn n-bit gray code sequence is a sequence of 2n integers where:\n\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\n\nGiven an integer n, return any valid n-bit gray code sequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def grayCode(self, n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        return [i ^ (i >> 1) for i in range(1 << n)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == [0,1,3,2]\n    assert candidate(n = 1) == [0,1]\n\n\ncheck(Solution().grayCode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\"1\" -> 'A'\n\"2\" -> 'B'\n...\n\"25\" -> 'Y'\n\"26\" -> 'Z'\nHowever, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\").\nFor example, \"11106\" can be decoded into:\n\n\"AAJF\" with the grouping (1, 1, 10, 6)\n\"KJF\" with the grouping (11, 10, 6)\nThe grouping (1, 11, 06) is invalid because \"06\" is not a valid code (only \"6\" is valid).\n\nNote: there may be strings that are impossible to decode.\n\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        n = len(s)\n        f = [1] + [0] * n\n        for i, c in enumerate(s, 1):\n            if c != \"0\":\n                f[i] = f[i - 1]\n            if i > 1 and s[i - 2] != \"0\" and int(s[i - 2 : i]) <= 26:\n                f[i] += f[i - 2]\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"12\") == 2\n    assert candidate(s = \"226\") == 3\n    assert candidate(s = \"06\") == 0\n\n\ncheck(Solution().numDecodings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(\n        self, head: Optional[ListNode], left: int, right: int\n    ) -> Optional[ListNode]:\n        if head.next is None or left == right:\n            return head\n        dummy = ListNode(0, head)\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        p, q = pre, pre.next\n        cur = q\n        for _ in range(right - left + 1):\n            t = cur.next\n            cur.next = pre\n            pre, cur = cur, t\n        p.next = pre\n        q.next = cur\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), left = 2, right = 4), list_node([1,4,3,2,5]))\n    assert is_same_list(candidate(head = list_node([5]), left = 1, right = 1), list_node([5]))\n\n\ncheck(Solution().reverseBetween)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        def check(i: int, j: int) -> int:\n            if s[i] == \"0\" and i != j:\n                return False\n            return 0 <= int(s[i : j + 1]) <= 255\n\n        def dfs(i: int):\n            if i >= n and len(t) == 4:\n                ans.append(\".\".join(t))\n                return\n            if i >= n or len(t) >= 4:\n                return\n            for j in range(i, min(i + 3, n)):\n                if check(i, j):\n                    t.append(s[i : j + 1])\n                    dfs(j + 1)\n                    t.pop()\n\n        n = len(s)\n        ans = []\n        t = []\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"25525511135\") == [\"255.255.11.135\",\"255.255.111.35\"]\n    assert candidate(s = \"0000\") == [\"0.0.0.0\"]\n    assert candidate(s = \"101023\") == [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n\n\ncheck(Solution().restoreIpAddresses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the inorder traversal of its nodes' values.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            ans.append(root.val)\n            dfs(root.right)\n\n        ans = []\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,None,2,3])) == [1,3,2]\n    assert candidate(root = tree_node([])) == []\n    assert candidate(root = tree_node([1])) == [1]\n\n\ncheck(Solution().inorderTraversal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numTrees(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numTrees(self, n: int) -> int:\n        f = [1] + [0] * n\n        for i in range(n + 1):\n            for j in range(i):\n                f[i] += f[j] * f[i - j - 1]\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 5\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().numTrees)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        def dfs(root: Optional[TreeNode]) -> bool:\n            if root is None:\n                return True\n            if not dfs(root.left):\n                return False\n            nonlocal prev\n            if prev >= root.val:\n                return False\n            prev = root.val\n            return dfs(root.right)\n\n        prev = -inf\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([2,1,3])) == True\n    assert candidate(root = tree_node([5,1,4,None,None,3,6])) == False\n\n\ncheck(Solution().isValidBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p == q:\n            return True\n        if p is None or q is None or p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(p = tree_node([1,2,3]), q = tree_node([1,2,3])) == True\n    assert candidate(p = tree_node([1,2]), q = tree_node([1,None,2])) == False\n    assert candidate(p = tree_node([1,2,1]), q = tree_node([1,1,2])) == False\n\n\ncheck(Solution().isSameTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None or root1.val != root2.val:\n                return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n\n        return dfs(root, root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,2,3,4,4,3])) == True\n    assert candidate(root = tree_node([1,2,2,None,3,None,3])) == False\n\n\ncheck(Solution().isSymmetric)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == [[3],[9,20],[15,7]]\n    assert candidate(root = tree_node([1])) == [[1]]\n    assert candidate(root = tree_node([])) == []\n\n\ncheck(Solution().levelOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        ans = []\n        left = 1\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t if left else t[::-1])\n            left ^= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == [[3],[20,9],[15,7]]\n    assert candidate(root = tree_node([1])) == [[1]]\n    assert candidate(root = tree_node([])) == []\n\n\ncheck(Solution().zigzagLevelOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        l, r = self.maxDepth(root.left), self.maxDepth(root.right)\n        return 1 + max(l, r)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == 3\n    assert candidate(root = tree_node([1,None,2])) == 2\n\n\ncheck(Solution().maxDepth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        def dfs(i: int, j: int, n: int) -> Optional[TreeNode]:\n            if n <= 0:\n                return None\n            v = preorder[i]\n            k = d[v]\n            l = dfs(i + 1, j, k - j)\n            r = dfs(i + 1 + k - j, k + 1, n - k + j - 1)\n            return TreeNode(v, l, r)\n\n        d = {v: i for i, v in enumerate(inorder)}\n        return dfs(0, 0, len(preorder))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]), tree_node([3,9,20,None,None,15,7]))\n    assert is_same_tree(candidate(preorder = [-1], inorder = [-1]), tree_node([-1]))\n\n\ncheck(Solution().buildTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        def dfs(i: int, j: int, n: int) -> Optional[TreeNode]:\n            if n <= 0:\n                return None\n            v = postorder[j + n - 1]\n            k = d[v]\n            l = dfs(i, j, k - i)\n            r = dfs(k + 1, j + k - i, n - k + i - 1)\n            return TreeNode(v, l, r)\n\n        d = {v: i for i, v in enumerate(inorder)}\n        return dfs(0, 0, len(inorder))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]), tree_node([3,9,20,None,None,15,7]))\n    assert is_same_tree(candidate(inorder = [-1], postorder = [-1]), tree_node([-1]))\n\n\ncheck(Solution().buildTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == [[15,7],[9,20],[3]]\n    assert candidate(root = tree_node([1])) == [[1]]\n    assert candidate(root = tree_node([])) == []\n\n\ncheck(Solution().levelOrderBottom)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree, determine if it is height-balanced.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        def height(root):\n            if root is None:\n                return 0\n            l, r = height(root.left), height(root.right)\n            if l == -1 or r == -1 or abs(l - r) > 1:\n                return -1\n            return 1 + max(l, r)\n\n        return height(root) >= 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == True\n    assert candidate(root = tree_node([1,2,2,3,3,None,None,4,4])) == False\n    assert candidate(root = tree_node([])) == True\n\n\ncheck(Solution().isBalanced)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote:\u00a0A leaf is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == 2\n    assert candidate(root = tree_node([2,None,3,None,4,None,5,None,6])) == 5\n\n\ncheck(Solution().minDepth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        def dfs(root, s):\n            if root is None:\n                return False\n            s += root.val\n            if root.left is None and root.right is None and s == targetSum:\n                return True\n            return dfs(root.left, s) or dfs(root.right, s)\n\n        return dfs(root, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,4,8,11,None,13,4,7,2,None,None,None,1]), targetSum = 22) == True\n    assert candidate(root = tree_node([1,2,3]), targetSum = 5) == False\n    assert candidate(root = tree_node([]), targetSum = 0) == False\n\n\ncheck(Solution().hasPathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        def dfs(root, s):\n            if root is None:\n                return\n            s += root.val\n            t.append(root.val)\n            if root.left is None and root.right is None and s == targetSum:\n                ans.append(t[:])\n            dfs(root.left, s)\n            dfs(root.right, s)\n            t.pop()\n\n        ans = []\n        t = []\n        dfs(root, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,4,8,11,None,13,4,7,2,None,None,5,1]), targetSum = 22) == [[5,4,11,2],[5,8,4,5]]\n    assert candidate(root = tree_node([1,2,3]), targetSum = 5) == []\n    assert candidate(root = tree_node([1,2]), targetSum = 0) == []\n\n\ncheck(Solution().pathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n```",
        "solutions": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            f[i][0] = 1\n        for i, a in enumerate(s, 1):\n            for j, b in enumerate(t, 1):\n                f[i][j] = f[i - 1][j]\n                if a == b:\n                    f[i][j] += f[i - 1][j - 1]\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"rabbbit\", t = \"rabbit\") == 3\n    assert candidate(s = \"babgbag\", t = \"bag\") == 5\n\n\ncheck(Solution().numDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        f = [1] * (rowIndex + 1)\n        for i in range(2, rowIndex + 1):\n            for j in range(i - 1, 0, -1):\n                f[j] += f[j - 1]\n        return f\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rowIndex = 3) == [1,3,3,1]\n    assert candidate(rowIndex = 0) == [1]\n    assert candidate(rowIndex = 1) == [1,1]\n\n\ncheck(Solution().getRow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        n = len(triangle)\n        f = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1):\n                f[i][j] = min(f[i + 1][j], f[i + 1][j + 1]) + triangle[i][j]\n        return f[0][0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]) == 11\n    assert candidate(triangle = [[-10]]) == -10\n\n\ncheck(Solution().minimumTotal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ans, mi = 0, inf\n        for v in prices:\n            ans = max(ans, v - mi)\n            mi = min(mi, v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([7,1,5,3,6,4]) == 5\n    assert candidate(prices = [7,6,4,3,1]) == 0\n\n\ncheck(Solution().maxProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        return sum(max(0, b - a) for a, b in pairwise(prices))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prices = [7,1,5,3,6,4]) == 7\n    assert candidate(prices = [1,2,3,4,5]) == 4\n    assert candidate(prices = [7,6,4,3,1]) == 0\n\n\ncheck(Solution().maxProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # \u7b2c\u4e00\u6b21\u4e70\u5165\uff0c\u7b2c\u4e00\u6b21\u5356\u51fa\uff0c\u7b2c\u4e8c\u6b21\u4e70\u5165\uff0c\u7b2c\u4e8c\u6b21\u5356\u51fa\n        f1, f2, f3, f4 = -prices[0], 0, -prices[0], 0\n        for price in prices[1:]:\n            f1 = max(f1, -price)\n            f2 = max(f2, f1 + price)\n            f3 = max(f3, f2 - price)\n            f4 = max(f4, f3 + price)\n        return f4\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prices = [3,3,5,0,0,3,1,4]) == 6\n    assert candidate(prices = [1,2,3,4,5]) == 4\n    assert candidate(prices = [7,6,4,3,1] ) == 0 \n    assert candidate(prices = [1]) == 0\n\n\ncheck(Solution().maxProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            nonlocal ans\n            ans = max(ans, root.val + left + right)\n            return root.val + max(left, right)\n\n        ans = -inf\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3])) == 6\n    assert candidate(root = tree_node([-10,9,20,None,None,15,7])) == 42\n\n\ncheck(Solution().maxPathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        i, j = 0, len(s) - 1\n        while i < j:\n            if not s[i].isalnum():\n                i += 1\n            elif not s[j].isalnum():\n                j -= 1\n            elif s[i].lower() != s[j].lower():\n                return False\n            else:\n                i, j = i + 1, j - 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"race a car\") == False\n    assert candidate(s = \" \") == True\n\n\ncheck(Solution().isPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        words = set(wordList)\n        q = deque([beginWord])\n        ans = 1\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                s = q.popleft()\n                s = list(s)\n                for i in range(len(s)):\n                    ch = s[i]\n                    for j in range(26):\n                        s[i] = chr(ord('a') + j)\n                        t = ''.join(s)\n                        if t not in words:\n                            continue\n                        if t == endWord:\n                            return ans\n                        q.append(t)\n                        words.remove(t)\n                    s[i] = ch\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == 5\n    assert candidate(beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]) == 0\n\n\ncheck(Solution().ladderLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return n\n        nums.sort()\n        ans = t = 1\n        for a, b in pairwise(nums):\n            if a == b:\n                continue\n            if a + 1 == b:\n                t += 1\n                ans = max(ans, t)\n            else:\n                t = 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [100,4,200,1,3,2]) == 4\n    assert candidate(nums = [0,3,7,2,5,8,4,6,0,1]) == 9\n\n\ncheck(Solution().longestConsecutive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\n\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        def dfs(root, s):\n            if root is None:\n                return 0\n            s = s * 10 + root.val\n            if root.left is None and root.right is None:\n                return s\n            return dfs(root.left, s) + dfs(root.right, s)\n\n        return dfs(root, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3])) == 25\n    assert candidate(root = tree_node([4,9,0,5,1])) == 1026\n\n\ncheck(Solution().sumNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append(t[:])\n                return\n            for j in range(i, n):\n                if f[i][j]:\n                    t.append(s[i : j + 1])\n                    dfs(j + 1)\n                    t.pop()\n\n        n = len(s)\n        f = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                f[i][j] = s[i] == s[j] and f[i + 1][j - 1]\n        ans = []\n        t = []\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aab\") == [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n    assert candidate(s = \"a\") == [[\"a\"]]\n\n\ncheck(Solution().partition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCut(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and g[i + 1][j - 1]\n        f = list(range(n))\n        for i in range(1, n):\n            for j in range(i + 1):\n                if g[j][i]:\n                    f[i] = min(f[i], 1 + f[j - 1] if j else 0)\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aab\") == 1\n    assert candidate(s = \"a\") == 0\n    assert candidate(s = \"ab\") == 1\n\n\ncheck(Solution().minCut)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        i = j = n - 1\n        cnt = s = 0\n        while cnt < n:\n            s += gas[j] - cost[j]\n            cnt += 1\n            j = (j + 1) % n\n            while s < 0 and cnt < n:\n                i -= 1\n                s += gas[i] - cost[i]\n                cnt += 1\n        return -1 if s < 0 else i\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(gas = [1,2,3,4,5], cost = [3,4,5,1,2]) == 3\n    assert candidate(gas = [2,3,4], cost = [3,4,3]) == -1\n\n\ncheck(Solution().canCompleteCircuit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def candy(self, ratings: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        n = len(ratings)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                right[i] = right[i + 1] + 1\n        return sum(max(a, b) for a, b in zip(left, right))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ratings = [1,0,2]) == 5\n    assert candidate(ratings = [1,2,2]) == 4\n\n\ncheck(Solution().candy)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-empty\u00a0array of integers nums, every element appears twice except for one. Find that single one.\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return reduce(xor, nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,2,1]) == 1\n    assert candidate(nums = [4,1,2,1,2]) == 4\n    assert candidate(nums = [1]) == 1\n\n\ncheck(Solution().singleNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums where\u00a0every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(32):\n            cnt = sum(num >> i & 1 for num in nums)\n            if cnt % 3:\n                if i == 31:\n                    ans -= 1 << i\n                else:\n                    ans |= 1 << i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,2,3,2]) == 3\n    assert candidate(nums = [0,1,0,1,0,1,99]) == 99\n\n\ncheck(Solution().singleNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] + [False] * n\n        for i in range(1, n + 1):\n            f[i] = any(f[j] and s[j:i] in words for j in range(i))\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcode\", wordDict = [\"leet\",\"code\"]) == True\n    assert candidate(s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]) == True\n    assert candidate(s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]) == False\n\n\ncheck(Solution().wordBreak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the preorder traversal of its nodes' values.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            ans.append(root.val)\n            dfs(root.left)\n            dfs(root.right)\n\n        ans = []\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,None,2,3])) == [1,2,3]\n    assert candidate(root = tree_node([])) == []\n    assert candidate(root = tree_node([1])) == [1]\n    assert candidate(root = tree_node([1,2])) == [1,2]\n    assert candidate(root = tree_node([1,None,2])) == [1,2]\n\n\ncheck(Solution().preorderTraversal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a\u00a0binary tree, return the postorder traversal of its nodes' values.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            dfs(root.right)\n            ans.append(root.val)\n\n        ans = []\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,None,2,3])) == [3,2,1]\n    assert candidate(root = tree_node([])) == []\n    assert candidate(root = tree_node([1])) == [1]\n\n\ncheck(Solution().postorderTraversal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list, return the list after sorting it in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        t = slow.next\n        slow.next = None\n        l1, l2 = self.sortList(head), self.sortList(t)\n        dummy = ListNode()\n        cur = dummy\n        while l1 and l2:\n            if l1.val <= l2.val:\n                cur.next = l1\n                l1 = l1.next\n            else:\n                cur.next = l2\n                l2 = l2.next\n            cur = cur.next\n        cur.next = l1 or l2\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([4,2,1,3])), list_node([1,2,3,4]))\n    assert is_same_list(candidate(head = list_node([-1,5,3,4,0])), list_node([-1,0,3,4,5]))\n    assert is_same_list(candidate(head = list_node([])), list_node([]))\n\n\ncheck(Solution().sortList)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n        ans = 1\n        for i in range(n):\n            x1, y1 = points[i]\n            for j in range(i + 1, n):\n                x2, y2 = points[j]\n                cnt = 2\n                for k in range(j + 1, n):\n                    x3, y3 = points[k]\n                    a = (y2 - y1) * (x3 - x1)\n                    b = (y3 - y1) * (x2 - x1)\n                    cnt += a == b\n                ans = max(ans, cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,1],[2,2],[3,3]]) == 3\n    assert candidate(points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]) == 4\n\n\ncheck(Solution().maxPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\n\nThe valid operators are '+', '-', '*', and '/'.\nEach operand may be an integer or another expression.\nThe division between two integers always truncates toward zero.\nThere will not be any division by zero.\nThe input represents a valid arithmetic expression in a reverse polish notation.\nThe answer and all the intermediate calculations can be represented in a 32-bit integer.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n```",
        "solutions": "import operator\n\n\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        opt = {\n            \"+\": operator.add,\n            \"-\": operator.sub,\n            \"*\": operator.mul,\n            \"/\": operator.truediv,\n        }\n        s = []\n        for token in tokens:\n            if token in opt:\n                s.append(int(opt[token](s.pop(-2), s.pop(-1))))\n            else:\n                s.append(int(token))\n        return s[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]) == 9\n    assert candidate(tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]) == 6\n    assert candidate(tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]) == 22\n\n\ncheck(Solution().evalRPN)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join(reversed(s.split()))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"the sky is blue\") == \"blue is sky the\"\n    assert candidate(s = \" \u00a0hello world \u00a0\") == \"world hello\"\n    assert candidate(s = \"a good \u00a0 example\") == \"example good a\"\n\n\ncheck(Solution().reverseWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans = f = g = nums[0]\n        for x in nums[1:]:\n            ff, gg = f, g\n            f = max(x, ff * x, gg * x)\n            g = min(x, ff * x, gg * x)\n            ans = max(ans, f)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,-2,4]) == 6\n    assert candidate(nums = [-2,0,-1]) == 0\n\n\ncheck(Solution().maxProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSuppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n[4,5,6,7,0,1,2] if it was rotated 4 times.\n[0,1,2,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in\u00a0O(log n) time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        if nums[0] <= nums[-1]:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[0] <= nums[mid]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,5,1,2]) == 1\n    assert candidate(nums = [4,5,6,7,0,1,2]) == 0\n    assert candidate(nums = [11,13,15,17]) == 11\n\n\ncheck(Solution().findMin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSuppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5]) == 1\n    assert candidate(nums = [2,2,2,0,1]) == 0\n\n\ncheck(Solution().findMin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the length of the longest substring that contains at most two distinct characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"eceba\") == 3\n    assert candidate(s = \"ccaabbb\") == 5\n\n\ncheck(Solution().lengthOfLongestSubstringTwoDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, return true if they are both one edit distance apart, otherwise return false.\nA string s is said to be one distance apart from a string t if you can:\n\nInsert exactly one character into s to get t.\nDelete exactly one character from s to get t.\nReplace exactly one character of s with a different character to get t.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if len(s) < len(t):\n            return self.isOneEditDistance(t, s)\n        m, n = len(s), len(t)\n        if m - n > 1:\n            return False\n        for i, c in enumerate(t):\n            if c != s[i]:\n                return s[i + 1 :] == t[i + 1 :] if m == n else s[i + 1 :] == t[i:]\n        return m == n + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ab\", t = \"acb\") == True\n    assert candidate(s = \"cab\", t = \"ad\") == False\n\n\ncheck(Solution().isOneEditDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[inf, -inf] for _ in range(bucket_count)]\n        for v in nums:\n            i = (v - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], v)\n            buckets[i][1] = max(buckets[i][1], v)\n        ans = 0\n        prev = inf\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,6,9,1]) == 3\n    assert candidate(nums = [10]) == 0\n\n\ncheck(Solution().maximumGap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.\nTo compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.\nReturn the following:\n\nIf version1 < version2, return -1.\nIf version1 > version2, return 1.\nOtherwise, return 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n```",
        "solutions": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        m, n = len(version1), len(version2)\n        i = j = 0\n        while i < m or j < n:\n            a = b = 0\n            while i < m and version1[i] != '.':\n                a = a * 10 + int(version1[i])\n                i += 1\n            while j < n and version2[j] != '.':\n                b = b * 10 + int(version2[j])\n                j += 1\n            if a != b:\n                return -1 if a < b else 1\n            i, j = i + 1, j + 1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(version1 = \"1.2\", version2 = \"1.10\") == -1\n    assert candidate(version1 = \"1.01\", version2 = \"1.001\") == 0\n    assert candidate(version1 = \"1.0\", version2 = \"1.0.0.0\") == 0\n\n\ncheck(Solution().compareVersion)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n```",
        "solutions": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        if numerator == 0:\n            return \"0\"\n        ans = []\n        neg = (numerator > 0) ^ (denominator > 0)\n        if neg:\n            ans.append(\"-\")\n        a, b = abs(numerator), abs(denominator)\n        ans.append(str(a // b))\n        a %= b\n        if a == 0:\n            return \"\".join(ans)\n        ans.append(\".\")\n        d = {}\n        while a:\n            d[a] = len(ans)\n            a *= 10\n            ans.append(str(a // b))\n            a %= b\n            if a in d:\n                ans.insert(d[a], \"(\")\n                ans.append(\")\")\n                break\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numerator = 1, denominator = 2) == \"0.5\"\n    assert candidate(numerator = 2, denominator = 1) == \"2\"\n    assert candidate(numerator = 4, denominator = 333) == \"0.(012)\"\n\n\ncheck(Solution().fractionToDecimal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        n = len(numbers)\n        for i in range(n - 1):\n            x = target - numbers[i]\n            j = bisect_left(numbers, x, lo=i + 1)\n            if j < n and numbers[j] == x:\n                return [i + 1, j + 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numbers = [2,7,11,15], target = 9) == [1,2]\n    assert candidate(numbers = [2,3,4], target = 6) == [1,3]\n    assert candidate(numbers = [-1,0], target = -1) == [1,2]\n\n\ncheck(Solution().twoSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n```",
        "solutions": "class Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        res = []\n        while columnNumber:\n            columnNumber -= 1\n            res.append(chr(ord('A') + columnNumber % 26))\n            columnNumber //= 26\n        return ''.join(res[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(columnNumber = 1) == \"A\"\n    assert candidate(columnNumber = 28) == \"AB\"\n    assert candidate(columnNumber = 701) == \"ZY\"\n    assert candidate(columnNumber = 2147483647) == \"FXSHRXW\"\n\n\ncheck(Solution().convertToTitle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of size n, return the majority element.\nThe majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        cnt = m = 0\n        for x in nums:\n            if cnt == 0:\n                m, cnt = x, 1\n            else:\n                cnt += 1 if m == x else -1\n        return m\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,3]) == 3\n    assert candidate(nums = [2,2,1,1,1,2,2]) == 2\n\n\ncheck(Solution().majorityElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n```",
        "solutions": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        ans = 0\n        for c in map(ord, columnTitle):\n            ans = ans * 26 + c - ord(\"A\") + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(columnTitle = \"A\") == 1\n    assert candidate(columnTitle = \"AB\") == 28\n    assert candidate(columnTitle = \"ZY\") == 701\n\n\ncheck(Solution().titleToNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        ans = 0\n        while n:\n            n //= 5\n            ans += n\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 0\n    assert candidate(n = 5) == 1\n    assert candidate(n = 0) == 0\n\n\ncheck(Solution().trailingZeroes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[inf] * (n + 1) for _ in range(m + 1)]\n        dp[m][n - 1] = dp[m - 1][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]) == 7\n    assert candidate(dungeon = [[0]]) == 1\n\n\ncheck(Solution().calculateMinimumHP)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of non-negative integers nums, arrange them such that they form the largest number and return it.\nSince the result may be very large, so you need to return a string instead of an integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        nums.sort(key=cmp_to_key(lambda a, b: 1 if a + b < b + a else -1))\n        return \"0\" if nums[0] == \"0\" else \"\".join(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,2]) == \"210\"\n    assert candidate(nums = [3,30,34,5,9]) == \"9534330\"\n\n\ncheck(Solution().largestNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        cnt = Counter()\n        ans = []\n        for i in range(len(s) - 10 + 1):\n            t = s[i : i + 10]\n            cnt[t] += 1\n            if cnt[t] == 2:\n                ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\") == [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n    assert candidate(s = \"AAAAAAAAAAAAA\") == [\"AAAAAAAAAA\"]\n\n\ncheck(Solution().findRepeatedDnaSequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        \n```",
        "solutions": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        ans = 0\n        while n:\n            n &= n - 1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 11) == 3\n    assert candidate(n = 128) == 1\n    assert candidate(n = 2147483645) == 30\n\n\ncheck(Solution().hammingWeight)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [0] * (n + 1)\n        f[1] = nums[0]\n        for i in range(2, n + 1):\n            f[i] = max(f[i - 1], f[i - 2] + nums[i - 1])\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([1,2,3,1]) == 4\n    assert candidate([2,7,9,3,1]) == 12\n\n\ncheck(Solution().rob)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            ans.append(q[-1].val)\n            for _ in range(len(q)):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,None,5,None,4])) == [1,3,4]\n    assert candidate(root = tree_node([1,None,3])) == [1,3]\n    assert candidate(root = tree_node([])) == []\n\n\ncheck(Solution().rightSideView)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \n```",
        "solutions": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(i, j):\n            grid[i][j] = '0'\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':\n                    dfs(x, y)\n\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]) == 1\n    assert candidate(grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]) == 3\n\n\ncheck(Solution().numIslands)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n```",
        "solutions": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        while left < right:\n            right &= right - 1\n        return right\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(left = 5, right = 7) == 4\n    assert candidate(left = 0, right = 0) == 0\n    assert candidate(left = 1, right = 2147483647) == 0\n\n\ncheck(Solution().rangeBitwiseAnd)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isHappy(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        vis = set()\n        while n != 1 and n not in vis:\n            vis.add(n)\n            x = 0\n            while n:\n                n, v = divmod(n, 10)\n                x += v * v\n            n = x\n        return n == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 19) == True\n    assert candidate(n = 2) == False\n\n\ncheck(Solution().isHappy)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        dummy = ListNode(-1, head)\n        pre = dummy\n        while pre.next:\n            if pre.next.val != val:\n                pre = pre.next\n            else:\n                pre.next = pre.next.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,6,3,4,5,6]), val = 6), list_node([1,2,3,4,5]))\n    assert is_same_list(candidate(head = list_node([]), val = 1), list_node([]))\n    assert is_same_list(candidate(head = list_node([7,7,7,7]), val = 7), list_node([]))\n\n\ncheck(Solution().removeElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the number of prime numbers that are strictly less than n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPrimes(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        primes = [True] * n\n        ans = 0\n        for i in range(2, n):\n            if primes[i]:\n                ans += 1\n                for j in range(i + i, n, i):\n                    primes[j] = False\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 4\n    assert candidate(n = 0) == 0\n    assert candidate(n = 1) == 0\n\n\ncheck(Solution().countPrimes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        d1 = {}\n        d2 = {}\n        for a, b in zip(s, t):\n            if (a in d1 and d1[a] != b) or (b in d2 and d2[b] != a):\n                return False\n            d1[a] = b\n            d2[b] = a\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"egg\", t = \"add\") == True\n    assert candidate(s = \"foo\", t = \"bar\") == False\n    assert candidate(s = \"paper\", t = \"title\") == True\n\n\ncheck(Solution().isIsomorphic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a singly linked list, reverse the list, and return the reversed list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        dummy = ListNode()\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = dummy.next\n            dummy.next = curr\n            curr = next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5])), list_node([5,4,3,2,1]))\n    assert is_same_list(candidate(head = list_node([1,2])), list_node([2,1]))\n    assert is_same_list(candidate(head = list_node([])), list_node([]))\n\n\ncheck(Solution().reverseList)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        g = defaultdict(list)\n        indeg = [0] * numCourses\n        for a, b in prerequisites:\n            g[b].append(a)\n            indeg[a] += 1\n        cnt = 0\n        q = deque(i for i, x in enumerate(indeg) if x == 0)\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return cnt == numCourses\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numCourses = 2, prerequisites = [[1,0]]) == True\n    assert candidate(numCourses = 2, prerequisites = [[1,0],[0,1]]) == False\n\n\ncheck(Solution().canFinish)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,2]) == 3\n    assert candidate(nums = [1,2,3,1]) == 4\n    assert candidate(nums = [1,2,3]) == 3\n\n\ncheck(Solution().rob)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPalindrome(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        base = 131\n        mod = 10**9 + 7\n        n = len(s)\n        prefix = suffix = 0\n        mul = 1\n        idx = 0\n        for i, c in enumerate(s):\n            prefix = (prefix * base + (ord(c) - ord('a') + 1)) % mod\n            suffix = (suffix + (ord(c) - ord('a') + 1) * mul) % mod\n            mul = (mul * base) % mod\n            if prefix == suffix:\n                idx = i + 1\n        return s if idx == n else s[idx:][::-1] + s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aacecaaa\") == \"aaacecaaa\"\n    assert candidate(s = \"abcd\") == \"dcbabcd\"\n\n\ncheck(Solution().shortestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nCan you solve it without sorting?\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        def quick_sort(left, right, k):\n            if left == right:\n                return nums[left]\n            i, j = left - 1, right + 1\n            x = nums[(left + right) >> 1]\n            while i < j:\n                while 1:\n                    i += 1\n                    if nums[i] >= x:\n                        break\n                while 1:\n                    j -= 1\n                    if nums[j] <= x:\n                        break\n                if i < j:\n                    nums[i], nums[j] = nums[j], nums[i]\n            if j < k:\n                return quick_sort(j + 1, right, k)\n            return quick_sort(left, j, k)\n\n        n = len(nums)\n        return quick_sort(0, n - 1, n - k)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,1,5,6,4], k = 2) == 5\n    assert candidate(nums = [3,2,3,1,2,4,5,5,6], k = 4) == 4\n\n\ncheck(Solution().findKthLargest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\n\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        def dfs(i: int, s: int):\n            if s == 0:\n                if len(t) == k:\n                    ans.append(t[:])\n                return\n            if i > 9 or i > s or len(t) >= k:\n                return\n            t.append(i)\n            dfs(i + 1, s - i)\n            t.pop()\n            dfs(i + 1, s)\n\n        ans = []\n        t = []\n        dfs(1, n)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 3, n = 7) == [[1,2,4]]\n    assert candidate(k = 3, n = 9) == [[1,2,6],[1,3,5],[2,3,4]]\n    assert candidate(k = 4, n = 1) == []\n\n\ncheck(Solution().combinationSum3)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return any(a == b for a, b in pairwise(sorted(nums)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,1]) == True\n    assert candidate(nums = [1,2,3,4]) == False\n    assert candidate(nums = [1,1,1,3,3,4,3,2,4,2]) == True\n\n\ncheck(Solution().containsDuplicate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "from queue import PriorityQueue\n\n\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        skys, lines, pq = [], [], PriorityQueue()\n        for build in buildings:\n            lines.extend([build[0], build[1]])\n        lines.sort()\n        city, n = 0, len(buildings)\n        for line in lines:\n            while city < n and buildings[city][0] <= line:\n                pq.put([-buildings[city][2], buildings[city][0], buildings[city][1]])\n                city += 1\n            while not pq.empty() and pq.queue[0][2] <= line:\n                pq.get()\n            high = 0\n            if not pq.empty():\n                high = -pq.queue[0][0]\n            if len(skys) > 0 and skys[-1][1] == high:\n                continue\n            skys.append([line, high])\n        return skys\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]) == [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n    assert candidate(buildings = [[0,2,3],[2,5,3]]) == [[0,3],[5,0]]\n\n\ncheck(Solution().getSkyline)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        d = {}\n        for i, x in enumerate(nums):\n            if x in d and i - d[x] <= k:\n                return True\n            d[x] = i\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,1], k = 3) == True\n    assert candidate(nums = [1,0,1,1], k = 1) == True\n    assert candidate(nums = [1,2,3,1,2,3], k = 2) == False\n\n\ncheck(Solution().containsNearbyDuplicate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n```",
        "solutions": "from sortedcontainers import SortedSet\n\n\nclass Solution:\n    def containsNearbyAlmostDuplicate(\n        self, nums: List[int], indexDiff: int, valueDiff: int\n    ) -> bool:\n        s = SortedSet()\n        for i, v in enumerate(nums):\n            j = s.bisect_left(v - valueDiff)\n            if j < len(s) and s[j] <= v + valueDiff:\n                return True\n            s.add(v)\n            if i >= indexDiff:\n                s.remove(nums[i - indexDiff])\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,1], indexDiff = 3, valueDiff = 0) == True\n    assert candidate(nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3) == False\n\n\ncheck(Solution().containsNearbyAlmostDuplicate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        mx = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i + 1][j + 1] = min(dp[i][j + 1], dp[i + 1][j], dp[i][j]) + 1\n                    mx = max(mx, dp[i + 1][j + 1])\n        return mx * mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]) == 4\n    assert candidate(matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]) == 1\n    assert candidate(matrix = [[\"0\"]]) == 0\n\n\ncheck(Solution().maximalSquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than\u00a0O(n)\u00a0time complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5,6])) == 6\n    assert candidate(root = tree_node([])) == 0\n    assert candidate(root = tree_node([1])) == 1\n\n\ncheck(Solution().countNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n```",
        "solutions": "class Solution:\n    def computeArea(\n        self,\n        ax1: int,\n        ay1: int,\n        ax2: int,\n        ay2: int,\n        bx1: int,\n        by1: int,\n        bx2: int,\n        by2: int,\n    ) -> int:\n        a = (ax2 - ax1) * (ay2 - ay1)\n        b = (bx2 - bx1) * (by2 - by1)\n        width = min(ax2, bx2) - max(ax1, bx1)\n        height = min(ay2, by2) - max(ay1, by1)\n        return a + b - max(height, 0) * max(width, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2) == 45\n    assert candidate(ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2) == 16\n\n\ncheck(Solution().computeArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calculate(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def calculate(self, s: str) -> int:\n        stk = []\n        ans, sign = 0, 1\n        i, n = 0, len(s)\n        while i < n:\n            if s[i].isdigit():\n                x = 0\n                j = i\n                while j < n and s[j].isdigit():\n                    x = x * 10 + int(s[j])\n                    j += 1\n                ans += sign * x\n                i = j - 1\n            elif s[i] == \"+\":\n                sign = 1\n            elif s[i] == \"-\":\n                sign = -1\n            elif s[i] == \"(\":\n                stk.append(ans)\n                stk.append(sign)\n                ans, sign = 0, 1\n            elif s[i] == \")\":\n                ans = stk.pop() * ans + stk.pop()\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1 + 1\") == 2\n    assert candidate(s = \" 2-1 + 2 \") == 3\n    assert candidate(s = \"(1+(4+5+2)-3)+(6+8)\") == 23\n\n\ncheck(Solution().calculate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, invert the tree, and return its root.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return\n            root.left, root.right = root.right, root.left\n            dfs(root.left)\n            dfs(root.right)\n\n        dfs(root)\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([4,2,7,1,3,6,9])), tree_node([4,7,2,9,6,3,1]))\n    assert is_same_tree(candidate(root = tree_node([2,1,3])), tree_node([2,3,1]))\n    assert is_same_tree(candidate(root = tree_node([])), tree_node([]))\n\n\ncheck(Solution().invertTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a sorted unique integer array nums.\nA range [a,b] is the set of all integers from a to b (inclusive).\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\n\n\"a->b\" if a != b\n\"a\" if a == b\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        def f(i: int, j: int) -> str:\n            return str(nums[i]) if i == j else f'{nums[i]}->{nums[j]}'\n\n        i = 0\n        n = len(nums)\n        ans = []\n        while i < n:\n            j = i\n            while j + 1 < n and nums[j + 1] == nums[j] + 1:\n                j += 1\n            ans.append(f(i, j))\n            i = j + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,4,5,7]) == [\"0->2\",\"4->5\",\"7\"]\n    assert candidate(nums = [0,2,3,4,6,8,9]) == [\"0\",\"2->4\",\"6\",\"8->9\"]\n\n\ncheck(Solution().summaryRanges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        stk = []\n        while root or stk:\n            if root:\n                stk.append(root)\n                root = root.left\n            else:\n                root = stk.pop()\n                k -= 1\n                if k == 0:\n                    return root.val\n                root = root.right\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,1,4,None,2]), k = 1) == 1\n    assert candidate(root = tree_node([5,3,6,2,4,None,None,1]), k = 3) == 3\n\n\ncheck(Solution().kthSmallest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == True\n    assert candidate(n = 16) == True\n    assert candidate(n = 3) == False\n\n\ncheck(Solution().isPowerOfTwo)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a singly linked list, return true if it is a palindrome or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        pre, cur = None, slow.next\n        while cur:\n            t = cur.next\n            cur.next = pre\n            pre, cur = cur, t\n        while pre:\n            if pre.val != head.val:\n                return False\n            pre, head = pre.next, head.next\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([1,2,2,1])) == True\n    assert candidate(head = list_node([1,2])) == False\n\n\ncheck(Solution().isPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time and without using the division operation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [0] * n\n        left = right = 1\n        for i, x in enumerate(nums):\n            ans[i] = left\n            left *= x\n        for i in range(n - 1, -1, -1):\n            ans[i] *= right\n            right *= nums[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == [24,12,8,6]\n    assert candidate(nums = [-1,1,0,-3,3]) == [0,0,9,0,0]\n\n\ncheck(Solution().productExceptSelf)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers\u00a0nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        q = [(-v, i) for i, v in enumerate(nums[: k - 1])]\n        heapify(q)\n        ans = []\n        for i in range(k - 1, len(nums)):\n            heappush(q, (-nums[i], i))\n            while q[0][1] <= i - k:\n                heappop(q)\n            ans.append(-q[0][0])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,-1,-3,5,3,6,7], k = 3) == [3,3,5,5,6,7]\n    assert candidate(nums = [1], k = 1) == [1]\n\n\ncheck(Solution().maxSlidingWindow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \n```",
        "solutions": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        for row in matrix:\n            j = bisect_left(row, target)\n            if j < len(matrix[0]) and row[j] == target:\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5) == True\n    assert candidate(matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20) == False\n\n\ncheck(Solution().searchMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, return true if t is an anagram of s, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        cnt = Counter(s)\n        for c in t:\n            cnt[c] -= 1\n            if cnt[c] < 0:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"anagram\", t = \"nagaram\") == True\n    assert candidate(s = \"rat\", t = \"car\") == False\n\n\ncheck(Solution().isAnagram)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n```",
        "solutions": "class Solution:\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n        i = j = -1\n        ans = inf\n        for k, w in enumerate(wordsDict):\n            if w == word1:\n                i = k\n            if w == word2:\n                j = k\n            if i != -1 and j != -1:\n                ans = min(ans, abs(i - j))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\") == 3\n    assert candidate(wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\") == 1\n\n\ncheck(Solution().shortestDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings wordsDict and two strings that already exist in the array word1 and word2, return the shortest distance between the occurrence of these two words in the list.\nNote that word1 and word2 may be the same. It is guaranteed that they represent two individual words in the list.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestWordDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n```",
        "solutions": "class Solution:\n    def shortestWordDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n        ans = len(wordsDict)\n        if word1 == word2:\n            j = -1\n            for i, w in enumerate(wordsDict):\n                if w == word1:\n                    if j != -1:\n                        ans = min(ans, i - j)\n                    j = i\n        else:\n            i = j = -1\n            for k, w in enumerate(wordsDict):\n                if w == word1:\n                    i = k\n                if w == word2:\n                    j = k\n                if i != -1 and j != -1:\n                    ans = min(ans, abs(i - j))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\") == 1\n    assert candidate(wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"makes\") == 3\n\n\ncheck(Solution().shortestWordDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string num which represents an integer, return true if num is a strobogrammatic number.\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        i, j = 0, len(num) - 1\n        while i <= j:\n            a, b = int(num[i]), int(num[j])\n            if d[a] != b:\n                return False\n            i, j = i + 1, j - 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"69\") == True\n    assert candidate(num = \"88\") == True\n    assert candidate(num = \"962\") == False\n    assert candidate(num = \"1\") == True\n\n\ncheck(Solution().isStrobogrammatic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings low and high that represent two integers low and high where low <= high, return the number of strobogrammatic numbers in the range [low, high].\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def strobogrammaticInRange(self, low: str, high: str) -> int:\n```",
        "solutions": "class Solution:\n    def strobogrammaticInRange(self, low: str, high: str) -> int:\n        def dfs(u):\n            if u == 0:\n                return ['']\n            if u == 1:\n                return ['0', '1', '8']\n            ans = []\n            for v in dfs(u - 2):\n                for l, r in ('11', '88', '69', '96'):\n                    ans.append(l + v + r)\n                if u != n:\n                    ans.append('0' + v + '0')\n            return ans\n\n        a, b = len(low), len(high)\n        low, high = int(low), int(high)\n        ans = 0\n        for n in range(a, b + 1):\n            for s in dfs(n):\n                if low <= int(s) <= high:\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(low = \"50\", high = \"100\") == 3\n    assert candidate(low = \"0\", high = \"0\") == 1\n\n\ncheck(Solution().strobogrammaticInRange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        delta = [0] * 1000010\n        for start, end in intervals:\n            delta[start] += 1\n            delta[end] -= 1\n        return max(accumulate(delta))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[0,30],[5,10],[15,20]]) == 2\n    assert candidate(intervals = [[7,10],[2,4]]) == 1\n\n\ncheck(Solution().minMeetingRooms)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of unique integers preorder, return true if it is the correct preorder traversal sequence of a binary search tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def verifyPreorder(self, preorder: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def verifyPreorder(self, preorder: List[int]) -> bool:\n        stk = []\n        last = -inf\n        for x in preorder:\n            if x < last:\n                return False\n            while stk and stk[-1] < x:\n                last = stk.pop()\n            stk.append(x)\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(preorder = [5,2,1,3,6]) == True\n    assert candidate(preorder = [5,2,6,1,3]) == False\n\n\ncheck(Solution().verifyPreorder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\nThe cost of painting each house with a certain color is represented by an n x 3 cost matrix costs.\n\nFor example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on...\n\nReturn the minimum cost to paint all houses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        a = b = c = 0\n        for ca, cb, cc in costs:\n            a, b, c = min(b, c) + ca, min(a, c) + cb, min(a, b) + cc\n        return min(a, b, c)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(costs = [[17,2,17],[16,16,5],[14,3,19]]) == 10\n    assert candidate(costs = [[7,6,2]]) == 2\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        def dfs(root: Optional[TreeNode]):\n            if root is None:\n                return\n            t.append(str(root.val))\n            if root.left is None and root.right is None:\n                ans.append(\"->\".join(t))\n            else:\n                dfs(root.left)\n                dfs(root.right)\n            t.pop()\n\n        ans = []\n        t = []\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,None,5])) == [\"1->2->5\",\"1->3\"]\n    assert candidate(root = tree_node([1])) == [\"1\"]\n\n\ncheck(Solution().binaryTreePaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def addDigits(self, num: int) -> int:\n        return 0 if num == 0 else (num - 1) % 9 + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 38) == 2\n    assert candidate(num = 0) == 0\n\n\ncheck(Solution().addDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of n integers nums and an integer\u00a0target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeSumSmaller(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def threeSumSmaller(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            j, k = i + 1, n - 1\n            while j < k:\n                x = nums[i] + nums[j] + nums[k]\n                if x < target:\n                    ans += k - j\n                    j += 1\n                else:\n                    k -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-2,0,1,3], target = 2) == 2\n    assert candidate(nums = [], target = 0) == 0\n    assert candidate(nums = [0], target = 0) == 0\n\n\ncheck(Solution().threeSumSmaller)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\nYou must write an\u00a0algorithm that runs in linear runtime complexity and uses\u00a0only constant extra space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        xs = reduce(xor, nums)\n        a = 0\n        lb = xs & -xs\n        for x in nums:\n            if x & lb:\n                a ^= x\n        b = xs ^ a\n        return [a, b]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1,3,2,5]) == [3,5]\n    assert candidate(nums = [-1,0]) == [-1,0]\n    assert candidate(nums = [0,1]) == [1,0]\n\n\ncheck(Solution().singleNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.\nReturn true if the edges of the given graph make up a valid tree, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(n))\n        for a, b in edges:\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                return False\n            p[pa] = pb\n            n -= 1\n        return n == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]) == True\n    assert candidate(n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]) == False\n\n\ncheck(Solution().validTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isUgly(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        if n < 1:\n            return False\n        for x in [2, 3, 5]:\n            while n % x == 0:\n                n //= x\n        return n == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6) == True\n    assert candidate(n = 1) == True\n    assert candidate(n = 14) == False\n\n\ncheck(Solution().isUgly)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the nth ugly number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nthUglyNumber(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        h = [1]\n        vis = {1}\n        ans = 1\n        for _ in range(n):\n            ans = heappop(h)\n            for v in [2, 3, 5]:\n                nxt = ans * v\n                if nxt not in vis:\n                    vis.add(nxt)\n                    heappush(h, nxt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 12\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().nthUglyNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\nThe cost of painting each house with a certain color is represented by an n x k cost matrix costs.\n\nFor example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on...\n\nReturn the minimum cost to paint all houses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n        n, k = len(costs), len(costs[0])\n        f = costs[0][:]\n        for i in range(1, n):\n            g = costs[i][:]\n            for j in range(k):\n                t = min(f[h] for h in range(k) if h != j)\n                g[j] += t\n            f = g\n        return min(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(costs = [[1,5,3],[2,9,4]]) == 5\n    assert candidate(costs = [[1,3],[2,4]]) == 5\n\n\ncheck(Solution().minCostII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return true if a permutation of the string could form a palindrome and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        return sum(v & 1 for v in Counter(s).values()) < 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"code\") == False\n    assert candidate(s = \"aab\") == True\n    assert candidate(s = \"carerac\") == True\n\n\ncheck(Solution().canPermutePalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        return reduce(xor, (i ^ v for i, v in enumerate(nums, 1)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,0,1]) == 2\n    assert candidate(nums = [0,1]) == 2\n    assert candidate(nums = [9,6,4,2,3,5,7,0,1]) == 8\n    assert candidate(nums = [0]) == 1\n\n\ncheck(Solution().missingNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.\nYou are given a list of strings words from the alien language's dictionary. Now it is claimed that the strings in words are sorted lexicographically by the rules of this new language.\nIf this claim is incorrect, and the given arrangement of string in\u00a0words\u00a0cannot correspond to any order of letters,\u00a0return\u00a0\"\".\nOtherwise, return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there are multiple solutions, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def alienOrder(self, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        g = [[False] * 26 for _ in range(26)]\n        s = [False] * 26\n        cnt = 0\n        n = len(words)\n        for i in range(n - 1):\n            for c in words[i]:\n                if cnt == 26:\n                    break\n                o = ord(c) - ord('a')\n                if not s[o]:\n                    cnt += 1\n                    s[o] = True\n            m = len(words[i])\n            for j in range(m):\n                if j >= len(words[i + 1]):\n                    return ''\n                c1, c2 = words[i][j], words[i + 1][j]\n                if c1 == c2:\n                    continue\n                o1, o2 = ord(c1) - ord('a'), ord(c2) - ord('a')\n                if g[o2][o1]:\n                    return ''\n                g[o1][o2] = True\n                break\n        for c in words[n - 1]:\n            if cnt == 26:\n                break\n            o = ord(c) - ord('a')\n            if not s[o]:\n                cnt += 1\n                s[o] = True\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if i != j and s[i] and s[j] and g[i][j]:\n                    indegree[j] += 1\n        q = deque()\n        ans = []\n        for i in range(26):\n            if s[i] and indegree[i] == 0:\n                q.append(i)\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if s[i] and i != t and g[t][i]:\n                    indegree[i] -= 1\n                    if indegree[i] == 0:\n                        q.append(i)\n        return '' if len(ans) < cnt else ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]) == \"wertf\"\n    assert candidate(words = [\"z\",\"x\"]) == \"zx\"\n    assert candidate(words = [\"z\",\"x\",\"z\"]) == \"\"\n\n\ncheck(Solution().alienOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nConvert a non-negative integer num to its English words representation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n```",
        "solutions": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return 'Zero'\n\n        lt20 = [\n            '',\n            'One',\n            'Two',\n            'Three',\n            'Four',\n            'Five',\n            'Six',\n            'Seven',\n            'Eight',\n            'Nine',\n            'Ten',\n            'Eleven',\n            'Twelve',\n            'Thirteen',\n            'Fourteen',\n            'Fifteen',\n            'Sixteen',\n            'Seventeen',\n            'Eighteen',\n            'Nineteen',\n        ]\n        tens = [\n            '',\n            'Ten',\n            'Twenty',\n            'Thirty',\n            'Forty',\n            'Fifty',\n            'Sixty',\n            'Seventy',\n            'Eighty',\n            'Ninety',\n        ]\n        thousands = ['Billion', 'Million', 'Thousand', '']\n\n        def transfer(num):\n            if num == 0:\n                return ''\n            if num < 20:\n                return lt20[num] + ' '\n            if num < 100:\n                return tens[num // 10] + ' ' + transfer(num % 10)\n            return lt20[num // 100] + ' Hundred ' + transfer(num % 100)\n\n        res = []\n        i, j = 1000000000, 0\n        while i > 0:\n            if num // i != 0:\n                res.append(transfer(num // i))\n                res.append(thousands[j])\n                res.append(' ')\n                num %= i\n            j += 1\n            i //= 1000\n        return ''.join(res).strip()\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 123) == \"One Hundred Twenty Three\"\n    assert candidate(num = 12345) == \"Twelve Thousand Three Hundred Forty Five\"\n    assert candidate(num = 1234567) == \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n\n\ncheck(Solution().numberToWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        citations.sort(reverse=True)\n        for h in range(len(citations), 0, -1):\n            if citations[h - 1] >= h:\n                return h\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(citations = [3,0,6,1,5]) == 3 \n    assert candidate(citations = [1,3,1]) == 1\n\n\ncheck(Solution().hIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nYou must write an algorithm that runs in logarithmic time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations)\n        left, right = 0, n\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if citations[n - mid] >= mid:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(citations = [0,1,3,5,6]) == 3\n    assert candidate(citations = [1,2,100]) == 2\n\n\ncheck(Solution().hIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are painting a fence of n posts with k different colors. You must paint the posts following these rules:\n\nEvery post must be painted exactly one color.\nThere cannot be three or more consecutive posts with the same color.\n\nGiven the two integers n and k, return the number of ways you can paint the fence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numWays(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numWays(self, n: int, k: int) -> int:\n        f = [0] * n\n        g = [0] * n\n        f[0] = k\n        for i in range(1, n):\n            f[i] = (f[i - 1] + g[i - 1]) * (k - 1)\n            g[i] = f[i - 1]\n        return f[-1] + g[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 2) == 6\n    assert candidate(n = 1, k = 1) == 1\n    assert candidate(n = 7, k = 2) == 42\n\n\ncheck(Solution().numWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSquares(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSquares(self, n: int) -> int:\n        m = int(sqrt(n))\n        f = [[inf] * (n + 1) for _ in range(m + 1)]\n        f[0][0] = 0\n        for i in range(1, m + 1):\n            for j in range(n + 1):\n                f[i][j] = f[i - 1][j]\n                if j >= i * i:\n                    f[i][j] = min(f[i][j], f[i][j - i * i] + 1)\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 12) == 3 \n    assert candidate(n = 13) == 2\n\n\ncheck(Solution().numSquares)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a pattern and a string s, find if s\u00a0follows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:\n\nEach letter in pattern maps to exactly one unique word in s.\nEach unique word in s maps to exactly one letter in pattern.\nNo two letters map to the same word, and no two words map to the same letter.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        ws = s.split()\n        if len(pattern) != len(ws):\n            return False\n        d1 = {}\n        d2 = {}\n        for a, b in zip(pattern, ws):\n            if (a in d1 and d1[a] != b) or (b in d2 and d2[b] != a):\n                return False\n            d1[a] = b\n            d2[b] = a\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pattern = \"abba\", s = \"dog cat cat dog\") == True\n    assert candidate(pattern = \"abba\", s = \"dog cat cat fish\") == False\n    assert candidate(pattern = \"aaaa\", s = \"dog cat cat dog\") == False\n\n\ncheck(Solution().wordPattern)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a pattern and a string s, return true if s matches the pattern.\nA string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordPatternMatch(self, pattern: str, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def wordPatternMatch(self, pattern: str, s: str) -> bool:\n        def dfs(i, j):\n            if i == m and j == n:\n                return True\n            if i == m or j == n or n - j < m - i:\n                return False\n            for k in range(j, n):\n                t = s[j : k + 1]\n                if d.get(pattern[i]) == t:\n                    if dfs(i + 1, k + 1):\n                        return True\n                if pattern[i] not in d and t not in vis:\n                    d[pattern[i]] = t\n                    vis.add(t)\n                    if dfs(i + 1, k + 1):\n                        return True\n                    d.pop(pattern[i])\n                    vis.remove(t)\n            return False\n\n        m, n = len(pattern), len(s)\n        d = {}\n        vis = set()\n        return dfs(0, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pattern = \"abab\", s = \"redblueredblue\") == True\n    assert candidate(pattern = \"aaaa\", s = \"asdasdasdasd\") == True\n    assert candidate(pattern = \"aabb\", s = \"xyzabcxzyabc\") == False\n\n\ncheck(Solution().wordPatternMatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing the following Nim Game with your friend:\n\nInitially, there is a heap of stones on the table.\nYou and your friend will alternate taking turns, and you go first.\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\nThe one who removes the last stone is the winner.\n\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canWinNim(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        return n % 4 != 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == False \n    assert candidate(n = 1) == True\n    assert candidate(n = 2) == True\n\n\ncheck(Solution().canWinNim)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary grid grid where each 1 marks the home of one friend, return the minimal total travel distance.\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\nThe distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTotalDistance(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minTotalDistance(self, grid: List[List[int]]) -> int:\n        def f(arr, x):\n            return sum(abs(v - x) for v in arr)\n\n        rows, cols = [], []\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v:\n                    rows.append(i)\n                    cols.append(j)\n        cols.sort()\n        i = rows[len(rows) >> 1]\n        j = cols[len(cols) >> 1]\n        return f(rows, i) + f(cols, j)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]) == 6\n    assert candidate(grid = [[1,1]]) == 1\n\n\ncheck(Solution().minTotalDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n```",
        "solutions": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        cnt1, cnt2 = Counter(), Counter()\n        x = 0\n        for a, b in zip(secret, guess):\n            if a == b:\n                x += 1\n            else:\n                cnt1[a] += 1\n                cnt2[b] += 1\n        y = sum(min(cnt1[c], cnt2[c]) for c in cnt1)\n        return f\"{x}A{y}B\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(secret = \"1807\", guess = \"7810\") == \"1A3B\"\n    assert candidate(secret = \"1123\", guess = \"0111\") == \"1A1B\"\n\n\ncheck(Solution().getHint)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the length of the longest strictly increasing subsequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    f[i] = max(f[i], f[j] + 1)\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,9,2,5,3,7,101,18]) == 4\n    assert candidate(nums = [0,1,0,3,2,3]) == 4\n    assert candidate(nums = [7,7,7,7,7,7,7]) == 1\n\n\ncheck(Solution().lengthOfLIS)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\nGiven two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.\nYou must write an algorithm with less than O(mn) runtime complexity\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minArea(self, image: List[List[str]], x: int, y: int) -> int:\n```",
        "solutions": "class Solution:\n    def minArea(self, image: List[List[str]], x: int, y: int) -> int:\n        m, n = len(image), len(image[0])\n        left, right = 0, x\n        while left < right:\n            mid = (left + right) >> 1\n            c = 0\n            while c < n and image[mid][c] == '0':\n                c += 1\n            if c < n:\n                right = mid\n            else:\n                left = mid + 1\n        u = left\n        left, right = x, m - 1\n        while left < right:\n            mid = (left + right + 1) >> 1\n            c = 0\n            while c < n and image[mid][c] == '0':\n                c += 1\n            if c < n:\n                left = mid\n            else:\n                right = mid - 1\n        d = left\n        left, right = 0, y\n        while left < right:\n            mid = (left + right) >> 1\n            r = 0\n            while r < m and image[r][mid] == '0':\n                r += 1\n            if r < m:\n                right = mid\n            else:\n                left = mid + 1\n        l = left\n        left, right = y, n - 1\n        while left < right:\n            mid = (left + right + 1) >> 1\n            r = 0\n            while r < m and image[r][mid] == '0':\n                r += 1\n            if r < m:\n                left = mid\n            else:\n                right = mid - 1\n        r = left\n        return (d - u + 1) * (r - l + 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(image = [[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]], x = 0, y = 2) == 6\n    assert candidate(image = [[\"1\"]], x = 0, y = 0) == 1\n\n\ncheck(Solution().minArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        def dfs(a, b, num):\n            if not num:\n                return True\n            if a + b > 0 and num[0] == '0':\n                return False\n            for i in range(1, len(num) + 1):\n                if a + b == int(num[:i]):\n                    if dfs(b, a + b, num[i:]):\n                        return True\n            return False\n\n        n = len(num)\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                if i > 1 and num[0] == '0':\n                    break\n                if j - i > 1 and num[i] == '0':\n                    continue\n                if dfs(int(num[:i]), int(num[i:j]), num[j:]):\n                    return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"112358\") == True \n    assert candidate(\"199100199\") == True \n\n\ncheck(Solution().isAdditiveNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA tree is an undirected graph in which any two vertices are connected by\u00a0exactly\u00a0one path. In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodes\u00a0labelled from 0 to n - 1, and an array of\u00a0n - 1\u00a0edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes\u00a0ai and\u00a0bi in the tree,\u00a0you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))\u00a0 are called minimum height trees (MHTs).\nReturn a list of all MHTs' root labels.\u00a0You can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        if n == 1:\n            return [0]\n        g = [[] for _ in range(n)]\n        degree = [0] * n\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n            degree[a] += 1\n            degree[b] += 1\n        q = deque(i for i in range(n) if degree[i] == 1)\n        ans = []\n        while q:\n            ans.clear()\n            for _ in range(len(q)):\n                a = q.popleft()\n                ans.append(a)\n                for b in g[a]:\n                    degree[b] -= 1\n                    if degree[b] == 1:\n                        q.append(b)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[1,0],[1,2],[1,3]]) == [1]\n    assert candidate(n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]) == [3,4]\n\n\ncheck(Solution().findMinHeightTrees)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two sparse matrices mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat1), len(mat2[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for k in range(len(mat2)):\n                    ans[i][j] += mat1[i][k] * mat2[k][j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]) == [[7,0,0],[-7,0,3]]\n    assert candidate(mat1 = [[0]], mat2 = [[0]]) == [[0]]\n\n\ncheck(Solution().multiply)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for l in range(2, n):\n            for i in range(n - l):\n                j = i + l\n                for k in range(i + 1, j):\n                    dp[i][j] = max(\n                        dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j]\n                    )\n        return dp[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,5,8]) == 167\n    assert candidate(nums = [1,5]) == 10\n\n\ncheck(Solution().maxCoins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA super ugly number is a positive integer whose prime factors are in the array primes.\nGiven an integer n and an array of integers primes, return the nth super ugly number.\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        q = [1]\n        x = 0\n        mx = (1 << 31) - 1\n        for _ in range(n):\n            x = heappop(q)\n            for k in primes:\n                if x <= mx // k:\n                    heappush(q, k * x)\n                if x % k == 0:\n                    break\n        return x\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 12, primes = [2,7,13,19]) == 32 \n    assert candidate(n = 1, primes = [2,3,5]) == 1\n\n\ncheck(Solution().nthSuperUglyNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        alls = sorted(set(nums))\n        m = {v: i for i, v in enumerate(alls, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = []\n        for v in nums[::-1]:\n            x = m[v]\n            tree.update(x, 1)\n            ans.append(tree.query(x - 1))\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,2,6,1]) == [2,1,1,0] \n    assert candidate(nums = [-1]) == [0]\n    assert candidate(nums = [-1,-1]) == [0,0]\n\n\ncheck(Solution().countSmaller)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"bcabc\") == \"abc\"\n    assert candidate(s = \"cbacdcbc\") == \"acdb\"\n\n\ncheck(Solution().removeDuplicateLetters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n grid grid of values 0, 1, or 2, where:\n\neach 0 marks an empty land that you can pass by freely,\neach 1 marks a building that you cannot pass through, and\neach 2 marks an obstacle that you cannot pass through.\n\nYou want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.\nReturn the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\nThe distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestDistance(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def shortestDistance(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        q = deque()\n        total = 0\n        cnt = [[0] * n for _ in range(m)]\n        dist = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    total += 1\n                    q.append((i, j))\n                    d = 0\n                    vis = set()\n                    while q:\n                        d += 1\n                        for _ in range(len(q)):\n                            r, c = q.popleft()\n                            for a, b in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                                x, y = r + a, c + b\n                                if (\n                                    0 <= x < m\n                                    and 0 <= y < n\n                                    and grid[x][y] == 0\n                                    and (x, y) not in vis\n                                ):\n                                    cnt[x][y] += 1\n                                    dist[x][y] += d\n                                    q.append((x, y))\n                                    vis.add((x, y))\n        ans = inf\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0 and cnt[i][j] == total:\n                    ans = min(ans, dist[i][j])\n        return -1 if ans == inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]) == 7\n    assert candidate(grid = [[1,0]]) == 1\n    assert candidate(grid = [[1]]) == -1\n\n\ncheck(Solution().shortestDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProduct(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        mask = [0] * len(words)\n        ans = 0\n        for i, s in enumerate(words):\n            for c in s:\n                mask[i] |= 1 << (ord(c) - ord(\"a\"))\n            for j, t in enumerate(words[:i]):\n                if (mask[i] & mask[j]) == 0:\n                    ans = max(ans, len(s) * len(t))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]) == 16 \n    assert candidate(words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]) == 4 \n    assert candidate(words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]) == 0 \n\n\ncheck(Solution().maxProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n bulbs that are initially off. You first turn on all the bulbs, then\u00a0you turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bulbSwitch(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 1 \n    assert candidate(n = 0) == 0\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().bulbSwitch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        def f(nums: List[int], k: int) -> List[int]:\n            n = len(nums)\n            stk = [0] * k\n            top = -1\n            remain = n - k\n            for x in nums:\n                while top >= 0 and stk[top] < x and remain > 0:\n                    top -= 1\n                    remain -= 1\n                if top + 1 < k:\n                    top += 1\n                    stk[top] = x\n                else:\n                    remain -= 1\n            return stk\n\n        def compare(nums1: List[int], nums2: List[int], i: int, j: int) -> bool:\n            if i >= len(nums1):\n                return False\n            if j >= len(nums2):\n                return True\n            if nums1[i] > nums2[j]:\n                return True\n            if nums1[i] < nums2[j]:\n                return False\n            return compare(nums1, nums2, i + 1, j + 1)\n\n        def merge(nums1: List[int], nums2: List[int]) -> List[int]:\n            m, n = len(nums1), len(nums2)\n            i = j = 0\n            ans = [0] * (m + n)\n            for k in range(m + n):\n                if compare(nums1, nums2, i, j):\n                    ans[k] = nums1[i]\n                    i += 1\n                else:\n                    ans[k] = nums2[j]\n                    j += 1\n            return ans\n\n        m, n = len(nums1), len(nums2)\n        l, r = max(0, k - n), min(k, m)\n        ans = [0] * k\n        for x in range(l, r + 1):\n            arr1 = f(nums1, x)\n            arr2 = f(nums2, k - x)\n            arr = merge(arr1, arr2)\n            if ans < arr:\n                ans = arr\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5) == [9,8,6,5,3]\n    assert candidate(nums1 = [6,7], nums2 = [6,0,4], k = 5) == [6,7,6,0,4]\n    assert candidate(nums1 = [3,9], nums2 = [8,9], k = 3) == [9,8,9]\n\n\ncheck(Solution().maxNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n```",
        "solutions": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        m, n = len(coins), amount\n        f = [[inf] * (n + 1) for _ in range(m + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(coins, 1):\n            for j in range(n + 1):\n                f[i][j] = f[i - 1][j]\n                if j >= x:\n                    f[i][j] = min(f[i][j], f[i][j - x] + 1)\n        return -1 if f[m][n] >= inf else f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(coins = [1, 2, 5], amount = 11) == 3 \n    assert candidate(coins = [2], amount = 3) == -1\n    assert candidate(coins = [1], amount = 0) == 0\n\n\ncheck(Solution().coinChange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.\nReturn the number of connected components in the graph.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n        def dfs(i: int) -> int:\n            if i in vis:\n                return 0\n            vis.add(i)\n            for j in g[i]:\n                dfs(j)\n            return 1\n\n        g = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = set()\n        return sum(dfs(i) for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, edges = [[0, 1], [1, 2], [3, 4]]) == 2\n    assert candidate(n = 5, edges = [[0,1], [1,2], [2,3], [3,4]]) == 1\n\n\ncheck(Solution().countComponents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there is not one, return 0 instead.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n        d = {0: -1}\n        ans = s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s - k in d:\n                ans = max(ans, i - d[s - k])\n            if s not in d:\n                d[s] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-1,5,-2,3], k = 3) == 4\n    assert candidate(nums = [-2,-1,2,1], k = 1) == 2\n\n\ncheck(Solution().maxSubArrayLen)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if it is a power of three. Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        while n > 2:\n            if n % 3:\n                return False\n            n //= 3\n        return n == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 27) == True\n    assert candidate(n = 0) == False\n    assert candidate(n = 9) == True\n    assert candidate(n = 45) == False\n\n\ncheck(Solution().isPowerOfThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem\u00a0in O(1)\u00a0extra space complexity and O(n) time complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head is None:\n            return None\n        a = head\n        b = c = head.next\n        while b and b.next:\n            a.next = b.next\n            a = a.next\n            b.next = a.next\n            b = b.next\n        a.next = c\n        return head\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5])), list_node([1,3,5,2,4]))\n    assert is_same_list(candidate(head = list_node([2,1,3,5,6,4,7])), list_node([2,3,6,7,1,5,4]))\n\n\ncheck(Solution().oddEvenList)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n```",
        "solutions": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        x = 1\n        ans = i = 0\n        while x <= n:\n            if i < len(nums) and nums[i] <= x:\n                x += nums[i]\n                i += 1\n            else:\n                ans += 1\n                x <<= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3], n = 6) == 1\n    assert candidate(nums = [1,5,10], n = 20) == 2\n    assert candidate(nums = [1,2,2], n = 5) == 0\n\n\ncheck(Solution().minPatches)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOne way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\nYou may assume that the input format is always valid.\n\nFor example, it could never contain two consecutive commas, such as \"1,,3\".\n\nNote:\u00a0You are not allowed to reconstruct the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        stk = []\n        for c in preorder.split(\",\"):\n            stk.append(c)\n            while len(stk) > 2 and stk[-1] == stk[-2] == \"#\" and stk[-3] != \"#\":\n                stk = stk[:-3]\n                stk.append(\"#\")\n        return len(stk) == 1 and stk[0] == \"#\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\") == True\n    assert candidate(preorder = \"1,#\") == False\n    assert candidate(preorder = \"9,#,#,1\") == False\n\n\ncheck(Solution().isValidSerialization)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n\n        for src, dst in sorted(tickets, reverse=True):\n            graph[src].append(dst)\n\n        itinerary = []\n\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            itinerary.append(airport)\n\n        dfs(\"JFK\")\n\n        return itinerary[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]) == [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n    assert candidate(tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]) == [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n\n\ncheck(Solution().findItinerary)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        mi, mid = inf, inf\n        for num in nums:\n            if num > mid:\n                return True\n            if num <= mi:\n                mi = num\n            else:\n                mid = num\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5]) == True\n    assert candidate(nums = [5,4,3,2,1]) == False\n    assert candidate(nums = [2,1,5,0,4,6]) == True\n\n\ncheck(Solution().increasingTriplet)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers distance.\nYou start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself or false if it does not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        d = distance\n        for i in range(3, len(d)):\n            if d[i] >= d[i - 2] and d[i - 1] <= d[i - 3]:\n                return True\n            if i >= 4 and d[i - 1] == d[i - 3] and d[i] + d[i - 4] >= d[i - 2]:\n                return True\n            if (\n                i >= 5\n                and d[i - 2] >= d[i - 4]\n                and d[i - 1] <= d[i - 3]\n                and d[i] >= d[i - 2] - d[i - 4]\n                and d[i - 1] + d[i - 5] >= d[i - 3]\n            ):\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(distance = [2,1,1,2]) == True\n    assert candidate(distance = [1,2,3,4]) == False\n    assert candidate(distance = [1,1,1,1]) == True\n\n\ncheck(Solution().isSelfCrossing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n\n0 <= i, j < words.length,\ni != j, and\nwords[i] + words[j] (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with\u00a0O(sum of words[i].length)\u00a0runtime complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        d = {w: i for i, w in enumerate(words)}\n        ans = []\n        for i, w in enumerate(words):\n            for j in range(len(w) + 1):\n                a, b = w[:j], w[j:]\n                ra, rb = a[::-1], b[::-1]\n                if ra in d and d[ra] != i and b == rb:\n                    ans.append([i, d[ra]])\n                if j and rb in d and d[rb] != i and a == ra:\n                    ans.append([d[rb], i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]) == [[0,1],[1,0],[3,2],[2,4]] \n    assert candidate(words = [\"bat\",\"tab\",\"cat\"]) == [[0,1],[1,0]] \n    assert candidate(words = [\"a\",\"\"]) == [[0,1],[1,0]]\n\n\ncheck(Solution().palindromePairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode]) -> (int, int):\n            if root is None:\n                return 0, 0\n            la, lb = dfs(root.left)\n            ra, rb = dfs(root.right)\n            return root.val + lb + rb, max(la, lb) + max(ra, rb)\n\n        return max(dfs(root))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,2,3,None,3,None,1])) == 7\n    assert candidate(root = tree_node([3,4,5,1,3,None,1])) == 9\n\n\ncheck(Solution().rob)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\n        l = 0\n        cnt = Counter()\n        for c in s:\n            cnt[c] += 1\n            if len(cnt) > k:\n                cnt[s[l]] -= 1\n                if cnt[s[l]] == 0:\n                    del cnt[s[l]]\n                l += 1\n        return len(s) - l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"eceba\", k = 2) == 3\n    assert candidate(s = \"aa\", k = 1) == 2\n\n\ncheck(Solution().lengthOfLongestSubstringKDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if it is a power of four. Otherwise, return false.\nAn integer n is a power of four, if there exists an integer x such that n == 4x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0 and (n & 0xAAAAAAAA) == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 16) == True\n    assert candidate(n = 5) == False\n    assert candidate(n = 1) == True\n\n\ncheck(Solution().isPowerOfFour)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                dp[i] = max(dp[i], dp[i - j] * j, (i - j) * j)\n        return dp[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 1\n    assert candidate(n = 10) == 36\n\n\ncheck(Solution().integerBreak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, reverse only all the vowels in the string and return it.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        i, j = 0, len(s) - 1\n        cs = list(s)\n        while i < j:\n            while i < j and cs[i] not in vowels:\n                i += 1\n            while i < j and cs[j] not in vowels:\n                j -= 1\n            if i < j:\n                cs[i], cs[j] = cs[j], cs[i]\n                i, j = i + 1, j - 1\n        return \"\".join(cs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"hello\") == \"holle\"\n    assert candidate(s = \"leetcode\") == \"leotcede\"\n\n\ncheck(Solution().reverseVowels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums)\n        return [v[0] for v in cnt.most_common(k)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1,2,2,3], k = 2) == [1,2]\n    assert candidate(nums = [1], k = 1) == [1]\n\n\ncheck(Solution().topKFrequent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,2,1], nums2 = [2,2]) == [2]\n    assert candidate(nums1 = [4,9,5], nums2 = [9,4,9,8,4]) == [9,4]\n\n\ncheck(Solution().intersection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAndroid devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\nAll the dots in the sequence are distinct.\nIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\nFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\nHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\n\n\n\nHere are some example valid and invalid unlock patterns:\n\n\nThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\nThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\nThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\nThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\n\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPatterns(self, m: int, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfPatterns(self, m: int, n: int) -> int:\n        def dfs(i: int, cnt: int = 1) -> int:\n            if cnt > n:\n                return 0\n            vis[i] = True\n            ans = int(cnt >= m)\n            for j in range(1, 10):\n                x = cross[i][j]\n                if not vis[j] and (x == 0 or vis[x]):\n                    ans += dfs(j, cnt + 1)\n            vis[i] = False\n            return ans\n\n        cross = [[0] * 10 for _ in range(10)]\n        cross[1][3] = cross[3][1] = 2\n        cross[1][7] = cross[7][1] = 4\n        cross[1][9] = cross[9][1] = 5\n        cross[2][8] = cross[8][2] = 5\n        cross[3][7] = cross[7][3] = 5\n        cross[3][9] = cross[9][3] = 6\n        cross[4][6] = cross[6][4] = 5\n        cross[7][9] = cross[9][7] = 8\n        vis = [False] * 10\n        return dfs(1) * 4 + dfs(2) * 4 + dfs(5)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 1, n = 1) == 9\n    assert candidate(m = 1, n = 2) == 65\n\n\ncheck(Solution().numberOfPatterns)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\nNote: You cannot rotate an envelope.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        d = [envelopes[0][1]]\n        for _, h in envelopes[1:]:\n            if h > d[-1]:\n                d.append(h)\n            else:\n                idx = bisect_left(d, h)\n                if idx == len(d):\n                    idx = 0\n                d[idx] = h\n        return len(d)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(envelopes = [[5,4],[6,4],[6,7],[2,3]]) == 3\n    assert candidate(envelopes = [[1,1],[1,1],[1,1]]) == 1\n\n\ncheck(Solution().maxEnvelopes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n points on a 2D plane, find if there is such a line parallel to the y-axis that reflects the given points symmetrically.\nIn other words, answer whether or not if there exists a line that after reflecting all points over the given line, the original points' set is the same as the reflected ones.\nNote that there can be repeated points.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isReflected(self, points: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isReflected(self, points: List[List[int]]) -> bool:\n        min_x, max_x = inf, -inf\n        point_set = set()\n        for x, y in points:\n            min_x = min(min_x, x)\n            max_x = max(max_x, x)\n            point_set.add((x, y))\n        s = min_x + max_x\n        return all((s - x, y) in point_set for x, y in points)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,1],[-1,1]]) == True\n    assert candidate(points = [[1,1],[-1,-1]]) == False\n\n\ncheck(Solution().isReflected)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            ans += cur\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 91\n    assert candidate(n = 0) == 1\n\n\ncheck(Solution().countNumbersWithUniqueDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, rearrange s such that the same characters are at least distance k from each other. If it is not possible to rearrange the string, return an empty string \"\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        h = [(-v, c) for c, v in Counter(s).items()]\n        heapify(h)\n        q = deque()\n        ans = []\n        while h:\n            v, c = heappop(h)\n            v *= -1\n            ans.append(c)\n            q.append((v - 1, c))\n            if len(q) >= k:\n                w, c = q.popleft()\n                if w:\n                    heappush(h, (-w, c))\n        return \"\" if len(ans) != len(s) else \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabbcc\", k = 3) == \"abcabc\"\n    assert candidate(s = \"aaabc\", k = 3) == \"\"\n    assert candidate(s = \"aaadbbcc\", k = 2) == \"abacabcd\"\n\n\ncheck(Solution().rearrangeString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sorted integer array nums and three integers a, b and c, apply a quadratic function of the form f(x) = ax2 + bx + c to each element nums[i] in the array, and return the array in a sorted order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sortTransformedArray(\n        self, nums: List[int], a: int, b: int, c: int\n    ) -> List[int]:\n        def f(x):\n            return a * x * x + b * x + c\n\n        n = len(nums)\n        i, j, k = 0, n - 1, 0 if a < 0 else n - 1\n        res = [0] * n\n        while i <= j:\n            v1, v2 = f(nums[i]), f(nums[j])\n            if a < 0:\n                if v1 <= v2:\n                    res[k] = v1\n                    i += 1\n                else:\n                    res[k] = v2\n                    j -= 1\n                k += 1\n            else:\n                if v1 >= v2:\n                    res[k] = v1\n                    i += 1\n                else:\n                    res[k] = v2\n                    j -= 1\n                k -= 1\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-4,-2,2,4], a = 1, b = 3, c = 5) == [3,9,15,33]\n    assert candidate(nums = [-4,-2,2,4], a = -1, b = 3, c = 5) == [-23,-5,1,7]\n\n\ncheck(Solution().sortTransformedArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix grid where each cell is either a wall 'W', an enemy 'E' or empty '0', return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            t = 0\n            for j in range(n):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        for j in range(n):\n            t = 0\n            for i in range(m):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for i in range(m - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        return max(\n            [g[i][j] for i in range(m) for j in range(n) if grid[i][j] == '0'],\n            default=0,\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]) == 3\n    assert candidate(grid = [[\"W\",\"W\",\"W\"],[\"0\",\"0\",\"0\"],[\"E\",\"E\",\"E\"]]) == 1\n\n\ncheck(Solution().maxKilledEnemies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n```",
        "solutions": "from sortedcontainers import SortedSet\n\n\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        m, n = len(matrix), len(matrix[0])\n        ans = -inf\n        for i in range(m):\n            nums = [0] * n\n            for j in range(i, m):\n                for h in range(n):\n                    nums[h] += matrix[j][h]\n                s = 0\n                ts = SortedSet([0])\n                for x in nums:\n                    s += x\n                    p = ts.bisect_left(s - k)\n                    if p != len(ts):\n                        ans = max(ans, s - ts[p])\n                    ts.add(s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,0,1],[0,-2,3]], k = 2) == 2\n    assert candidate(matrix = [[2,2,-1]], k = 3) == 3\n\n\ncheck(Solution().maxSumSubmatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer num, return true if num is a perfect square or false otherwise.\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\nYou must not use any built-in library function, such as sqrt.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        left, right = 1, num\n        while left < right:\n            mid = (left + right) >> 1\n            if mid * mid >= num:\n                right = mid\n            else:\n                left = mid + 1\n        return left * left == num\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 16) == True\n    assert candidate(num = 14) == False\n\n\ncheck(Solution().isPerfectSquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci].\nYou have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi] by inci.\nReturn arr after applying all the updates.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:\n        d = [0] * length\n        for l, r, c in updates:\n            d[l] += c\n            if r + 1 < length:\n                d[r + 1] -= c\n        return list(accumulate(d))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]) == [-2,0,3,5,3]\n\n\ncheck(Solution().getModifiedArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers a and b, return the sum of the two integers without using the operators + and -.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n```",
        "solutions": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        a, b = a & 0xFFFFFFFF, b & 0xFFFFFFFF\n        while b:\n            carry = ((a & b) << 1) & 0xFFFFFFFF\n            a, b = a ^ b, carry\n        return a if a < 0x80000000 else ~(a ^ 0xFFFFFFFF)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 1, b = 2) == 3\n    assert candidate(a = 2, b = 3) == 5\n\n\ncheck(Solution().getSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2 sorted in non-decreasing\u00a0order and an integer k.\nDefine a pair (u, v) which consists of one element from the first array and one element from the second array.\nReturn the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def kSmallestPairs(\n        self, nums1: List[int], nums2: List[int], k: int\n    ) -> List[List[int]]:\n        q = [[u + nums2[0], i, 0] for i, u in enumerate(nums1[:k])]\n        heapify(q)\n        ans = []\n        while q and k > 0:\n            _, i, j = heappop(q)\n            ans.append([nums1[i], nums2[j]])\n            k -= 1\n            if j + 1 < len(nums2):\n                heappush(q, [nums1[i] + nums2[j + 1], i, j + 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,7,11], nums2 = [2,4,6], k = 3) == [[1,2],[1,4],[1,6]]\n    assert candidate(nums1 = [1,1,2], nums2 = [1,2,3], k = 2) == [[1,1],[1,1]]\n\n\ncheck(Solution().kSmallestPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe are playing the Guessing Game. The game will work as follows:\n\nI pick a number between\u00a01\u00a0and\u00a0n.\nYou guess a number.\nIf you guess the right number, you win the game.\nIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\nEvery time you guess a wrong number\u00a0x, you will pay\u00a0x\u00a0dollars. If you run out of money, you lose the game.\n\nGiven a particular\u00a0n, return\u00a0the minimum amount of money you need to\u00a0guarantee a win regardless of what number I pick.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMoneyAmount(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        dp = [[0] * (n + 10) for _ in range(n + 10)]\n        for l in range(2, n + 1):\n            for i in range(1, n - l + 2):\n                j = i + l - 1\n                dp[i][j] = inf\n                for k in range(i, j + 1):\n                    t = max(dp[i][k - 1], dp[k + 1][j]) + k\n                    dp[i][j] = min(dp[i][j], t)\n        return dp[1][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 16\n    assert candidate(n = 1) == 0\n    assert candidate(n = 2) == 1\n\n\ncheck(Solution().getMoneyAmount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\nFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\nIn contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        up = down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(down, up + 1)\n        return max(up, down)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,7,4,9,2,5]) == 6\n    assert candidate(nums = [1,17,5,10,13,15,10,5,16,8]) == 7\n    assert candidate(nums = [1,2,3,4,5,6,7,8,9]) == 2\n\n\ncheck(Solution().wiggleMaxLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to\u00a0target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        f = [1] + [0] * target\n        for i in range(1, target + 1):\n            for x in nums:\n                if i >= x:\n                    f[i] += f[i - x]\n        return f[target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3], target = 4) == 7\n    assert candidate(nums = [9], target = 3) == 0\n\n\ncheck(Solution().combinationSum4)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\nYou must find a solution with a memory complexity better than O(n2).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        def check(matrix, mid, k, n):\n            count = 0\n            i, j = n - 1, 0\n            while i >= 0 and j < n:\n                if matrix[i][j] <= mid:\n                    count += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return count >= k\n\n        n = len(matrix)\n        left, right = matrix[0][0], matrix[n - 1][n - 1]\n        while left < right:\n            mid = (left + right) >> 1\n            if check(matrix, mid, k, n):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8) == 13\n    assert candidate(matrix = [[-5]], k = 1) == -5\n\n\ncheck(Solution().kthSmallest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        cnt = Counter(magazine)\n        for c in ransomNote:\n            cnt[c] -= 1\n            if cnt[c] < 0:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ransomNote = \"a\", magazine = \"b\") == False\n    assert candidate(ransomNote = \"aa\", magazine = \"ab\") == False\n    assert candidate(ransomNote = \"aa\", magazine = \"aab\") == True\n\n\ncheck(Solution().canConstruct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time and uses O(1) extra space.\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        def dfs(u):\n            if u > n:\n                return\n            ans.append(u)\n            for i in range(10):\n                dfs(u * 10 + i)\n\n        ans = []\n        for i in range(1, 10):\n            dfs(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 13) == [1,10,11,12,13,2,3,4,5,6,7,8,9]\n    assert candidate(n = 2) == [1,2]\n\n\ncheck(Solution().lexicalOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def firstUniqChar(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        cnt = Counter(s)\n        for i, c in enumerate(s):\n            if cnt[c] == 1:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcode\") == 0\n    assert candidate(s = \"loveleetcode\") == 2\n    assert candidate(s = \"aabb\") == -1\n\n\ncheck(Solution().firstUniqChar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSuppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\nHere, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\nIn text form, it looks like this (with \u27f6 representing the tab character):\n\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n\nIf we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\nGiven a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\nNote that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthLongestPath(self, input: str) -> int:\n```",
        "solutions": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        i, n = 0, len(input)\n        ans = 0\n        stk = []\n        while i < n:\n            ident = 0\n            while input[i] == '\\t':\n                ident += 1\n                i += 1\n\n            cur, isFile = 0, False\n            while i < n and input[i] != '\\n':\n                cur += 1\n                if input[i] == '.':\n                    isFile = True\n                i += 1\n            i += 1\n\n            # popd\n            while len(stk) > 0 and len(stk) > ident:\n                stk.pop()\n\n            if len(stk) > 0:\n                cur += stk[-1] + 1\n\n            # pushd\n            if not isFile:\n                stk.append(cur)\n                continue\n\n            ans = max(ans, cur)\n\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\") == 20\n    assert candidate(input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\") == 32\n    assert candidate(input = \"a\") == 0\n    assert candidate(input = \"file1.txt\\nfile2.txt\\nlongfile.txt\") == 12\n\n\ncheck(Solution().lengthLongestPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n```",
        "solutions": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        cnt = Counter(s)\n        for c in t:\n            cnt[c] -= 1\n            if cnt[c] < 0:\n                return c\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcd\", t = \"abcde\") == \"e\"\n    assert candidate(s = \"\", t = \"y\") == \"y\"\n\n\ncheck(Solution().findTheDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n\nStarting from left to right, remove the first number and every other number afterward until you reach the end of the list.\nRepeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\nKeep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer n, return the last number that remains in arr.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lastRemaining(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        a1, an = 1, n\n        i, step, cnt = 0, 1, n\n        while cnt > 1:\n            if i % 2:\n                an -= step\n                if cnt % 2:\n                    a1 += step\n            else:\n                a1 += step\n                if cnt % 2:\n                    an -= step\n            cnt >>= 1\n            step <<= 1\n            i += 1\n        return a1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 9) == 6\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().lastRemaining)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        area = 0\n        minX, minY = rectangles[0][0], rectangles[0][1]\n        maxX, maxY = rectangles[0][2], rectangles[0][3]\n        cnt = defaultdict(int)\n\n        for r in rectangles:\n            area += (r[2] - r[0]) * (r[3] - r[1])\n\n            minX = min(minX, r[0])\n            minY = min(minY, r[1])\n            maxX = max(maxX, r[2])\n            maxY = max(maxY, r[3])\n\n            cnt[(r[0], r[1])] += 1\n            cnt[(r[0], r[3])] += 1\n            cnt[(r[2], r[3])] += 1\n            cnt[(r[2], r[1])] += 1\n\n        if (\n            area != (maxX - minX) * (maxY - minY)\n            or cnt[(minX, minY)] != 1\n            or cnt[(minX, maxY)] != 1\n            or cnt[(maxX, maxY)] != 1\n            or cnt[(maxX, minY)] != 1\n        ):\n            return False\n\n        del cnt[(minX, minY)], cnt[(minX, maxY)], cnt[(maxX, maxY)], cnt[(maxX, minY)]\n\n        return all(c == 2 or c == 4 for c in cnt.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]) == True\n    assert candidate(rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]) == False\n    assert candidate(rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]) == False\n\n\ncheck(Solution().isRectangleCover)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, return true if s is a subsequence of t, or false otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\", t = \"ahbgdc\") == True\n    assert candidate(s = \"axc\", t = \"ahbgdc\") == False\n\n\ncheck(Solution().isSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n\nFor a 1-byte character, the first bit is a 0, followed by its Unicode code.\nFor an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n\nThis is how the UTF-8 encoding would work:\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\nx denotes a bit in the binary form of a byte that may be either 0 or 1.\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        n = 0\n        for v in data:\n            if n > 0:\n                if v >> 6 != 0b10:\n                    return False\n                n -= 1\n            elif v >> 7 == 0:\n                n = 0\n            elif v >> 5 == 0b110:\n                n = 1\n            elif v >> 4 == 0b1110:\n                n = 2\n            elif v >> 3 == 0b11110:\n                n = 3\n            else:\n                return False\n        return n == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(data = [197,130,1]) == True\n    assert candidate(data = [235,140,4]) == False\n\n\ncheck(Solution().validUtf8)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\nThe test cases are generated so that the length of the output will never exceed 105.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def decodeString(self, s: str) -> str:\n        s1, s2 = [], []\n        num, res = 0, ''\n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c == '[':\n                s1.append(num)\n                s2.append(res)\n                num, res = 0, ''\n            elif c == ']':\n                res = s2.pop() + res * s1.pop()\n            else:\n                res += c\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"3[a]2[bc]\") == \"aaabcbc\"\n    assert candidate(s = \"3[a2[c]]\") == \"accaccacc\"\n    assert candidate(s = \"2[abc]3[cd]ef\") == \"abcabccdcdcdef\"\n    assert candidate(s = \"abc3[cd]xyz\") == \"abccdcdcdxyz\"\n\n\ncheck(Solution().decodeString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\nif no such substring exists, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        def dfs(l, r):\n            cnt = Counter(s[l : r + 1])\n            split = next((c for c, v in cnt.items() if v < k), '')\n            if not split:\n                return r - l + 1\n            i = l\n            ans = 0\n            while i <= r:\n                while i <= r and s[i] == split:\n                    i += 1\n                if i >= r:\n                    break\n                j = i\n                while j <= r and s[j] != split:\n                    j += 1\n                t = dfs(i, j - 1)\n                ans = max(ans, t)\n                i = j\n            return ans\n\n        return dfs(0, len(s) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaabb\", k = 3) == 3\n    assert candidate(s = \"ababbc\", k = 2) == 5\n\n\ncheck(Solution().longestSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of length n.\nAssume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n\nF(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].\n\nReturn the maximum value of F(0), F(1), ..., F(n-1).\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        f = sum(i * v for i, v in enumerate(nums))\n        n, s = len(nums), sum(nums)\n        ans = f\n        for i in range(1, n):\n            f = f + s - n * nums[n - i]\n            ans = max(ans, f)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,2,6]) == 26\n    assert candidate(nums = [100]) == 0\n\n\ncheck(Solution().maxRotateFunction)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n,\u00a0you can apply one of the following\u00a0operations:\n\nIf n is even, replace n with n / 2.\nIf n is odd, replace n with either n + 1 or n - 1.\n\nReturn the minimum number of operations needed for n to become 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def integerReplacement(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        ans = 0\n        while n != 1:\n            if (n & 1) == 0:\n                n >>= 1\n            elif n != 3 and (n & 3) == 3:\n                n += 1\n            else:\n                n -= 1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 8) == 3\n    assert candidate(n = 7) == 4\n    assert candidate(n = 4) == 2\n\n\ncheck(Solution().integerReplacement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\nNote:\u00a0The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n```",
        "solutions": "class Solution:\n    def calcEquation(\n        self, equations: List[List[str]], values: List[float], queries: List[List[str]]\n    ) -> List[float]:\n        def find(x):\n            if p[x] != x:\n                origin = p[x]\n                p[x] = find(p[x])\n                w[x] *= w[origin]\n            return p[x]\n\n        w = defaultdict(lambda: 1)\n        p = defaultdict()\n        for a, b in equations:\n            p[a], p[b] = a, b\n        for i, v in enumerate(values):\n            a, b = equations[i]\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                continue\n            p[pa] = pb\n            w[pa] = w[b] * v / w[a]\n        return [\n            -1 if c not in p or d not in p or find(c) != find(d) else w[c] / w[d]\n            for c, d in queries\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]) == [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n    assert candidate(equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]) == [3.75000,0.40000,5.00000,0.20000]\n    assert candidate(equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]) == [0.50000,2.00000,-1.00000,-1.00000]\n\n\ncheck(Solution().calcEquation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findNthDigit(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        k, cnt = 1, 9\n        while k * cnt < n:\n            n -= k * cnt\n            k += 1\n            cnt *= 10\n        num = 10 ** (k - 1) + (n - 1) // k\n        idx = (n - 1) % k\n        return int(str(num)[idx])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 3\n    assert candidate(n = 11) == 0\n\n\ncheck(Solution().findNthDigit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\u00a0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\nFor example, the below binary watch reads \"4:51\".\n\n\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\n\nFor example, \"01:00\" is not valid. It should be \"1:00\".\n\nThe minute must\u00a0consist of two digits and may contain a leading zero.\n\nFor example, \"10:2\" is not valid. It should be \"10:02\".\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        return [\n            '{:d}:{:02d}'.format(i, j)\n            for i in range(12)\n            for j in range(60)\n            if (bin(i) + bin(j)).count('1') == turnedOn\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(turnedOn = 1) == [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n    assert candidate(turnedOn = 9) == []\n\n\ncheck(Solution().readBinaryWatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stk = []\n        remain = len(num) - k\n        for c in num:\n            while k and stk and stk[-1] > c:\n                stk.pop()\n                k -= 1\n            stk.append(c)\n        return ''.join(stk[:remain]).lstrip('0') or '0'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"1432219\", k = 3) == \"1219\"\n    assert candidate(num = \"10200\", k = 1) == \"200\"\n    assert candidate(num = \"10\", k = 2) == \"0\"\n\n\ncheck(Solution().removeKdigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the sum of all left leaves.\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        ans = self.sumOfLeftLeaves(root.right)\n        if root.left:\n            if root.left.left == root.left.right:\n                ans += root.left.val\n            else:\n                ans += self.sumOfLeftLeaves(root.left)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == 24\n    assert candidate(root = tree_node([1])) == 0\n\n\ncheck(Solution().sumOfLeftLeaves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote:\u00a0You are not allowed to use any built-in library method to directly solve this problem.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def toHex(self, num: int) -> str:\n```",
        "solutions": "class Solution:\n    def toHex(self, num: int) -> str:\n        if num == 0:\n            return '0'\n        chars = '0123456789abcdef'\n        s = []\n        for i in range(7, -1, -1):\n            x = (num >> (4 * i)) & 0xF\n            if s or x != 0:\n                s.append(chars[x])\n        return ''.join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 26) == \"1a\"\n    assert candidate(num = -1) == \"ffffffff\"\n\n\ncheck(Solution().toHex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        people.sort(key=lambda x: (-x[0], x[1]))\n        ans = []\n        for p in people:\n            ans.insert(p[1], p)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]) == [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n    assert candidate(people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]) == [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n\n\ncheck(Solution().reconstructQueue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        m, n = len(heightMap), len(heightMap[0])\n        vis = [[False] * n for _ in range(m)]\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heappush(pq, (heightMap[i][j], i, j))\n                    vis[i][j] = True\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        while pq:\n            h, i, j = heappop(pq)\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if x >= 0 and x < m and y >= 0 and y < n and not vis[x][y]:\n                    ans += max(0, h - heightMap[x][y])\n                    vis[x][y] = True\n                    heappush(pq, (max(h, heightMap[x][y]), x, y))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]) == 4\n    assert candidate(heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]) == 10\n\n\ncheck(Solution().trapRainWater)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\nFor example, a string such as \"substitution\" could be abbreviated as (but not limited to):\n\n\"s10n\" (\"s ubstitutio n\")\n\"sub4u4\" (\"sub stit u tion\")\n\"12\" (\"substitution\")\n\"su3i1u2on\" (\"su bst i t u ti on\")\n\"substitution\" (no substrings replaced)\n\nThe following are not valid abbreviations:\n\n\"s55n\" (\"s ubsti tutio n\", the replaced substrings are adjacent)\n\"s010n\" (has leading zeros)\n\"s0ubstitution\" (replaces an empty substring)\n\nGiven a string word and an abbreviation abbr, return whether the string matches the given abbreviation.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n```",
        "solutions": "class Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        m, n = len(word), len(abbr)\n        i = j = x = 0\n        while i < m and j < n:\n            if abbr[j].isdigit():\n                if abbr[j] == \"0\" and x == 0:\n                    return False\n                x = x * 10 + int(abbr[j])\n            else:\n                i += x\n                x = 0\n                if i >= m or word[i] != abbr[j]:\n                    return False\n                i += 1\n            j += 1\n        return i + x == m and j == n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"internationalization\", abbr = \"i12iz4n\") == True\n    assert candidate(word = \"apple\", abbr = \"a2e\") == False\n\n\ncheck(Solution().validWordAbbreviation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome\u00a0that can be built with those letters.\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for v in cnt.values():\n            ans += v - (v & 1)\n            ans += (ans & 1 ^ 1) and (v & 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abccccdd\") == 7\n    assert candidate(s = \"a\") == 1\n\n\ncheck(Solution().longestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return a string array answer (1-indexed) where:\n\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\nanswer[i] == \"Fizz\" if i is divisible by 3.\nanswer[i] == \"Buzz\" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        ans = []\n        for i in range(1, n + 1):\n            if i % 15 == 0:\n                ans.append('FizzBuzz')\n            elif i % 3 == 0:\n                ans.append('Fizz')\n            elif i % 5 == 0:\n                ans.append('Buzz')\n            else:\n                ans.append(str(i))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == [\"1\",\"2\",\"Fizz\"]\n    assert candidate(n = 5) == [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n    assert candidate(n = 15) == [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n\n\ncheck(Solution().fizzBuzz)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ans, cnt = 0, 2\n        d = 3000\n        for a, b in pairwise(nums):\n            if b - a == d:\n                cnt += 1\n            else:\n                d = b - a\n                cnt = 2\n            ans += max(0, cnt - 2)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == 3\n    assert candidate(nums = [1]) == 0\n\n\ncheck(Solution().numberOfArithmeticSlices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        m1 = m2 = m3 = -inf\n        for num in nums:\n            if num in [m1, m2, m3]:\n                continue\n            if num > m1:\n                m3, m2, m1 = m2, m1, num\n            elif num > m2:\n                m3, m2 = m2, num\n            elif num > m3:\n                m3 = num\n        return m3 if m3 != -inf else m1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([3, 2, 1]) == 1\n    assert candidate([1, 2]) == 2\n    assert candidate([2, 2, 3, 1]) == 1\n\n\ncheck(Solution().thirdMax)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n```",
        "solutions": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        i, j = len(num1) - 1, len(num2) - 1\n        ans = []\n        c = 0\n        while i >= 0 or j >= 0 or c:\n            a = 0 if i < 0 else int(num1[i])\n            b = 0 if j < 0 else int(num2[j])\n            c, v = divmod(a + b + c, 10)\n            ans.append(str(v))\n            i, j = i - 1, j - 1\n        return \"\".join(ans[::-1])\n\n    def subStrings(self, num1: str, num2: str) -> str:\n        m, n = len(num1), len(num2)\n        neg = m < n or (m == n and num1 < num2)\n        if neg:\n            num1, num2 = num2, num1\n        i, j = len(num1) - 1, len(num2) - 1\n        ans = []\n        c = 0\n        while i >= 0:\n            c = int(num1[i]) - c - (0 if j < 0 else int(num2[j]))\n            ans.append(str((c + 10) % 10))\n            c = 1 if c < 0 else 0\n            i, j = i - 1, j - 1\n        while len(ans) > 1 and ans[-1] == '0':\n            ans.pop()\n        if neg:\n            ans.append('-')\n        return ''.join(ans[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num1 = \"11\", num2 = \"123\") == \"134\"\n    assert candidate(num1 = \"456\", num2 = \"77\") == \"533\"\n    assert candidate(num1 = \"0\", num2 = \"0\") == \"0\"\n\n\ncheck(Solution().addStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        m, mod = divmod(sum(nums), 2)\n        if mod:\n            return False\n        n = len(nums)\n        f = [[False] * (m + 1) for _ in range(n + 1)]\n        f[0][0] = True\n        for i, x in enumerate(nums, 1):\n            for j in range(m + 1):\n                f[i][j] = f[i - 1][j] or (j >= x and f[i - 1][j - x])\n        return f[n][m]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,5,11,5]) == True\n    assert candidate(nums = [1,2,3,5]) == False\n\n\ncheck(Solution().canPartition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        m, n = len(board), len(board[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '.':\n                    continue\n                if i > 0 and board[i - 1][j] == 'X':\n                    continue\n                if j > 0 and board[i][j - 1] == 'X':\n                    continue\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]) == 2\n    assert candidate(board = [[\".\"]]) == 0\n\n\ncheck(Solution().countBattleships)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA password is considered strong if the below conditions are all met:\n\nIt has at least 6 characters and at most 20 characters.\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\nIt does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\n\nInsert one character to password,\nDelete one character from password, or\nReplace one character of password with another character.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n```",
        "solutions": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        def countTypes(s):\n            a = b = c = 0\n            for ch in s:\n                if ch.islower():\n                    a = 1\n                elif ch.isupper():\n                    b = 1\n                elif ch.isdigit():\n                    c = 1\n            return a + b + c\n\n        types = countTypes(password)\n        n = len(password)\n        if n < 6:\n            return max(6 - n, 3 - types)\n        if n <= 20:\n            replace = cnt = 0\n            prev = '~'\n            for curr in password:\n                if curr == prev:\n                    cnt += 1\n                else:\n                    replace += cnt // 3\n                    cnt = 1\n                    prev = curr\n            replace += cnt // 3\n            return max(replace, 3 - types)\n        replace = cnt = 0\n        remove, remove2 = n - 20, 0\n        prev = '~'\n        for curr in password:\n            if curr == prev:\n                cnt += 1\n            else:\n                if remove > 0 and cnt >= 3:\n                    if cnt % 3 == 0:\n                        remove -= 1\n                        replace -= 1\n                    elif cnt % 3 == 1:\n                        remove2 += 1\n                replace += cnt // 3\n                cnt = 1\n                prev = curr\n        if remove > 0 and cnt >= 3:\n            if cnt % 3 == 0:\n                remove -= 1\n                replace -= 1\n            elif cnt % 3 == 1:\n                remove2 += 1\n        replace += cnt // 3\n        use2 = min(replace, remove2, remove // 2)\n        replace -= use2\n        remove -= use2 * 2\n\n        use3 = min(replace, remove // 3)\n        replace -= use3\n        remove -= use3 * 3\n        return n - 20 + max(replace, 3 - types)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(password = \"a\") == 5\n    assert candidate(password = \"aA1\") == 3\n    assert candidate(password = \"1337C0d3\") == 0\n\n\ncheck(Solution().strongPasswordChecker)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n```",
        "solutions": "class Trie:\n    __slots__ = (\"children\",)\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n\n    def insert(self, x: int):\n        node = self\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1]:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        trie = Trie()\n        for x in nums:\n            trie.insert(x)\n        return max(trie.search(x) for x in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,10,5,25,2,8]) == 28\n    assert candidate(nums = [14,70,53,83,49,91,36,80,92,51,66,70]) == 127\n\n\ncheck(Solution().findMaximumXOR)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def originalDigits(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        counter = Counter(s)\n        cnt = [0] * 10\n\n        cnt[0] = counter['z']\n        cnt[2] = counter['w']\n        cnt[4] = counter['u']\n        cnt[6] = counter['x']\n        cnt[8] = counter['g']\n\n        cnt[3] = counter['h'] - cnt[8]\n        cnt[5] = counter['f'] - cnt[4]\n        cnt[7] = counter['s'] - cnt[6]\n\n        cnt[1] = counter['o'] - cnt[0] - cnt[2] - cnt[4]\n        cnt[9] = counter['i'] - cnt[5] - cnt[6] - cnt[8]\n\n        return ''.join(cnt[i] * str(i) for i in range(10))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"owoztneoer\") == \"012\"\n    assert candidate(s = \"fviefuro\") == \"45\"\n\n\ncheck(Solution().originalDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        counter = [0] * 26\n        i = j = maxCnt = 0\n        while i < len(s):\n            counter[ord(s[i]) - ord('A')] += 1\n            maxCnt = max(maxCnt, counter[ord(s[i]) - ord('A')])\n            if i - j + 1 > maxCnt + k:\n                counter[ord(s[j]) - ord('A')] -= 1\n                j += 1\n            i += 1\n        return i - j\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ABAB\", k = 2) == 4\n    assert candidate(s = \"AABABBA\", k = 1) == 4\n\n\ncheck(Solution().characterReplacement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\nSuppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n\nFor example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\n\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\nGiven the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def minMutation(self, start: str, end: str, bank: List[str]) -> int:\n        s = set(bank)\n        q = deque([(start, 0)])\n        mp = {'A': 'TCG', 'T': 'ACG', 'C': 'ATG', 'G': 'ATC'}\n        while q:\n            t, step = q.popleft()\n            if t == end:\n                return step\n            for i, v in enumerate(t):\n                for j in mp[v]:\n                    next = t[:i] + j + t[i + 1 :]\n                    if next in s:\n                        q.append((next, step + 1))\n                        s.remove(next)\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]) == 1\n    assert candidate(start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]) == 2\n    assert candidate(start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]) == 3\n\n\ncheck(Solution().minMutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of segments in the string.\nA segment is defined to be a contiguous sequence of non-space characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSegments(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countSegments(self, s: str) -> int:\n        return len(s.split())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"Hello, my name is John\") == 5\n    assert candidate(s = \"Hello\") == 1\n\n\ncheck(Solution().countSegments)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: x[1])\n        ans, t = 0, intervals[0][1]\n        for s, e in intervals[1:]:\n            if s >= t:\n                t = e\n            else:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,2],[2,3],[3,4],[1,3]]) == 1\n    assert candidate(intervals = [[1,2],[1,2],[1,2]]) == 2\n    assert candidate(intervals = [[1,2],[2,3]]) == 0\n\n\ncheck(Solution().eraseOverlapIntervals)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\nReturn an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        for i, v in enumerate(intervals):\n            v.append(i)\n        intervals.sort()\n        n = len(intervals)\n        ans = [-1] * n\n        for _, e, i in intervals:\n            j = bisect_left(intervals, [e])\n            if j < n:\n                ans[i] = intervals[j][2]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,2]]) == [-1]\n    assert candidate(intervals = [[3,4],[2,3],[1,2]]) == [-1,0,1]\n    assert candidate(intervals = [[1,4],[2,3],[3,4]]) == [-1,2,-1]\n\n\ncheck(Solution().findRightInterval)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values\u00a0along the path equals\u00a0targetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            ans = cnt[s - targetSum]\n            cnt[s] += 1\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            cnt[s] -= 1\n            return ans\n\n        cnt = Counter({0: 1})\n        return dfs(root, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([10,5,-3,3,2,None,11,3,-2,None,1]), targetSum = 8) == 3\n    assert candidate(root = tree_node([5,4,8,11,None,13,4,7,2,None,None,5,1]), targetSum = 22) == 3\n\n\ncheck(Solution().pathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string expression representing arbitrarily nested ternary expressions, evaluate the expression, and return the result of it.\nYou can always assume that the given expression is valid and only contains digits, '?', ':', 'T', and 'F' where 'T' is true and 'F' is false. All the numbers in the expression are one-digit numbers (i.e., in the range [0, 9]).\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, 'T' or 'F'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def parseTernary(self, expression: str) -> str:\n```",
        "solutions": "class Solution:\n    def parseTernary(self, expression: str) -> str:\n        stk = []\n        cond = False\n        for c in expression[::-1]:\n            if c == ':':\n                continue\n            if c == '?':\n                cond = True\n            else:\n                if cond:\n                    if c == 'T':\n                        x = stk.pop()\n                        stk.pop()\n                        stk.append(x)\n                    else:\n                        stk.pop()\n                    cond = False\n                else:\n                    stk.append(c)\n        return stk[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(expression = \"T?2:3\") == \"2\"\n    assert candidate(expression = \"F?1:T?4:5\") == \"4\"\n    assert candidate(expression = \"T?T?F:5:3\") == \"F\"\n\n\ncheck(Solution().parseTernary)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n        def count(curr):\n            next, cnt = curr + 1, 0\n            while curr <= n:\n                cnt += min(n - curr + 1, next - curr)\n                next, curr = next * 10, curr * 10\n            return cnt\n\n        curr = 1\n        k -= 1\n        while k:\n            cnt = count(curr)\n            if k >= cnt:\n                k -= cnt\n                curr += 1\n            else:\n                k -= 1\n                curr *= 10\n        return curr\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 13, k = 2) == 10\n    assert candidate(n = 1, k = 1) == 1\n\n\ncheck(Solution().findKthNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrangeCoins(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        return int(math.sqrt(2) * math.sqrt(n + 0.125) - 0.5)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 2\n    assert candidate(n = 8) == 3\n\n\ncheck(Solution().arrangeCoins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(\n        self, l1: Optional[ListNode], l2: Optional[ListNode]\n    ) -> Optional[ListNode]:\n        s1, s2 = [], []\n        while l1:\n            s1.append(l1.val)\n            l1 = l1.next\n        while l2:\n            s2.append(l2.val)\n            l2 = l2.next\n        dummy = ListNode()\n        carry = 0\n        while s1 or s2 or carry:\n            s = (0 if not s1 else s1.pop()) + (0 if not s2 else s2.pop()) + carry\n            carry, val = divmod(s, 10)\n            # node = ListNode(val, dummy.next)\n            # dummy.next = node\n            dummy.next = ListNode(val, dummy.next)\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(l1 = list_node([7,2,4,3]), l2 = list_node([5,6,4])), list_node([7,8,0,7]))\n    assert is_same_list(candidate(l1 = list_node([2,4,3]), l2 = list_node([5,6,4])), list_node([8,0,7]))\n    assert is_same_list(candidate(l1 = list_node([0]), l2 = list_node([0])), list_node([0]))\n\n\ncheck(Solution().addTwoNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nThe test cases are generated so that the answer fits in 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = [defaultdict(int) for _ in nums]\n        ans = 0\n        for i, x in enumerate(nums):\n            for j, y in enumerate(nums[:i]):\n                d = x - y\n                ans += f[j][d]\n                f[i][d] += f[j][d] + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,6,8,10]) == 7\n    assert candidate(nums = [7,7,7,7,7]) == 16\n\n\ncheck(Solution().numberOfArithmeticSlices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        s = set(nums)\n        return [x for x in range(1, len(nums) + 1) if x not in s]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,2,7,8,2,3,1]) == [5,6]\n    assert candidate(nums = [1,1]) == [2]\n\n\ncheck(Solution().findDisappearedNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\n\nSearch for a node to remove.\nIf the node is found, delete the node.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        if root.val > key:\n            root.left = self.deleteNode(root.left, key)\n            return root\n        if root.val < key:\n            root.right = self.deleteNode(root.right, key)\n            return root\n        if root.left is None:\n            return root.right\n        if root.right is None:\n            return root.left\n        node = root.right\n        while node.left:\n            node = node.left\n        node.left = root.left\n        root = root.right\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([5,3,6,2,4,None,7]), key = 3), tree_node([5,4,6,2,None,None,7]))\n\n\ncheck(Solution().deleteNode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, -inf\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[10,16],[2,8],[1,6],[7,12]]) == 2\n    assert candidate(points = [[1,2],[3,4],[5,6],[7,8]]) == 4\n    assert candidate(points = [[1,2],[2,3],[3,4],[4,5]]) == 2\n\n\ncheck(Solution().findMinArrowShots)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment n - 1 elements of the array by 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMoves(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        return sum(nums) - min(nums) * len(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 3\n    assert candidate(nums = [1,1,1]) == 0\n\n\ncheck(Solution().minMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n\n0 <= i, j, k, l < n\nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def fourSumCount(\n        self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]\n    ) -> int:\n        cnt = Counter(a + b for a in nums1 for b in nums2)\n        return sum(cnt[-(c + d)] for c in nums3 for d in nums4)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]) == 2\n    assert candidate(nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]) == 1\n\n\ncheck(Solution().fourSumCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        j = 0\n        for i, x in enumerate(g):\n            while j < len(s) and s[j] < g[i]:\n                j += 1\n            if j >= len(s):\n                return i\n            j += 1\n        return len(g)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(g = [1,2,3], s = [1,1]) == 1\n    assert candidate(g = [1,2], s = [1,2,3]) == 2\n\n\ncheck(Solution().findContentChildren)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\nReturn true if there is a 132 pattern in nums, otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        vk = -inf\n        stk = []\n        for x in nums[::-1]:\n            if x < vk:\n                return True\n            while stk and stk[-1] < x:\n                vk = stk.pop()\n            stk.append(x)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == False\n    assert candidate(nums = [3,1,4,2]) == True\n    assert candidate(nums = [-1,3,2,0]) == True\n\n\ncheck(Solution().find132pattern)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\n\nIf nums[i] is positive, move nums[i] steps forward, and\nIf nums[i] is negative, move nums[i] steps backward.\n\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\nA cycle in the array consists of a sequence of indices seq of length k where:\n\nFollowing the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...\nEvery nums[seq[j]] is either all positive or all negative.\nk > 1\n\nReturn true if there is a cycle in nums, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n        n = len(nums)\n\n        def next(i):\n            return (i + nums[i] % n + n) % n\n\n        for i in range(n):\n            if nums[i] == 0:\n                continue\n            slow, fast = i, next(i)\n            while nums[slow] * nums[fast] > 0 and nums[slow] * nums[next(fast)] > 0:\n                if slow == fast:\n                    if slow != next(slow):\n                        return True\n                    break\n                slow, fast = next(slow), next(next(fast))\n            j = i\n            while nums[j] * nums[next(j)] > 0:\n                nums[j] = 0\n                j = next(j)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,-1,1,2,2]) == True\n    assert candidate(nums = [-1,2]) == False\n    assert candidate(nums = [-2,1,-1,-2,-2]) == False\n\n\ncheck(Solution().circularArrayLoop)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:\n\nChoose some live pigs to feed.\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\nRepeat this process until you run out of time.\n\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n```",
        "solutions": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        base = minutesToTest // minutesToDie + 1\n        res, p = 0, 1\n        while p < buckets:\n            p *= base\n            res += 1\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(buckets = 1000, minutesToDie = 15, minutesToTest = 60) == 5\n    assert candidate(buckets = 4, minutesToDie = 15, minutesToTest = 15) == 2\n    assert candidate(buckets = 4, minutesToDie = 15, minutesToTest = 30) == 2\n\n\ncheck(Solution().poorPigs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        return (s + s).index(s, 1) < len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abab\") == True\n    assert candidate(s = \"aba\") == False\n    assert candidate(s = \"abcabcabcabc\") == True\n\n\ncheck(Solution().repeatedSubstringPattern)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment or decrement an element of the array by 1.\nTest cases are designed so that the answer will fit in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        nums.sort()\n        k = nums[len(nums) >> 1]\n        return sum(abs(v - k) for v in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 2\n    assert candidate(nums = [1,10,2,9]) == 16\n\n\ncheck(Solution().minMoves2)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given row x col grid representing a map where grid[i][j] = 1 represents\u00a0land and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    ans += 4\n                    if i < m - 1 and grid[i + 1][j] == 1:\n                        ans -= 2\n                    if j < n - 1 and grid[i][j + 1] == 1:\n                        ans -= 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]) == 16\n    assert candidate(grid = [[1]]) == 4\n    assert candidate(grid = [[1,0]]) == 4\n\n\ncheck(Solution().islandPerimeter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define str = [s, n] as the string str which consists of the string s concatenated n times.\n\nFor example, str == [\"abc\", 3] ==\"abcabcabc\".\n\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\n\nFor example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\n\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        n = len(s2)\n        d = {}\n        for i in range(n):\n            cnt = 0\n            j = i\n            for c in s1:\n                if c == s2[j]:\n                    j += 1\n                if j == n:\n                    cnt += 1\n                    j = 0\n            d[i] = (cnt, j)\n\n        ans = 0\n        j = 0\n        for _ in range(n1):\n            cnt, j = d[j]\n            ans += cnt\n        return ans // n2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2) == 2\n    assert candidate(s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1) == 1\n\n\ncheck(Solution().getMaxRepetitions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n\n\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n\nGiven a string s, return the number of unique non-empty substrings of s are present in base.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n        f = defaultdict(int)\n        k = 0\n        for i, c in enumerate(s):\n            if i and (ord(c) - ord(s[i - 1])) % 26 == 1:\n                k += 1\n            else:\n                k = 1\n            f[c] = max(f[c], k)\n        return sum(f.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"a\") == 1\n    assert candidate(s = \"cac\") == 2\n    assert candidate(s = \"zab\") == 6\n\n\ncheck(Solution().findSubstringInWraproundString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\n\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n```",
        "solutions": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        def is_ipv4(s: str) -> bool:\n            ss = s.split(\".\")\n            if len(ss) != 4:\n                return False\n            for t in ss:\n                if len(t) > 1 and t[0] == \"0\":\n                    return False\n                if not t.isdigit() or not 0 <= int(t) <= 255:\n                    return False\n            return True\n\n        def is_ipv6(s: str) -> bool:\n            ss = s.split(\":\")\n            if len(ss) != 8:\n                return False\n            for t in ss:\n                if not 1 <= len(t) <= 4:\n                    return False\n                if not all(c in \"0123456789abcdefABCDEF\" for c in t):\n                    return False\n            return True\n\n        if is_ipv4(queryIP):\n            return \"IPv4\"\n        if is_ipv6(queryIP):\n            return \"IPv6\"\n        return \"Neither\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queryIP = \"172.16.254.1\") == \"IPv4\"\n    assert candidate(queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\") == \"IPv6\"\n    assert candidate(queryIP = \"256.256.256.256\") == \"Neither\"\n\n\ncheck(Solution().validIPAddress)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of points on the X-Y plane points where points[i] = [xi, yi]. The points form a polygon when joined sequentially.\nReturn true if this polygon is convex and false otherwise.\nYou may assume the polygon formed by given points is always a simple polygon. In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isConvex(self, points: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isConvex(self, points: List[List[int]]) -> bool:\n        n = len(points)\n        pre = cur = 0\n        for i in range(n):\n            x1 = points[(i + 1) % n][0] - points[i][0]\n            y1 = points[(i + 1) % n][1] - points[i][1]\n            x2 = points[(i + 2) % n][0] - points[i][0]\n            y2 = points[(i + 2) % n][1] - points[i][1]\n            cur = x1 * y2 - x2 * y1\n            if cur != 0:\n                if cur * pre < 0:\n                    return False\n                pre = cur\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[0,0],[0,5],[5,5],[5,0]]) == True\n    assert candidate(points = [[0,0],[0,10],[10,10],[10,0],[5,5]]) == False\n\n\ncheck(Solution().isConvex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, encode the string such that its encoded length is the shortest.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. k should be a positive integer.\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def encode(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def encode(self, s: str) -> str:\n        def g(i: int, j: int) -> str:\n            t = s[i : j + 1]\n            if len(t) < 5:\n                return t\n            k = (t + t).index(t, 1)\n            if k < len(t):\n                cnt = len(t) // k\n                return f\"{cnt}[{f[i][i + k - 1]}]\"\n            return t\n\n        n = len(s)\n        f = [[None] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i, n):\n                f[i][j] = g(i, j)\n                if j - i + 1 > 4:\n                    for k in range(i, j):\n                        t = f[i][k] + f[k + 1][j]\n                        if len(f[i][j]) > len(t):\n                            f[i][j] = t\n        return f[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaa\") == \"aaa\"\n    assert candidate(s = \"aaaaa\") == \"5[a]\"\n    assert candidate(s = \"aaaaaaaaaa\") == \"10[a]\"\n    assert candidate(s = \"aabcaabcd\") == \"2[aabc]d\"\n    assert candidate(s = \"abbbabbbcabbbabbbc\") == \"2[2[abbb]c]\"\n\n\ncheck(Solution().encode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        def dfs(u):\n            if u == len(matchsticks):\n                return True\n            for i in range(4):\n                if i > 0 and edges[i - 1] == edges[i]:\n                    continue\n                edges[i] += matchsticks[u]\n                if edges[i] <= x and dfs(u + 1):\n                    return True\n                edges[i] -= matchsticks[u]\n            return False\n\n        x, mod = divmod(sum(matchsticks), 4)\n        if mod or x < max(matchsticks):\n            return False\n        edges = [0] * 4\n        matchsticks.sort(reverse=True)\n        return dfs(0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matchsticks = [1,1,2,2,2]) == True\n    assert candidate(matchsticks = [3,3,3,3,4]) == False\n\n\ncheck(Solution().makesquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        sz = len(strs)\n        f = [[[0] * (n + 1) for _ in range(m + 1)] for _ in range(sz + 1)]\n        for i, s in enumerate(strs, 1):\n            a, b = s.count(\"0\"), s.count(\"1\")\n            for j in range(m + 1):\n                for k in range(n + 1):\n                    f[i][j][k] = f[i - 1][j][k]\n                    if j >= a and k >= b:\n                        f[i][j][k] = max(f[i][j][k], f[i - 1][j - a][k - b] + 1)\n        return f[sz][m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3) == 4\n    assert candidate(strs = [\"10\", \"0\", \"1\"], m = 1, n = 1) == 2\n\n\ncheck(Solution().findMaxForm)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWinter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\u00a0\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.\nNotice that\u00a0all the heaters follow your radius standard, and the warm radius will the same.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        houses.sort()\n        heaters.sort()\n\n        def check(r):\n            m, n = len(houses), len(heaters)\n            i = j = 0\n            while i < m:\n                if j >= n:\n                    return False\n                mi = heaters[j] - r\n                mx = heaters[j] + r\n                if houses[i] < mi:\n                    return False\n                if houses[i] > mx:\n                    j += 1\n                else:\n                    i += 1\n            return True\n\n        left, right = 0, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(houses = [1,5], heaters = [2]) == 3\n\n\ncheck(Solution().findRadius)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n\nGiven an integer num, return its complement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findComplement(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def findComplement(self, num: int) -> int:\n        return num ^ ((1 << num.bit_length()) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 5) == 2\n    assert candidate(num = 1) == 0\n\n\ncheck(Solution().findComplement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans, n = 0, len(nums)\n        for i in range(32):\n            a = sum(x >> i & 1 for x in nums)\n            b = n - a\n            ans += a * b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,14,2]) == 6\n    assert candidate(nums = [4,14,4]) == 4\n\n\ncheck(Solution().totalHammingDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestPalindrome(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        mx = 10**n - 1\n        for a in range(mx, mx // 10, -1):\n            b = x = a\n            while b:\n                x = x * 10 + b % 10\n                b //= 10\n            t = mx\n            while t * t >= x:\n                if x % t == 0:\n                    return x % 1337\n                t -= 1\n        return 9\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 987\n    assert candidate(n = 1) == 9\n\n\ncheck(Solution().largestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\nFor examples, if arr = [2,3,4], the median is 3.\nFor examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\n\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n```",
        "solutions": "class MedianFinder:\n    def __init__(self, k: int):\n        self.k = k\n        self.small = []\n        self.large = []\n        self.delayed = defaultdict(int)\n        self.small_size = 0\n        self.large_size = 0\n\n    def add_num(self, num: int):\n        if not self.small or num <= -self.small[0]:\n            heappush(self.small, -num)\n            self.small_size += 1\n        else:\n            heappush(self.large, num)\n            self.large_size += 1\n        self.rebalance()\n\n    def find_median(self) -> float:\n        return -self.small[0] if self.k & 1 else (-self.small[0] + self.large[0]) / 2\n\n    def remove_num(self, num: int):\n        self.delayed[num] += 1\n        if num <= -self.small[0]:\n            self.small_size -= 1\n            if num == -self.small[0]:\n                self.prune(self.small)\n        else:\n            self.large_size -= 1\n            if num == self.large[0]:\n                self.prune(self.large)\n        self.rebalance()\n\n    def prune(self, pq: List[int]):\n        sign = -1 if pq is self.small else 1\n        while pq and sign * pq[0] in self.delayed:\n            self.delayed[sign * pq[0]] -= 1\n            if self.delayed[sign * pq[0]] == 0:\n                self.delayed.pop(sign * pq[0])\n            heappop(pq)\n\n    def rebalance(self):\n        if self.small_size > self.large_size + 1:\n            heappush(self.large, -heappop(self.small))\n            self.small_size -= 1\n            self.large_size += 1\n            self.prune(self.small)\n        elif self.small_size < self.large_size:\n            heappush(self.small, -heappop(self.large))\n            self.large_size -= 1\n            self.small_size += 1\n            self.prune(self.large)\n\n\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        finder = MedianFinder(k)\n        for x in nums[:k]:\n            finder.add_num(x)\n        ans = [finder.find_median()]\n        for i in range(k, len(nums)):\n            finder.add_num(nums[i])\n            finder.remove_num(nums[i - k])\n            ans.append(finder.find_median())\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,-1,-3,5,3,6,7], k = 3) == [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n    assert candidate(nums = [1,2,3,4,2,3,1,4,2], k = 3) == [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n\n\ncheck(Solution().medianSlidingWindow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA magical string s consists of only '1' and '2' and obeys the following rules:\n\nThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n\nThe first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def magicalString(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            # cur \u8868\u793a\u8fd9\u4e00\u7ec4\u7684\u6570\u5b57\uff0cs[i] \u8868\u793a\u8fd9\u4e00\u7ec4\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\n            s += [cur] * s[i]\n            i += 1\n        return s[:n].count(1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6) == 3\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().magicalString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestGoodBase(self, n: str) -> str:\n```",
        "solutions": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        def cal(k, m):\n            p = s = 1\n            for i in range(m):\n                p *= k\n                s += p\n            return s\n\n        num = int(n)\n        for m in range(63, 1, -1):\n            l, r = 2, num - 1\n            while l < r:\n                mid = (l + r) >> 1\n                if cal(mid, m) >= num:\n                    r = mid\n                else:\n                    l = mid + 1\n            if cal(l, m) == num:\n                return str(l)\n        return str(num - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = \"13\") == \"3\"\n    assert candidate(n = \"4681\") == \"8\"\n    assert candidate(n = \"1000000000000000000\") == \"999999999999999999\"\n\n\ncheck(Solution().smallestGoodBase)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA permutation perm of n\u00a0integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the lexicographically smallest permutation perm and return it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPermutation(self, s: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findPermutation(self, s: str) -> List[int]:\n        n = len(s)\n        ans = list(range(1, n + 2))\n        i = 0\n        while i < n:\n            j = i\n            while j < n and s[j] == 'D':\n                j += 1\n            ans[i : j + 1] = ans[i : j + 1][::-1]\n            i = max(i + 1, j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"I\") == [1,2]\n    assert candidate(s = \"DI\") == [2,1,3]\n\n\ncheck(Solution().findPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary array nums, return the maximum number of consecutive 1's in the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        cnt = ans = 0\n        for v in nums:\n            if v == 1:\n                cnt += 1\n            else:\n                ans = max(ans, cnt)\n                cnt = 0\n        return max(ans, cnt)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,0,1,1,1]) == 3\n    assert candidate(nums = [1,0,1,1,0,1]) == 2\n\n\ncheck(Solution().findMaxConsecutiveOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary array nums, return the maximum number of consecutive 1's in the array if you can flip at most one 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        l = cnt = 0\n        for x in nums:\n            cnt += x ^ 1\n            if cnt > 1:\n                cnt -= nums[l] ^ 1\n                l += 1\n        return len(nums) - l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,0,1,1,0]) == 4\n    assert candidate(nums = [1,0,1,1,0,1]) == 4\n\n\ncheck(Solution().findMaxConsecutiveOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\nGiven the m x n maze, the ball's start position and the destination, where start = [startrow, startcol] and destination = [destinationrow, destinationcol], return true if the ball can stop at the destination, otherwise return false.\nYou may assume that the borders of the maze are all walls (see examples).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hasPath(self, maze: List[List[int]], start: List[int], destination: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def hasPath(\n        self, maze: List[List[int]], start: List[int], destination: List[int]\n    ) -> bool:\n        def dfs(i, j):\n            if vis[i][j]:\n                return\n            vis[i][j] = True\n            if [i, j] == destination:\n                return\n            for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                x, y = i, j\n                while 0 <= x + a < m and 0 <= y + b < n and maze[x + a][y + b] == 0:\n                    x, y = x + a, y + b\n                dfs(x, y)\n\n        m, n = len(maze), len(maze[0])\n        vis = [[False] * n for _ in range(m)]\n        dfs(start[0], start[1])\n        return vis[destination[0]][destination[1]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]) == True\n    assert candidate(maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]) == False\n    assert candidate(maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]) == False\n\n\ncheck(Solution().hasPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\nThe area of the rectangular web page you designed must equal to the given target area.\nThe width W should not be larger than the length L, which means L >= W.\nThe difference between length L and width W should be as small as possible.\n\nReturn an array [L, W] where L and W are the length and width of the\u00a0web page you designed in sequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        w = int(sqrt(area))\n        while area % w != 0:\n            w -= 1\n        return [area // w, w]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(area = 4) == [2,2]\n    assert candidate(area = 37) == [37,1]\n    assert candidate(area = 122122) == [427,286]\n\n\ncheck(Solution().constructRectangle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where:\n\n0 <= i < j < nums.length and\nnums[i] > 2 * nums[j].\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        def merge_sort(l, r):\n            if l >= r:\n                return 0\n            mid = (l + r) >> 1\n            ans = merge_sort(l, mid) + merge_sort(mid + 1, r)\n            t = []\n            i, j = l, mid + 1\n            while i <= mid and j <= r:\n                if nums[i] <= 2 * nums[j]:\n                    i += 1\n                else:\n                    ans += mid - i + 1\n                    j += 1\n            i, j = l, mid + 1\n            while i <= mid and j <= r:\n                if nums[i] <= nums[j]:\n                    t.append(nums[i])\n                    i += 1\n                else:\n                    t.append(nums[j])\n                    j += 1\n            t.extend(nums[i : mid + 1])\n            t.extend(nums[j : r + 1])\n            nums[l : r + 1] = t\n            return ans\n\n        return merge_sort(0, len(nums) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,3,1]) == 2\n    assert candidate(nums = [2,4,3,5,1]) == 3\n\n\ncheck(Solution().reversePairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n\nReturn the number of different expressions that you can build, which evaluates to target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        s = sum(nums)\n        if s < target or (s - target) % 2 != 0:\n            return 0\n        m, n = len(nums), (s - target) // 2\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(n + 1):\n                dp[i][j] = dp[i - 1][j]\n                if nums[i - 1] <= j:\n                    dp[i][j] += dp[i - 1][j - nums[i - 1]]\n        return dp[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1,1,1], target = 3) == 5\n    assert candidate(nums = [1], target = 1) == 1\n\n\ncheck(Solution().findTargetSumWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOur hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\nReturn the total number of seconds that Ashe is poisoned.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n```",
        "solutions": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        ans = duration\n        for a, b in pairwise(timeSeries):\n            ans += min(duration, b - a)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(timeSeries = [1,4], duration = 2) == 4\n    assert candidate(timeSeries = [1,2], duration = 2) == 3\n\n\ncheck(Solution().findPoisonedDuration)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        m, n = len(mat), len(mat[0])\n        ans = []\n        for k in range(m + n - 1):\n            t = []\n            i = 0 if k < n else k - n + 1\n            j = k if k < n else n - 1\n            while i < m and j >= 0:\n                t.append(mat[i][j])\n                i += 1\n                j -= 1\n            if k % 2 == 0:\n                t = t[::-1]\n            ans.extend(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,2,3],[4,5,6],[7,8,9]]) == [1,2,4,7,5,3,6,8,9]\n    assert candidate(mat = [[1,2],[3,4]]) == [1,2,3,4]\n\n\ncheck(Solution().findDiagonalOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nIn the American keyboard:\n\nthe first row consists of the characters \"qwertyuiop\",\nthe second row consists of the characters \"asdfghjkl\", and\nthe third row consists of the characters \"zxcvbnm\".\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        s1 = set('qwertyuiop')\n        s2 = set('asdfghjkl')\n        s3 = set('zxcvbnm')\n        ans = []\n        for w in words:\n            s = set(w.lower())\n            if s <= s1 or s <= s2 or s <= s3:\n                ans.append(w)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]) == [\"Alaska\",\"Dad\"]\n    assert candidate(words = [\"omk\"]) == []\n    assert candidate(words = [\"adsdf\",\"sfd\"]) == [\"adsdf\",\"sfd\"]\n\n\ncheck(Solution().findWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findMode(self, root: TreeNode) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            nonlocal mx, prev, ans, cnt\n            dfs(root.left)\n            cnt = cnt + 1 if prev == root.val else 1\n            if cnt > mx:\n                ans = [root.val]\n                mx = cnt\n            elif cnt == mx:\n                ans.append(root.val)\n            prev = root.val\n            dfs(root.right)\n\n        prev = None\n        mx = cnt = 0\n        ans = []\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,None,2,2])) == [2]\n    assert candidate(root = tree_node([0])) == [0]\n\n\ncheck(Solution().findMode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSuppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaximizedCapital(\n        self, k: int, w: int, profits: List[int], capital: List[int]\n    ) -> int:\n        h1 = [(c, p) for c, p in zip(capital, profits)]\n        heapify(h1)\n        h2 = []\n        while k:\n            while h1 and h1[0][0] <= w:\n                heappush(h2, -heappop(h1)[1])\n            if not h2:\n                break\n            w -= heappop(h2)\n            k -= 1\n        return w\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]) == 4\n    assert candidate(k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]) == 6\n\n\ncheck(Solution().findMaximizedCapital)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [-1] * n\n        stk = []\n        for i in range(n * 2 - 1, -1, -1):\n            i %= n\n            while stk and stk[-1] <= nums[i]:\n                stk.pop()\n            if stk:\n                ans[i] = stk[-1]\n            stk.append(nums[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1]) == [2,-1,2]\n    assert candidate(nums = [1,2,3,4,3]) == [2,3,4,-1,4]\n\n\ncheck(Solution().nextGreaterElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer num, return a string of its base 7 representation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convertToBase7(self, num: int) -> str:\n```",
        "solutions": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        ans = []\n        while num:\n            ans.append(str(num % 7))\n            num //= 7\n        return ''.join(ans[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 100) == \"202\"\n    assert candidate(num = -7) == \"-10\"\n\n\ncheck(Solution().convertToBase7)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        n = len(score)\n        idx = list(range(n))\n        idx.sort(key=lambda x: -score[x])\n        top3 = ['Gold Medal', 'Silver Medal', 'Bronze Medal']\n        ans = [None] * n\n        for i in range(n):\n            ans[idx[i]] = top3[i] if i < 3 else str(i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(score = [5,4,3,2,1]) == [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n    assert candidate(score = [10,3,8,9,4]) == [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\n\n\ncheck(Solution().findRelativeRanks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n```",
        "solutions": "class Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        if num == 1:\n            return False\n        s, i = 1, 2\n        while i * i <= num:\n            if num % i == 0:\n                s += i\n                if i != num // i:\n                    s += num // i\n            i += 1\n        return s == num\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 28) == True\n    assert candidate(num = 7) == False\n\n\ncheck(Solution().checkPerfectNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return 0\n            left, right = dfs(root.left), dfs(root.right)\n            s = root.val + left + right\n            counter[s] += 1\n            return s\n\n        counter = Counter()\n        dfs(root)\n        mx = max(counter.values())\n        return [k for k, v in counter.items() if v == mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,2,-3])) == [2,-3,4]\n    assert candidate(root = tree_node([5,2,-5])) == [2]\n\n\ncheck(Solution().findFrequentTreeSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary array nums containing only the integers 0 and 1. Return the number of subarrays in nums that have more 1's than 0's. Since the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarraysWithMoreZerosThanOnes(self, nums: List[int]) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def subarraysWithMoreZerosThanOnes(self, nums: List[int]) -> int:\n        n = len(nums)\n        base = n + 1\n        tree = BinaryIndexedTree(n + base)\n        tree.update(base, 1)\n        mod = 10**9 + 7\n        ans = s = 0\n        for x in nums:\n            s += x or -1\n            ans += tree.query(s - 1 + base)\n            ans %= mod\n            tree.update(s + base, 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,1,0,1]) == 9\n    assert candidate(nums = [0]) == 0\n    assert candidate(nums = [1]) == 1\n\n\ncheck(Solution().subarraysWithMoreZerosThanOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA subarray of a 0-indexed integer array is a contiguous non-empty sequence of elements within an array.\nThe alternating subarray sum of a subarray that ranges from index i to j (inclusive, 0 <= i <= j < nums.length) is nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j].\nGiven a 0-indexed integer array nums, return the maximum alternating subarray sum of any subarray of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumAlternatingSubarraySum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumAlternatingSubarraySum(self, nums: List[int]) -> int:\n        ans = f = g = -inf\n        for x in nums:\n            f, g = max(g, 0) + x, f - x\n            ans = max(ans, f, g)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,-1,1,2]) == 5\n    assert candidate(nums = [2,2,2,2,2]) == 2\n    assert candidate(nums = [1]) == 1\n\n\ncheck(Solution().maximumAlternatingSubarraySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the leftmost value in the last row of the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        q = deque([root])\n        ans = 0\n        while q:\n            ans = q[0].val\n            for _ in range(len(q)):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([2,1,3])) == 1\n    assert candidate(root = tree_node([1,2,3,4,None,5,6,None,None,7])) == 7\n\n\ncheck(Solution().findBottomLeftValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\nAt the stage of rotating the ring to spell the key character key[i]:\n\nYou can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the \"12:00\" direction, where this character must equal key[i].\nIf the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n```",
        "solutions": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        m, n = len(key), len(ring)\n        pos = defaultdict(list)\n        for i, c in enumerate(ring):\n            pos[c].append(i)\n        f = [[inf] * n for _ in range(m)]\n        for j in pos[key[0]]:\n            f[0][j] = min(j, n - j) + 1\n        for i in range(1, m):\n            for j in pos[key[i]]:\n                for k in pos[key[i - 1]]:\n                    f[i][j] = min(\n                        f[i][j], f[i - 1][k] + min(abs(j - k), n - abs(j - k)) + 1\n                    )\n        return min(f[-1][j] for j in pos[key[-1]])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ring = \"godding\", key = \"gd\") == 4\n    assert candidate(ring = \"godding\", key = \"godding\") == 13\n\n\ncheck(Solution().findRotateSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        if root is None:\n            return []\n        q = deque([root])\n        ans = []\n        while q:\n            t = -inf\n            for _ in range(len(q)):\n                node = q.popleft()\n                t = max(t, node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,3,2,5,3,None,9])) == [1,3,9]\n    assert candidate(root = tree_node([1,2,3])) == [1,3]\n\n\ncheck(Solution().largestValues)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"bbbab\") == 4\n    assert candidate(s = \"cbbd\") == 2\n\n\ncheck(Solution().longestPalindromeSubseq)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        n = len(machines)\n        k, mod = divmod(sum(machines), n)\n        if mod:\n            return -1\n        ans = s = 0\n        for x in machines:\n            x -= k\n            s += x\n            ans = max(ans, abs(s), x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(machines = [1,0,5]) == 3\n    assert candidate(machines = [0,3,0]) == 2\n    assert candidate(machines = [0,2,0]) == -1\n\n\ncheck(Solution().findMinMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\nYou may assume that you have an infinite number of each kind of coin.\nThe answer is guaranteed to fit into a signed 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        m, n = len(coins), amount\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        f[0][0] = 1\n        for i, x in enumerate(coins, 1):\n            for j in range(n + 1):\n                f[i][j] = f[i - 1][j]\n                if j >= x:\n                    f[i][j] += f[i][j - x]\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(amount = 5, coins = [1, 2, 5]) == 4\n    assert candidate(amount = 3, coins = [2]) == 0\n    assert candidate(amount = 10, coins = [10] ) == 1\n\n\ncheck(Solution().change)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed binary arrays nums1 and nums2. Find the widest pair of indices (i, j) such that i <= j and nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j].\nThe widest pair of indices is the pair with the largest distance between i and j. The distance between a pair of indices is defined as j - i + 1.\nReturn the distance of the widest pair of indices. If no pair of indices meets the conditions, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def widestPairOfIndices(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def widestPairOfIndices(self, nums1: List[int], nums2: List[int]) -> int:\n        d = {0: -1}\n        ans = s = 0\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            s += a - b\n            if s in d:\n                ans = max(ans, i - d[s])\n            else:\n                d[s] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,1,0,1], nums2 = [0,1,1,0]) == 3\n    assert candidate(nums1 = [0,1], nums2 = [1,1]) == 1\n    assert candidate(nums1 = [0], nums2 = [1]) == 0\n\n\ncheck(Solution().widestPairOfIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define the usage of capitals in a word to be right when one of the following cases holds:\n\nAll letters in this word are capitals, like \"USA\".\nAll letters in this word are not capitals, like \"leetcode\".\nOnly the first letter in this word is capital, like \"Google\".\n\nGiven a string word, return true if the usage of capitals in it is right.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n```",
        "solutions": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        cnt = sum(c.isupper() for c in word)\n        return cnt == 0 or cnt == len(word) or (cnt == 1 and word[0].isupper())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"USA\") == True\n    assert candidate(word = \"FlaG\") == False\n\n\ncheck(Solution().detectCapitalUse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings a and b, return the length of the longest uncommon subsequence between a and b. If no such uncommon subsequence exists, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of exactly one of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLUSlength(self, a: str, b: str) -> int:\n```",
        "solutions": "class Solution:\n    def findLUSlength(self, a: str, b: str) -> int:\n        return -1 if a == b else max(len(a), len(b))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"aaa\", b = \"bbb\") == 3\n    assert candidate(a = \"aaa\", b = \"aaa\") == -1\n\n\ncheck(Solution().findLUSlength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n        def check(a, b):\n            i = j = 0\n            while i < len(a) and j < len(b):\n                if a[i] == b[j]:\n                    j += 1\n                i += 1\n            return j == len(b)\n\n        n = len(strs)\n        ans = -1\n\n        for i in range(n):\n            j = 0\n            while j < n:\n                if i == j or not check(strs[j], strs[i]):\n                    j += 1\n                else:\n                    break\n            if j == n:\n                ans = max(ans, len(strs[i]))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"aba\",\"cdc\",\"eae\"]) == 3\n    assert candidate(strs = [\"aaa\",\"aaa\",\"aa\"]) == -1\n\n\ncheck(Solution().findLUSlength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\n\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\n\nNote that:\n\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        s = 0\n        mp = {0: -1}\n        for i, v in enumerate(nums):\n            s += v\n            r = s % k\n            if r in mp and i - mp[r] >= 2:\n                return True\n            if r not in mp:\n                mp[r] = i\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [23,2,4,6,7], k = 6) == True\n    assert candidate(nums = [23,2,6,4,7], k = 6) == True\n    assert candidate(nums = [23,2,6,4,7], k = 13) == False\n\n\ncheck(Solution().checkSubarraySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLongestWord(self, s: str, dictionary: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def findLongestWord(self, s: str, dictionary: List[str]) -> str:\n        def check(a, b):\n            m, n = len(a), len(b)\n            i = j = 0\n            while i < m and j < n:\n                if a[i] == b[j]:\n                    j += 1\n                i += 1\n            return j == n\n\n        ans = ''\n        for a in dictionary:\n            if check(s, a) and (len(ans) < len(a) or (len(ans) == len(a) and ans > a)):\n                ans = a\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]) == \"apple\"\n    assert candidate(s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]) == \"a\"\n\n\ncheck(Solution().findLongestWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        s = ans = 0\n        mp = {0: -1}\n        for i, v in enumerate(nums):\n            s += 1 if v == 1 else -1\n            if s in mp:\n                ans = max(ans, i - mp[s])\n            else:\n                mp[s] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1]) == 2\n    assert candidate(nums = [0,1,0]) == 2\n\n\ncheck(Solution().findMaxLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSuppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\n\nperm[i] is divisible by i.\ni is divisible by perm[i].\n\nGiven an integer n, return the number of the beautiful arrangements that you can construct.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countArrangement(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countArrangement(self, n: int) -> int:\n        def dfs(i):\n            nonlocal ans, n\n            if i == n + 1:\n                ans += 1\n                return\n            for j in match[i]:\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(i + 1)\n                    vis[j] = False\n\n        ans = 0\n        vis = [False] * (n + 1)\n        match = defaultdict(list)\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if j % i == 0 or i % j == 0:\n                    match[i].append(j)\n\n        dfs(1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 2\n    assert candidate(n = 1) == 1\n\n\ncheck(Solution().countArrangement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of distinct strings words, return the minimal possible abbreviations for every word.\nThe following are the rules for a string abbreviation:\n\nThe initial abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\nIf more than one word shares the same abbreviation, then perform the following operation:\n\t\nIncrease the prefix (characters in the first part) of each of their abbreviations by 1.\n\t\t\nFor example, say you start with the words [\"abcdef\",\"abndef\"] both initially abbreviated as \"a4f\". Then, a sequence of operations would be [\"a4f\",\"a4f\"] -> [\"ab3f\",\"ab3f\"] -> [\"abc2f\",\"abn2f\"].\n\n\nThis operation is repeated until every abbreviation is unique.\n\n\nAt the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n```",
        "solutions": "class Trie:\n    __slots__ = [\"children\", \"cnt\"]\n\n    def __init__(self):\n        self.children = [None] * 26\n        self.cnt = 0\n\n    def insert(self, w: str):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w: str) -> int:\n        node = self\n        cnt = 0\n        for c in w:\n            cnt += 1\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n            if node.cnt == 1:\n                return cnt\n        return len(w)\n\n\nclass Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        tries = {}\n        for w in words:\n            m = len(w)\n            if (m, w[-1]) not in tries:\n                tries[(m, w[-1])] = Trie()\n            tries[(m, w[-1])].insert(w)\n        ans = []\n        for w in words:\n            cnt = tries[(len(w), w[-1])].search(w)\n            ans.append(\n                w if cnt + 2 >= len(w) else w[:cnt] + str(len(w) - cnt - 1) + w[-1]\n            )\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]) == [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n    assert candidate(words = [\"aa\",\"aaa\"]) == [\"aa\",\"aaa\"]\n\n\ncheck(Solution().wordsAbbreviation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list, and an integer k.\nReturn the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        fast = slow = head\n        for _ in range(k - 1):\n            fast = fast.next\n        p = fast\n        while fast.next:\n            fast, slow = fast.next, slow.next\n        q = slow\n        p.val, q.val = q.val, p.val\n        return head\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5]), k = 2), list_node([1,4,3,2,5]))\n    assert is_same_list(candidate(head = list_node([7,9,6,6,7,8,3,0,9,5]), k = 5), list_node([7,9,6,6,8,7,3,0,9,5]))\n    assert is_same_list(candidate(head = list_node([1]), k = 1), list_node([1]))\n    assert is_same_list(candidate(head = list_node([1,2]), k = 1), list_node([2,1]))\n    assert is_same_list(candidate(head = list_node([1,2,3]), k = 2), list_node([1,2,3]))\n\n\ncheck(Solution().swapNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nLet's play the minesweeper game (Wikipedia, online game)!\nYou are given an m x n char matrix board representing the game board where:\n\n'M' represents an unrevealed mine,\n'E' represents an unrevealed empty square,\n'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\ndigit ('1' to '8') represents how many mines are adjacent to this revealed square, and\n'X' represents a revealed mine.\n\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\nReturn the board after revealing this position according to the following rules:\n\nIf a mine 'M' is revealed, then the game is over. You should change it to 'X'.\nIf an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.\nIf an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\nReturn the board when no more squares will be revealed.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        def dfs(i: int, j: int):\n            cnt = 0\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if 0 <= x < m and 0 <= y < n and board[x][y] == \"M\":\n                        cnt += 1\n            if cnt:\n                board[i][j] = str(cnt)\n            else:\n                board[i][j] = \"B\"\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < m and 0 <= y < n and board[x][y] == \"E\":\n                            dfs(x, y)\n\n        m, n = len(board), len(board[0])\n        i, j = click\n        if board[i][j] == \"M\":\n            board[i][j] = \"X\"\n        else:\n            dfs(i, j)\n        return board\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]) == [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n    assert candidate(board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]) == [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n\ncheck(Solution().updateBoard)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([4,2,6,1,3])) == 1\n    assert candidate(root = tree_node([1,0,48,None,None,12,49])) == 1\n\n\ncheck(Solution().getMinimumDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n picture consisting of black 'B' and white 'W' pixels, return the number of black lonely pixels.\nA black lonely pixel is a character 'B' that located at a specific position where the same row and same column don't have any other black pixels.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLonelyPixel(self, picture: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def findLonelyPixel(self, picture: List[List[str]]) -> int:\n        rows = [0] * len(picture)\n        cols = [0] * len(picture[0])\n        for i, row in enumerate(picture):\n            for j, x in enumerate(row):\n                if x == \"B\":\n                    rows[i] += 1\n                    cols[j] += 1\n        ans = 0\n        for i, row in enumerate(picture):\n            for j, x in enumerate(row):\n                if x == \"B\" and rows[i] == 1 and cols[j] == 1:\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(picture = [[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]) == 3\n    assert candidate(picture = [[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"W\"],[\"B\",\"B\",\"B\"]]) == 0\n\n\ncheck(Solution().findLonelyPixel)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n\n0 <= i, j < nums.length\ni != j\n|nums[i] - nums[j]| == k\n\nNotice that |val| denotes the absolute value of val.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        vis, ans = set(), set()\n        for v in nums:\n            if v - k in vis:\n                ans.add(v - k)\n            if v + k in vis:\n                ans.add(v)\n            vis.add(v)\n        return len(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3, 1, 4, 1, 5], k = 2) == 2\n    assert candidate(nums = [1, 2, 3, 4, 5], k = 1) == 4\n    assert candidate(nums = [1, 3, 1, 5, 4], k = 0) == 1\n\n\ncheck(Solution().findPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n picture consisting of black 'B' and white 'W' pixels and an integer target, return the number of black lonely pixels.\nA black lonely pixel is a character 'B' that located at a specific position (r, c) where:\n\nRow r and column c both contain exactly target black pixels.\nFor all rows that have a black pixel at column c, they should be exactly the same as row r.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findBlackPixel(self, picture: List[List[str]], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def findBlackPixel(self, picture: List[List[str]], target: int) -> int:\n        rows = [0] * len(picture)\n        g = defaultdict(list)\n        for i, row in enumerate(picture):\n            for j, x in enumerate(row):\n                if x == \"B\":\n                    rows[i] += 1\n                    g[j].append(i)\n        ans = 0\n        for j in g:\n            i1 = g[j][0]\n            if rows[i1] != target:\n                continue\n            if len(g[j]) == rows[i1] and all(picture[i2] == picture[i1] for i2 in g[j]):\n                ans += target\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(picture = [[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]], target = 3) == 6\n    assert candidate(picture = [[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"]], target = 1) == 0\n\n\ncheck(Solution().findBlackPixel)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA complex number can be represented as a string on the form \"real+imaginaryi\" where:\n\nreal is the real part and is an integer in the range [-100, 100].\nimaginary is the imaginary part and is an integer in the range [-100, 100].\ni2 == -1.\n\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def complexNumberMultiply(self, num1: str, num2: str) -> str:\n```",
        "solutions": "class Solution:\n    def complexNumberMultiply(self, num1: str, num2: str) -> str:\n        a, b = map(int, num1[:-1].split('+'))\n        c, d = map(int, num2[:-1].split('+'))\n        return f'{a * c - b * d}+{a * d + c * b}i'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num1 = \"1+1i\", num2 = \"1+1i\") == \"0+2i\"\n    assert candidate(num1 = \"1+-1i\", num2 = \"1+-1i\") == \"0+-2i\"\n\n\ncheck(Solution().complexNumberMultiply)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinDifference(self, timePoints: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def findMinDifference(self, timePoints: List[str]) -> int:\n        if len(timePoints) > 24 * 60:\n            return 0\n        mins = sorted(int(t[:2]) * 60 + int(t[3:]) for t in timePoints)\n        mins.append(mins[0] + 24 * 60)\n        res = mins[-1]\n        for i in range(1, len(mins)):\n            res = min(res, mins[i] - mins[i - 1])\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(timePoints = [\"23:59\",\"00:00\"]) == 1\n    assert candidate(timePoints = [\"00:00\",\"23:59\",\"00:00\"]) == 0\n\n\ncheck(Solution().findMinDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\nReturn the single element that appears only once.\nYour solution must run in O(log n) time and O(1) space.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            # Equals to: if (mid % 2 == 0 and nums[mid] != nums[mid + 1]) or (mid % 2 == 1 and nums[mid] != nums[mid - 1]):\n            if nums[mid] != nums[mid ^ 1]:\n                right = mid\n            else:\n                left = mid + 1\n        return nums[left]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,2,3,3,4,4,8,8]) == 2\n    assert candidate(nums = [3,3,7,7,10,11,11]) == 10\n\n\ncheck(Solution().singleNonDuplicate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        t = list(s)\n        for i in range(0, len(t), k << 1):\n            t[i : i + k] = reversed(t[i : i + k])\n        return ''.join(t)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcdefg\", k = 2) == \"bacdfeg\"\n    assert candidate(s = \"abcd\", k = 2) == \"bacd\"\n\n\ncheck(Solution().reverseStr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        ans = [[-1] * n for _ in range(m)]\n        q = deque()\n        for i, row in enumerate(mat):\n            for j, x in enumerate(row):\n                if x == 0:\n                    ans[i][j] = 0\n                    q.append((i, j))\n        dirs = (-1, 0, 1, 0, -1)\n        while q:\n            i, j = q.popleft()\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    ans[x][y] = ans[i][j] + 1\n                    q.append((x, y))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[0,0,0],[0,1,0],[0,0,0]]) == [[0,0,0],[0,1,0],[0,0,0]]\n    assert candidate(mat = [[0,0,0],[0,1,0],[1,1,1]]) == [[0,0,0],[0,1,0],[1,2,1]]\n\n\ncheck(Solution().updateMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return 0\n            nonlocal ans\n            left, right = dfs(root.left), dfs(root.right)\n            ans = max(ans, left + right)\n            return 1 + max(left, right)\n\n        ans = 0\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5])) == 3\n    assert candidate(root = tree_node([1,2])) == 1\n\n\ncheck(Solution().diameterOfBinaryTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nDuring the NBA playoffs, we always set the rather strong team to play with the rather weak team, like making\u00a0the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting.\nGiven n teams, return their final contest matches in the form of a string.\nThe n teams are labeled from 1 to n, which represents their initial rank (i.e., Rank 1 is the strongest team and Rank n is the weakest team).\nWe will use parentheses '(', and ')' and commas ',' to represent the contest team pairing. We use the parentheses for pairing and the commas for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findContestMatch(self, n: int) -> str:\n```",
        "solutions": "class Solution:\n    def findContestMatch(self, n: int) -> str:\n        s = [str(i + 1) for i in range(n)]\n        while n > 1:\n            for i in range(n >> 1):\n                s[i] = f\"({s[i]},{s[n - i - 1]})\"\n            n >>= 1\n        return s[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == \"((1,4),(2,3))\"\n    assert candidate(n = 8) == \"(((1,8),(4,5)),((2,7),(3,6)))\"\n\n\ncheck(Solution().findContestMatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        def dfs(i: int):\n            vis[i] = True\n            for j, x in enumerate(isConnected[i]):\n                if not vis[j] and x:\n                    dfs(j)\n\n        n = len(isConnected)\n        vis = [False] * n\n        ans = 0\n        for i in range(n):\n            if not vis[i]:\n                dfs(i)\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(isConnected = [[1,1,0],[1,1,0],[0,0,1]]) == 2\n    assert candidate(isConnected = [[1,0,0],[0,1,0],[0,0,1]]) == 3\n\n\ncheck(Solution().findCircleNum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of length n, return true if there is a triplet (i, j, k) which satisfies the following conditions:\n\n0 < i, i + 1 < j, j + 1 < k < n - 1\nThe sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) is equal.\n\nA subarray (l, r) represents a slice of the original array starting from the element indexed l to the element indexed r.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitArray(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def splitArray(self, nums: List[int]) -> bool:\n        n = len(nums)\n        s = [0] * (n + 1)\n        for i, v in enumerate(nums):\n            s[i + 1] = s[i] + v\n        for j in range(3, n - 3):\n            seen = set()\n            for i in range(1, j - 1):\n                if s[i] == s[j] - s[i + 1]:\n                    seen.add(s[i])\n            for k in range(j + 2, n - 1):\n                if s[n] - s[k + 1] == s[k] - s[j + 1] and s[n] - s[k + 1] in seen:\n                    return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1,2,1,2,1]) == True\n    assert candidate(nums = [1,2,1,2,1,2,1,2]) == False\n\n\ncheck(Solution().splitArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n'A': Absent.\n'L': Late.\n'P': Present.\n\nThe student is eligible for an attendance award if they meet both of the following criteria:\n\nThe student was absent ('A') for strictly fewer than 2 days total.\nThe student was never late ('L') for 3 or more consecutive days.\n\nReturn true if the student is eligible for an attendance award, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkRecord(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkRecord(self, s: str) -> bool:\n        return s.count('A') < 2 and 'LLL' not in s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"PPALLP\") == True\n    assert candidate(s = \"PPALLL\") == False\n\n\ncheck(Solution().checkRecord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. The adjacent integers in nums will perform the float division.\n\nFor example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\".\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\nReturn the corresponding expression that has the maximum value in string format.\nNote: your expression should not contain redundant parenthesis.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return f'{nums[0]}/{nums[1]}'\n        return f'{nums[0]}/({\"/\".join(map(str, nums[1:]))})'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1000,100,10,2]) == \"1000/(100/10/2)\"\n    assert candidate(nums = [2,3,4]) == \"2/(3/4)\"\n\n\ncheck(Solution().optimalDivision)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        cnt = defaultdict(int)\n        for row in wall:\n            width = 0\n            for brick in row[:-1]:\n                width += brick\n                cnt[width] += 1\n        if not cnt:\n            return len(wall)\n        return len(wall) - cnt[max(cnt, key=cnt.get)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]) == 2\n    assert candidate(wall = [[1],[1],[1]]) == 3\n\n\ncheck(Solution().leastBricks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings strs. You could concatenate these strings together into a loop, where for each string, you could choose to reverse it or not. Among all the possible loops\nReturn the lexicographically largest string after cutting the loop, which will make the looped string into a regular one.\nSpecifically, to find the lexicographically largest string, you need to experience two phases:\n\nConcatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\nCut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint.\n\nAnd your job is to find the lexicographically largest one among all the possible regular strings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitLoopedString(self, strs: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def splitLoopedString(self, strs: List[str]) -> str:\n        strs = [s[::-1] if s[::-1] > s else s for s in strs]\n        ans = ''.join(strs)\n        for i, s in enumerate(strs):\n            t = ''.join(strs[i + 1 :]) + ''.join(strs[:i])\n            for j in range(len(s)):\n                a = s[j:]\n                b = s[:j]\n                ans = max(ans, a + t + b)\n                ans = max(ans, b[::-1] + t + a[::-1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"abc\",\"xyz\"]) == \"zyxcba\"\n    assert candidate(strs = [\"abc\"]) == \"cba\"\n\n\ncheck(Solution().splitLoopedString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nextGreaterElement(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        cs = list(str(n))\n        n = len(cs)\n        i, j = n - 2, n - 1\n        while i >= 0 and cs[i] >= cs[i + 1]:\n            i -= 1\n        if i < 0:\n            return -1\n        while cs[i] >= cs[j]:\n            j -= 1\n        cs[i], cs[j] = cs[j], cs[i]\n        cs[i + 1 :] = cs[i + 1 :][::-1]\n        ans = int(''.join(cs))\n        return -1 if ans > 2**31 - 1 else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 12) == 21\n    assert candidate(n = 21) == -1\n\n\ncheck(Solution().nextGreaterElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join([t[::-1] for t in s.split(' ')])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\n    assert candidate( s = \"Mr Ding\") == \"rM gniD\"\n\n\ncheck(Solution().reverseWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        cnt = Counter({0: 1})\n        ans = s = 0\n        for x in nums:\n            s += x\n            ans += cnt[s - k]\n            cnt[s] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1], k = 2) == 2\n    assert candidate(nums = [1,2,3], k = 3) == 2\n\n\ncheck(Solution().subarraySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        return sum(nums[::2])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,3,2]) == 4\n    assert candidate(nums = [6,2,6,5,1,2]) == 9\n\n\ncheck(Solution().arrayPairSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary matrix mat, return the length of the longest line of consecutive one in the matrix.\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m + 2)]\n        b = [[0] * (n + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m + 2)]\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if mat[i - 1][j - 1]:\n                    a[i][j] = a[i - 1][j] + 1\n                    b[i][j] = b[i][j - 1] + 1\n                    c[i][j] = c[i - 1][j - 1] + 1\n                    d[i][j] = d[i - 1][j + 1] + 1\n                    ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]) == 3\n    assert candidate(mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]) == 4\n\n\ncheck(Solution().longestLine)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the sum of every tree node's tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTilt(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTilt(self, root: TreeNode) -> int:\n        ans = 0\n\n        def sum(root):\n            if root is None:\n                return 0\n            nonlocal ans\n            left = sum(root.left)\n            right = sum(root.right)\n            ans += abs(left - right)\n            return root.val + left + right\n\n        sum(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3])) == 1\n    assert candidate(root = tree_node([4,2,9,3,5,None,7])) == 15\n    assert candidate(root = tree_node([21,7,14,1,1,2,2,3,3])) == 9\n\n\ncheck(Solution().findTilt)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\nThe closest is defined as the absolute difference minimized between two integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nearestPalindromic(self, n: str) -> str:\n```",
        "solutions": "class Solution:\n    def nearestPalindromic(self, n: str) -> str:\n        x = int(n)\n        l = len(n)\n        res = {10 ** (l - 1) - 1, 10**l + 1}\n        left = int(n[: (l + 1) >> 1])\n        for i in range(left - 1, left + 2):\n            j = i if l % 2 == 0 else i // 10\n            while j:\n                i = i * 10 + j % 10\n                j //= 10\n            res.add(i)\n        res.discard(x)\n\n        ans = -1\n        for t in res:\n            if (\n                ans == -1\n                or abs(t - x) < abs(ans - x)\n                or (abs(t - x) == abs(ans - x) and t < ans)\n            ):\n                ans = t\n        return str(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = \"123\") == \"121\"\n    assert candidate(n = \"1\") == \"0\"\n\n\ncheck(Solution().nearestPalindromic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\n\nThe first element in s[k] starts with the selection of the element nums[k] of index = k.\nThe next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\nWe stop adding right before a duplicate element occurs in s[k].\n\nReturn the longest length of a set s[k].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        n = len(nums)\n        vis = [False] * n\n        res = 0\n        for i in range(n):\n            if vis[i]:\n                continue\n            cur, m = nums[i], 1\n            vis[cur] = True\n            while nums[cur] != nums[i]:\n                cur = nums[cur]\n                m += 1\n                vis[cur] = True\n            res = max(res, m)\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,4,0,3,1,6,2]) == 4\n    assert candidate(nums = [0,1,2]) == 1\n\n\ncheck(Solution().arrayNesting)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        if m * n != r * c:\n            return mat\n        ans = [[0] * c for _ in range(r)]\n        for i in range(m * n):\n            ans[i // c][i % c] = mat[i // n][i % n]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,2],[3,4]], r = 1, c = 4) == [[1,2,3,4]]\n    assert candidate(mat = [[1,2],[3,4]], r = 2, c = 4) == [[1,2],[3,4]]\n\n\ncheck(Solution().matrixReshape)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nLeetCode wants to give one of its best employees the option to travel among n cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\nRules and restrictions:\n\nYou can only travel among n cities, represented by indexes from 0 to n - 1. Initially, you are in the city indexed 0 on Monday.\nThe cities are connected by flights. The flights are represented as an n x n matrix (not necessarily symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] == 0; Otherwise, flights[i][j] == 1. Also, flights[i][i] == 0 for all i.\nYou totally have k weeks (each week has seven days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\nFor each city, you can only have restricted vacation days in different weeks, given an n x k matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take a vacation in the city i in the week j.\nYou could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\nIf you fly from city A to city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\nWe do not consider the impact of flight hours on the calculation of vacation days.\n\nGiven the two matrices flights and days, return the maximum vacation days you could take during k weeks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n        n = len(flights)\n        K = len(days[0])\n        f = [[-inf] * n for _ in range(K + 1)]\n        f[0][0] = 0\n        for k in range(1, K + 1):\n            for j in range(n):\n                f[k][j] = f[k - 1][j]\n                for i in range(n):\n                    if flights[i][j]:\n                        f[k][j] = max(f[k][j], f[k - 1][i])\n                f[k][j] += days[j][k - 1]\n        return max(f[-1][j] for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]) == 12\n    assert candidate(flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]) == 3\n    assert candidate(flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]) == 21\n\n\ncheck(Solution().maxVacationDays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return (\n                root1.val == root2.val\n                and dfs(root1.left, root2.left)\n                and dfs(root1.right, root2.right)\n            )\n\n        if root is None:\n            return False\n        return (\n            dfs(root, subRoot)\n            or self.isSubtree(root.left, subRoot)\n            or self.isSubtree(root.right, subRoot)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,4,5,1,2]), subRoot = tree_node([4,1,2])) == True\n    assert candidate(root = tree_node([3,4,5,1,2,None,None,None,None,0]), subRoot = tree_node([4,1,2])) == False\n\n\ncheck(Solution().isSubtree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\n\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\nThe distance is the number of moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minDistance(\n        self,\n        height: int,\n        width: int,\n        tree: List[int],\n        squirrel: List[int],\n        nuts: List[List[int]],\n    ) -> int:\n        x, y, a, b = *tree, *squirrel\n        s = sum(abs(i - x) + abs(j - y) for i, j in nuts) * 2\n        ans = inf\n        for i, j in nuts:\n            c = abs(i - x) + abs(j - y)\n            d = abs(i - a) + abs(j - b) + c\n            ans = min(ans, s + d - c * 2)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]) == 12\n    assert candidate(height = 1, width = 3, tree = [0,1], squirrel = [0,0], nuts = [[0,2]]) == 3\n\n\ncheck(Solution().minDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        return min(len(candyType) >> 1, len(set(candyType)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candyType = [1,1,2,2,3,3]) == 3\n    assert candidate(candyType = [1,1,2,3]) == 2\n    assert candidate(candyType = [6,6,6,6]) == 1\n\n\ncheck(Solution().distributeCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\nReturn the shortest such subarray and output its length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        arr = sorted(nums)\n        l, r = 0, len(nums) - 1\n        while l <= r and nums[l] == arr[l]:\n            l += 1\n        while l <= r and nums[r] == arr[r]:\n            r -= 1\n        return r - l + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,6,4,8,10,9,15]) == 5\n    assert candidate(nums = [1,2,3,4]) == 0\n    assert candidate(nums = [1]) == 0\n\n\ncheck(Solution().findUnsortedSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n processes forming a rooted tree structure. You are given two integer arrays pid and ppid, where pid[i] is the ID of the ith process and ppid[i] is the ID of the ith process's parent process.\nEach process has only one parent process but may have multiple children processes. Only one process has ppid[i] = 0, which means this process has no parent process (the root of the tree).\nWhen a process is killed, all of its children processes will also be killed.\nGiven an integer kill representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n        def dfs(i: int):\n            ans.append(i)\n            for j in g[i]:\n                dfs(j)\n\n        g = defaultdict(list)\n        for i, p in zip(pid, ppid):\n            g[p].append(i)\n        ans = []\n        dfs(kill)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5) == [5,10]\n    assert candidate(pid = [1], ppid = [0], kill = 1) == [1]\n\n\ncheck(Solution().killProcess)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n```",
        "solutions": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"leetcode\", word2 = \"etco\") == 4\n\n\ncheck(Solution().minDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:\n\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\nA closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\nA < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\nThe cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValid(self, code: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isValid(self, code: str) -> bool:\n        def check(tag):\n            return 1 <= len(tag) <= 9 and all(c.isupper() for c in tag)\n\n        stk = []\n        i, n = 0, len(code)\n        while i < n:\n            if i and not stk:\n                return False\n            if code[i : i + 9] == '<![CDATA[':\n                i = code.find(']]>', i + 9)\n                if i < 0:\n                    return False\n                i += 2\n            elif code[i : i + 2] == '</':\n                j = i + 2\n                i = code.find('>', j)\n                if i < 0:\n                    return False\n                t = code[j:i]\n                if not check(t) or not stk or stk.pop() != t:\n                    return False\n            elif code[i] == '<':\n                j = i + 1\n                i = code.find('>', j)\n                if i < 0:\n                    return False\n                t = code[j:i]\n                if not check(t):\n                    return False\n                stk.append(t)\n            i += 1\n        return not stk\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\") == True\n    assert candidate(code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\") == True\n    assert candidate(code = \"<A>  <B> </A>   </B>\") == False\n\n\ncheck(Solution().isValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\nThe final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fractionAddition(self, expression: str) -> str:\n```",
        "solutions": "class Solution:\n    def fractionAddition(self, expression: str) -> str:\n        x, y = 0, 6 * 7 * 8 * 9 * 10\n        if expression[0].isdigit():\n            expression = '+' + expression\n        i, n = 0, len(expression)\n        while i < n:\n            sign = -1 if expression[i] == '-' else 1\n            i += 1\n            j = i\n            while j < n and expression[j] not in '+-':\n                j += 1\n            s = expression[i:j]\n            a, b = s.split('/')\n            x += sign * int(a) * y // int(b)\n            i = j\n        z = gcd(x, y)\n        x //= z\n        y //= z\n        return f'{x}/{y}'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(expression = \"-1/2+1/2\") == \"0/1\"\n    assert candidate(expression = \"-1/2+1/2+1/3\") == \"1/3\"\n    assert candidate(expression = \"1/3-1/2\") == \"-1/6\"\n\n\ncheck(Solution().fractionAddition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def validSquare(\n        self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]\n    ) -> bool:\n        def check(a, b, c):\n            (x1, y1), (x2, y2), (x3, y3) = a, b, c\n            d1 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)\n            d2 = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3)\n            d3 = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3)\n            return any(\n                [\n                    d1 == d2 and d1 + d2 == d3 and d1,\n                    d2 == d3 and d2 + d3 == d1 and d2,\n                    d1 == d3 and d1 + d3 == d2 and d1,\n                ]\n            )\n\n        return (\n            check(p1, p2, p3)\n            and check(p2, p3, p4)\n            and check(p1, p3, p4)\n            and check(p1, p2, p4)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]) == False\n    assert candidate(p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]) == True\n\n\ncheck(Solution().validSquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLHS(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        ans = 0\n        counter = Counter(nums)\n        for num in nums:\n            if num + 1 in counter:\n                ans = max(ans, counter[num] + counter[num + 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,2,5,2,3,7]) == 5\n    assert candidate(nums = [1,2,3,4]) == 2\n    assert candidate(nums = [1,1,1,1]) == 0\n\n\ncheck(Solution().findLHS)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\nCount and return the number of maximum integers in the matrix after performing all the operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:\n        for a, b in ops:\n            m = min(m, a)\n            n = min(n, b)\n        return m * n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 3, n = 3, ops = [[2,2],[3,3]]) == 4\n    assert candidate(m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]) == 4\n    assert candidate(m = 3, n = 3, ops = []) == 9\n\n\ncheck(Solution().maxCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true\u00a0if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        flowerbed = [0] + flowerbed + [0]\n        for i in range(1, len(flowerbed) - 1):\n            if sum(flowerbed[i - 1 : i + 2]) == 0:\n                flowerbed[i] = 1\n                n -= 1\n        return n <= 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(flowerbed = [1,0,0,0,1], n = 1) == True\n    assert candidate(flowerbed = [1,0,0,0,1], n = 2) == False\n\n\ncheck(Solution().canPlaceFlowers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\n\n\nNode Representation: Each node in the tree should be represented by its integer value.\n\n\nParentheses for Children: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:\n\nIf a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.\nIf a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.\n\n\n\nOmitting Empty Parentheses: Any empty parentheses pairs (i.e., ()) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.\nIn summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n        def dfs(root):\n            if root is None:\n                return ''\n            if root.left is None and root.right is None:\n                return str(root.val)\n            if root.right is None:\n                return f'{root.val}({dfs(root.left)})'\n            return f'{root.val}({dfs(root.left)})({dfs(root.right)})'\n\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4])) == \"1(2(4))(3)\"\n    assert candidate(root = tree_node([1,2,3,None,4])) == \"1(2()(4))(3)\"\n\n\ncheck(Solution().tree2str)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                k = bisect_left(nums, nums[i] + nums[j], lo=j + 1) - 1\n                ans += k - j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,2,3,4]) == 3\n    assert candidate(nums = [4,2,3,4]) == 4\n\n\ncheck(Solution().triangleNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an array of strings words.\nYou should add a closed pair of bold tag <b> and </b> to wrap the substrings in s that exist in words.\n\nIf two such substrings overlap, you should wrap them together with only one pair of closed bold-tag.\nIf two substrings wrapped by bold tags are consecutive, you should combine them.\n\nReturn s after adding the bold tags.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addBoldTag(self, s: str, words: List[str]) -> str:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children = [None] * 128\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c)\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n\nclass Solution:\n    def addBoldTag(self, s: str, words: List[str]) -> str:\n        trie = Trie()\n        for w in words:\n            trie.insert(w)\n        n = len(s)\n        pairs = []\n        for i in range(n):\n            node = trie\n            for j in range(i, n):\n                idx = ord(s[j])\n                if node.children[idx] is None:\n                    break\n                node = node.children[idx]\n                if node.is_end:\n                    pairs.append([i, j])\n        if not pairs:\n            return s\n        st, ed = pairs[0]\n        t = []\n        for a, b in pairs[1:]:\n            if ed + 1 < a:\n                t.append([st, ed])\n                st, ed = a, b\n            else:\n                ed = max(ed, b)\n        t.append([st, ed])\n\n        ans = []\n        i = j = 0\n        while i < n:\n            if j == len(t):\n                ans.append(s[i:])\n                break\n            st, ed = t[j]\n            if i < st:\n                ans.append(s[i:st])\n            ans.append('<b>')\n            ans.append(s[st : ed + 1])\n            ans.append('</b>')\n            j += 1\n            i = ed + 1\n\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcxyz123\", words = [\"abc\",\"123\"]) == \"<b>abc</b>xyz<b>123</b>\"\n    assert candidate(s = \"aaabbb\", words = [\"aa\",\"b\"]) == \"<b>aaabbb</b>\"\n\n\ncheck(Solution().addBoldTag)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def mergeTrees(\n        self, root1: Optional[TreeNode], root2: Optional[TreeNode]\n    ) -> Optional[TreeNode]:\n        if root1 is None:\n            return root2\n        if root2 is None:\n            return root1\n        node = TreeNode(root1.val + root2.val)\n        node.left = self.mergeTrees(root1.left, root2.left)\n        node.right = self.mergeTrees(root1.right, root2.right)\n        return node\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root1 = tree_node([1,3,2,5]), root2 = tree_node([2,1,3,None,4,None,7])), tree_node([3,4,5,5,4,None,7]))\n    assert is_same_tree(candidate(root1 = tree_node([1]), root2 = tree_node([1,2])), tree_node([2,2]))\n\n\ncheck(Solution().mergeTrees)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label.\nReturn the minimum number of CPU intervals required to complete all tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n```",
        "solutions": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        cnt = Counter(tasks)\n        x = max(cnt.values())\n        s = sum(v == x for v in cnt.values())\n        return max(len(tasks), (x - 1) * (n + 1) + s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2) == 8\n    assert candidate(tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0) == 6\n    assert candidate(tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2) == 16\n\n\ncheck(Solution().leastInterval)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:\n\nGiven the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\ncur's original left subtree should be the left subtree of the new left subtree root.\ncur's original right subtree should be the right subtree of the new right subtree root.\nIf depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def addOneRow(\n        self, root: Optional[TreeNode], val: int, depth: int\n    ) -> Optional[TreeNode]:\n        def dfs(root, d):\n            if root is None:\n                return\n            if d == depth - 1:\n                root.left = TreeNode(val, root.left, None)\n                root.right = TreeNode(val, None, root.right)\n                return\n            dfs(root.left, d + 1)\n            dfs(root.right, d + 1)\n\n        if depth == 1:\n            return TreeNode(val, root)\n        dfs(root, 1)\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([4,2,6,3,1,5]), val = 1, depth = 2), tree_node([4,1,1,2,None,None,6,3,1,5]))\n    assert is_same_tree(candidate(root = tree_node([4,2,None,3,1]), val = 1, depth = 3), tree_node([4,2,None,1,1,3,None,None,1]))\n\n\ncheck(Solution().addOneRow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, find three numbers whose product is maximum and return the maximum product.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        a = nums[-1] * nums[-2] * nums[-3]\n        b = nums[-1] * nums[0] * nums[1]\n        return max(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 6\n    assert candidate(nums = [1,2,3,4]) == 24\n    assert candidate(nums = [-1,-2,-3]) == -6\n\n\ncheck(Solution().maximumProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFor an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * k\n        s = [0] * (k + 2)\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[j] = (s[j + 1] - s[max(0, j - (i - 1))]) % mod\n            for j in range(1, k + 2):\n                s[j] = (s[j - 1] + f[j - 1]) % mod\n        return f[k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 0) == 1\n    assert candidate(n = 3, k = 1) == 2\n\n\ncheck(Solution().kInversePairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\nYou will start on the 1st day and you cannot take two or more courses simultaneously.\nReturn the maximum number of courses that you can take.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        s = 0\n        for duration, last in courses:\n            heappush(pq, -duration)\n            s += duration\n            while s > last:\n                s += heappop(pq)\n        return len(pq)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(courses = [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]) == 3\n    assert candidate(courses = [[1,2]]) == 1\n    assert candidate(courses = [[3,2],[4,3]]) == 0\n\n\ncheck(Solution().scheduleCourse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have k lists of sorted integers in non-decreasing\u00a0order. Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        t = [(x, i) for i, v in enumerate(nums) for x in v]\n        t.sort()\n        cnt = Counter()\n        ans = [-inf, inf]\n        j = 0\n        for i, (b, v) in enumerate(t):\n            cnt[v] += 1\n            while len(cnt) == len(nums):\n                a = t[j][0]\n                x = b - a - (ans[1] - ans[0])\n                if x < 0 or (x == 0 and a < ans[0]):\n                    ans = [a, b]\n                w = t[j][1]\n                cnt[w] -= 1\n                if cnt[w] == 0:\n                    cnt.pop(w)\n                j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]) == [20,24]\n    assert candidate(nums = [[1,2,3],[1,2,3],[1,2,3]]) == [1,1]\n\n\ncheck(Solution().smallestRange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def judgeSquareSum(self, c: int) -> bool:\n```",
        "solutions": "class Solution:\n    def judgeSquareSum(self, c: int) -> bool:\n        a, b = 0, int(sqrt(c))\n        while a <= b:\n            s = a**2 + b**2\n            if s == c:\n                return True\n            if s < c:\n                a += 1\n            else:\n                b -= 1\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(c = 5) == True\n    assert candidate(c = 3) == False\n\n\ncheck(Solution().judgeSquareSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\nYou are given an integer n. There is originally an array consisting of n integers from 1 to n in ascending order, return the number of derangements it can generate. Since the answer may be huge, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDerangement(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def findDerangement(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * n\n        for i in range(2, n + 1):\n            f[i] = (i - 1) * (f[i - 1] + f[i - 2]) % mod\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 2\n    assert candidate(n = 2) == 1\n\n\ncheck(Solution().findDerangement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\nA function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n        ans = [0] * n\n        stk = []\n        curr = -1\n        for log in logs:\n            t = log.split(':')\n            fid = int(t[0])\n            ts = int(t[2])\n            if t[1] == 'start':\n                if stk:\n                    ans[stk[-1]] += ts - curr\n                stk.append(fid)\n                curr = ts\n            else:\n                fid = stk.pop()\n                ans[fid] += ts - curr + 1\n                curr = ts + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]) == [3,4]\n    assert candidate(n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]) == [8]\n    assert candidate(n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]) == [7,1]\n\n\ncheck(Solution().exclusiveTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:\n        q = deque([root])\n        ans = []\n        while q:\n            s, n = 0, len(q)\n            for _ in range(n):\n                root = q.popleft()\n                s += root.val\n                if root.left:\n                    q.append(root.left)\n                if root.right:\n                    q.append(root.right)\n            ans.append(s / n)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == [3.00000,14.50000,11.00000]\n    assert candidate(root = tree_node([3,9,20,15,7])) == [3.00000,14.50000,11.00000]\n\n\ncheck(Solution().averageOfLevels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def shoppingOffers(\n        self, price: List[int], special: List[List[int]], needs: List[int]\n    ) -> int:\n        def total(price, needs):\n            return sum(price[i] * needs[i] for i in range(len(needs)))\n\n        ans = total(price, needs)\n        t = []\n        for offer in special:\n            t.clear()\n            for j in range(len(needs)):\n                if offer[j] > needs[j]:\n                    t.clear()\n                    break\n                t.append(needs[j] - offer[j])\n            if t:\n                ans = min(ans, offer[-1] + self.shoppingOffers(price, special, t))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]) == 14\n    assert candidate(price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]) == 11\n\n\ncheck(Solution().shoppingOffers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\n\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nIn addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\nGiven a string s consisting of digits and '*' characters, return the number of ways to decode it.\nSince the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n\n        # dp[i - 2], dp[i - 1], dp[i]\n        a, b, c = 0, 1, 0\n        for i in range(1, n + 1):\n            # 1 digit\n            if s[i - 1] == \"*\":\n                c = 9 * b % mod\n            elif s[i - 1] != \"0\":\n                c = b\n            else:\n                c = 0\n\n            # 2 digits\n            if i > 1:\n                if s[i - 2] == \"*\" and s[i - 1] == \"*\":\n                    c = (c + 15 * a) % mod\n                elif s[i - 2] == \"*\":\n                    if s[i - 1] > \"6\":\n                        c = (c + a) % mod\n                    else:\n                        c = (c + 2 * a) % mod\n                elif s[i - 1] == \"*\":\n                    if s[i - 2] == \"1\":\n                        c = (c + 9 * a) % mod\n                    elif s[i - 2] == \"2\":\n                        c = (c + 6 * a) % mod\n                elif (\n                    s[i - 2] != \"0\"\n                    and (ord(s[i - 2]) - ord(\"0\")) * 10 + ord(s[i - 1]) - ord(\"0\") <= 26\n                ):\n                    c = (c + a) % mod\n\n            a, b = b, c\n\n        return c\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"*\") == 9\n    assert candidate(s = \"1*\") == 18\n    assert candidate(s = \"2*\") == 15\n\n\ncheck(Solution().numDecodings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSolve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def solveEquation(self, equation: str) -> str:\n```",
        "solutions": "class Solution:\n    def solveEquation(self, equation: str) -> str:\n        def f(s):\n            x = y = 0\n            if s[0] != '-':\n                s = '+' + s\n            i, n = 0, len(s)\n            while i < n:\n                sign = 1 if s[i] == '+' else -1\n                i += 1\n                j = i\n                while j < n and s[j] not in '+-':\n                    j += 1\n                v = s[i:j]\n                if v[-1] == 'x':\n                    x += sign * (int(v[:-1]) if len(v) > 1 else 1)\n                else:\n                    y += sign * int(v)\n                i = j\n            return x, y\n\n        a, b = equation.split('=')\n        x1, y1 = f(a)\n        x2, y2 = f(b)\n        if x1 == x2:\n            return 'Infinite solutions' if y1 == y2 else 'No solution'\n        return f'x={(y2 - y1) // (x1 - x2)}'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(equation = \"x+5-3+x=6+x-2\") == \"x=2\"\n    assert candidate(equation = \"x=x\") == \"Infinite solutions\"\n    assert candidate(equation = \"2x=x\") == \"x=0\"\n\n\ncheck(Solution().solveEquation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n```",
        "solutions": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        ans = s = sum(nums[:k])\n        for i in range(k, len(nums)):\n            s += nums[i] - nums[i - k]\n            ans = max(ans, s)\n        return ans / k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,12,-5,-6,50,3], k = 4) == 12.75\n    assert candidate(nums = [5], k = 1) == 5.00000\n\n\ncheck(Solution().findMaxAverage)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\nYou are given an integer array nums representing the data status of this set after the error.\nFind the number that occurs twice and the number that is missing and return them in the form of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        s1 = (1 + n) * n // 2\n        s2 = sum(set(nums))\n        s = sum(nums)\n        return [s - s2, s1 - s2]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,4]) == [2,3]\n    assert candidate(nums = [1,1]) == [1,2]\n\n\ncheck(Solution().findErrorNums)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        ans, n = 0, len(s)\n        for k in range(n * 2 - 1):\n            i, j = k // 2, (k + 1) // 2\n            while ~i and j < n and s[i] == s[j]:\n                ans += 1\n                i, j = i - 1, j + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\") == 3\n    assert candidate(s = \"aaa\") == 6\n\n\ncheck(Solution().countSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root \"help\" is followed by the word \"ful\", we can form a derivative \"helpful\".\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.\nReturn the sentence after the replacement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children: List[Trie | None] = [None] * 26\n        self.ref: int = -1\n\n    def insert(self, w: str, i: int):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.ref = i\n\n    def search(self, w: str) -> int:\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if node.children[idx] is None:\n                return -1\n            node = node.children[idx]\n            if node.ref != -1:\n                return node.ref\n        return -1\n\n\nclass Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        trie = Trie()\n        for i, w in enumerate(dictionary):\n            trie.insert(w, i)\n        ans = []\n        for w in sentence.split():\n            idx = trie.search(w)\n            ans.append(dictionary[idx] if idx != -1 else w)\n        return \" \".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\") == \"the cat was rat by the bat\"\n    assert candidate(dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\") == \"a a b c\"\n\n\ncheck(Solution().replaceWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn the world of Dota2, there are two parties: the Radiant and the Dire.\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\n\nBan one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\nAnnounce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n```",
        "solutions": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        qr = deque()\n        qd = deque()\n        for i, c in enumerate(senate):\n            if c == \"R\":\n                qr.append(i)\n            else:\n                qd.append(i)\n        n = len(senate)\n        while qr and qd:\n            if qr[0] < qd[0]:\n                qr.append(qr[0] + n)\n            else:\n                qd.append(qd[0] + n)\n            qr.popleft()\n            qd.popleft()\n        return \"Radiant\" if qr else \"Dire\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(senate = \"RD\") == \"Radiant\"\n    assert candidate(senate = \"RDD\") == \"Dire\"\n\n\ncheck(Solution().predictPartyVictory)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nImagine you have a special keyboard with the following keys:\n\nA: Print one 'A' on the screen.\nCtrl-A: Select the whole screen.\nCtrl-C: Copy selection to buffer.\nCtrl-V: Print buffer on screen appending it after what has already been printed.\n\nGiven an integer n, return the maximum number of 'A' you can print on the screen with at most n presses on the keys.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxA(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxA(self, n: int) -> int:\n        dp = list(range(n + 1))\n        for i in range(3, n + 1):\n            for j in range(2, i - 1):\n                dp[i] = max(dp[i], dp[j - 1] * (i - j))\n        return dp[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 3\n    assert candidate(n = 7) == 9\n\n\ncheck(Solution().maxA)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:\n        def dfs(root):\n            if root is None:\n                return False\n            if k - root.val in vis:\n                return True\n            vis.add(root.val)\n            return dfs(root.left) or dfs(root.right)\n\n        vis = set()\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,3,6,2,4,None,7]), k = 9) == True\n    assert candidate(root = tree_node([5,3,6,2,4,None,7]), k = 28) == False\n\n\ncheck(Solution().findTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\n\nCreate a root node whose value is the maximum value in nums.\nRecursively build the left subtree on the subarray prefix to the left of the maximum value.\nRecursively build the right subtree on the subarray suffix to the right of the maximum value.\n\nReturn the maximum binary tree built from nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:\n        def dfs(nums):\n            if not nums:\n                return None\n            val = max(nums)\n            i = nums.index(val)\n            root = TreeNode(val)\n            root.left = dfs(nums[:i])\n            root.right = dfs(nums[i + 1 :])\n            return root\n\n        return dfs(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(nums = [3,2,1,6,0,5]), tree_node([6,3,5,None,2,0,None,None,1]))\n    assert is_same_tree(candidate(nums = [3,2,1]), tree_node([3,None,2,None,1]))\n\n\ncheck(Solution().constructMaximumBinaryTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array coins (1-indexed) of length n and an integer maxJump. You can jump to any index i of the array coins if coins[i] != -1 and you have to pay coins[i] when you visit index i. In addition to that, if you are currently at index i, you can only jump to any index i + k where i + k <= n and k is a value in the range [1, maxJump].\nYou are initially positioned at index 1 (coins[1] is not -1). You want to find the path that reaches index n with the minimum cost.\nReturn an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the lexicographically smallest such path. If it is not possible to reach index n, return an empty array.\nA path p1 = [Pa1, Pa2, ..., Pax] of length x is lexicographically smaller than p2 = [Pb1, Pb2, ..., Pbx] of length y, if and only if at the first j where Paj and Pbj differ, Paj < Pbj; when no such j exists, then x < y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:\n        if coins[-1] == -1:\n            return []\n        n = len(coins)\n        f = [inf] * n\n        f[-1] = coins[-1]\n        for i in range(n - 2, -1, -1):\n            if coins[i] != -1:\n                for j in range(i + 1, min(n, i + maxJump + 1)):\n                    if f[i] > f[j] + coins[i]:\n                        f[i] = f[j] + coins[i]\n        if f[0] == inf:\n            return []\n        ans = []\n        s = f[0]\n        for i in range(n):\n            if f[i] == s:\n                s -= coins[i]\n                ans.append(i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([1,2,4,-1,2], 2) == [1,3,5]\n    assert candidate([1,2,4,-1,2], 1) == []\n\n\ncheck(Solution().cheapestJump)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:\n```",
        "solutions": "class Solution:\n    def judgeCircle(self, moves: str) -> bool:\n        x = y = 0\n        for c in moves:\n            if c == 'R':\n                x += 1\n            elif c == 'L':\n                x -= 1\n            elif c == 'U':\n                y += 1\n            elif c == 'D':\n                y -= 1\n        return x == 0 and y == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(moves = \"UD\") == True\n    assert candidate(moves = \"LL\") == False\n\n\ncheck(Solution().judgeCircle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\nAn integer a is closer to x than an integer b if:\n\n|a - x| < |b - x|, or\n|a - x| == |b - x| and a < b\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:\n        arr.sort(key=lambda v: abs(v - x))\n        return sorted(arr[:k])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,4,5], k = 4, x = 3) == [1,2,3,4]\n    assert candidate(arr = [1,2,3,4,5], k = 4, x = -1) == [1,2,3,4]\n\n\ncheck(Solution().findClosestElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:\n        m, n = len(img), len(img[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                s = cnt = 0\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < m and 0 <= y < n:\n                            cnt += 1\n                            s += img[x][y]\n                ans[i][j] = s // cnt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(img = [[1,1,1],[1,0,1],[1,1,1]]) == [[0, 0, 0],[0, 0, 0], [0, 0, 0]]\n    assert candidate(img = [[100,200,100],[200,50,200],[100,200,100]]) == [[137,141,137],[141,138,141],[137,141,137]]\n\n\ncheck(Solution().imageSmoother)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the maximum width of the given tree.\nThe maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of a 32-bit signed integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        q = deque([(root, 1)])\n        while q:\n            ans = max(ans, q[-1][1] - q[0][1] + 1)\n            for _ in range(len(q)):\n                root, i = q.popleft()\n                if root.left:\n                    q.append((root.left, i << 1))\n                if root.right:\n                    q.append((root.right, i << 1 | 1))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,3,2,5,3,None,9])) == 4\n    assert candidate(root = tree_node([1,3,2,5,None,None,9,6,None,7])) == 7\n    assert candidate(root = tree_node([1,3,2,5])) == 2\n\n\ncheck(Solution().widthOfBinaryTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a strange printer with the following two special properties:\n\nThe printer can only print a sequence of the same character each time.\nAt each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\nGiven a string s, return the minimum number of turns the printer needed to print it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def strangePrinter(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def strangePrinter(self, s: str) -> int:\n        n = len(s)\n        f = [[inf] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            f[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i][j - 1]\n                else:\n                    for k in range(i, j):\n                        f[i][j] = min(f[i][j], f[i][k] + f[k + 1][j])\n        return f[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaabbb\") == 2\n    assert candidate(s = \"aba\") == 2\n\n\ncheck(Solution().strangePrinter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        def is_sorted(nums: List[int]) -> bool:\n            return all(a <= b for a, b in pairwise(nums))\n\n        n = len(nums)\n        for i in range(n - 1):\n            a, b = nums[i], nums[i + 1]\n            if a > b:\n                nums[i] = b\n                if is_sorted(nums):\n                    return True\n                nums[i] = nums[i + 1] = a\n                return is_sorted(nums)\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,3]) == True\n    assert candidate(nums = [4,2,1]) == False\n\n\ncheck(Solution().checkPossibility)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIf the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. You are given an ascending array nums consisting of three-digit integers representing a binary tree with a depth smaller than 5, where for each integer:\n\nThe hundreds digit represents the depth d of this node, where 1 <= d <= 4.\nThe tens digit represents the position p of this node within its level, where 1 <= p <= 8, corresponding to its position in a full binary tree.\nThe units digit represents the value v of this node, where 0 <= v <= 9.\n\nReturn the sum of all paths from the root towards the leaves.\nIt is guaranteed that the given array represents a valid connected binary tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pathSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        def dfs(node, t):\n            if node not in mp:\n                return\n            t += mp[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            nonlocal ans\n            if l not in mp and r not in mp:\n                ans += t\n                return\n            dfs(l, t)\n            dfs(r, t)\n\n        ans = 0\n        mp = {num // 10: num % 10 for num in nums}\n        dfs(11, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [113, 215, 221]) == 12\n    assert candidate(nums = [113, 221]) == 4\n\n\ncheck(Solution().pathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\n\nSuppose this list is answer =\u00a0[a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.\n\nReturn the list answer. If there multiple valid answers, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constructArray(self, n: int, k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def constructArray(self, n: int, k: int) -> List[int]:\n        l, r = 1, n\n        ans = []\n        for i in range(k):\n            if i % 2 == 0:\n                ans.append(l)\n                l += 1\n            else:\n                ans.append(r)\n                r -= 1\n        for i in range(k, n):\n            if k % 2 == 0:\n                ans.append(r)\n                r -= 1\n            else:\n                ans.append(l)\n                l += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 1) == [1, 2, 3]\n    assert candidate(n = 3, k = 2) == [1, 3, 2]\n\n\ncheck(Solution().constructArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nNearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        left, right = 1, m * n\n        while left < right:\n            mid = (left + right) >> 1\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(mid // i, n)\n            if cnt >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 3, n = 3, k = 5) == 3\n    assert candidate(m = 2, n = 3, k = 6) == 6\n\n\ncheck(Solution().findKthNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def trimBST(self, root: Optional[TreeNode], low: int, high: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def trimBST(\n        self, root: Optional[TreeNode], low: int, high: int\n    ) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return root\n            if root.val > high:\n                return dfs(root.left)\n            if root.val < low:\n                return dfs(root.right)\n            root.left = dfs(root.left)\n            root.right = dfs(root.right)\n            return root\n\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([1,0,2]), low = 1, high = 2), tree_node([1,None,2]))\n    assert is_same_tree(candidate(root = tree_node([3,0,4,None,2,None,None,1]), low = 1, high = 3), tree_node([3,2,None,1]))\n\n\ncheck(Solution().trimBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer num. You can swap two digits at most once to get the maximum valued number.\nReturn the maximum valued number you can get.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSwap(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        s = list(str(num))\n        n = len(s)\n        d = list(range(n))\n        for i in range(n - 2, -1, -1):\n            if s[i] <= s[d[i + 1]]:\n                d[i] = d[i + 1]\n        for i, j in enumerate(d):\n            if s[i] < s[j]:\n                s[i], s[j] = s[j], s[i]\n                break\n        return int(''.join(s))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 2736) == 7236\n    assert candidate(num = 9973) == 9973\n\n\ncheck(Solution().maximumSwap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\u00a0root.val = min(root.left.val, root.right.val)\u00a0always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\nIf no such second minimum value exists, output -1 instead.\n\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root:\n                dfs(root.left)\n                dfs(root.right)\n                nonlocal ans, v\n                if root.val > v:\n                    ans = root.val if ans == -1 else min(ans, root.val)\n\n        ans, v = -1, root.val\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([2,2,5,None,None,5,7])) == 5\n    assert candidate(root = tree_node([2,2,2])) == -1\n\n\ncheck(Solution().findSecondMinimumValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array\u00a0nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [1] * n\n        cnt = [1] * n\n        mx = 0\n        for i in range(n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    if f[i] < f[j] + 1:\n                        f[i] = f[j] + 1\n                        cnt[i] = cnt[j]\n                    elif f[i] == f[j] + 1:\n                        cnt[i] += cnt[j]\n            if mx < f[i]:\n                mx = f[i]\n                ans = cnt[i]\n            elif mx == f[i]:\n                ans += cnt[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,4,7]) == 2\n    assert candidate(nums = [2,2,2,2,2]) == 5\n\n\ncheck(Solution().findNumberOfLIS)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        ans = cnt = 1\n        for i, x in enumerate(nums[1:]):\n            if nums[i] < x:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,4,7]) == 3\n    assert candidate(nums = [2,2,2,2,2]) == 1\n\n\ncheck(Solution().findLengthOfLCIS)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\n\n0 means the cell cannot be walked through.\n1 represents an empty cell that can be walked through.\nA number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\nNote: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:\n        def f(i, j, x, y):\n            return abs(i - x) + abs(j - y)\n\n        def bfs(i, j, x, y):\n            q = [(f(i, j, x, y), i, j)]\n            dist = {i * n + j: 0}\n            while q:\n                _, i, j = heappop(q)\n                step = dist[i * n + j]\n                if (i, j) == (x, y):\n                    return step\n                for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                    c, d = i + a, j + b\n                    if 0 <= c < m and 0 <= d < n and forest[c][d] > 0:\n                        if c * n + d not in dist or dist[c * n + d] > step + 1:\n                            dist[c * n + d] = step + 1\n                            heappush(q, (dist[c * n + d] + f(c, d, x, y), c, d))\n            return -1\n\n        m, n = len(forest), len(forest[0])\n        trees = [\n            (forest[i][j], i, j) for i in range(m) for j in range(n) if forest[i][j] > 1\n        ]\n        trees.sort()\n        i = j = 0\n        ans = 0\n        for _, x, y in trees:\n            t = bfs(i, j, x, y)\n            if t == -1:\n                return -1\n            ans += t\n            i, j = x, y\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(forest = [[1,2,3],[0,0,4],[7,6,5]]) == 6\n    assert candidate(forest = [[1,2,3],[0,0,0],[7,6,5]]) == -1\n    assert candidate(forest = [[2,3,4],[0,0,5],[8,7,6]]) == 6\n\n\ncheck(Solution().cutOffTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\nThe following rules define a valid string:\n\nAny left parenthesis '(' must have a corresponding right parenthesis ')'.\nAny right parenthesis ')' must have a corresponding left parenthesis '('.\nLeft parenthesis '(' must go before the corresponding right parenthesis ')'.\n'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\".\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkValidString(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkValidString(self, s: str) -> bool:\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i] = c == '*'\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = (\n                    s[i] in '(*' and s[j] in '*)' and (i + 1 == j or dp[i + 1][j - 1])\n                )\n                dp[i][j] = dp[i][j] or any(\n                    dp[i][k] and dp[k + 1][j] for k in range(i, j)\n                )\n        return dp[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"()\") == True\n    assert candidate(s = \"(*)\") == True\n    assert candidate(s = \"(*))\") == True\n\n\ncheck(Solution().checkValidString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return true if the s can be palindrome after deleting at most one character from it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check(i, j):\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i, j = i + 1, j - 1\n            return True\n\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] != s[j]:\n                return check(i, j - 1) or check(i + 1, j)\n            i, j = i + 1, j - 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aba\") == True\n    assert candidate(s = \"abca\") == True\n    assert candidate(s = \"abc\") == False\n\n\ncheck(Solution().validPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\nYou may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nextClosestTime(self, time: str) -> str:\n```",
        "solutions": "class Solution:\n    def nextClosestTime(self, time: str) -> str:\n        def check(t):\n            h, m = int(t[:2]), int(t[2:])\n            return 0 <= h < 24 and 0 <= m < 60\n\n        def dfs(curr):\n            if len(curr) == 4:\n                if not check(curr):\n                    return\n                nonlocal ans, d\n                p = int(curr[:2]) * 60 + int(curr[2:])\n                if t < p < t + d:\n                    d = p - t\n                    ans = curr[:2] + ':' + curr[2:]\n                return\n            for c in s:\n                dfs(curr + c)\n\n        s = {c for c in time if c != ':'}\n        t = int(time[:2]) * 60 + int(time[3:])\n        d = inf\n        ans = None\n        dfs('')\n        if ans is None:\n            mi = min(int(c) for c in s)\n            ans = f'{mi}{mi}:{mi}{mi}'\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"19:34\") == \"19:39\"\n    assert candidate(\"23:59\") == \"22:22\"\n\n\ncheck(Solution().nextClosestTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\nYou are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\n\nAn integer x.\n\n\t\nRecord a new score of x.\n\n\n'+'.\n\t\nRecord a new score that is the sum of the previous two scores.\n\n\n'D'.\n\t\nRecord a new score that is the double of the previous score.\n\n\n'C'.\n\t\nInvalidate the previous score, removing it from the record.\n\n\n\nReturn the sum of all the scores on the record after applying all the operations.\nThe test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calPoints(self, operations: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def calPoints(self, ops: List[str]) -> int:\n        stk = []\n        for op in ops:\n            if op == '+':\n                stk.append(stk[-1] + stk[-2])\n            elif op == 'D':\n                stk.append(stk[-1] << 1)\n            elif op == 'C':\n                stk.pop()\n            else:\n                stk.append(int(op))\n        return sum(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]) == 30\n    assert candidate(ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]) == 27\n    assert candidate(ops = [\"1\"]) == 1\n\n\ncheck(Solution().calPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(1010))\n        for a, b in edges:\n            if find(a) == find(b):\n                return [a, b]\n            p[find(a)] = find(b)\n        return []\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[1,2],[1,3],[2,3]]) == [2,3]\n    assert candidate(edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]) == [1,4]\n\n\ncheck(Solution().findRedundantConnection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.n = n\n\n    def union(self, a, b):\n        if self.find(a) == self.find(b):\n            return False\n        self.p[self.find(a)] = self.find(b)\n        self.n -= 1\n        return True\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n\nclass Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)\n        p = list(range(n + 1))\n        uf = UnionFind(n + 1)\n        conflict = cycle = None\n        for i, (u, v) in enumerate(edges):\n            if p[v] != v:\n                conflict = i\n            else:\n                p[v] = u\n                if not uf.union(u, v):\n                    cycle = i\n        if conflict is None:\n            return edges[cycle]\n        v = edges[conflict][1]\n        if cycle is not None:\n            return [p[v], v]\n        return edges[conflict]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[1,2],[1,3],[2,3]]) == [2,3]\n    assert candidate(edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]) == [4,1]\n\n\ncheck(Solution().findRedundantDirectedConnection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n```",
        "solutions": "class Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n        m, n = len(a), len(b)\n        ans = ceil(n / m)\n        t = [a] * ans\n        for _ in range(3):\n            if b in ''.join(t):\n                return ans\n            ans += 1\n            t.append(a)\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"abcd\", b = \"cdabcdab\") == 3\n    assert candidate(a = \"a\", b = \"aa\") == 2\n    assert candidate(a = \"a\", b = \"a\") == 1\n    assert candidate(a = \"abc\", b = \"wxyz\") == -1\n\n\ncheck(Solution().repeatedStringMatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\nThe length of the path between two nodes is represented by the number of edges between them.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestUnivaluePath(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return 0\n            left, right = dfs(root.left), dfs(root.right)\n            left = left + 1 if root.left and root.left.val == root.val else 0\n            right = right + 1 if root.right and root.right.val == root.val else 0\n            nonlocal ans\n            ans = max(ans, left + right)\n            return max(left, right)\n\n        ans = 0\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,4,5,1,1,5])) == 2\n    assert candidate(root = tree_node([1,4,5,4,4,5])) == 2\n\n\ncheck(Solution().longestUnivaluePath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n        s = s1 = s2 = s3 = 0\n        mx1 = mx12 = 0\n        idx1, idx12 = 0, ()\n        ans = []\n        for i in range(k * 2, len(nums)):\n            s1 += nums[i - k * 2]\n            s2 += nums[i - k]\n            s3 += nums[i]\n            if i >= k * 3 - 1:\n                if s1 > mx1:\n                    mx1 = s1\n                    idx1 = i - k * 3 + 1\n                if mx1 + s2 > mx12:\n                    mx12 = mx1 + s2\n                    idx12 = (idx1, i - k * 2 + 1)\n                if mx12 + s3 > s:\n                    s = mx12 + s3\n                    ans = [*idx12, i - k + 1]\n                s1 -= nums[i - k * 3 + 1]\n                s2 -= nums[i - k * 2 + 1]\n                s3 -= nums[i - k + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1,2,6,7,5,1], k = 2) == [0,3,5]\n    assert candidate(nums = [1,2,1,2,1,2,1,2,1], k = 2) == [0,2,4]\n\n\ncheck(Solution().maxSumOfThreeSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n```",
        "solutions": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        q = deque([0])\n        ans = 0\n        n = len(target)\n        vis = [False] * (1 << n)\n        vis[0] = True\n        while q:\n            for _ in range(len(q)):\n                state = q.popleft()\n                if state == (1 << n) - 1:\n                    return ans\n                for s in stickers:\n                    nxt = state\n                    cnt = Counter(s)\n                    for i, c in enumerate(target):\n                        if not (nxt & (1 << i)) and cnt[c]:\n                            nxt |= 1 << i\n                            cnt[c] -= 1\n                    if not vis[nxt]:\n                        vis[nxt] = True\n                        q.append(nxt)\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate( stickers = [\"with\",\"example\",\"science\"], target = \"thehat\") == 3\n    assert candidate(stickers = [\"notice\",\"possible\"], target = \"basicbasic\") == -1\n\n\ncheck(Solution().minStickers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words and an integer k, return the k most frequent strings.\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        cnt = Counter(words)\n        return sorted(cnt, key=lambda x: (-cnt[x], x))[:k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2) == [\"i\",\"love\"]\n    assert candidate(words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4) == [\"the\",\"is\",\"sunny\",\"day\"]\n\n\ncheck(Solution().topKFrequent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        prev = -1\n        while n:\n            curr = n & 1\n            if prev == curr:\n                return False\n            prev = curr\n            n >>= 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == True\n    assert candidate(n = 7) == False\n    assert candidate(n = 11) == False\n\n\ncheck(Solution().hasAlternatingBits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nAn island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\nReturn the number of distinct islands.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDistinctIslands(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numDistinctIslands(self, grid: List[List[int]]) -> int:\n        def dfs(i: int, j: int, k: int):\n            grid[i][j] = 0\n            path.append(str(k))\n            dirs = (-1, 0, 1, 0, -1)\n            for h in range(1, 5):\n                x, y = i + dirs[h - 1], j + dirs[h]\n                if 0 <= x < m and 0 <= y < n and grid[x][y]:\n                    dfs(x, y, h)\n            path.append(str(-k))\n\n        paths = set()\n        path = []\n        m, n = len(grid), len(grid[0])\n        for i, row in enumerate(grid):\n            for j, x in enumerate(row):\n                if x:\n                    dfs(i, j, 0)\n                    paths.add(\"\".join(path))\n                    path.clear()\n        return len(paths)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]) == 1\n    assert candidate(grid = [[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]]) == 3\n\n\ncheck(Solution().numDistinctIslands)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        def dfs(i: int, j: int) -> int:\n            if grid[i][j] == 0:\n                return 0\n            ans = 1\n            grid[i][j] = 0\n            dirs = (-1, 0, 1, 0, -1)\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    ans += dfs(x, y)\n            return ans\n\n        m, n = len(grid), len(grid[0])\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]) == 6\n    assert candidate(grid = [[0,0,0,0,0,0,0,0]]) == 0\n\n\ncheck(Solution().maxAreaOfIsland)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\nSubstrings that occur multiple times are counted the number of times they occur.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        for i in range(1, len(t)):\n            ans += min(t[i - 1], t[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"00110011\") == 6\n    assert candidate(s = \"10101\") == 4\n\n\ncheck(Solution().countBinarySubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        degree = cnt.most_common()[0][1]\n        left, right = {}, {}\n        for i, v in enumerate(nums):\n            if v not in left:\n                left[v] = i\n            right[v] = i\n        ans = inf\n        for v in nums:\n            if cnt[v] == degree:\n                t = right[v] - left[v] + 1\n                if ans > t:\n                    ans = t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,3,1]) == 2\n    assert candidate(nums = [1,2,2,3,1,4,2]) == 6\n\n\ncheck(Solution().findShortestSubArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate( nums = [4, 3, 2, 3, 5, 2, 1], k = 4) ==  True\n\n\ncheck(Solution().canPartitionKSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are several squares being dropped onto the X-axis of a 2D plane.\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\nReturn an integer array ans where ans[i] represents the height described above after dropping the ith square.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Node:\n    def __init__(self, l, r):\n        self.left = None\n        self.right = None\n        self.l = l\n        self.r = r\n        self.mid = (l + r) >> 1\n        self.v = 0\n        self.add = 0\n\n\nclass SegmentTree:\n    def __init__(self):\n        self.root = Node(1, int(1e9))\n\n    def modify(self, l, r, v, node=None):\n        if l > r:\n            return\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            node.v = v\n            node.add = v\n            return\n        self.pushdown(node)\n        if l <= node.mid:\n            self.modify(l, r, v, node.left)\n        if r > node.mid:\n            self.modify(l, r, v, node.right)\n        self.pushup(node)\n\n    def query(self, l, r, node=None):\n        if l > r:\n            return 0\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            return node.v\n        self.pushdown(node)\n        v = 0\n        if l <= node.mid:\n            v = max(v, self.query(l, r, node.left))\n        if r > node.mid:\n            v = max(v, self.query(l, r, node.right))\n        return v\n\n    def pushup(self, node):\n        node.v = max(node.left.v, node.right.v)\n\n    def pushdown(self, node):\n        if node.left is None:\n            node.left = Node(node.l, node.mid)\n        if node.right is None:\n            node.right = Node(node.mid + 1, node.r)\n        if node.add:\n            node.left.v = node.add\n            node.right.v = node.add\n            node.left.add = node.add\n            node.right.add = node.add\n            node.add = 0\n\n\nclass Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n        ans = []\n        mx = 0\n        tree = SegmentTree()\n        for l, w in positions:\n            r = l + w - 1\n            h = tree.query(l, r) + w\n            mx = max(mx, h)\n            ans.append(mx)\n            tree.modify(l, r, h)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(positions = [[1,2],[2,3],[6,1]]) == [2,5,5]\n    assert candidate(positions = [[100,100],[200,100]]) == [100,100]\n\n\ncheck(Solution().fallingSquares)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nAn island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).\nReturn the number of distinct islands.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDistinctIslands2(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numDistinctIslands2(self, grid: List[List[int]]) -> int:\n        def dfs(i, j, shape):\n            shape.append([i, j])\n            grid[i][j] = 0\n            for a, b in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:\n                    dfs(x, y, shape)\n\n        def normalize(shape):\n            shapes = [[] for _ in range(8)]\n            for i, j in shape:\n                shapes[0].append([i, j])\n                shapes[1].append([i, -j])\n                shapes[2].append([-i, j])\n                shapes[3].append([-i, -j])\n                shapes[4].append([j, i])\n                shapes[5].append([j, -i])\n                shapes[6].append([-j, i])\n                shapes[7].append([-j, -i])\n            for e in shapes:\n                e.sort()\n                for i in range(len(e) - 1, -1, -1):\n                    e[i][0] -= e[0][0]\n                    e[i][1] -= e[0][1]\n            shapes.sort()\n            return tuple(tuple(e) for e in shapes[0])\n\n        m, n = len(grid), len(grid[0])\n        s = set()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    shape = []\n                    dfs(i, j, shape)\n                    s.add(normalize(shape))\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,1],[0,0,0,1,1]]) == 1\n    assert candidate(grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]) == 1\n\n\ncheck(Solution().numDistinctIslands2)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s1 and\u00a0s2, return the lowest ASCII sum of deleted characters to make two strings equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            f[i][0] = f[i - 1][0] + ord(s1[i - 1])\n        for j in range(1, n + 1):\n            f[0][j] = f[0][j - 1] + ord(s2[j - 1])\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(\n                        f[i - 1][j] + ord(s1[i - 1]), f[i][j - 1] + ord(s2[j - 1])\n                    )\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"sea\", s2 = \"eat\") == 231\n    assert candidate(s1 = \"delete\", s2 = \"leet\") == 403\n\n\ncheck(Solution().minimumDeleteSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        ans, s, j = 0, 1, 0\n        for i, v in enumerate(nums):\n            s *= v\n            while j <= i and s >= k:\n                s //= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,5,2,6], k = 100) == 8\n    assert candidate(nums = [1,2,3], k = 0) == 0\n\n\ncheck(Solution().numSubarrayProductLessThanK)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe have two special characters:\n\nThe first character can be represented by one bit 0.\nThe second character can be represented by two bits (10 or 11).\n\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n        i, n = 0, len(bits)\n        while i < n - 1:\n            i += bits[i] + 1\n        return i == n - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bits = [1,1,1,0]) == False\n\n\ncheck(Solution().isOneBitCharacter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                    ans = max(ans, f[i][j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]) == 3\n    assert candidate(nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]) == 5\n\n\ncheck(Solution().findLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestWord(self, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        cnt, ans = 0, ''\n        s = set(words)\n        for w in s:\n            n = len(w)\n            if all(w[:i] in s for i in range(1, n)):\n                if cnt < n:\n                    cnt, ans = n, w\n                elif cnt == n and w < ans:\n                    ans = w\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]) == \"world\"\n    assert candidate(words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == \"apple\"\n\n\ncheck(Solution().longestWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.\nIn C++, there are two types of comments, line comments, and block comments.\n\nThe string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\nThe string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others.\n\nFor example, if the string \"//\" occurs in a block comment, it is ignored.\nSimilarly, if the string \"/*\" occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\nThere will be no control characters, single quote, or double quote characters.\n\nFor example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.\n\nAlso, nothing else such as defines or macros will interfere with the comments.\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\nAfter removing the comments from the source code, return the source code in the same format.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n        ans = []\n        t = []\n        block_comment = False\n        for s in source:\n            i, m = 0, len(s)\n            while i < m:\n                if block_comment:\n                    if i + 1 < m and s[i : i + 2] == \"*/\":\n                        block_comment = False\n                        i += 1\n                else:\n                    if i + 1 < m and s[i : i + 2] == \"/*\":\n                        block_comment = True\n                        i += 1\n                    elif i + 1 < m and s[i : i + 2] == \"//\":\n                        break\n                    else:\n                        t.append(s[i])\n                i += 1\n            if not block_comment and t:\n                ans.append(\"\".join(t))\n                t.clear()\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]) == [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n    assert candidate(source = [\"a/*comment\", \"line\", \"more_comment*/b\"]) == [\"ab\"]\n\n\ncheck(Solution().removeComments)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThis question is about implementing a basic elimination algorithm for Candy Crush.\nGiven an m x n integer array board representing the grid of candy where board[i][j] represents the type of candy. A value of board[i][j] == 0 represents that the cell is empty.\nThe given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:\n\nIf three or more candies of the same type are adjacent vertically or horizontally, crush them all at the same time - these positions become empty.\nAfter crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. No new candies will drop outside the top boundary.\nAfter the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.\nIf there does not exist more candies that can be crushed (i.e., the board is stable), then return the current board.\n\nYou need to perform the above rules until the board becomes stable, then return the stable board.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:\n        m, n = len(board), len(board[0])\n        run = True\n        while run:\n            run = False\n            for i in range(m):\n                for j in range(2, n):\n                    if board[i][j] and abs(board[i][j]) == abs(board[i][j - 1]) == abs(\n                        board[i][j - 2]\n                    ):\n                        run = True\n                        board[i][j] = board[i][j - 1] = board[i][j - 2] = -abs(\n                            board[i][j]\n                        )\n            for j in range(n):\n                for i in range(2, m):\n                    if board[i][j] and abs(board[i][j]) == abs(board[i - 1][j]) == abs(\n                        board[i - 2][j]\n                    ):\n                        run = True\n                        board[i][j] = board[i - 1][j] = board[i - 2][j] = -abs(\n                            board[i][j]\n                        )\n            if run:\n                for j in range(n):\n                    k = m - 1\n                    for i in range(m - 1, -1, -1):\n                        if board[i][j] > 0:\n                            board[k][j] = board[i][j]\n                            k -= 1\n                    while k >= 0:\n                        board[k][j] = 0\n                        k -= 1\n        return board\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]\n    assert candidate(board = [[1,3,5,5,2],[3,4,3,3,1],[3,2,4,5,2],[2,4,4,5,5],[1,4,4,1,1]]) == [[1,3,0,0,0],[3,4,0,5,2],[3,2,0,3,1],[2,4,0,5,2],[1,4,3,1,1]]\n\n\ncheck(Solution().candyCrush)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        left, right = 0, sum(nums)\n        for i, x in enumerate(nums):\n            right -= x\n            if left == right:\n                return i\n            left += x\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1, 7, 3, 6, 5, 6]) == 3\n    assert candidate(nums = [1, 2, 3]) == -1\n    assert candidate(nums = [2, 1, -1]) == 0\n\n\ncheck(Solution().pivotIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA self-dividing number is a number that is divisible by every digit it contains.\n\nFor example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\n\nA self-dividing number is not allowed to contain the digit zero.\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right] (both inclusive).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n        return [\n            num\n            for num in range(left, right + 1)\n            if all(i != '0' and num % int(i) == 0 for i in str(num))\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(left = 1, right = 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(left = 47, right = 85) == [48,55,66,77]\n\n\ncheck(Solution().selfDividingNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of a string is obtained by deleting zero or more characters from the string.\nA sequence is palindromic if it is equal to the sequence reversed.\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0] * 4 for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i][ord(c) - ord('a')] = 1\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    if s[i] == s[j] == c:\n                        dp[i][j][k] = 2 + sum(dp[i + 1][j - 1])\n                    elif s[i] == c:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                    elif s[j] == c:\n                        dp[i][j][k] = dp[i + 1][j][k]\n                    else:\n                        dp[i][j][k] = dp[i + 1][j - 1][k]\n        return sum(dp[0][-1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = 'bccb') == 6\n    assert candidate(s = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba') == 104860361\n\n\ncheck(Solution().countPalindromicSubsequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an image represented by an m x n grid of integers image, where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and color. Your task is to perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill:\n\nBegin with the starting pixel and change its color to color.\nPerform the same process for each pixel that is directly adjacent (pixels that share a side with the original pixel, either horizontally or vertically) and shares the same color as the starting pixel.\nKeep repeating this process by checking neighboring pixels of the updated pixels\u00a0and modifying their color if it matches the original color of the starting pixel.\nThe process stops when there are no more adjacent pixels of the original color to update.\n\nReturn the modified image after performing the flood fill.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def floodFill(\n        self, image: List[List[int]], sr: int, sc: int, color: int\n    ) -> List[List[int]]:\n        def dfs(i, j):\n            if (\n                not 0 <= i < m\n                or not 0 <= j < n\n                or image[i][j] != oc\n                or image[i][j] == color\n            ):\n                return\n            image[i][j] = color\n            for a, b in pairwise(dirs):\n                dfs(i + a, j + b)\n\n        dirs = (-1, 0, 1, 0, -1)\n        m, n = len(image), len(image[0])\n        oc = image[sr][sc]\n        dfs(sr, sc)\n        return image\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2) == [[2,2,2],[2,2,0],[2,0,1]]\n    assert candidate(image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0) == [[0,0,0],[0,0,0]]\n\n\ncheck(Solution().floodFill)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe can represent a sentence as an array of words, for example, the sentence \"I am happy with leetcode\" can be represented as arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"].\nGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\nReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\nTwo sentences are similar if:\n\nThey have the same length (i.e., the same number of words)\nsentence1[i] and sentence2[i] are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words a and b are similar, and the words b and c are similar, a and c are not necessarily similar.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areSentencesSimilar(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:\n```",
        "solutions": "class Solution:\n    def areSentencesSimilar(\n        self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]\n    ) -> bool:\n        if len(sentence1) != len(sentence2):\n            return False\n        s = {(a, b) for a, b in similarPairs}\n        return all(\n            a == b or (a, b) in s or (b, a) in s for a, b in zip(sentence1, sentence2)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]) == True\n    assert candidate(sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []) == True\n    assert candidate(sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]) == False\n\n\ncheck(Solution().areSentencesSimilar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe are given an array asteroids of integers representing asteroids in a row.\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stk = []\n        for x in asteroids:\n            if x > 0:\n                stk.append(x)\n            else:\n                while stk and stk[-1] > 0 and stk[-1] < -x:\n                    stk.pop()\n                if stk and stk[-1] == -x:\n                    stk.pop()\n                elif not stk or stk[-1] < 0:\n                    stk.append(x)\n        return stk\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(asteroids = [5,10,-5]) == [5,10]\n    assert candidate(asteroids = [8,-8]) == []\n    assert candidate(asteroids = [10,2,-5]) == [10]\n\n\ncheck(Solution().asteroidCollision)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.\n\nAn expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n(An integer could be positive or negative.)\nA let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\nAn add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\nA mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\nFor this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\nFinally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def evaluate(self, expression: str) -> int:\n```",
        "solutions": "class Solution:\n    def evaluate(self, expression: str) -> int:\n        def parseVar():\n            nonlocal i\n            j = i\n            while i < n and expression[i] not in \" )\":\n                i += 1\n            return expression[j:i]\n\n        def parseInt():\n            nonlocal i\n            sign, v = 1, 0\n            if expression[i] == \"-\":\n                sign = -1\n                i += 1\n            while i < n and expression[i].isdigit():\n                v = v * 10 + int(expression[i])\n                i += 1\n            return sign * v\n\n        def eval():\n            nonlocal i\n            if expression[i] != \"(\":\n                return scope[parseVar()][-1] if expression[i].islower() else parseInt()\n            i += 1\n            if expression[i] == \"l\":\n                i += 4\n                vars = []\n                while 1:\n                    var = parseVar()\n                    if expression[i] == \")\":\n                        ans = scope[var][-1]\n                        break\n                    vars.append(var)\n                    i += 1\n                    scope[var].append(eval())\n                    i += 1\n                    if not expression[i].islower():\n                        ans = eval()\n                        break\n                for v in vars:\n                    scope[v].pop()\n            else:\n                add = expression[i] == \"a\"\n                i += 4 if add else 5\n                a = eval()\n                i += 1\n                b = eval()\n                ans = a + b if add else a * b\n            i += 1\n            return ans\n\n        i, n = 0, len(expression)\n        scope = defaultdict(list)\n        return eval()\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\") == 14\n    assert candidate(expression = \"(let x 3 x 2 x)\") == 2\n    assert candidate(expression = \"(let x 1 y 2 x (add x y) (add x y))\") == 5\n\n\ncheck(Solution().evaluate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe can represent a sentence as an array of words, for example, the sentence \"I am happy with leetcode\" can be represented as arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"].\nGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\nReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\nTwo sentences are similar if:\n\nThey have the same length (i.e., the same number of words)\nsentence1[i] and sentence2[i] are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words a and b are similar, and the words b and c are similar, then\u00a0a and c are similar.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areSentencesSimilarTwo(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:\n```",
        "solutions": "class Solution:\n    def areSentencesSimilarTwo(\n        self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]\n    ) -> bool:\n        if len(sentence1) != len(sentence2):\n            return False\n        n = len(similarPairs)\n        p = list(range(n << 1))\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        words = {}\n        idx = 0\n        for a, b in similarPairs:\n            if a not in words:\n                words[a] = idx\n                idx += 1\n            if b not in words:\n                words[b] = idx\n                idx += 1\n            p[find(words[a])] = find(words[b])\n\n        for i in range(len(sentence1)):\n            if sentence1[i] == sentence2[i]:\n                continue\n            if (\n                sentence1[i] not in words\n                or sentence2[i] not in words\n                or find(words[sentence1[i]]) != find(words[sentence2[i]])\n            ):\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"good\"],[\"fine\",\"good\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]) == True\n    assert candidate(sentence1 = [\"I\",\"love\",\"leetcode\"], sentence2 = [\"I\",\"love\",\"onepiece\"], similarPairs = [[\"manga\",\"onepiece\"],[\"platform\",\"anime\"],[\"leetcode\",\"platform\"],[\"anime\",\"manga\"]]) == True\n    assert candidate(sentence1 = [\"I\",\"love\",\"leetcode\"], sentence2 = [\"I\",\"love\",\"onepiece\"], similarPairs = [[\"manga\",\"hunterXhunter\"],[\"platform\",\"anime\"],[\"leetcode\",\"platform\"],[\"anime\",\"manga\"]]) == False\n\n\ncheck(Solution().areSentencesSimilarTwo)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        s = list(str(n))\n        i = 1\n        while i < len(s) and s[i - 1] <= s[i]:\n            i += 1\n        if i < len(s):\n            while i and s[i - 1] > s[i]:\n                s[i - 1] = str(int(s[i - 1]) - 1)\n                i -= 1\n            i += 1\n            while i < len(s):\n                s[i] = '9'\n                i += 1\n        return int(''.join(s))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 9\n    assert candidate(n = 1234) == 1234\n    assert candidate(n = 332) == 299\n\n\ncheck(Solution().monotoneIncreasingDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        ans = [0] * len(temperatures)\n        stk = []\n        for i, t in enumerate(temperatures):\n            while stk and temperatures[stk[-1]] < t:\n                j = stk.pop()\n                ans[j] = i - j\n            stk.append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(temperatures = [73,74,75,71,69,72,76,73]) == [1,1,4,2,1,1,0,0]\n    assert candidate(temperatures = [30,40,50,60]) == [1,1,1,0]\n    assert candidate(temperatures = [30,60,90]) == [1,1,0]\n\n\ncheck(Solution().dailyTemperatures)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\n\nPick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.\n\nReturn the maximum number of points you can earn by applying the above operation some number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        mx = -inf\n        for num in nums:\n            mx = max(mx, num)\n        total = [0] * (mx + 1)\n        for num in nums:\n            total[num] += num\n        first = total[0]\n        second = max(total[0], total[1])\n        for i in range(2, mx + 1):\n            cur = max(first + total[i], second)\n            first = second\n            second = cur\n        return second\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,2]) == 6\n    assert candidate(nums = [2,2,3,3,3,4]) == 9\n\n\ncheck(Solution().deleteAndEarn)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n\n0 means the cell is empty, so you can pass through,\n1 means the cell contains a cherry that you can pick up and pass through, or\n-1 means the cell contains a thorn that blocks your way.\n\nReturn the maximum number of cherries you can collect by following the rules below:\n\nStarting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\nAfter reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\nWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\nIf there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        f = [[[-inf] * n for _ in range(n)] for _ in range((n << 1) - 1)]\n        f[0][0][0] = grid[0][0]\n        for k in range(1, (n << 1) - 1):\n            for i1 in range(n):\n                for i2 in range(n):\n                    j1, j2 = k - i1, k - i2\n                    if (\n                        not 0 <= j1 < n\n                        or not 0 <= j2 < n\n                        or grid[i1][j1] == -1\n                        or grid[i2][j2] == -1\n                    ):\n                        continue\n                    t = grid[i1][j1]\n                    if i1 != i2:\n                        t += grid[i2][j2]\n                    for x1 in range(i1 - 1, i1 + 1):\n                        for x2 in range(i2 - 1, i2 + 1):\n                            if x1 >= 0 and x2 >= 0:\n                                f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][x1][x2] + t)\n        return max(0, f[-1][-1][-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,-1],[1,0,-1],[1,1,1]]) == 5\n    assert candidate(grid = [[1,1,-1],[1,-1,1],[-1,1,1]]) == 0\n\n\ncheck(Solution().cherryPickup)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the string after replacing every uppercase letter with the same lowercase letter.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def toLowerCase(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def toLowerCase(self, s: str) -> str:\n        return \"\".join([chr(ord(c) | 32) if c.isupper() else c for c in s])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"Hello\") == \"hello\"\n    assert candidate(s = \"here\") == \"here\"\n    assert candidate(s = \"LOVELY\") == \"lovely\"\n\n\ncheck(Solution().toLowerCase)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        INF = 0x3F3F\n        dist = [INF] * n\n        vis = [False] * n\n        g = [[INF] * n for _ in range(n)]\n        for u, v, w in times:\n            g[u - 1][v - 1] = w\n        dist[k - 1] = 0\n        for _ in range(n):\n            t = -1\n            for j in range(n):\n                if not vis[j] and (t == -1 or dist[t] > dist[j]):\n                    t = j\n            vis[t] = True\n            for j in range(n):\n                dist[j] = min(dist[j], dist[t] + g[t][j])\n        ans = max(dist)\n        return -1 if ans == INF else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2) == 2\n    assert candidate(times = [[1,2,1]], n = 2, k = 1) == 1\n    assert candidate(times = [[1,2,1]], n = 2, k = 2) == -1\n\n\ncheck(Solution().networkDelayTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        n = len(cost)\n        f = [0] * (n + 1)\n        for i in range(2, n + 1):\n            f[i] = min(f[i - 2] + cost[i - 2], f[i - 1] + cost[i - 1])\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cost = [10,15,20]) == 15\n    assert candidate(cost = [1,100,1,1,1,100,1,1,100,1]) == 6\n\n\ncheck(Solution().minCostClimbingStairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n        x, y = nlargest(2, nums)\n        return nums.index(x) if x >= 2 * y else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,6,1,0]) == 1\n    assert candidate(nums = [1,2,3,4]) == -1\n\n\ncheck(Solution().dominantIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string licensePlate and an array of strings words, find the shortest completing word in words.\nA completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\nFor example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\nReturn the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n        cnt = Counter(c.lower() for c in licensePlate if c.isalpha())\n        ans = None\n        for w in words:\n            if ans and len(w) >= len(ans):\n                continue\n            t = Counter(w)\n            if all(v <= t[c] for c, v in cnt.items()):\n                ans = w\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]) == \"steps\"\n    assert candidate(licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]) == \"pest\"\n\n\ncheck(Solution().shortestCompletingWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containVirus(self, isInfected: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def containVirus(self, isInfected: List[List[int]]) -> int:\n        def dfs(i, j):\n            vis[i][j] = True\n            areas[-1].append((i, j))\n            for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if isInfected[x][y] == 1 and not vis[x][y]:\n                        dfs(x, y)\n                    elif isInfected[x][y] == 0:\n                        c[-1] += 1\n                        boundaries[-1].add((x, y))\n\n        m, n = len(isInfected), len(isInfected[0])\n        ans = 0\n        while 1:\n            vis = [[False] * n for _ in range(m)]\n            areas = []\n            c = []\n            boundaries = []\n            for i, row in enumerate(isInfected):\n                for j, v in enumerate(row):\n                    if v == 1 and not vis[i][j]:\n                        areas.append([])\n                        boundaries.append(set())\n                        c.append(0)\n                        dfs(i, j)\n            if not areas:\n                break\n            idx = boundaries.index(max(boundaries, key=len))\n            ans += c[idx]\n            for k, area in enumerate(areas):\n                if k == idx:\n                    for i, j in area:\n                        isInfected[i][j] = -1\n                else:\n                    for i, j in area:\n                        for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                            x, y = i + a, j + b\n                            if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 0:\n                                isInfected[x][y] = 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]) == 10\n    assert candidate(isInfected = [[1,1,1],[1,0,1],[1,1,1]]) == 4\n    assert candidate(isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]) == 13\n\n\ncheck(Solution().containVirus)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n integer matrix grid where each entry is only 0 or 1, return the number of corner rectangles.\nA corner rectangle is four distinct 1's on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1's used must be distinct.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCornerRectangles(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countCornerRectangles(self, grid: List[List[int]]) -> int:\n        ans = 0\n        cnt = Counter()\n        n = len(grid[0])\n        for row in grid:\n            for i, c1 in enumerate(row):\n                if c1:\n                    for j in range(i + 1, n):\n                        if row[j]:\n                            ans += cnt[(i, j)]\n                            cnt[(i, j)] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,0,1,0],[0,0,1,0,1],[0,0,0,1,0],[1,0,1,0,1]]) == 1\n    assert candidate(grid = [[1,1,1],[1,1,1],[1,1,1]]) == 9\n    assert candidate(grid = [[1,1,1,1]]) == 0\n\n\ncheck(Solution().countCornerRectangles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n```",
        "solutions": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            s = list(s)\n            for i in range(4):\n                c = s[i]\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = c\n            return res\n\n        if target == '0000':\n            return 0\n        s = set(deadends)\n        if '0000' in s:\n            return -1\n        q = deque([('0000')])\n        s.add('0000')\n        ans = 0\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                p = q.popleft()\n                for t in next(p):\n                    if t == target:\n                        return ans\n                    if t not in s:\n                        q.append(t)\n                        s.add(t)\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\") == 6\n\n\ncheck(Solution().openLock)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\n\nFor example, the correct password is \"345\" and you enter in \"012345\":\n\n\t\nAfter typing 0, the most recent 3 digits is \"0\", which is incorrect.\nAfter typing 1, the most recent 3 digits is \"01\", which is incorrect.\nAfter typing 2, the most recent 3 digits is \"012\", which is incorrect.\nAfter typing 3, the most recent 3 digits is \"123\", which is incorrect.\nAfter typing 4, the most recent 3 digits is \"234\", which is incorrect.\nAfter typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n\n\n\nReturn any string of minimum length that will unlock the safe at some point of entering it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        def dfs(u):\n            for x in range(k):\n                e = u * 10 + x\n                if e not in vis:\n                    vis.add(e)\n                    v = e % mod\n                    dfs(v)\n                    ans.append(str(x))\n\n        mod = 10 ** (n - 1)\n        vis = set()\n        ans = []\n        dfs(0)\n        ans.append(\"0\" * (n - 1))\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, k = 2) == \"10\"\n    assert candidate(n = 2, k = 2) == \"01100\"\n\n\ncheck(Solution().crackSafe)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are standing at position 0 on an infinite number line. There is a destination at position target.\nYou can make some number of moves numMoves so that:\n\nOn each move, you can either go left or right.\nDuring the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.\n\nGiven the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reachNumber(self, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        target = abs(target)\n        s = k = 0\n        while 1:\n            if s >= target and (s - target) % 2 == 0:\n                return k\n            k += 1\n            s += k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 2) == 3\n    assert candidate(target = 3) == 2\n\n\ncheck(Solution().reachNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.\nA containing set is an array nums where each interval from intervals has at least two integers in nums.\n\nFor example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets.\n\nReturn the minimum possible size of a containing set.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        s = e = -1\n        ans = 0\n        for a, b in intervals:\n            if a <= s:\n                continue\n            if a > e:\n                ans += 2\n                s, e = b - 1, b\n            else:\n                ans += 1\n                s, e = e, b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,3],[3,7],[8,9]]) == 5\n    assert candidate(intervals = [[1,3],[1,4],[2,5],[3,5]]) == 3\n    assert candidate(intervals = [[1,2],[2,3],[2,4],[4,5]]) == 5\n\n\ncheck(Solution().intersectionSizeTwo)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of keywords words and a string s, make all appearances of all keywords words[i] in s bold. Any letters between <b> and </b> tags become bold.\nReturn s after adding the bold tags. The returned string should use the least number of tags possible, and the tags should form a valid combination.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def boldWords(self, words: List[str], s: str) -> str:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children = [None] * 128\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c)\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n\nclass Solution:\n    def boldWords(self, words: List[str], s: str) -> str:\n        trie = Trie()\n        for w in words:\n            trie.insert(w)\n        n = len(s)\n        pairs = []\n        for i in range(n):\n            node = trie\n            for j in range(i, n):\n                idx = ord(s[j])\n                if node.children[idx] is None:\n                    break\n                node = node.children[idx]\n                if node.is_end:\n                    pairs.append([i, j])\n        if not pairs:\n            return s\n        st, ed = pairs[0]\n        t = []\n        for a, b in pairs[1:]:\n            if ed + 1 < a:\n                t.append([st, ed])\n                st, ed = a, b\n            else:\n                ed = max(ed, b)\n        t.append([st, ed])\n\n        ans = []\n        i = j = 0\n        while i < n:\n            if j == len(t):\n                ans.append(s[i:])\n                break\n            st, ed = t[j]\n            if i < st:\n                ans.append(s[i:st])\n            ans.append('<b>')\n            ans.append(s[st : ed + 1])\n            ans.append('</b>')\n            j += 1\n            i = ed + 1\n\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"ab\",\"bc\"], s = \"aabcd\") == \"a<b>abc</b>d\"\n    assert candidate(words = [\"ab\",\"cb\"], s = \"aabcd\") == \"a<b>ab</b>cd\"\n\n\ncheck(Solution().boldWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSpecial binary strings are binary strings with the following two properties:\n\nThe number of 0's is equal to the number of 1's.\nEvery prefix of the binary string has at least as many 1's as 0's.\n\nYou are given a special binary string s.\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeLargestSpecial(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def makeLargestSpecial(self, s: str) -> str:\n        if s == '':\n            return ''\n        ans = []\n        cnt = 0\n        i = j = 0\n        while i < len(s):\n            cnt += 1 if s[i] == '1' else -1\n            if cnt == 0:\n                ans.append('1' + self.makeLargestSpecial(s[j + 1 : i]) + '0')\n                j = i + 1\n            i += 1\n        ans.sort(reverse=True)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"11011000\") == \"11100100\"\n    assert candidate(s = \"10\") == \"10\"\n\n\ncheck(Solution().makeLargestSpecial)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\nReturn a list of integers representing the size of these parts.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                ans.append(i - j + 1)\n                j = i + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ababcbacadefegdehijhklij\") == [9,7,8]\n    assert candidate(s = \"eccbbbbdec\") == [10]\n\n\ncheck(Solution().partitionLabels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        dp = [[n] * n for _ in range(n)]\n        for x, y in mines:\n            dp[x][y] = 0\n        for i in range(n):\n            left = right = up = down = 0\n            for j, k in zip(range(n), reversed(range(n))):\n                left = left + 1 if dp[i][j] else 0\n                right = right + 1 if dp[i][k] else 0\n                up = up + 1 if dp[j][i] else 0\n                down = down + 1 if dp[k][i] else 0\n                dp[i][j] = min(dp[i][j], left)\n                dp[i][k] = min(dp[i][k], right)\n                dp[j][i] = min(dp[j][i], up)\n                dp[k][i] = min(dp[k][i], down)\n        return max(max(v) for v in dp)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, mines = [[4,2]]) == 2\n    assert candidate(n = 1, mines = [[0,0]]) == 0\n\n\ncheck(Solution().orderOfLargestPlusSign)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(row) >> 1\n        p = list(range(n))\n        for i in range(0, len(row), 2):\n            a, b = row[i] >> 1, row[i + 1] >> 1\n            p[find(a)] = find(b)\n        return n - sum(i == find(i) for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(row = [0,2,1,3]) == 1\n    assert candidate(row = [3,2,0,1]) == 0\n\n\ncheck(Solution().minSwapsCouples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix, return\u00a0true\u00a0if the matrix is Toeplitz. Otherwise, return false.\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        return all(\n            matrix[i][j] == matrix[i - 1][j - 1]\n            for i in range(1, m)\n            for j in range(1, n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]) == True\n    assert candidate(matrix = [[1,2],[2,2]]) == False\n\n\ncheck(Solution().isToeplitzMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, rearrange the characters of s so that any two adjacent characters are not the same.\nReturn any possible rearrangement of s or return \"\" if not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reorganizeString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = Counter(s)\n        mx = max(cnt.values())\n        if mx > (n + 1) // 2:\n            return ''\n        i = 0\n        ans = [None] * n\n        for k, v in cnt.most_common():\n            while v:\n                ans[i] = k\n                v -= 1\n                i += 2\n                if i >= n:\n                    i = 1\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aab\") == \"aba\"\n    assert candidate(s = \"aaab\") == \"\"\n\n\ncheck(Solution().reorganizeString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array arr.\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        stk = []\n        for v in arr:\n            if not stk or v >= stk[-1]:\n                stk.append(v)\n            else:\n                mx = stk.pop()\n                while stk and stk[-1] > v:\n                    stk.pop()\n                stk.append(mx)\n        return len(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [5,4,3,2,1]) == 1\n    assert candidate(arr = [2,1,3,4,4]) == 4\n\n\ncheck(Solution().maxChunksToSorted)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        mx = ans = 0\n        for i, v in enumerate(arr):\n            mx = max(mx, v)\n            if i == mx:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [4,3,2,1,0]) == 1\n    assert candidate(arr = [1,0,2,3,4]) == 4\n\n\ncheck(Solution().maxChunksToSorted)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n```",
        "solutions": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        s = set(jewels)\n        return sum(c in s for c in stones)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(jewels = \"aA\", stones = \"aAAbbbb\") == 3\n    assert candidate(jewels = \"z\", stones = \"ZZ\") == 0\n\n\ncheck(Solution().numJewelsInStones)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        if root is None or root.val == val:\n            return root\n        return (\n            self.searchBST(root.right, val)\n            if root.val < val\n            else self.searchBST(root.left, val)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([4,2,7,1,3]), val = 2), tree_node([2,1,3]))\n    assert is_same_tree(candidate(root = tree_node([4,2,7,1,3]), val = 5), tree_node([]))\n\n\ncheck(Solution().searchBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\nNotice\u00a0that there may exist\u00a0multiple valid ways for the\u00a0insertion, as long as the tree remains a BST after insertion. You can return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n        def dfs(root):\n            if root is None:\n                return TreeNode(val)\n            if root.val < val:\n                root.right = dfs(root.right)\n            else:\n                root.left = dfs(root.left)\n            return root\n\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([4,2,7,1,3]), val = 5), tree_node([4,2,7,1,3,5]))\n    assert is_same_tree(candidate(root = tree_node([40,20,60,10,30,50,70]), val = 25), tree_node([40,20,60,10,30,50,70,None,None,25]))\n    assert is_same_tree(candidate(root = tree_node([4,2,7,1,3,None,None,None,None,None,None]), val = 5), tree_node([4,2,7,1,3,5]))\n\n\ncheck(Solution().insertIntoBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n        t = [None] * 6\n\n        def gets():\n            for i in range(2):\n                for j in range(3):\n                    t[i * 3 + j] = str(board[i][j])\n            return ''.join(t)\n\n        def setb(s):\n            for i in range(2):\n                for j in range(3):\n                    board[i][j] = int(s[i * 3 + j])\n\n        def f():\n            res = []\n            i, j = next((i, j) for i in range(2) for j in range(3) if board[i][j] == 0)\n            for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                x, y = i + a, j + b\n                if 0 <= x < 2 and 0 <= y < 3:\n                    board[i][j], board[x][y] = board[x][y], board[i][j]\n                    res.append(gets())\n                    board[i][j], board[x][y] = board[x][y], board[i][j]\n            return res\n\n        start = gets()\n        end = \"123450\"\n        if start == end:\n            return 0\n        vis = {start}\n        q = deque([(start)])\n        ans = 0\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                x = q.popleft()\n                setb(x)\n                for y in f():\n                    if y == end:\n                        return ans\n                    if y not in vis:\n                        vis.add(y)\n                        q.append(y)\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[1,2,3],[4,0,5]]) == 1\n    assert candidate(board = [[1,2,3],[5,4,0]]) == -1\n    assert candidate(board = [[4,1,2],[5,0,3]]) == 5\n\n\ncheck(Solution().slidingPuzzle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left if nums[left] == target else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,0,3,5,9,12], target = 9) == 4\n    assert candidate(nums = [-1,0,3,5,9,12], target = 2) == -1\n\n\ncheck(Solution().search)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform start to end.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canTransform(self, start: str, end: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canTransform(self, start: str, end: str) -> bool:\n        n = len(start)\n        i = j = 0\n        while 1:\n            while i < n and start[i] == 'X':\n                i += 1\n            while j < n and end[j] == 'X':\n                j += 1\n            if i >= n and j >= n:\n                return True\n            if i >= n or j >= n or start[i] != end[j]:\n                return False\n            if start[i] == 'L' and i < j:\n                return False\n            if start[i] == 'R' and i > j:\n                return False\n            i, j = i + 1, j + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(start = \"RXXLRXRXL\", end = \"XRLXXRRLX\") == True\n    assert candidate(start = \"X\", end = \"L\") == False\n\n\ncheck(Solution().canTransform)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(grid)\n        p = list(range(n * n))\n        hi = [0] * (n * n)\n        for i, row in enumerate(grid):\n            for j, h in enumerate(row):\n                hi[h] = i * n + j\n        for t in range(n * n):\n            i, j = hi[t] // n, hi[t] % n\n            for a, b in [(0, -1), (0, 1), (1, 0), (-1, 0)]:\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and grid[x][y] <= t:\n                    p[find(x * n + y)] = find(hi[t])\n                if find(0) == find(n * n - 1):\n                    return t\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,2],[1,3]]) == 3\n    assert candidate(grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]) == 16\n\n\ncheck(Solution().swimInWater)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\n\nFor example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.\n\nGiven two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        if n == 1:\n            return 0\n        if k <= (1 << (n - 2)):\n            return self.kthGrammar(n - 1, k)\n        return self.kthGrammar(n - 1, k - (1 << (n - 2))) ^ 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, k = 1) == 0\n    assert candidate(n = 2, k = 1) == 0\n    assert candidate(n = 2, k = 2) == 1\n\n\ncheck(Solution().kthGrammar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n```",
        "solutions": "class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        while tx > sx and ty > sy and tx != ty:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        if tx == sx and ty == sy:\n            return True\n        if tx == sx:\n            return ty > sy and (ty - sy) % tx == 0\n        if ty == sy:\n            return tx > sx and (tx - sx) % ty == 0\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sx = 1, sy = 1, tx = 3, ty = 5) == True\n    assert candidate(sx = 1, sy = 1, tx = 2, ty = 2) == False\n    assert candidate(sx = 1, sy = 1, tx = 1, ty = 1) == True\n\n\ncheck(Solution().reachingPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\nGiven the array answers, return the minimum number of rabbits that could be in the forest.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        counter = Counter(answers)\n        return sum([math.ceil(v / (k + 1)) * (k + 1) for k, v in counter.items()])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(answers = [1,1,2]) == 5\n    assert candidate(answers = [10,10,10]) == 11\n\n\ncheck(Solution().numRabbits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDiffInBST(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDiffInBST(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([4,2,6,1,3])) == 1\n    assert candidate(root = tree_node([1,0,48,None,None,12,49])) == 1\n\n\ncheck(Solution().minDiffInBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n\nThere are no self-edges (graph[u] does not contain u).\nThere are no parallel edges (graph[u] does not contain duplicate values).\nIf v is in graph[u], then u is in graph[v] (the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        def dfs(u, c):\n            color[u] = c\n            for v in graph[u]:\n                if not color[v]:\n                    if not dfs(v, 3 - c):\n                        return False\n                elif color[v] == c:\n                    return False\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        for i in range(n):\n            if not color[i] and not dfs(i, 1):\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[1,2,3],[0,2],[0,1,3],[0,2]]) == False\n    assert candidate(graph = [[1,3],[0,2],[1,3],[0,2]]) == True\n\n\ncheck(Solution().isBipartite)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:\n        h = [(1 / y, 0, j + 1) for j, y in enumerate(arr[1:])]\n        heapify(h)\n        for _ in range(k - 1):\n            _, i, j = heappop(h)\n            if i + 1 < j:\n                heappush(h, (arr[i + 1] / arr[j], i + 1, j))\n        return [arr[h[0][1]], arr[h[0][2]]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,5], k = 3) == [2,5]\n    assert candidate(arr = [1,7], k = 1) == [1,7]\n\n\ncheck(Solution().kthSmallestPrimeFraction)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findCheapestPrice(\n        self, n: int, flights: List[List[int]], src: int, dst: int, k: int\n    ) -> int:\n        INF = 0x3F3F3F3F\n        dist = [INF] * n\n        dist[src] = 0\n        for _ in range(k + 1):\n            backup = dist.copy()\n            for f, t, p in flights:\n                dist[t] = min(dist[t], backup[f] + p)\n        return -1 if dist[dst] == INF else dist[dst]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1) == 700\n    assert candidate(n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1) == 200\n    assert candidate(n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0) == 500\n\n\ncheck(Solution().findCheapestPrice)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\n\n0, 1, and 8 rotate to themselves,\n2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n6 and 9 rotate to each other, and\nthe rest of the numbers do not rotate to any other number and become invalid.\n\nGiven an integer n, return the number of good integers in the range [1, n].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rotatedDigits(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def rotatedDigits(self, n: int) -> int:\n        def check(x):\n            y, t = 0, x\n            k = 1\n            while t:\n                v = t % 10\n                if d[v] == -1:\n                    return False\n                y = d[v] * k + y\n                k *= 10\n                t //= 10\n            return x != y\n\n        d = [0, 1, 5, -1, -1, 2, 9, -1, 8, 6]\n        return sum(check(i) for i in range(1, n + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 4\n    assert candidate(n = 1) == 0\n    assert candidate(n = 2) == 1\n\n\ncheck(Solution().rotatedDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:\n        tx, ty = target\n        return all(abs(tx - x) + abs(ty - y) > abs(tx) + abs(ty) for x, y in ghosts)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ghosts = [[1,0],[0,3]], target = [0,1]) == True\n    assert candidate(ghosts = [[1,0]], target = [2,0]) == False\n    assert candidate(ghosts = [[2,0]], target = [1,0]) == False\n\n\ncheck(Solution().escapeGhosts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n        d = defaultdict(deque)\n        for w in words:\n            d[w[0]].append(w)\n        ans = 0\n        for c in s:\n            for _ in range(len(d[c])):\n                t = d[c].popleft()\n                if len(t) == 1:\n                    ans += 1\n                else:\n                    d[t[1]].append(t[1:])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]) == 3\n    assert candidate(s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]) == 2\n\n\ncheck(Solution().numMatchingSubseq)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.\nHere are the rules of Tic-Tac-Toe:\n\nPlayers take turns placing characters into empty squares ' '.\nThe first player always places 'X' characters, while the second player always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validTicTacToe(self, board: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def validTicTacToe(self, board: List[str]) -> bool:\n        def win(x):\n            for i in range(3):\n                if all(board[i][j] == x for j in range(3)):\n                    return True\n                if all(board[j][i] == x for j in range(3)):\n                    return True\n            if all(board[i][i] == x for i in range(3)):\n                return True\n            return all(board[i][2 - i] == x for i in range(3))\n\n        x = sum(board[i][j] == 'X' for i in range(3) for j in range(3))\n        o = sum(board[i][j] == 'O' for i in range(3) for j in range(3))\n        if x != o and x - 1 != o:\n            return False\n        if win('X') and x - 1 != o:\n            return False\n        return not (win('O') and x != o)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [\"O  \",\"   \",\"   \"]) == False\n    assert candidate(board = [\"XOX\",\" X \",\"   \"]) == False\n    assert candidate(board = [\"XOX\",\"O O\",\"XOX\"]) == True\n\n\ncheck(Solution().validTicTacToe)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:\n        def f(x):\n            cnt = t = 0\n            for v in nums:\n                t = 0 if v > x else t + 1\n                cnt += t\n            return cnt\n\n        return f(right) - f(left - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,4,3], left = 2, right = 3) == 3\n    assert candidate(nums = [2,9,2,5,6], left = 2, right = 8) == 7\n\n\ncheck(Solution().numSubarrayBoundedMax)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.\n\nFor example, if s = \"abcde\", then it will be \"bcdea\" after one shift.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rotateString(self, s: str, goal: str) -> bool:\n```",
        "solutions": "class Solution:\n    def rotateString(self, s: str, goal: str) -> bool:\n        return len(s) == len(goal) and goal in s + s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcde\", goal = \"cdeab\") == True\n    assert candidate(s = \"abcde\", goal = \"abced\") == False\n\n\ncheck(Solution().rotateString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\n\nFor example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\n\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestRotation(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def bestRotation(self, nums: List[int]) -> int:\n        n = len(nums)\n        mx, ans = -1, n\n        d = [0] * n\n        for i, v in enumerate(nums):\n            l, r = (i + 1) % n, (n + i + 1 - v) % n\n            d[l] += 1\n            d[r] -= 1\n        s = 0\n        for k, t in enumerate(d):\n            s += t\n            if s > mx:\n                mx = s\n                ans = k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,1,4,0]) == 3\n    assert candidate(nums = [1,3,0,2,4]) == 0\n\n\ncheck(Solution().bestRotation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe red-green-blue color \"#AABBCC\" can be written as \"#ABC\" in shorthand.\n\nFor example, \"#15c\" is shorthand for the color \"#1155cc\".\n\nThe similarity between the two colors \"#ABCDEF\" and \"#UVWXYZ\" is -(AB - UV)2 - (CD - WX)2 - (EF - YZ)2.\nGiven a string color that follows the format \"#ABCDEF\", return a string represents the color that is most similar to the given color and has a shorthand (i.e., it can be represented as some \"#XYZ\").\nAny answer which has the same highest similarity as the best answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def similarRGB(self, color: str) -> str:\n```",
        "solutions": "class Solution:\n    def similarRGB(self, color: str) -> str:\n        def f(x):\n            y, z = divmod(int(x, 16), 17)\n            if z > 8:\n                y += 1\n            return '{:02x}'.format(17 * y)\n\n        a, b, c = color[1:3], color[3:5], color[5:7]\n        return f'#{f(a)}{f(b)}{f(c)}'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(color = \"#09f166\") == \"#11ee66\"\n    assert candidate(color = \"#4e3fe1\") == \"#5544dd\"\n\n\ncheck(Solution().similarRGB)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n\nFor example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\n\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        a, b = 0, 1\n        for i in range(1, len(nums1)):\n            x, y = a, b\n            if nums1[i - 1] >= nums1[i] or nums2[i - 1] >= nums2[i]:\n                a, b = y, x + 1\n            else:\n                b = y + 1\n                if nums1[i - 1] < nums2[i] and nums2[i - 1] < nums1[i]:\n                    a, b = min(a, y), min(b, x + 1)\n        return min(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,3,5,4], nums2 = [1,2,3,7]) == 1\n    assert candidate(nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]) == 1\n\n\ncheck(Solution().minSwap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        rg = defaultdict(list)\n        indeg = [0] * len(graph)\n        for i, vs in enumerate(graph):\n            for j in vs:\n                rg[j].append(i)\n            indeg[i] = len(vs)\n        q = deque([i for i, v in enumerate(indeg) if v == 0])\n        while q:\n            i = q.popleft()\n            for j in rg[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return [i for i, v in enumerate(indeg) if v == 0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[1,2],[2,3],[5],[0],[5],[],[]]) == [2,4,5,6]\n    assert candidate(graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]) == [4]\n\n\ncheck(Solution().eventualSafeNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n'a' maps to \".-\",\n'b' maps to \"-...\",\n'c' maps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n\nFor example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        codes = [\n            \".-\",\n            \"-...\",\n            \"-.-.\",\n            \"-..\",\n            \".\",\n            \"..-.\",\n            \"--.\",\n            \"....\",\n            \"..\",\n            \".---\",\n            \"-.-\",\n            \".-..\",\n            \"--\",\n            \"-.\",\n            \"---\",\n            \".--.\",\n            \"--.-\",\n            \".-.\",\n            \"...\",\n            \"-\",\n            \"..-\",\n            \"...-\",\n            \".--\",\n            \"-..-\",\n            \"-.--\",\n            \"--..\",\n        ]\n        s = {''.join([codes[ord(c) - ord('a')] for c in word]) for word in words}\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"a\"]) == 1\n\n\ncheck(Solution().uniqueMorseRepresentations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitArraySameAverage(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def splitArraySameAverage(self, nums: List[int]) -> bool:\n        n = len(nums)\n        if n == 1:\n            return False\n        s = sum(nums)\n        for i, v in enumerate(nums):\n            nums[i] = v * n - s\n        m = n >> 1\n        vis = set()\n        for i in range(1, 1 << m):\n            t = sum(v for j, v in enumerate(nums[:m]) if i >> j & 1)\n            if t == 0:\n                return True\n            vis.add(t)\n        for i in range(1, 1 << (n - m)):\n            t = sum(v for j, v in enumerate(nums[m:]) if i >> j & 1)\n            if t == 0 or (i != (1 << (n - m)) - 1 and -t in vis):\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5,6,7,8]) == True\n    assert candidate(nums = [3,1]) == False\n\n\ncheck(Solution().splitArraySameAverage)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\n\nresult[0] is the total number of lines.\nresult[1] is the width of the last line in pixels.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\n        lines, last = 1, 0\n        for w in map(lambda c: widths[ord(c) - ord(\"a\")], s):\n            if last + w <= 100:\n                last += w\n            else:\n                lines += 1\n                last = w\n        return [lines, last]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\") == [3,60]\n    assert candidate(widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\") == [2,4]\n\n\ncheck(Solution().numberOfLines)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\nA city's skyline is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        rmx = [max(row) for row in grid]\n        cmx = [max(col) for col in zip(*grid)]\n        return sum(\n            (min(rmx[i], cmx[j]) - grid[i][j])\n            for i in range(len(grid))\n            for j in range(len(grid[0]))\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]) == 35\n    assert candidate(grid = [[0,0,0],[0,0,0],[0,0,0]]) == 0\n\n\ncheck(Solution().maxIncreaseKeepingSkyline)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n        return len(nums) % 2 == 0 or reduce(xor, nums) == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,2]) == False\n    assert candidate(nums = [0,1]) == True\n    assert candidate(nums = [1,2,3]) == True\n\n\ncheck(Solution().xorGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n```",
        "solutions": "class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n        ans = 0\n        for x1, y1 in points:\n            for x2, y2 in points:\n                for x3, y3 in points:\n                    u1, v1 = x2 - x1, y2 - y1\n                    u2, v2 = x3 - x1, y3 - y1\n                    t = abs(u1 * v2 - u2 * v1) / 2\n                    ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[0,0],[0,1],[1,0],[0,2],[2,0]]) == 2.00000\n    assert candidate(points = [[1,0],[0,0],[0,1]]) == 0.50000\n\n\ncheck(Solution().largestTriangleArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\nA subtree of a node node is node plus every node that is a descendant of node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        root.left = self.pruneTree(root.left)\n        root.right = self.pruneTree(root.right)\n        if root.val == 0 and root.left is None and root.right is None:\n            return None\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([1,None,0,0,1])), tree_node([1,None,0,None,1]))\n    assert is_same_tree(candidate(root = tree_node([1,0,1,0,0,0,1])), tree_node([1,None,1,None,1]))\n    assert is_same_tree(candidate(root = tree_node([1,1,0,1,1,0,1,0])), tree_node([1,1,0,1,1,None,1]))\n\n\ncheck(Solution().pruneTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\n\nFor example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.\n\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        # \u4e00\u6761\u516c\u4ea4\u7ebf\u8def\u6709\u54ea\u4e9b\u516c\u4ea4\u7ad9\n        s = [set(r) for r in routes]\n\n        # \u4e00\u4e2a\u516c\u4ea4\u7ad9\u5728\u54ea\u4e9b\u516c\u4ea4\u7ebf\u8def\u6709\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(routes = [[1,2,7],[3,6,7]], source = 1, target = 6) == 2\n    assert candidate(routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12) == -1\n\n\ncheck(Solution().numBusesToDestination)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\nFor example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\n\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n        def f(i, j):\n            res = []\n            for k in range(1, j - i + 1):\n                l, r = s[i : i + k], s[i + k : j]\n                ok = (l == '0' or not l.startswith('0')) and not r.endswith('0')\n                if ok:\n                    res.append(l + ('.' if k < j - i else '') + r)\n            return res\n\n        n = len(s)\n        return [\n            f'({x}, {y})' for i in range(2, n - 1) for x in f(1, i) for y in f(i, n - 1)\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(123)\") == [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n    assert candidate(s = \"(0123)\") == [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\n    assert candidate(s = \"(00011)\") == [\"(0, 0.011)\",\"(0.001, 1)\"]\n\n\ncheck(Solution().ambiguousCoordinates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def numComponents(self, head: Optional[ListNode], nums: List[int]) -> int:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def numComponents(self, head: Optional[ListNode], nums: List[int]) -> int:\n        ans = 0\n        s = set(nums)\n        while head:\n            while head and head.val not in s:\n                head = head.next\n            ans += head is not None\n            while head and head.val in s:\n                head = head.next\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([0,1,2,3]), nums = [0,1,3]) == 2\n    assert candidate(head = list_node([0,1,2,3,4]), nums = [0,3,1,4]) == 2\n\n\ncheck(Solution().numComponents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYour car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\n\nWhen you get an instruction 'A', your car does the following:\n\n\t\nposition += speed\nspeed *= 2\n\n\nWhen you get an instruction 'R', your car does the following:\n\t\nIf your speed is positive then speed = -1\notherwise speed = 1\n\n\tYour position stays the same.\n\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def racecar(self, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def racecar(self, target: int) -> int:\n        dp = [0] * (target + 1)\n        for i in range(1, target + 1):\n            k = i.bit_length()\n            if i == 2**k - 1:\n                dp[i] = k\n                continue\n            dp[i] = dp[2**k - 1 - i] + k + 1\n            for j in range(k - 1):\n                dp[i] = min(dp[i], dp[i - (2 ** (k - 1) - 2**j)] + k - 1 + j + 2)\n        return dp[target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 3) == 2\n    assert candidate(target = 6) == 5\n\n\ncheck(Solution().racecar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA valid encoding of an array of words is any reference string s and array of indices indices such that:\n\nwords.length == indices.length\nThe reference string s ends with the '#' character.\nFor each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].\n\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n```",
        "solutions": "class Trie:\n    def __init__(self) -> None:\n        self.children = [None] * 26\n\n\nclass Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        root = Trie()\n        for w in words:\n            cur = root\n            for c in w[::-1]:\n                idx = ord(c) - ord(\"a\")\n                if cur.children[idx] == None:\n                    cur.children[idx] = Trie()\n                cur = cur.children[idx]\n        return self.dfs(root, 1)\n\n    def dfs(self, cur: Trie, l: int) -> int:\n        isLeaf, ans = True, 0\n        for i in range(26):\n            if cur.children[i] != None:\n                isLeaf = False\n                ans += self.dfs(cur.children[i], l + 1)\n        if isLeaf:\n            ans += l\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"time\", \"me\", \"bell\"]) == 10\n    assert candidate(words = [\"t\"]) == 2\n\n\ncheck(Solution().minimumLengthEncoding)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        ans = [n] * n\n        pre = -inf\n        for i, ch in enumerate(s):\n            if ch == c:\n                pre = i\n            ans[i] = min(ans[i], i - pre)\n        suf = inf\n        for i in range(n - 1, -1, -1):\n            if s[i] == c:\n                suf = i\n            ans[i] = min(ans[i], suf - i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"loveleetcode\", c = \"e\") == [3,2,1,0,1,0,0,1,2,2,1,0]\n    assert candidate(s = \"aaab\", c = \"b\") == [3,2,1,0]\n\n\ncheck(Solution().shortestToChar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\nAfter flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\nReturn the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n        s = {a for a, b in zip(fronts, backs) if a == b}\n        return min((x for x in chain(fronts, backs) if x not in s), default=0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(fronts = [1,2,4,4,7], backs = [1,3,4,1,3]) == 2\n    assert candidate(fronts = [1], backs = [1]) == 0\n\n\ncheck(Solution().flipgame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\nIf a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word.\n\n\t\nFor example, the word \"apple\" becomes \"applema\".\n\n\nIf a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\n\t\nFor example, the word \"goat\" becomes \"oatgma\".\n\n\nAdd one letter 'a' to the end of each word per its word index in the sentence, starting with 1.\n\t\nFor example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\n\n\n\nReturn the final sentence representing the conversion from sentence to Goat Latin.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def toGoatLatin(self, sentence: str) -> str:\n```",
        "solutions": "class Solution:\n    def toGoatLatin(self, sentence: str) -> str:\n        ans = []\n        for i, word in enumerate(sentence.split()):\n            if word.lower()[0] not in ['a', 'e', 'i', 'o', 'u']:\n                word = word[1:] + word[0]\n            word += 'ma'\n            word += 'a' * (i + 1)\n            ans.append(word)\n        return ' '.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"I speak Goat Latin\") == \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n    assert candidate(sentence = \"The quick brown fox jumped over the lazy dog\") == \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n\n\ncheck(Solution().toGoatLatin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\n\nage[y] <= 0.5 * age[x] + 7\nage[y] > age[x]\nage[y] > 100 && age[x] < 100\n\nOtherwise, x will send a friend request to y.\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\nReturn the total number of friend requests made.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counter = Counter(ages)\n        ans = 0\n        for i in range(1, 121):\n            n1 = counter[i]\n            for j in range(1, 121):\n                n2 = counter[j]\n                if not (j <= 0.5 * i + 7 or j > i or (j > 100 and i < 100)):\n                    ans += n1 * n2\n                    if i == j:\n                        ans -= n2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ages = [16,16]) == 2\n    assert candidate(ages = [16,17,18]) == 2\n    assert candidate(ages = [20,30,100,110,120]) == 3\n\n\ncheck(Solution().numFriendRequests)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\n\ndifficulty[i] and profit[i] are the difficulty and the profit of the ith job, and\nworker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).\n\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\n\nFor example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProfitAssignment(\n        self, difficulty: List[int], profit: List[int], worker: List[int]\n    ) -> int:\n        worker.sort()\n        jobs = sorted(zip(difficulty, profit))\n        ans = mx = i = 0\n        for w in worker:\n            while i < len(jobs) and jobs[i][0] <= w:\n                mx = max(mx, jobs[i][1])\n                i += 1\n            ans += mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]) == 100\n    assert candidate(difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]) == 0\n\n\ncheck(Solution().maxProfitAssignment)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestIsland(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largestIsland(self, grid: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                return\n            p[pa] = pb\n            size[pb] += size[pa]\n\n        n = len(grid)\n        p = list(range(n * n))\n        size = [1] * (n * n)\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v:\n                    for a, b in [[0, -1], [-1, 0]]:\n                        x, y = i + a, j + b\n                        if 0 <= x < n and 0 <= y < n and grid[x][y]:\n                            union(x * n + y, i * n + j)\n        ans = max(size)\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v == 0:\n                    vis = set()\n                    t = 1\n                    for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                        x, y = i + a, j + b\n                        if 0 <= x < n and 0 <= y < n and grid[x][y]:\n                            root = find(x * n + y)\n                            if root not in vis:\n                                vis.add(root)\n                                t += size[root]\n                    ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0],[0,1]]) == 3\n    assert candidate(grid = [[1,1],[1,0]]) == 4\n    assert candidate(grid = [[1,1],[1,1]]) == 4\n\n\ncheck(Solution().largestIsland)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nLet's define a function countUniqueChars(s) that returns the number of unique characters in\u00a0s.\n\nFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\n\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uniqueLetterString(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[c].append(i)\n        ans = 0\n        for v in d.values():\n            v = [-1] + v + [len(s)]\n            for i in range(1, len(v) - 1):\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"LEETCODE\") == 92\n\n\ncheck(Solution().uniqueLetterString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        n <<= 1\n        ans, k = 0, 1\n        while k * (k + 1) <= n:\n            if n % k == 0 and (n // k + 1 - k) % 2 == 0:\n                ans += 1\n            k += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 2\n    assert candidate(n = 9) == 3\n    assert candidate(n = 15) == 4\n\n\ncheck(Solution().consecutiveNumbersSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a string s\u00a0of lowercase letters, these letters form consecutive groups of the same character.\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and\u00a0\"yy\".\nA group is identified by an interval\u00a0[start, end], where\u00a0start\u00a0and\u00a0end\u00a0denote the start and end\u00a0indices (inclusive) of the group. In the above example,\u00a0\"xxxx\"\u00a0has the interval\u00a0[3,6].\nA group is considered\u00a0large\u00a0if it has 3 or more characters.\nReturn\u00a0the intervals of every large group sorted in\u00a0increasing order by start index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largeGroupPositions(self, s: str) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def largeGroupPositions(self, s: str) -> List[List[int]]:\n        i, n = 0, len(s)\n        ans = []\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            if j - i >= 3:\n                ans.append([i, j - 1])\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abbxxxxzzy\") == [[3,6]]\n    assert candidate(s = \"abc\") == []\n    assert candidate(s = \"abcdddeeeeaabbbcd\") == [[3,5],[6,9],[12,14]]\n    assert candidate(s = \"aba\") == []\n\n\ncheck(Solution().largeGroupPositions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\nEmail address:\nAn email address is:\n\nA name consisting of uppercase and lowercase English letters, followed by\nThe '@' symbol, followed by\nThe domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).\n\nTo mask an email:\n\nThe uppercase letters in the name and domain must be converted to lowercase letters.\nThe middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\".\n\nPhone number:\nA phone number is formatted as follows:\n\nThe phone number contains 10-13 digits.\nThe last 10 digits make up the local number.\nThe remaining 0-3 digits, in the beginning, make up the country code.\nSeparation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.\n\nTo mask a phone number:\n\nRemove all separation characters.\nThe masked phone number should have the form:\n\t\n\"***-***-XXXX\" if the country code has 0 digits.\n\"+*-***-***-XXXX\" if the country code has 1 digit.\n\"+**-***-***-XXXX\" if the country code has 2 digits.\n\"+***-***-***-XXXX\" if the country code has 3 digits.\n\n\n\"XXXX\" is the last 4 digits of the local number.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maskPII(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def maskPII(self, s: str) -> str:\n        if s[0].isalpha():\n            s = s.lower()\n            return s[0] + '*****' + s[s.find('@') - 1 :]\n        s = ''.join(c for c in s if c.isdigit())\n        cnt = len(s) - 10\n        suf = '***-***-' + s[-4:]\n        return suf if cnt == 0 else f'+{\"*\" * cnt}-{suf}'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"LeetCode@LeetCode.com\") == \"l*****e@leetcode.com\"\n    assert candidate(s = \"AB@qq.com\") == \"a*****b@qq.com\"\n    assert candidate(s = \"1(234)567-890\") == \"***-***-7890\"\n\n\ncheck(Solution().maskPII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.\n\nFor example, flipping [1,1,0] horizontally results in [0,1,1].\n\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\n\nFor example, inverting [0,1,1] results in [1,0,0].\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:\n        n = len(image)\n        for row in image:\n            i, j = 0, n - 1\n            while i < j:\n                if row[i] == row[j]:\n                    row[i] ^= 1\n                    row[j] ^= 1\n                i, j = i + 1, j - 1\n            if i == j:\n                row[i] ^= 1\n        return image\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(image = [[1,1,0],[1,0,1],[0,0,0]]) == [[1,0,0],[0,1,0],[1,1,1]]\n    assert candidate(image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]) == [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\n\ncheck(Solution().flipAndInvertImage)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\nTo complete the ith replacement operation:\n\nCheck if the substring sources[i] occurs at index indices[i] in the original string s.\nIf it does not occur, do nothing.\nOtherwise if it does occur, replace that substring with targets[i].\n\nFor example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\n\nFor example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap.\n\nReturn the resulting string after performing all replacement operations on s.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findReplaceString(self, s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def findReplaceString(\n        self, s: str, indices: List[int], sources: List[str], targets: List[str]\n    ) -> str:\n        n = len(s)\n        d = [-1] * n\n        for k, (i, src) in enumerate(zip(indices, sources)):\n            if s.startswith(src, i):\n                d[i] = k\n        ans = []\n        i = 0\n        while i < n:\n            if ~d[i]:\n                ans.append(targets[d[i]])\n                i += len(sources[d[i]])\n            else:\n                ans.append(s[i])\n                i += 1\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcd\", indices = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]) == \"eeebffff\"\n    assert candidate(s = \"abcd\", indices = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]) == \"eeecd\"\n\n\ncheck(Solution().findReplaceString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:\n        def dfs1(i: int, fa: int, d: int):\n            ans[0] += d\n            size[i] = 1\n            for j in g[i]:\n                if j != fa:\n                    dfs1(j, i, d + 1)\n                    size[i] += size[j]\n\n        def dfs2(i: int, fa: int, t: int):\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    dfs2(j, i, t - size[j] + n - size[j])\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n\n        ans = [0] * n\n        size = [0] * n\n        dfs1(0, -1, 0)\n        dfs2(0, -1, ans[0])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]) == [8,12,6,10,10,10]\n    assert candidate(n = 1, edges = []) == [0]\n    assert candidate(n = 2, edges = [[1,0]]) == [1,1]\n\n\ncheck(Solution().sumOfDistancesInTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\nReturn the largest possible overlap.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n        n = len(img1)\n        cnt = Counter()\n        for i in range(n):\n            for j in range(n):\n                if img1[i][j]:\n                    for h in range(n):\n                        for k in range(n):\n                            if img2[h][k]:\n                                cnt[(i - h, j - k)] += 1\n        return max(cnt.values()) if cnt else 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]) == 3\n    assert candidate(img1 = [[1]], img2 = [[1]]) == 1\n    assert candidate(img1 = [[0]], img2 = [[0]]) == 0\n\n\ncheck(Solution().largestOverlap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        x1, y1, x2, y2 = rec1\n        x3, y3, x4, y4 = rec2\n        return not (y3 >= y2 or y4 <= y1 or x3 >= x2 or x4 <= x1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rec1 = [0,0,2,2], rec2 = [1,1,3,3]) == True\n    assert candidate(rec1 = [0,0,1,1], rec2 = [1,0,2,1]) == False\n    assert candidate(rec1 = [0,0,1,1], rec2 = [2,2,3,3]) == False\n\n\ncheck(Solution().isRectangleOverlap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\nYou are given a string dominoes representing the initial state where:\n\ndominoes[i] = 'L', if the ith domino has been pushed to the left,\ndominoes[i] = 'R', if the ith domino has been pushed to the right, and\ndominoes[i] = '.', if the ith domino has not been pushed.\n\nReturn a string representing the final state.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n```",
        "solutions": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        q = deque()\n        time = [-1] * n\n        force = defaultdict(list)\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                q.append(i)\n                time[i] = 0\n                force[i].append(f)\n        ans = ['.'] * n\n        while q:\n            i = q.popleft()\n            if len(force[i]) == 1:\n                ans[i] = f = force[i][0]\n                j = i - 1 if f == 'L' else i + 1\n                if 0 <= j < n:\n                    t = time[i]\n                    if time[j] == -1:\n                        q.append(j)\n                        time[j] = t + 1\n                        force[j].append(f)\n                    elif time[j] == t + 1:\n                        force[j].append(f)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dominoes = \"RR.L\") == \"RR.L\"\n    assert candidate(dominoes = \".L.R...LR..L..\") == \"LL.RR.LLRRLL..\"\n\n\ncheck(Solution().pushDominoes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nTwo strings, X and Y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string X.\nFor example, \"tars\"\u00a0and \"rats\"\u00a0are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.\u00a0 Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.\u00a0 Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n, l = len(strs), len(strs[0])\n        p = list(range(n))\n        for i in range(n):\n            for j in range(i + 1, n):\n                if sum(strs[i][k] != strs[j][k] for k in range(l)) <= 2:\n                    p[find(i)] = find(j)\n        return sum(i == find(i) for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"tars\",\"rats\",\"arts\",\"star\"]) == 2\n    assert candidate(strs = [\"omv\",\"ovm\"]) == 1\n\n\ncheck(Solution().numSimilarGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\nGiven a row x col grid of integers, how many 3 x 3 magic square subgrids are there?\nNote: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:\n        def check(i: int, j: int) -> int:\n            if i + 3 > m or j + 3 > n:\n                return 0\n            s = set()\n            row = [0] * 3\n            col = [0] * 3\n            a = b = 0\n            for x in range(i, i + 3):\n                for y in range(j, j + 3):\n                    v = grid[x][y]\n                    if v < 1 or v > 9:\n                        return 0\n                    s.add(v)\n                    row[x - i] += v\n                    col[y - j] += v\n                    if x - i == y - j:\n                        a += v\n                    if x - i == 2 - (y - j):\n                        b += v\n            if len(s) != 9 or a != b:\n                return 0\n            if any(x != a for x in row) or any(x != a for x in col):\n                return 0\n            return 1\n\n        m, n = len(grid), len(grid[0])\n        return sum(check(i, j) for i in range(m) for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]) == 1\n    assert candidate(grid = [[8]]) == 0\n\n\ncheck(Solution().numMagicSquaresInside)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n rooms labeled from 0 to n - 1\u00a0and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(i: int):\n            if i in vis:\n                return\n            vis.add(i)\n            for j in rooms[i]:\n                dfs(j)\n\n        vis = set()\n        dfs(0)\n        return len(vis) == len(rooms)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rooms = [[1],[2],[3],[]]) == True\n    assert candidate(rooms = [[1,3],[3,0,1],[2],[0]]) == False\n\n\ncheck(Solution().canVisitAllRooms)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n\n0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\nf.length >= 3, and\nf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(i):\n            if i == n:\n                return len(ans) > 2\n            x = 0\n            for j in range(i, n):\n                if j > i and num[i] == '0':\n                    break\n                x = x * 10 + int(num[j])\n                if x > 2**31 - 1 or (len(ans) > 2 and x > ans[-2] + ans[-1]):\n                    break\n                if len(ans) < 2 or ans[-2] + ans[-1] == x:\n                    ans.append(x)\n                    if dfs(j + 1):\n                        return True\n                    ans.pop()\n            return False\n\n        n = len(num)\n        ans = []\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"1101111\") == [11,0,11,11]\n    assert candidate(\"0123\") == []\n\n\ncheck(Solution().splitIntoFibonacci)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        i, j, skip1, skip2 = len(s) - 1, len(t) - 1, 0, 0\n        while i >= 0 or j >= 0:\n            while i >= 0:\n                if s[i] == '#':\n                    skip1 += 1\n                    i -= 1\n                elif skip1:\n                    skip1 -= 1\n                    i -= 1\n                else:\n                    break\n            while j >= 0:\n                if t[j] == '#':\n                    skip2 += 1\n                    j -= 1\n                elif skip2:\n                    skip2 -= 1\n                    j -= 1\n                else:\n                    break\n            if i >= 0 and j >= 0:\n                if s[i] != t[j]:\n                    return False\n            elif i >= 0 or j >= 0:\n                return False\n            i, j = i - 1, j - 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ab#c\", t = \"ad#c\") == True\n    assert candidate(s = \"ab##\", t = \"c#d#\") == True\n    assert candidate(s = \"a#c\", t = \"b\") == False\n\n\ncheck(Solution().backspaceCompare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou may recall that an array arr is a mountain array if and only if:\n\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        f = [1] * n\n        g = [1] * n\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                f[i] = f[i - 1] + 1\n        ans = 0\n        for i in range(n - 2, -1, -1):\n            if arr[i] > arr[i + 1]:\n                g[i] = g[i + 1] + 1\n                if f[i] > 1:\n                    ans = max(ans, f[i] + g[i] - 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,1,4,7,3,2,5]) == 5\n    assert candidate(arr = [2,2,2]) == 0\n\n\ncheck(Solution().longestMountain)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\nGiven an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(hand = [1,2,3,6,2,3,4,7,8], groupSize = 3) == True\n    assert candidate(hand = [1,2,3,4,5], groupSize = 4) == False\n\n\ncheck(Solution().isNStraightHand)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        n = len(graph)\n        q = deque()\n        vis = set()\n        for i in range(n):\n            q.append((i, 1 << i))\n            vis.add((i, 1 << i))\n        ans = 0\n        while 1:\n            for _ in range(len(q)):\n                i, st = q.popleft()\n                if st == (1 << n) - 1:\n                    return ans\n                for j in graph[i]:\n                    nst = st | 1 << j\n                    if (j, nst) not in vis:\n                        vis.add((j, nst))\n                        q.append((j, nst))\n            ans += 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[1,2,3],[0],[0],[0]]) == 4\n    assert candidate(graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]) == 4\n\n\ncheck(Solution().shortestPathLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of lowercase English letters and an integer array shifts of the same length.\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\n\nFor example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.\n\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\nReturn the final string after all such shifts to s are applied.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shiftingLetters(self, s: str, shifts: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def shiftingLetters(self, s: str, shifts: List[int]) -> str:\n        n = len(s)\n        d = [0] * (n + 1)\n        for i, c in enumerate(s):\n            v = ord(c) - ord('a')\n            d[i] += v\n            d[i + 1] -= v\n        for i, x in enumerate(shifts):\n            d[0] += x\n            d[i + 1] -= x\n        t = 0\n        ans = []\n        for i in range(n):\n            d[i] %= 26\n            ans.append(ascii_lowercase[d[i]])\n            d[i + 1] += d[i]\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\", shifts = [3,5,9]) == \"rpl\"\n\n\ncheck(Solution().shiftingLetters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0\nReturn that maximum distance to the closest person.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        first = last = None\n        d = 0\n        for i, c in enumerate(seats):\n            if c:\n                if last is not None:\n                    d = max(d, i - last)\n                if first is None:\n                    first = i\n                last = i\n        return max(first, len(seats) - last - 1, d // 2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(seats = [1,0,0,0,1,0,1]) == 2\n    assert candidate(seats = [1,0,0,0]) == 3\n    assert candidate(seats = [0,1]) == 1\n\n\ncheck(Solution().maxDistToClosest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\nCalculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\nReturn the total area. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:\n```",
        "solutions": "class Node:\n    def __init__(self):\n        self.l = self.r = 0\n        self.cnt = self.length = 0\n\n\nclass SegmentTree:\n    def __init__(self, nums):\n        n = len(nums) - 1\n        self.nums = nums\n        self.tr = [Node() for _ in range(n << 2)]\n        self.build(1, 0, n - 1)\n\n    def build(self, u, l, r):\n        self.tr[u].l, self.tr[u].r = l, r\n        if l != r:\n            mid = (l + r) >> 1\n            self.build(u << 1, l, mid)\n            self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, l, r, k):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            self.tr[u].cnt += k\n        else:\n            mid = (self.tr[u].l + self.tr[u].r) >> 1\n            if l <= mid:\n                self.modify(u << 1, l, r, k)\n            if r > mid:\n                self.modify(u << 1 | 1, l, r, k)\n        self.pushup(u)\n\n    def pushup(self, u):\n        if self.tr[u].cnt:\n            self.tr[u].length = self.nums[self.tr[u].r + 1] - self.nums[self.tr[u].l]\n        elif self.tr[u].l == self.tr[u].r:\n            self.tr[u].length = 0\n        else:\n            self.tr[u].length = self.tr[u << 1].length + self.tr[u << 1 | 1].length\n\n    @property\n    def length(self):\n        return self.tr[1].length\n\n\nclass Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:\n        segs = []\n        alls = set()\n        for x1, y1, x2, y2 in rectangles:\n            segs.append((x1, y1, y2, 1))\n            segs.append((x2, y1, y2, -1))\n            alls.update([y1, y2])\n\n        segs.sort()\n        alls = sorted(alls)\n        tree = SegmentTree(alls)\n        m = {v: i for i, v in enumerate(alls)}\n        ans = 0\n        for i, (x, y1, y2, k) in enumerate(segs):\n            if i:\n                ans += tree.length * (x - segs[i - 1][0])\n            tree.modify(1, m[y1], m[y2] - 1, k)\n        ans %= int(1e9 + 7)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]) == 6\n    assert candidate(rectangles = [[0,0,1000000000,1000000000]]) == 49\n\n\ncheck(Solution().rectangleArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:\n        def dfs(i: int):\n            if ans[i] != -1:\n                return\n            ans[i] = i\n            for j in g[i]:\n                dfs(j)\n                if quiet[ans[j]] < quiet[ans[i]]:\n                    ans[i] = ans[j]\n\n        g = defaultdict(list)\n        for a, b in richer:\n            g[b].append(a)\n        n = len(quiet)\n        ans = [-1] * n\n        for i in range(n):\n            dfs(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]) == [5,5,2,5,4,5,6,7]\n    assert candidate(richer = [], quiet = [0]) == [0]\n\n\ncheck(Solution().loudAndRich)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.\nReturn the index of the peak element.\nYour task is to solve it in O(log(n)) time complexity.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        left, right = 1, len(arr) - 2\n        while left < right:\n            mid = (left + right) >> 1\n            if arr[mid] > arr[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [0,1,0]) == 1\n    assert candidate(arr = [0,2,1,0]) == 1\n    assert candidate(arr = [0,10,5,2]) == 1\n\n\ncheck(Solution().peakIndexInMountainArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\nYou are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\nReturn the number of car fleets that will arrive at the destination.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n        idx = sorted(range(len(position)), key=lambda i: position[i])\n        ans = pre = 0\n        for i in idx[::-1]:\n            t = (target - position[i]) / speed[i]\n            if t > pre:\n                ans += 1\n                pre = t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]) == 3\n\n\ncheck(Solution().carFleet)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nStrings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n```",
        "solutions": "class Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n        def next(s):\n            i = 0\n            while s[i] == s2[i]:\n                i += 1\n            res = []\n            for j in range(i + 1, n):\n                if s[j] == s2[i] and s[j] != s2[j]:\n                    res.append(s2[: i + 1] + s[i + 1 : j] + s[i] + s[j + 1 :])\n            return res\n\n        q = deque([s1])\n        vis = {s1}\n        ans, n = 0, len(s1)\n        while 1:\n            for _ in range(len(q)):\n                s = q.popleft()\n                if s == s2:\n                    return ans\n                for nxt in next(s):\n                    if nxt not in vis:\n                        vis.add(nxt)\n                        q.append(nxt)\n            ans += 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"ab\", s2 = \"ba\") == 1\n    assert candidate(s1 = \"abc\", s2 = \"bca\") == 2\n\n\ncheck(Solution().kSimilarity)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:\n\n\"()\" has score 1.\nAB has score A + B, where A and B are balanced parentheses strings.\n(A) has score 2 * A, where A is a balanced parentheses string.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def scoreOfParentheses(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def scoreOfParentheses(self, s: str) -> int:\n        ans = d = 0\n        for i, c in enumerate(s):\n            if c == '(':\n                d += 1\n            else:\n                d -= 1\n                if s[i - 1] == '(':\n                    ans += 1 << d\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate( \"()\") ==  1\n    assert candidate( \"(())\") ==  2\n    assert candidate( \"()()\") ==  2\n    assert candidate( \"(()(()))\") ==  6\n\n\ncheck(Solution().scoreOfParentheses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p\u00a0and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n```",
        "solutions": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n        g = gcd(p, q)\n        p = (p // g) % 2\n        q = (q // g) % 2\n        if p == 1 and q == 1:\n            return 1\n        return 0 if p == 1 else 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(p = 2, q = 1) == 2\n\n\ncheck(Solution().mirrorReflection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\n\nFor example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def buddyStrings(self, s: str, goal: str) -> bool:\n```",
        "solutions": "class Solution:\n    def buddyStrings(self, s: str, goal: str) -> bool:\n        m, n = len(s), len(goal)\n        if m != n:\n            return False\n        cnt1, cnt2 = Counter(s), Counter(goal)\n        if cnt1 != cnt2:\n            return False\n        diff = sum(s[i] != goal[i] for i in range(n))\n        return diff == 2 or (diff == 0 and any(v > 1 for v in cnt1.values()))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ab\", goal = \"ba\") == True\n    assert candidate(s = \"ab\", goal = \"ab\") == False\n    assert candidate(s = \"aa\", goal = \"aa\") == True\n\n\ncheck(Solution().buddyStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAt a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\nNote that you do not have any change in hand at first.\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        five = ten = 0\n        for v in bills:\n            if v == 5:\n                five += 1\n            elif v == 10:\n                ten += 1\n                five -= 1\n            else:\n                if ten:\n                    ten -= 1\n                    five -= 1\n                else:\n                    five -= 3\n            if five < 0:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bills = [5,5,5,10,20]) == True\n    assert candidate(bills = [5,5,10,10,20]) == False\n\n\ncheck(Solution().lemonadeChange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixScore(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def matrixScore(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            if grid[i][0] == 0:\n                for j in range(n):\n                    grid[i][j] ^= 1\n        ans = 0\n        for j in range(n):\n            cnt = sum(grid[i][j] for i in range(m))\n            ans += max(cnt, m - cnt) * (1 << (n - j - 1))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]) == 39\n    assert candidate(grid = [[0]]) == 1\n\n\ncheck(Solution().matrixScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n grid grid where:\n\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        m, n = len(grid), len(grid[0])\n        # \u627e\u8d77\u70b9 (si, sj)\n        si, sj = next((i, j) for i in range(m) for j in range(n) if grid[i][j] == '@')\n        # \u7edf\u8ba1\u94a5\u5319\u6570\u91cf\n        k = sum(v.islower() for row in grid for v in row)\n        dirs = (-1, 0, 1, 0, -1)\n        q = deque([(si, sj, 0)])\n        vis = {(si, sj, 0)}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                i, j, state = q.popleft()\n                # \u627e\u5230\u6240\u6709\u94a5\u5319\uff0c\u8fd4\u56de\u5f53\u524d\u6b65\u6570\n                if state == (1 << k) - 1:\n                    return ans\n\n                # \u5f80\u56db\u4e2a\u65b9\u5411\u641c\u7d22\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    nxt = state\n                    # \u5728\u8fb9\u754c\u8303\u56f4\u5185\n                    if 0 <= x < m and 0 <= y < n:\n                        c = grid[x][y]\n                        # \u662f\u5899\uff0c\u6216\u8005\u662f\u9501\uff0c\u4f46\u6b64\u65f6\u6ca1\u6709\u5bf9\u5e94\u7684\u94a5\u5319\uff0c\u65e0\u6cd5\u901a\u8fc7\n                        if (\n                            c == '#'\n                            or c.isupper()\n                            and (state & (1 << (ord(c) - ord('A')))) == 0\n                        ):\n                            continue\n                        # \u662f\u94a5\u5319\n                        if c.islower():\n                            # \u66f4\u65b0\u72b6\u6001\n                            nxt |= 1 << (ord(c) - ord('a'))\n                        # \u6b64\u72b6\u6001\u672a\u8bbf\u95ee\u8fc7\uff0c\u5165\u961f\n                        if (x, y, nxt) not in vis:\n                            vis.add((x, y, nxt))\n                            q.append((x, y, nxt))\n            # \u6b65\u6570\u52a0\u4e00\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [\"@.a..\",\"###.#\",\"b.A.B\"]) == 8\n    assert candidate(grid = [\"@..aA\",\"..B#.\",\"....b\"]) == 6\n\n\ncheck(Solution().shortestPathAllKeys)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, the depth of each node is the shortest distance to the root.\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\nThe subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:\n        def dfs(root):\n            if root is None:\n                return None, 0\n            l, d1 = dfs(root.left)\n            r, d2 = dfs(root.right)\n            if d1 > d2:\n                return l, d1 + 1\n            if d1 < d2:\n                return r, d2 + 1\n            return root, d1 + 1\n\n        return dfs(root)[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([3,5,1,6,2,0,8,None,None,7,4])), tree_node([2,7,4]))\n    assert is_same_tree(candidate(root = tree_node([1])), tree_node([1]))\n    assert is_same_tree(candidate(root = tree_node([0,1,3,None,2])), tree_node([2]))\n\n\ncheck(Solution().subtreeWithAllDeepest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the smallest prime palindrome greater than or equal to n.\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\n\nFor example, 2, 3, 5, 7, 11, and 13 are all primes.\n\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\n\nFor example, 101 and 12321 are palindromes.\n\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def primePalindrome(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def primePalindrome(self, n: int) -> int:\n        def is_prime(x):\n            if x < 2:\n                return False\n            v = 2\n            while v * v <= x:\n                if x % v == 0:\n                    return False\n                v += 1\n            return True\n\n        def reverse(x):\n            res = 0\n            while x:\n                res = res * 10 + x % 10\n                x //= 10\n            return res\n\n        while 1:\n            if reverse(n) == n and is_prime(n):\n                return n\n            if 10**7 < n < 10**8:\n                n = 10**8\n            n += 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6) == 7\n    assert candidate(n = 8) == 11\n    assert candidate(n = 13) == 101\n\n\ncheck(Solution().primePalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def binaryGap(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        ans, j = 0, -1\n        for i in range(32):\n            if n & 1:\n                if j != -1:\n                    ans = max(ans, i - j)\n                j = i\n            n >>= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 22) == 2\n    assert candidate(n = 8) == 0\n    assert candidate(n = 5) == 2\n\n\ncheck(Solution().binaryGap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true if and only if we can do this so that the resulting number is a power of two.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        def convert(n):\n            cnt = [0] * 10\n            while n:\n                n, v = divmod(n, 10)\n                cnt[v] += 1\n            return cnt\n\n        i, s = 1, convert(n)\n        while i <= 10**9:\n            if convert(i) == s:\n                return True\n            i <<= 1\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == True\n    assert candidate(n = 10) == False\n\n\ncheck(Solution().reorderedPowerOf2)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        nums1.sort()\n        t = sorted((v, i) for i, v in enumerate(nums2))\n        n = len(nums2)\n        ans = [0] * n\n        i, j = 0, n - 1\n        for v in nums1:\n            if v <= t[i][0]:\n                ans[t[j][1]] = v\n                j -= 1\n            else:\n                ans[t[i][1]] = v\n                i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,7,11,15], nums2 = [1,10,4,11]) == [2,11,7,15]\n    assert candidate(nums1 = [12,24,8,32], nums2 = [13,25,32,11]) == [24,32,8,12]\n\n\ncheck(Solution().advantageCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA car travels from a starting position to a destination which is target miles east of the starting position.\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minRefuelStops(\n        self, target: int, startFuel: int, stations: List[List[int]]\n    ) -> int:\n        q = []\n        prev = ans = 0\n        stations.append([target, 0])\n        for a, b in stations:\n            d = a - prev\n            startFuel -= d\n            while startFuel < 0 and q:\n                startFuel -= heappop(q)\n                ans += 1\n            if startFuel < 0:\n                return -1\n            heappush(q, -b)\n            prev = a\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 1, startFuel = 1, stations = []) == 0\n    assert candidate(target = 100, startFuel = 1, stations = [[10,100]]) == -1\n    assert candidate(target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]) == 2\n\n\ncheck(Solution().minRefuelStops)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:\n\n-2: Turn left 90 degrees.\n-1: Turn right 90 degrees.\n1 <= k <= 9: Move forward k units, one unit at a time.\n\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.\nReturn the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25).\nNote:\n\nThere can be an obstacle at (0, 0). If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to (0, 0) due to the obstacle.\nNorth means +Y direction.\nEast means +X direction.\nSouth means -Y direction.\nWest means -X direction.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        dirs = (0, 1, 0, -1, 0)\n        s = {(x, y) for x, y in obstacles}\n        ans = k = 0\n        x = y = 0\n        for c in commands:\n            if c == -2:\n                k = (k + 3) % 4\n            elif c == -1:\n                k = (k + 1) % 4\n            else:\n                for _ in range(c):\n                    nx, ny = x + dirs[k], y + dirs[k + 1]\n                    if (nx, ny) in s:\n                        break\n                    x, y = nx, ny\n                    ans = max(ans, x * x + y * y)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(commands = [4,-1,3], obstacles = []) == 25\n    assert candidate(commands = [4,-1,4,-2,4], obstacles = [[2,4]]) == 65\n    assert candidate(commands = [6,-1,-1,6], obstacles = []) == 36\n\n\ncheck(Solution().robotSim)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slow = fast = head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        return slow\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5])), list_node([3,4,5]))\n    assert is_same_list(candidate(head = list_node([1,2,3,4,5,6])), list_node([4,5,6]))\n\n\ncheck(Solution().middleNode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\nIf the character read is a letter, that letter is written onto the tape.\nIf the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\n\nGiven an integer k, return the kth letter (1-indexed) in the decoded string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decodeAtIndex(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def decodeAtIndex(self, s: str, k: int) -> str:\n        m = 0\n        for c in s:\n            if c.isdigit():\n                m *= int(c)\n            else:\n                m += 1\n        for c in s[::-1]:\n            k %= m\n            if k == 0 and c.isalpha():\n                return c\n            if c.isdigit():\n                m //= int(c)\n            else:\n                m -= 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leet2code3\", k = 10) == \"o\"\n    assert candidate(s = \"ha22\", k = 5) == \"h\"\n    assert candidate(s = \"a2345678999999999999999\", k = 1) == \"a\"\n\n\ncheck(Solution().decodeAtIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n```",
        "solutions": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        ans = 0\n        i, j = 0, len(people) - 1\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(people = [1,2], limit = 3) == 1\n    assert candidate(people = [3,2,2,1], limit = 3) == 3\n    assert candidate(people = [3,5,3,4], limit = 5) == 4\n\n\ncheck(Solution().numRescueBoats)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\nWe view the projection of these cubes onto the xy, yz, and zx planes.\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\nReturn the total area of all three projections.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        xy = sum(v > 0 for row in grid for v in row)\n        yz = sum(max(row) for row in grid)\n        zx = sum(max(col) for col in zip(*grid))\n        return xy + yz + zx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([[1,2],[3,4]]) == 17\n    assert candidate(grid = [[2]]) == 5\n    assert candidate([[1,0],[0,2]]) == 8\n\n\ncheck(Solution().projectionArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a string of single-space separated words where each word consists only of lowercase letters.\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:\n        cnt = Counter(s1.split()) + Counter(s2.split())\n        return [s for s, v in cnt.items() if v == 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"this apple is sweet\", s2 = \"this apple is sour\") == [\"sweet\",\"sour\"]\n    assert candidate(s1 = \"apple apple\", s2 = \"banana\") == [\"banana\"]\n\n\ncheck(Solution().uncommonFromSentences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\nReturn an array of coordinates representing the positions of the grid in the order you visited them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def spiralMatrixIII(\n        self, rows: int, cols: int, rStart: int, cStart: int\n    ) -> List[List[int]]:\n        ans = [[rStart, cStart]]\n        if rows * cols == 1:\n            return ans\n        k = 1\n        while True:\n            for dr, dc, dk in [[0, 1, k], [1, 0, k], [0, -1, k + 1], [-1, 0, k + 1]]:\n                for _ in range(dk):\n                    rStart += dr\n                    cStart += dc\n                    if 0 <= rStart < rows and 0 <= cStart < cols:\n                        ans.append([rStart, cStart])\n                        if len(ans) == rows * cols:\n                            return ans\n            k += 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rows = 1, cols = 4, rStart = 0, cStart = 0) == [[0,0],[0,1],[0,2],[0,3]]\n    assert candidate(rows = 5, cols = 6, rStart = 1, cStart = 4) == [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n\ncheck(Solution().spiralMatrixIII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        def dfs(i, c):\n            color[i] = c\n            for j in g[i]:\n                if color[j] == c:\n                    return False\n                if color[j] == 0 and not dfs(j, 3 - c):\n                    return False\n            return True\n\n        g = defaultdict(list)\n        color = [0] * n\n        for a, b in dislikes:\n            a, b = a - 1, b - 1\n            g[a].append(b)\n            g[b].append(a)\n        return all(c or dfs(i, 1) for i, c in enumerate(color))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, dislikes = [[1,2],[1,3],[2,4]]) == True\n    assert candidate(n = 3, dislikes = [[1,2],[1,3],[2,3]]) == False\n    assert candidate(n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]) == False\n\n\ncheck(Solution().possibleBipartition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        diff = (sum(aliceSizes) - sum(bobSizes)) >> 1\n        s = set(bobSizes)\n        for a in aliceSizes:\n            target = a - diff\n            if target in s:\n                return [a, target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(aliceSizes = [1,1], bobSizes = [2,2]) == [1,2]\n    assert candidate(aliceSizes = [1,2], bobSizes = [2,3]) == [1,2]\n    assert candidate(aliceSizes = [2], bobSizes = [1,3]) == [2,3]\n    assert candidate(aliceSizes = [1,2,5], bobSizes = [2,4]) == [5,4]\n\n\ncheck(Solution().fairCandySwap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\nIf there exist multiple answers, you can return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def constructFromPrePost(\n        self, preorder: List[int], postorder: List[int]\n    ) -> Optional[TreeNode]:\n        def dfs(a: int, b: int, c: int, d: int) -> Optional[TreeNode]:\n            if a > b:\n                return None\n            root = TreeNode(preorder[a])\n            if a == b:\n                return root\n            i = pos[preorder[a + 1]]\n            m = i - c + 1\n            root.left = dfs(a + 1, a + m, c, i)\n            root.right = dfs(a + m + 1, b, i + 1, d - 1)\n            return root\n\n        pos = {x: i for i, x in enumerate(postorder)}\n        return dfs(0, len(preorder) - 1, 0, len(postorder) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]), tree_node([1,2,3,4,5,6,7]))\n\n\ncheck(Solution().constructFromPrePost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        def match(s, t):\n            m1, m2 = [0] * 128, [0] * 128\n            for i, (a, b) in enumerate(zip(s, t), 1):\n                if m1[ord(a)] != m2[ord(b)]:\n                    return False\n                m1[ord(a)] = m2[ord(b)] = i\n            return True\n\n        return [word for word in words if match(word, pattern)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\") == [\"mee\",\"aqq\"]\n\n\ncheck(Solution().findAndReplacePattern)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe width of a sequence is the difference between the maximum and minimum elements in the sequence.\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        nums.sort()\n        ans, p = 0, 1\n        for i, v in enumerate(nums):\n            ans = (ans + (v - nums[-i - 1]) * p) % mod\n            p = (p << 1) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,3]) == 6\n    assert candidate(nums = [2]) == 0\n\n\ncheck(Solution().sumSubseqWidths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\nReturn the total surface area of the resulting shapes.\nNote: The bottom face of each shape counts toward its surface area.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        ans = 0\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v:\n                    ans += 2 + v * 4\n                    if i:\n                        ans -= min(v, grid[i - 1][j]) * 2\n                    if j:\n                        ans -= min(v, grid[i][j - 1]) * 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2],[3,4]]) == 34\n    assert candidate(grid = [[1,1,1],[1,0,1],[1,1,1]]) == 32\n    assert candidate(grid = [[2,2,2],[2,1,2],[2,2,2]]) == 46\n\n\ncheck(Solution().surfaceArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings of the same length words.\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\n\nFor example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\".\n\nA group of special-equivalent strings from words is a non-empty subset of words such that:\n\nEvery pair of strings in the group are special equivalent, and\nThe group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).\n\nReturn the number of groups of special-equivalent strings from words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n        s = {''.join(sorted(word[::2]) + sorted(word[1::2])) for word in words}\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]) == 3\n    assert candidate(words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]) == 3\n\n\ncheck(Solution().numSpecialEquivGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n        asc = all(a <= b for a, b in pairwise(nums))\n        desc = all(a >= b for a, b in pairwise(nums))\n        return asc or desc\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,3]) == True\n    assert candidate(nums = [6,5,4,4]) == True\n    assert candidate(nums = [1,3,2]) == False\n\n\ncheck(Solution().isMonotonic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        def dfs(root):\n            if root is None:\n                return\n            nonlocal prev\n            dfs(root.left)\n            prev.right = root\n            root.left = None\n            prev = root\n            dfs(root.right)\n\n        dummy = prev = TreeNode(right=root)\n        dfs(root)\n        return dummy.right\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([5,3,6,2,4,None,8,1,None,None,None,7,9])), tree_node([1,None,2,None,3,None,4,None,5,None,6,None,7,None,8,None,9]))\n    assert is_same_tree(candidate(root = tree_node([5,1,7])), tree_node([1,None,5,None,7]))\n\n\ncheck(Solution().increasingBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:\n        s = {0}\n        ans = set()\n        for x in arr:\n            s = {x | y for y in s} | {x}\n            ans |= s\n        return len(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [0]) == 1\n    assert candidate(arr = [1,1,2]) == 3\n    assert candidate(arr = [1,2,4]) == 6\n\n\ncheck(Solution().subarrayBitwiseORs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        if k == 1:\n            ans = s\n            for _ in range(len(s) - 1):\n                s = s[1:] + s[0]\n                ans = min(ans, s)\n            return ans\n        return \"\".join(sorted(s))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"cba\", k = 1) == \"acb\"\n    assert candidate(s = \"baaca\", k = 3) == \"aaabc\"\n\n\ncheck(Solution().orderlyQueue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of length n where s[i] is either:\n\n'D' means decreasing, or\n'I' means increasing.\n\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n\nIf s[i] == 'D', then perm[i] > perm[i + 1], and\nIf s[i] == 'I', then perm[i] < perm[i + 1].\n\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numPermsDISequence(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numPermsDISequence(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        f = [[0] * (n + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i, c in enumerate(s, 1):\n            if c == \"D\":\n                for j in range(i + 1):\n                    for k in range(j, i):\n                        f[i][j] = (f[i][j] + f[i - 1][k]) % mod\n            else:\n                for j in range(i + 1):\n                    for k in range(j):\n                        f[i][j] = (f[i][j] + f[i - 1][k]) % mod\n        return sum(f[n][j] for j in range(n + 1)) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"DID\") == 5\n\n\ncheck(Solution().numPermsDISequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\nYou only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\nStarting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\nOnce you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\nGiven the integer array fruits, return the maximum number of fruits you can pick.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, x in enumerate(fruits):\n            cnt[x] += 1\n            while len(cnt) > 2:\n                y = fruits[j]\n                cnt[y] -= 1\n                if cnt[y] == 0:\n                    cnt.pop(y)\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(fruits = [1,2,1]) == 3\n    assert candidate(fruits = [0,1,2,2]) == 3\n    assert candidate(fruits = [1,2,3,2,2]) == 4\n    assert candidate(fruits = [3,3,3,1,2,1,1,2,3,3,4]) == 5\n\n\ncheck(Solution().totalFruit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        n = len(arr)\n        left = [-1] * n\n        right = [n] * n\n        stk = []\n        for i, v in enumerate(arr):\n            while stk and arr[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and arr[stk[-1]] > arr[i]:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        mod = 10**9 + 7\n        return sum((i - left[i]) * (right[i] - i) * v for i, v in enumerate(arr)) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,1,2,4]) == 17\n    assert candidate(arr = [11,81,94,43,3]) == 444\n\n\ncheck(Solution().sumSubarrayMins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k.\nIn one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestRangeI(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestRangeI(self, nums: List[int], k: int) -> int:\n        mx, mi = max(nums), min(nums)\n        return max(0, mx - mi - k * 2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1], k = 0) == 0\n    assert candidate(nums = [0,10], k = 2) == 6\n    assert candidate(nums = [1,3,6], k = 3) == 0\n\n\ncheck(Solution().smallestRangeI)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\n\n\t\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n\n\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\nThe game ends when you reach the square n2.\n\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent\u00a0snake or ladder.\n\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\n\nReturn the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        def get(x):\n            i, j = (x - 1) // n, (x - 1) % n\n            if i & 1:\n                j = n - 1 - j\n            return n - 1 - i, j\n\n        n = len(board)\n        q = deque([1])\n        vis = {1}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                curr = q.popleft()\n                if curr == n * n:\n                    return ans\n                for next in range(curr + 1, min(curr + 7, n * n + 1)):\n                    i, j = get(next)\n                    if board[i][j] != -1:\n                        next = board[i][j]\n                    if next not in vis:\n                        q.append(next)\n                        vis.add(next)\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]) == 4\n    assert candidate(board = [[-1,-1],[-1,3]]) == 1\n\n\ncheck(Solution().snakesAndLadders)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k.\nFor each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after changing the values at each index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = nums[-1] - nums[0]\n        for i in range(1, len(nums)):\n            mi = min(nums[0] + k, nums[i] - k)\n            mx = max(nums[i - 1] + k, nums[-1] - k)\n            ans = min(ans, mx - mi)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1], k = 0) == 0\n    assert candidate(nums = [0,10], k = 2) == 6\n    assert candidate(nums = [1,3,6], k = 3) == 3\n\n\ncheck(Solution().smallestRangeII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\nDuring each player's turn, they must travel along one\u00a0edge of the graph that meets where they are.\u00a0 For example, if the Mouse is at node 1, it must travel to any node in graph[1].\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0).\nThen, the game can end in three\u00a0ways:\n\nIf ever the Cat occupies the same node as the Mouse, the Cat wins.\nIf ever the Mouse reaches the Hole, the Mouse wins.\nIf ever a position is repeated (i.e., the players are in the same position as a previous turn, and\u00a0it is the same player's turn to move), the game is a draw.\n\nGiven a graph, and assuming both players play optimally, return\n\n1\u00a0if the mouse wins the game,\n2\u00a0if the cat wins the game, or\n0\u00a0if the game is a draw.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n```",
        "solutions": "HOLE, MOUSE_START, CAT_START = 0, 1, 2\nMOUSE_TURN, CAT_TURN = 0, 1\nMOUSE_WIN, CAT_WIN, TIE = 1, 2, 0\n\n\nclass Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n        def get_prev_states(state):\n            m, c, t = state\n            pt = t ^ 1\n            pre = []\n            if pt == CAT_TURN:\n                for pc in graph[c]:\n                    if pc != HOLE:\n                        pre.append((m, pc, pt))\n            else:\n                for pm in graph[m]:\n                    pre.append((pm, c, pt))\n            return pre\n\n        n = len(graph)\n        res = [[[0, 0] for _ in range(n)] for _ in range(n)]\n        degree = [[[0, 0] for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(1, n):\n                degree[i][j][MOUSE_TURN] = len(graph[i])\n                degree[i][j][CAT_TURN] = len(graph[j])\n            for j in graph[HOLE]:\n                degree[i][j][CAT_TURN] -= 1\n        q = deque()\n        for j in range(1, n):\n            res[0][j][MOUSE_TURN] = res[0][j][CAT_TURN] = MOUSE_WIN\n            q.append((0, j, MOUSE_TURN))\n            q.append((0, j, CAT_TURN))\n        for i in range(1, n):\n            res[i][i][MOUSE_TURN] = res[i][i][CAT_TURN] = CAT_WIN\n            q.append((i, i, MOUSE_TURN))\n            q.append((i, i, CAT_TURN))\n        while q:\n            state = q.popleft()\n            t = res[state[0]][state[1]][state[2]]\n            for prev_state in get_prev_states(state):\n                pm, pc, pt = prev_state\n                if res[pm][pc][pt] == TIE:\n                    win = (t == MOUSE_WIN and pt == MOUSE_TURN) or (\n                        t == CAT_WIN and pt == CAT_TURN\n                    )\n                    if win:\n                        res[pm][pc][pt] = t\n                        q.append(prev_state)\n                    else:\n                        degree[pm][pc][pt] -= 1\n                        if degree[pm][pc][pt] == 0:\n                            res[pm][pc][pt] = t\n                            q.append(prev_state)\n        return res[MOUSE_START][CAT_START][MOUSE_TURN]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]) == 0\n    assert candidate(graph = [[1,3],[0],[3],[0,2]]) == 1\n\n\ncheck(Solution().catMouseGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array deck where deck[i] represents the number written on the ith card.\nPartition the cards into one or more groups such that:\n\nEach group has exactly x cards where x > 1, and\nAll the cards in one group have the same integer written on them.\n\nReturn true if such partition is possible, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:\n        vals = Counter(deck).values()\n        return reduce(gcd, vals) >= 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(deck = [1,2,3,4,4,3,2,1]) == True\n    assert candidate(deck = [1,1,1,2,2,2,3,3]) == False\n\n\ncheck(Solution().hasGroupsSizeX)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, partition it into two (contiguous) subarrays left and right so that:\n\nEvery element in left is less than or equal to every element in right.\nleft and right are non-empty.\nleft has the smallest possible size.\n\nReturn the length of left after such a partitioning.\nTest cases are generated such that partitioning exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def partitionDisjoint(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def partitionDisjoint(self, nums: List[int]) -> int:\n        n = len(nums)\n        mi = [inf] * (n + 1)\n        for i in range(n - 1, -1, -1):\n            mi[i] = min(nums[i], mi[i + 1])\n        mx = 0\n        for i, v in enumerate(nums, 1):\n            mx = max(mx, v)\n            if mx <= mi[i]:\n                return i\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,0,3,8,6]) == 3\n    assert candidate(nums = [1,1,1,0,6,12]) == 4\n\n\ncheck(Solution().partitionDisjoint)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two string arrays words1 and words2.\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\n\nFor example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\n\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\nReturn an array of all the universal strings in words1. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n        cnt = Counter()\n        for b in words2:\n            t = Counter(b)\n            for c, v in t.items():\n                cnt[c] = max(cnt[c], v)\n        ans = []\n        for a in words1:\n            t = Counter(a)\n            if all(v <= t[c] for c, v in cnt.items()):\n                ans.append(a)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]) == [\"facebook\",\"google\",\"leetcode\"]\n    assert candidate(words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]) == [\"apple\",\"google\",\"leetcode\"]\n    assert candidate(words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"oo\"]) == [\"facebook\",\"google\"]\n    assert candidate(words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lo\",\"eo\"]) == [\"google\",\"leetcode\"]\n    assert candidate(words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"ec\",\"oc\",\"ceo\"]) == [\"facebook\",\"leetcode\"]\n\n\ncheck(Solution().wordSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, reverse the string according to the following rules:\n\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\n\nReturn s after reversing it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n        cs = list(s)\n        i, j = 0, len(cs) - 1\n        while i < j:\n            while i < j and not cs[i].isalpha():\n                i += 1\n            while i < j and not cs[j].isalpha():\n                j -= 1\n            if i < j:\n                cs[i], cs[j] = cs[j], cs[i]\n                i, j = i + 1, j - 1\n        return \"\".join(cs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ab-cd\") == \"dc-ba\"\n    assert candidate(s = \"a-bC-dEf-ghIj\") == \"j-Ih-gfE-dCba\"\n    assert candidate(s = \"Test1ng-Leet=code-Q!\") == \"Qedo1ct-eeLg=ntse-T!\"\n\n\ncheck(Solution().reverseOnlyLetters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        s1 = s2 = f1 = f2 = nums[0]\n        for num in nums[1:]:\n            f1 = num + max(f1, 0)\n            f2 = num + min(f2, 0)\n            s1 = max(s1, f1)\n            s2 = min(s2, f2)\n        return s1 if s1 <= 0 else max(s1, sum(nums) - s2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-2,3,-2]) == 3\n    assert candidate(nums = [5,-3,5]) == 10\n    assert candidate(nums = [3,-2,2,-3]) == 3\n\n\ncheck(Solution().maxSubarraySumCircular)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYour music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\nEvery song is played at least once.\nA song can only be played again only if k other songs have been played.\n\nGiven n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (n + 1) for _ in range(goal + 1)]\n        f[0][0] = 1\n        for i in range(1, goal + 1):\n            for j in range(1, n + 1):\n                f[i][j] = f[i - 1][j - 1] * (n - j + 1)\n                if j > k:\n                    f[i][j] += f[i - 1][j] * (j - k)\n                f[i][j] %= mod\n        return f[goal][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, goal = 3, k = 1) == 6\n    assert candidate(n = 2, goal = 3, k = 0) == 6\n    assert candidate(n = 2, goal = 3, k = 1) == 2\n\n\ncheck(Solution().numMusicPlaylists)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA parentheses string is valid if and only if:\n\nIt is the empty string,\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\n\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\n\nFor example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\n\nReturn the minimum number of moves required to make s valid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAddToMakeValid(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minAddToMakeValid(self, s: str) -> int:\n        stk = []\n        for c in s:\n            if c == ')' and stk and stk[-1] == '(':\n                stk.pop()\n            else:\n                stk.append(c)\n        return len(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"())\") == 1\n    assert candidate(s = \"(((\") == 3\n\n\ncheck(Solution().minAddToMakeValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums, half of the integers in nums are odd, and the other half are even.\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\nReturn any answer array that satisfies this condition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n        n, j = len(nums), 1\n        for i in range(0, n, 2):\n            if nums[i] % 2:\n                while nums[j] % 2:\n                    j += 2\n                nums[i], nums[j] = nums[j], nums[i]\n        return nums\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,5,7]) == [4,5,2,7]\n    assert candidate(nums = [2,3]) == [2,3]\n\n\ncheck(Solution().sortArrayByParityII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n        mod = 10**9 + 7\n        cnt = Counter(arr)\n        ans = 0\n        for j, b in enumerate(arr):\n            cnt[b] -= 1\n            for a in arr[:j]:\n                c = target - a - b\n                ans = (ans + cnt[c]) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,1,2,2,3,3,4,4,5,5], target = 8) == 20\n    assert candidate(arr = [1,1,2,2,2,2], target = 5) == 12\n\n\ncheck(Solution().threeSumMulti)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n```",
        "solutions": "class UnionFind:\n    __slots__ = \"p\", \"size\"\n\n    def __init__(self, n: int):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x: int) -> int:\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a: int, b: int) -> bool:\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n    def get_size(self, root: int) -> int:\n        return self.size[root]\n\n\nclass Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        n = len(graph)\n        uf = UnionFind(n)\n        for i in range(n):\n            for j in range(i + 1, n):\n                graph[i][j] and uf.union(i, j)\n        cnt = Counter(uf.find(x) for x in initial)\n        ans, mx = n, 0\n        for x in initial:\n            root = uf.find(x)\n            if cnt[root] > 1:\n                continue\n            sz = uf.get_size(root)\n            if sz > mx or (sz == mx and x < ans):\n                ans = x\n                mx = sz\n        return min(initial) if ans == n else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]) == 0\n    assert candidate(graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]) == 0\n    assert candidate(graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]) == 1\n\n\ncheck(Solution().minMalwareSpread)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYour friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        m, n = len(name), len(typed)\n        i = j = 0\n        while i < m and j < n:\n            if name[i] != typed[j]:\n                return False\n            cnt1 = cnt2 = 0\n            c = name[i]\n            while i + 1 < m and name[i + 1] == c:\n                i += 1\n                cnt1 += 1\n            while j + 1 < n and typed[j + 1] == c:\n                j += 1\n                cnt2 += 1\n            if cnt1 > cnt2:\n                return False\n            i, j = i + 1, j + 1\n        return i == m and j == n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(name = \"alex\", typed = \"aaleex\") == True\n    assert candidate(name = \"saeed\", typed = \"ssaaedd\") == False\n\n\ncheck(Solution().isLongPressedName)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        tot = s.count(\"0\")\n        ans, cur = tot, 0\n        for i, c in enumerate(s, 1):\n            cur += int(c == \"0\")\n            ans = min(ans, i - cur + tot - cur)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"00110\") == 1\n    assert candidate(s = \"010110\") == 2\n    assert candidate(s = \"00011000\") == 2\n\n\ncheck(Solution().minFlipsMonoIncr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\nIf it is possible, return any [i, j] with i + 1 < j, such that:\n\narr[0], arr[1], ..., arr[i] is the first part,\narr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and\narr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.\nAll three parts have equal binary values.\n\nIf it is not possible, return [-1, -1].\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeEqualParts(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def threeEqualParts(self, arr: List[int]) -> List[int]:\n        def find(x):\n            s = 0\n            for i, v in enumerate(arr):\n                s += v\n                if s == x:\n                    return i\n\n        n = len(arr)\n        cnt, mod = divmod(sum(arr), 3)\n        if mod:\n            return [-1, -1]\n        if cnt == 0:\n            return [0, n - 1]\n\n        i, j, k = find(1), find(cnt + 1), find(cnt * 2 + 1)\n        while k < n and arr[i] == arr[j] == arr[k]:\n            i, j, k = i + 1, j + 1, k + 1\n        return [i - 1, j] if k == n else [-1, -1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,0,1,0,1]) == [0,3]\n    assert candidate(arr = [1,1,0,1,1]) == [-1,-1]\n    assert candidate(arr = [1,1,0,0,1]) == [0,2]\n\n\ncheck(Solution().threeEqualParts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n```",
        "solutions": "class UnionFind:\n    __slots__ = \"p\", \"size\"\n\n    def __init__(self, n: int):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x: int) -> int:\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a: int, b: int) -> bool:\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n    def get_size(self, root: int) -> int:\n        return self.size[root]\n\n\nclass Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        n = len(graph)\n        s = set(initial)\n        uf = UnionFind(n)\n        for i in range(n):\n            if i not in s:\n                for j in range(i + 1, n):\n                    graph[i][j] and j not in s and uf.union(i, j)\n\n        g = defaultdict(set)\n        cnt = Counter()\n        for i in initial:\n            for j in range(n):\n                if j not in s and graph[i][j]:\n                    g[i].add(uf.find(j))\n            for root in g[i]:\n                cnt[root] += 1\n\n        ans, mx = 0, -1\n        for i in initial:\n            t = sum(uf.get_size(root) for root in g[i] if cnt[root] == 1)\n            if t > mx or (t == mx and i < ans):\n                ans, mx = i, t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]) == 0\n    assert candidate(graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]) == 1\n    assert candidate(graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]) == 1\n\n\ncheck(Solution().minMalwareSpread)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\nA subarray is a contiguous part of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:\n        cnt = Counter({0: 1})\n        ans = s = 0\n        for v in nums:\n            s += v\n            ans += cnt[s - goal]\n            cnt[s] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,0,1,0,1], goal = 2) == 4\n    assert candidate(nums = [0,0,0,0,0], goal = 0) == 15\n\n\ncheck(Solution().numSubarraysWithSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        f = [0] * n\n        for row in matrix:\n            g = [0] * n\n            for j, x in enumerate(row):\n                l, r = max(0, j - 1), min(n, j + 2)\n                g[j] = min(f[l:r]) + x\n            f = g\n        return min(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[2,1,3],[6,5,4],[7,8,9]]) == 13\n    assert candidate(matrix = [[-19,57],[-40,-5]]) == -59\n\n\ncheck(Solution().minFallingPathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n binary matrix grid where 1 represents land and 0 represents water.\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\nYou may change 0's to 1's to connect the two islands to form one island.\nReturn the smallest number of 0's you must flip to connect the two islands.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestBridge(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def shortestBridge(self, grid: List[List[int]]) -> int:\n        def dfs(i, j):\n            q.append((i, j))\n            grid[i][j] = 2\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and grid[x][y] == 1:\n                    dfs(x, y)\n\n        n = len(grid)\n        dirs = (-1, 0, 1, 0, -1)\n        q = deque()\n        i, j = next((i, j) for i in range(n) for j in range(n) if grid[i][j])\n        dfs(i, j)\n        ans = 0\n        while 1:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if 0 <= x < n and 0 <= y < n:\n                        if grid[x][y] == 1:\n                            return ans\n                        if grid[x][y] == 0:\n                            grid[x][y] = 2\n                            q.append((x, y))\n            ans += 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1],[1,0]]) == 1\n    assert candidate(grid = [[0,1,0],[0,0,0],[0,0,1]]) == 2\n    assert candidate(grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]) == 1\n\n\ncheck(Solution().shortestBridge)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe chess knight has a unique movement,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram:\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\u00a0(i.e. blue cell).\n\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def knightDialer(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        f = [1] * 10\n        for _ in range(n - 1):\n            g = [0] * 10\n            g[0] = f[4] + f[6]\n            g[1] = f[6] + f[8]\n            g[2] = f[7] + f[9]\n            g[3] = f[4] + f[8]\n            g[4] = f[0] + f[3] + f[9]\n            g[6] = f[0] + f[1] + f[7]\n            g[7] = f[2] + f[6]\n            g[8] = f[1] + f[3]\n            g[9] = f[2] + f[4]\n            f = g\n        return sum(f) % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 10\n    assert candidate(n = 2) == 20\n    assert candidate(n = 3131) == 136006598\n\n\ncheck(Solution().knightDialer)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\nThere are two types of logs:\n\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\nDigit-logs: All words (except the identifier) consist of digits.\n\nReorder these logs so that:\n\nThe letter-logs come before all digit-logs.\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\nThe digit-logs maintain their relative ordering.\n\nReturn the final order of the logs.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        def cmp(x):\n            a, b = x.split(' ', 1)\n            return (0, b, a) if b[0].isalpha() else (1,)\n\n        return sorted(logs, key=cmp)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]) == [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n    assert candidate(logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]) == [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n\n\ncheck(Solution().reorderLogFiles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n        def dfs(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            x = root.val\n            ans = x if low <= x <= high else 0\n            if x > low:\n                ans += dfs(root.left)\n            if x < high:\n                ans += dfs(root.right)\n            return ans\n\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([10,5,15,3,7,None,18]), low = 7, high = 15) == 32\n    assert candidate(root = tree_node([10,5,15,3,7,13,18,1,None,6]), low = 6, high = 10) == 23\n\n\ncheck(Solution().rangeSumBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        d = defaultdict(list)\n        for x, y in points:\n            d[x].append(y)\n        pos = {}\n        ans = inf\n        for x in sorted(d):\n            ys = d[x]\n            ys.sort()\n            n = len(ys)\n            for i, y1 in enumerate(ys):\n                for y2 in ys[i + 1 :]:\n                    if (y1, y2) in pos:\n                        ans = min(ans, (x - pos[(y1, y2)]) * (y2 - y1))\n                    pos[(y1, y2)] = x\n        return 0 if ans == inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([[1,1],[1,3],[3,1],[3,3],[2,2]]) == 4\n    assert candidate([[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]) == 2\n\n\ncheck(Solution().minAreaRect)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctSubseqII(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[0] * 26 for _ in range(n + 1)]\n        for i, c in enumerate(s, 1):\n            k = ord(c) - ord('a')\n            for j in range(26):\n                if j == k:\n                    dp[i][j] = sum(dp[i - 1]) % mod + 1\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return sum(dp[-1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\") == 7\n    assert candidate(s = \"aba\") == 6\n    assert candidate(s = \"aaa\") == 3\n\n\ncheck(Solution().distinctSubseqII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:\n\narr.length >= 3\nThere exists some i with 0 < i < arr.length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i] \narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        n = len(arr)\n        if n < 3:\n            return False\n        i, j = 0, n - 1\n        while i + 1 < n - 1 and arr[i] < arr[i + 1]:\n            i += 1\n        while j - 1 > 0 and arr[j - 1] > arr[j]:\n            j -= 1\n        return i == j\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,1]) == False\n    assert candidate(arr = [3,5,5]) == False\n    assert candidate(arr = [0,3,2,1]) == True\n\n\ncheck(Solution().validMountainArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        n = len(s)\n        low, high = 0, n\n        ans = []\n        for i in range(n):\n            if s[i] == 'I':\n                ans.append(low)\n                low += 1\n            else:\n                ans.append(high)\n                high -= 1\n        ans.append(low)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"IDID\") == [0,4,1,3,2]\n    assert candidate(s = \"III\") == [0,1,2,3]\n    assert candidate(s = \"DDI\") == [3,2,0,1]\n\n\ncheck(Solution().diStringMatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\nYou may assume that no string in words is a substring of another string in words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestSuperstring(self, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def shortestSuperstring(self, words: List[str]) -> str:\n        n = len(words)\n        g = [[0] * n for _ in range(n)]\n        for i, a in enumerate(words):\n            for j, b in enumerate(words):\n                if i != j:\n                    for k in range(min(len(a), len(b)), 0, -1):\n                        if a[-k:] == b[:k]:\n                            g[i][j] = k\n                            break\n        dp = [[0] * n for _ in range(1 << n)]\n        p = [[-1] * n for _ in range(1 << n)]\n        for i in range(1 << n):\n            for j in range(n):\n                if (i >> j) & 1:\n                    pi = i ^ (1 << j)\n                    for k in range(n):\n                        if (pi >> k) & 1:\n                            v = dp[pi][k] + g[k][j]\n                            if v > dp[i][j]:\n                                dp[i][j] = v\n                                p[i][j] = k\n        j = 0\n        for i in range(n):\n            if dp[-1][i] > dp[-1][j]:\n                j = i\n        arr = [j]\n        i = (1 << n) - 1\n        while p[i][j] != -1:\n            i, j = i ^ (1 << j), p[i][j]\n            arr.append(j)\n        arr = arr[::-1]\n        vis = set(arr)\n        arr.extend([j for j in range(n) if j not in vis])\n        ans = [words[arr[0]]] + [words[j][g[i][j] :] for i, j in pairwise(arr)]\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"alex\",\"loves\",\"leetcode\"]) == \"alexlovesleetcode\"\n    assert candidate(words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]) == \"gctaagttcatgcatc\"\n\n\ncheck(Solution().shortestSuperstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\n\nFor example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows:\n\n\nabc\nbce\ncae\n\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        m, n = len(strs[0]), len(strs)\n        ans = 0\n        for j in range(m):\n            for i in range(1, n):\n                if strs[i][j] < strs[i - 1][j]:\n                    ans += 1\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"cba\",\"daf\",\"ghi\"]) == 1\n    assert candidate(strs = [\"a\",\"b\"]) == 0\n    assert candidate(strs = [\"zyx\",\"wvu\",\"tsr\"]) == 3\n\n\ncheck(Solution().minDeletionSize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\nReturn the minimum number of moves to make every value in nums unique.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n        nums.sort()\n        ans = 0\n        for i in range(1, len(nums)):\n            if nums[i] <= nums[i - 1]:\n                d = nums[i - 1] - nums[i] + 1\n                nums[i] += d\n                ans += d\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2]) == 1\n    assert candidate(nums = [3,2,1,2,1,7]) == 6\n\n\ncheck(Solution().minIncrementForUnique)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        j, stk = 0, []\n        for v in pushed:\n            stk.append(v)\n            while stk and stk[-1] == popped[j]:\n                stk.pop()\n                j += 1\n        return j == len(pushed)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pushed = [1,2,3,4,5], popped = [4,5,3,2,1]) == True\n    assert candidate(pushed = [1,2,3,4,5], popped = [4,3,5,1,2]) == False\n\n\ncheck(Solution().validateStackSequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = 10010\n        p = list(range(n << 1))\n        for x, y in stones:\n            p[find(x)] = find(y + n)\n\n        s = {find(x) for x, _ in stones}\n        return len(stones) - len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]) == 5\n    assert candidate(stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]) == 3\n    assert candidate(stones = [[0,0]]) == 0\n\n\ncheck(Solution().removeStones)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each\u00a0tokens[i] denotes the value of tokeni.\nYour goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):\n\nFace-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.\nFace-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.\n\nReturn the maximum possible score you can achieve after playing any number of tokens.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n```",
        "solutions": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n        tokens.sort()\n        i, j = 0, len(tokens) - 1\n        ans = t = 0\n        while i <= j:\n            if power >= tokens[i]:\n                power -= tokens[i]\n                i, t = i + 1, t + 1\n                ans = max(ans, t)\n            elif t:\n                power += tokens[j]\n                j, t = j - 1, t - 1\n            else:\n                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tokens = [100], power = 50) == 0\n    assert candidate(tokens = [200,100], power = 150) == 1\n    assert candidate(tokens = [100,200,300,400], power = 200) == 2\n\n\ncheck(Solution().bagOfTokensScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nReturn the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        cnt = [0] * 10\n        for v in arr:\n            cnt[v] += 1\n        for h in range(23, -1, -1):\n            for m in range(59, -1, -1):\n                t = [0] * 10\n                t[h // 10] += 1\n                t[h % 10] += 1\n                t[m // 10] += 1\n                t[m % 10] += 1\n                if cnt == t:\n                    return f'{h:02}:{m:02}'\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,4]) == \"23:41\"\n    assert candidate(arr = [5,5,5,5]) == \"\"\n    assert candidate(arr = [0,0,0,0]) == \"00:00\"\n    assert candidate(arr = [0,0,1,0]) == \"10:00\"\n\n\ncheck(Solution().largestTimeFromDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\nYou will do the following steps repeatedly until all cards are revealed:\n\nTake the top card of the deck, reveal it, and take it out of the deck.\nIf there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\nIf there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\nReturn an ordering of the deck that would reveal the cards in increasing order.\nNote that the first entry in the answer is considered to be the top of the deck.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n        q = deque()\n        for v in sorted(deck, reverse=True):\n            if q:\n                q.appendleft(q.pop())\n            q.appendleft(v)\n        return list(q)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([17,13,11,2,3,5,7]) == [2,13,3,11,5,17,7]\n\n\ncheck(Solution().deckRevealedIncreasing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFor a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X\u00a0is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        def dfs(root1, root2):\n            if root1 == root2 or (root1 is None and root2 is None):\n                return True\n            if root1 is None or root2 is None or root1.val != root2.val:\n                return False\n            return (dfs(root1.left, root2.left) and dfs(root1.right, root2.right)) or (\n                dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n            )\n\n        return dfs(root1, root2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root1 = tree_node([1,2,3,4,5,6,None,None,None,7,8]), root2 = tree_node([1,3,2,None,6,4,5,None,None,None,None,8,7])) == True\n\n\ncheck(Solution().flipEquiv)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array of unique positive integers nums. Consider the following graph:\n\nThere are nums.length nodes, labeled nums[0] to nums[nums.length - 1],\nThere is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.\n\nReturn the size of the largest connected component in the graph.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestComponentSize(self, nums: List[int]) -> int:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa != pb:\n            self.p[pa] = pb\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n\nclass Solution:\n    def largestComponentSize(self, nums: List[int]) -> int:\n        uf = UnionFind(max(nums) + 1)\n        for v in nums:\n            i = 2\n            while i <= v // i:\n                if v % i == 0:\n                    uf.union(v, i)\n                    uf.union(v, v // i)\n                i += 1\n        return max(Counter(uf.find(v) for v in nums).values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,6,15,35]) == 4\n    assert candidate(nums = [20,50,9,63]) == 2\n    assert candidate(nums = [2,3,6,7,4,12,21,39]) == 8\n\n\ncheck(Solution().largestComponentSize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        m = {c: i for i, c in enumerate(order)}\n        for i in range(20):\n            prev = -1\n            valid = True\n            for x in words:\n                curr = -1 if i >= len(x) else m[x[i]]\n                if prev > curr:\n                    return False\n                if prev == curr:\n                    valid = False\n                prev = curr\n            if valid:\n                return True\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\") == True\n    assert candidate(words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\") == False\n    assert candidate(words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\") == False\n\n\ncheck(Solution().isAlienSorted)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canReorderDoubled(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canReorderDoubled(self, arr: List[int]) -> bool:\n        freq = Counter(arr)\n        if freq[0] & 1:\n            return False\n        for x in sorted(freq, key=abs):\n            if freq[x << 1] < freq[x]:\n                return False\n            freq[x << 1] -= freq[x]\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,1,3,6]) == False\n    assert candidate(arr = [2,1,2,6]) == False\n    assert candidate(arr = [4,-2,2,-4]) == True\n\n\ncheck(Solution().canReorderDoubled)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node is None:\n                break\n            q.append(node.left)\n            q.append(node.right)\n        return all(node is None for node in q)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5,6])) == True\n    assert candidate(root = tree_node([1,2,3,4,5,None,7])) == False\n\n\ncheck(Solution().isCompleteTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.\nGiven the grid grid represented as a string array, return the number of regions.\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n * 4\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n        return size\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [\" /\",\"/ \"]) == 2\n    assert candidate(grid = [\" /\",\"  \"]) == 1\n    assert candidate(grid = [\"/\\\\\",\"\\\\/\"]) == 5\n\n\ncheck(Solution().regionsBySlashes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        n = len(strs[0])\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if all(s[j] <= s[i] for s in strs):\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return n - max(dp)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"babca\",\"bbazb\"]) == 3\n    assert candidate(strs = [\"edcba\"]) == 4\n    assert candidate(strs = [\"ghi\",\"def\",\"abc\"]) == 0\n\n\ncheck(Solution().minDeletionSize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums with the following properties:\n\nnums.length == 2 * n.\nnums contains n + 1 unique elements.\nExactly one element of nums is repeated n times.\n\nReturn the element that is repeated n times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def repeatedNTimes(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def repeatedNTimes(self, nums: List[int]) -> int:\n        s = set()\n        for x in nums:\n            if x in s:\n                return x\n            s.add(x)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,3]) == 3\n    assert candidate(nums = [2,1,2,5,3,2]) == 2\n    assert candidate(nums = [5,1,5,2,5,3,5,4]) == 5\n\n\ncheck(Solution().repeatedNTimes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxWidthRamp(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxWidthRamp(self, nums: List[int]) -> int:\n        stk = []\n        for i, v in enumerate(nums):\n            if not stk or nums[stk[-1]] > v:\n                stk.append(i)\n        ans = 0\n        for i in range(len(nums) - 1, -1, -1):\n            while stk and nums[stk[-1]] <= nums[i]:\n                ans = max(ans, i - stk.pop())\n            if not stk:\n                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([6,0,8,2,1,5]) == 4\n    assert candidate([9,8,1,0,1,9,4,0,4,1]) == 7\n\n\ncheck(Solution().maxWidthRamp)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a wordlist, we want to implement a spellchecker that converts a query word into a correct word.\nFor a given query word, the spell checker handles two categories of spelling mistakes:\n\nCapitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.\n\n\t\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def f(w):\n            t = []\n            for c in w:\n                t.append(\"*\" if c in \"aeiou\" else c)\n            return \"\".join(t)\n\n        s = set(wordlist)\n        low, pat = {}, {}\n        for w in wordlist:\n            t = w.lower()\n            low.setdefault(t, w)\n            pat.setdefault(f(t), w)\n\n        ans = []\n        for q in queries:\n            if q in s:\n                ans.append(q)\n                continue\n            q = q.lower()\n            if q in low:\n                ans.append(low[q])\n                continue\n            q = f(q)\n            if q in pat:\n                ans.append(pat[q])\n                continue\n            ans.append(\"\")\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]) == [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n    assert candidate(wordlist = [\"yellow\"], queries = [\"YellOw\"]) == [\"yellow\"]\n\n\ncheck(Solution().spellchecker)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.\nAn integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.\nYou may return the answer in any order. In your answer, each value should occur at most once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:\n        ans = set()\n        a = 1\n        while a <= bound:\n            b = 1\n            while a + b <= bound:\n                ans.add(a + b)\n                b *= y\n                if y == 1:\n                    break\n            if x == 1:\n                break\n            a *= x\n        return list(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 2, y = 3, bound = 10) == [2,3,4,5,7,9,10]\n    assert candidate(x = 3, y = 5, bound = 15) == [2,4,6,8,10,14]\n\n\ncheck(Solution().powerfulIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\nGiven n, calculate F(n).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fib(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def fib(self, n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 1\n    assert candidate(n = 3) == 2\n    assert candidate(n = 4) == 3\n\n\ncheck(Solution().fib)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., \u221a(x1 - x2)2 + (y1 - y2)2).\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=lambda p: p[0] * p[0] + p[1] * p[1])\n        return points[:k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,3],[-2,2]], k = 1) == [[-2,2]]\n    assert candidate(points = [[3,3],[5,-1],[-2,4]], k = 2) == [[3,3],[-2,4]]\n\n\ncheck(Solution().kClosest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarraysDivByK(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def subarraysDivByK(self, nums: List[int], k: int) -> int:\n        cnt = Counter({0: 1})\n        ans = s = 0\n        for x in nums:\n            s = (s + x) % k\n            ans += cnt[s]\n            cnt[s] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,5,0,-2,-3,1], k = 5) == 7\n\n\ncheck(Solution().subarraysDivByK)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        ans = []\n        i, j = 0, len(nums) - 1\n        while i <= j:\n            a = nums[i] * nums[i]\n            b = nums[j] * nums[j]\n            if a > b:\n                ans.append(a)\n                i += 1\n            else:\n                ans.append(b)\n                j -= 1\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-4,-1,0,3,10]) == [0,1,9,16,100]\n    assert candidate(nums = [-7,-3,2,3,11]) == [4,9,9,49,121]\n\n\ncheck(Solution().sortedSquares)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, return the length of a maximum size turbulent subarray of arr.\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nMore formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:\n\nFor i <= k < j:\n\n\t\narr[k] > arr[k + 1] when k is odd, and\narr[k] < arr[k + 1] when k is even.\n\n\nOr, for i <= k < j:\n\t\narr[k] > arr[k + 1] when k is even, and\narr[k] < arr[k + 1] when k is odd.\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxTurbulenceSize(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxTurbulenceSize(self, arr: List[int]) -> int:\n        ans = f = g = 1\n        for a, b in pairwise(arr):\n            ff = g + 1 if a < b else 1\n            gg = f + 1 if a > b else 1\n            f, g = ff, gg\n            ans = max(ans, f, g)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [9,4,2,10,7,8,8,1,9]) == 5\n    assert candidate(arr = [4,8,12,16]) == 2\n    assert candidate(arr = [100]) == 1\n\n\ncheck(Solution().maxTurbulenceSize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\nReturn the minimum number of moves required to make every node have exactly one coin.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def distributeCoins(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def distributeCoins(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return 0\n            left, right = dfs(root.left), dfs(root.right)\n            nonlocal ans\n            ans += abs(left) + abs(right)\n            return left + right + root.val - 1\n\n        ans = 0\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,0,0])) == 2\n    assert candidate(root = tree_node([0,3,0])) == 3\n\n\ncheck(Solution().distributeCoins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer array grid where grid[i][j] could be:\n\n1 representing the starting square. There is exactly one starting square.\n2 representing the ending square. There is exactly one ending square.\n0 representing empty squares we can walk over.\n-1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        def dfs(i: int, j: int, k: int) -> int:\n            if grid[i][j] == 2:\n                return int(k == cnt + 1)\n            ans = 0\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and (x, y) not in vis and grid[x][y] != -1:\n                    vis.add((x, y))\n                    ans += dfs(x, y, k + 1)\n                    vis.remove((x, y))\n            return ans\n\n        m, n = len(grid), len(grid[0])\n        start = next((i, j) for i in range(m) for j in range(n) if grid[i][j] == 1)\n        dirs = (-1, 0, 1, 0, -1)\n        cnt = sum(row.count(0) for row in grid)\n        vis = {start}\n        return dfs(*start, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([[1,0,0,0],[0,0,0,0],[0,0,2,-1]]) == 2\n    assert candidate([[1,0,0,0],[0,0,0,0],[0,0,0,2]]) == 4\n    assert candidate([[0,1],[2,0]]) == 0\n\n\ncheck(Solution().uniquePathsIII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\n\n0 <= i < nums.length\n0 <= j < nums.length\n0 <= k < nums.length\nnums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTriplets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countTriplets(self, nums: List[int]) -> int:\n        cnt = Counter(x & y for x in nums for y in nums)\n        return sum(v for xy, v in cnt.items() for z in nums if xy & z == 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,3]) == 12\n    assert candidate(nums = [0,0,0]) == 27\n\n\ncheck(Solution().countTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def intervalIntersection(\n        self, firstList: List[List[int]], secondList: List[List[int]]\n    ) -> List[List[int]]:\n        i = j = 0\n        ans = []\n        while i < len(firstList) and j < len(secondList):\n            s1, e1, s2, e2 = *firstList[i], *secondList[j]\n            l, r = max(s1, s2), min(e1, e2)\n            if l <= r:\n                ans.append([l, r])\n            if e1 < e2:\n                i += 1\n            else:\n                j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]) == [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n    assert candidate(firstList = [[1,3],[5,9]], secondList = []) == []\n    assert candidate(firstList = [], secondList = [[4,8],[10,12]]) == []\n    assert candidate(firstList = [[1,7]], secondList = [[3,10]]) == [[3,7]]\n\n\ncheck(Solution().intervalIntersection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        def dfs(root: Optional[TreeNode], i: int, j: int):\n            if root is None:\n                return\n            nodes.append((j, i, root.val))\n            dfs(root.left, i + 1, j - 1)\n            dfs(root.right, i + 1, j + 1)\n\n        nodes = []\n        dfs(root, 0, 0)\n        nodes.sort()\n        ans = []\n        prev = -2000\n        for j, _, val in nodes:\n            if prev != j:\n                ans.append([])\n                prev = j\n            ans[-1].append(val)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,9,20,None,None,15,7])) == [[9],[3,15],[20],[7]]\n    assert candidate(root = tree_node([1,2,3,4,5,6,7])) == [[4],[2],[1,5,6],[3],[7]]\n    assert candidate(root = tree_node([1,2,3,4,6,5,7])) == [[4],[2],[1,5,6],[3],[7]]\n\n\ncheck(Solution().verticalTraversal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\n\nFor example, \"ab\" is lexicographically smaller than \"aba\".\n\nA leaf of a node is a node that has no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def smallestFromLeaf(self, root: Optional[TreeNode]) -> str:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def smallestFromLeaf(self, root: TreeNode) -> str:\n        ans = chr(ord('z') + 1)\n\n        def dfs(root, path):\n            nonlocal ans\n            if root:\n                path.append(chr(ord('a') + root.val))\n                if root.left is None and root.right is None:\n                    ans = min(ans, ''.join(reversed(path)))\n                dfs(root.left, path)\n                dfs(root.right, path)\n                path.pop()\n\n        dfs(root, [])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([0,1,2,3,4,3,4])) == \"dba\"\n    assert candidate(root = tree_node([25,1,3,1,3,0,2])) == \"adz\"\n    assert candidate(root = tree_node([2,2,1,None,1,0,None,0])) == \"abc\"\n\n\ncheck(Solution().smallestFromLeaf)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe array-form of an integer num is an array representing its digits in left to right order.\n\nFor example, for num = 1321, the array form is [1,3,2,1].\n\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i, carry = len(num) - 1, 0\n        ans = []\n        while i >= 0 or k or carry:\n            carry += (0 if i < 0 else num[i]) + (k % 10)\n            carry, v = divmod(carry, 10)\n            ans.append(v)\n            k //= 10\n            i -= 1\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = [1,2,0,0], k = 34) == [1,2,3,4]\n    assert candidate(num = [2,7,4], k = 181) == [4,5,5]\n    assert candidate(num = [2,1,5], k = 806) == [1,0,2,1]\n\n\ncheck(Solution().addToArrayForm)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(26))\n        for e in equations:\n            a, b = ord(e[0]) - ord('a'), ord(e[-1]) - ord('a')\n            if e[1] == '=':\n                p[find(a)] = find(b)\n        for e in equations:\n            a, b = ord(e[0]) - ord('a'), ord(e[-1]) - ord('a')\n            if e[1] == '!' and find(a) == find(b):\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([\"a==b\",\"b!=a\"]) == False\n    assert candidate([\"b==a\",\"a==b\"]) == True\n    assert candidate([\"a==b\",\"b==c\",\"a==c\"]) == True\n    assert candidate([\"a==b\",\"b!=c\",\"c==a\"]) == False\n    assert candidate([\"c==c\",\"b==d\",\"x!=z\"]) == True\n\n\ncheck(Solution().equationsPossible)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\n\nmultiply the number on display by 2, or\nsubtract 1 from the number on display.\n\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(startValue = 2, target = 3) == 2\n    assert candidate(startValue = 5, target = 8) == 2\n    assert candidate(startValue = 3, target = 10) == 3\n\n\ncheck(Solution().brokenCalc)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\n\nFor example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\n\nA subarray is a contiguous part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:\n        def f(k):\n            pos = [0] * len(nums)\n            cnt = Counter()\n            j = 0\n            for i, x in enumerate(nums):\n                cnt[x] += 1\n                while len(cnt) > k:\n                    cnt[nums[j]] -= 1\n                    if cnt[nums[j]] == 0:\n                        cnt.pop(nums[j])\n                    j += 1\n                pos[i] = j\n            return pos\n\n        return sum(a - b for a, b in zip(f(k - 1), f(k)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1,2,3], k = 2) == 7\n    assert candidate(nums = [1,2,1,3,4], k = 3) == 3\n\n\ncheck(Solution().subarraysWithKDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:\n        q = deque([(root, None)])\n        depth = 0\n        p1 = p2 = None\n        d1 = d2 = None\n        while q:\n            for _ in range(len(q)):\n                node, parent = q.popleft()\n                if node.val == x:\n                    p1, d1 = parent, depth\n                elif node.val == y:\n                    p2, d2 = parent, depth\n                if node.left:\n                    q.append((node.left, node))\n                if node.right:\n                    q.append((node.right, node))\n            depth += 1\n        return p1 != p2 and d1 == d2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4]), x = 4, y = 3) == False\n    assert candidate(root = tree_node([1,2,3,None,4,None,5]), x = 5, y = 4) == True\n    assert candidate(root = tree_node([1,2,3,None,4]), x = 2, y = 3) == False\n\n\ncheck(Solution().isCousins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n grid where each cell can have one of three values:\n\n0 representing an empty cell,\n1 representing a fresh orange, or\n2 representing a rotten orange.\n\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        q = deque()\n        cnt = 0\n        for i, row in enumerate(grid):\n            for j, x in enumerate(row):\n                if x == 1:\n                    cnt += 1\n                elif x == 2:\n                    q.append((i, j))\n        dirs = (-1, 0, 1, 0, -1)\n        ans = 0\n        while q and cnt:\n            ans += 1\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:\n                        grid[x][y] = 2\n                        q.append((x, y))\n                        cnt -= 1\n        return -1 if cnt > 0 else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,1,1],[1,1,0],[0,1,1]]) == 4\n    assert candidate(grid = [[2,1,1],[0,1,1],[1,0,1]]) == -1\n    assert candidate(grid = [[0,2]]) == 0\n\n\ncheck(Solution().orangesRotting)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSquarefulPerms(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numSquarefulPerms(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(1 << n)]\n        for j in range(n):\n            f[1 << j][j] = 1\n        for i in range(1 << n):\n            for j in range(n):\n                if i >> j & 1:\n                    for k in range(n):\n                        if (i >> k & 1) and k != j:\n                            s = nums[j] + nums[k]\n                            t = int(sqrt(s))\n                            if t * t == s:\n                                f[i][j] += f[i ^ (1 << j)][k]\n\n        ans = sum(f[(1 << n) - 1][j] for j in range(n))\n        for v in Counter(nums).values():\n            ans //= factorial(v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([1,17,8]) == 2\n    assert candidate([2,2,2]) == 1\n\n\ncheck(Solution().numSquarefulPerms)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\n\nThe town judge trusts nobody.\nEverybody (except for the town judge) trusts the town judge.\nThere is exactly one person that satisfies properties 1 and 2.\n\nYou are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        cnt1 = [0] * (n + 1)\n        cnt2 = [0] * (n + 1)\n        for a, b in trust:\n            cnt1[a] += 1\n            cnt2[b] += 1\n        for i in range(1, n + 1):\n            if cnt1[i] == 0 and cnt2[i] == n - 1:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, trust = [[1,2]]) == 2\n    assert candidate(n = 3, trust = [[1,3],[2,3]]) == 3\n    assert candidate(n = 3, trust = [[1,3],[2,3],[3,1]]) == -1\n\n\ncheck(Solution().findJudge)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA maximum tree is a tree where every node has a value greater than any other value in its subtree.\nYou are given the root of a maximum binary tree and an integer val.\nJust as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:\n\nIf a is empty, return null.\nOtherwise, let a[i] be the largest element of a. Create a root node with the value a[i].\nThe left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).\nThe right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).\nReturn root.\n\nNote that we were not given a directly, only a root node root = Construct(a).\nSuppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.\nReturn Construct(b).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoMaxTree(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoMaxTree(\n        self, root: Optional[TreeNode], val: int\n    ) -> Optional[TreeNode]:\n        if root is None or root.val < val:\n            return TreeNode(val, root)\n        root.right = self.insertIntoMaxTree(root.right, val)\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([4,1,3,None,None,2]), val = 5), tree_node([5,4,None,1,3,None,None,2]))\n    assert is_same_tree(candidate(root = tree_node([5,2,4,None,1]), val = 3), tree_node([5,2,4,None,1,None,3]))\n    assert is_same_tree(candidate(root = tree_node([5,2,3,None,1]), val = 4), tree_node([5,2,4,None,1,3]))\n\n\ncheck(Solution().insertIntoMaxTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an 8 x 8 matrix representing a chessboard. There is exactly one white rook represented by 'R', some number of white bishops 'B', and some number of black pawns 'p'. Empty squares are represented by '.'.\nA rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece or the edge of the board. A rook is attacking a pawn if it can move to the pawn's square in one move.\nNote: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path.\nReturn the number of pawns the white rook is attacking.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n```",
        "solutions": "class Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] == \"R\":\n                    for a, b in pairwise(dirs):\n                        x, y = i, j\n                        while 0 <= x + a < 8 and 0 <= y + b < 8:\n                            x, y = x + a, y + b\n                            if board[x][y] == \"p\":\n                                ans += 1\n                                break\n                            if board[x][y] == \"B\":\n                                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]) == 3\n    assert candidate([[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]) == 0\n    assert candidate([[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]) == 3\n\n\ncheck(Solution().numRookCaptures)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.\nYou are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.\nWhen a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\nYou are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].\nReturn an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def gridIllumination(\n        self, n: int, lamps: List[List[int]], queries: List[List[int]]\n    ) -> List[int]:\n        s = {(i, j) for i, j in lamps}\n        row, col, diag1, diag2 = Counter(), Counter(), Counter(), Counter()\n        for i, j in s:\n            row[i] += 1\n            col[j] += 1\n            diag1[i - j] += 1\n            diag2[i + j] += 1\n        ans = [0] * len(queries)\n        for k, (i, j) in enumerate(queries):\n            if row[i] or col[j] or diag1[i - j] or diag2[i + j]:\n                ans[k] = 1\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if (x, y) in s:\n                        s.remove((x, y))\n                        row[x] -= 1\n                        col[y] -= 1\n                        diag1[x - y] -= 1\n                        diag2[x + y] -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]) == [1,0]\n    assert candidate(n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]) == [1,1]\n    assert candidate(n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]) == [1,1,0]\n\n\ncheck(Solution().gridIllumination)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def commonChars(self, words: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def commonChars(self, words: List[str]) -> List[str]:\n        cnt = Counter(words[0])\n        for w in words:\n            ccnt = Counter(w)\n            for c in cnt.keys():\n                cnt[c] = min(cnt[c], ccnt[c])\n        ans = []\n        for c, v in cnt.items():\n            ans.extend([c] * v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"bella\",\"label\",\"roller\"]) == [\"e\",\"l\",\"l\"]\n    assert candidate(words = [\"cool\",\"lock\",\"cook\"]) == [\"c\",\"o\"]\n\n\ncheck(Solution().commonChars)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\n\nInsert string \"abc\" into any position in t. More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright. Note that tleft and tright may be empty.\n\nReturn true if s is a valid string, otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 3:\n            return False\n        t = []\n        for c in s:\n            t.append(c)\n            if ''.join(t[-3:]) == 'abc':\n                t[-3:] = []\n        return not t\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabcbc\") == True\n    assert candidate(s = \"abcabcababcc\") == True\n    assert candidate(s = \"abccba\") == False\n\n\ncheck(Solution().isValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, modify the array in the following way:\n\nchoose an index i and replace nums[i] with -nums[i].\n\nYou should apply this process exactly k times. You may choose the same index i multiple times.\nReturn the largest possible sum of the array after modifying it in this way.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        for x in range(-100, 0):\n            if cnt[x]:\n                m = min(cnt[x], k)\n                cnt[x] -= m\n                cnt[-x] += m\n                k -= m\n                if k == 0:\n                    break\n        if k & 1 and cnt[0] == 0:\n            for x in range(1, 101):\n                if cnt[x]:\n                    cnt[x] -= 1\n                    cnt[-x] += 1\n                    break\n        return sum(x * v for x, v in cnt.items())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,3], k = 1) == 5\n    assert candidate(nums = [3,-1,0,2], k = 3) == 6\n    assert candidate(nums = [2,-3,-1,5,-4], k = 2) == 13\n\n\ncheck(Solution().largestSumAfterKNegations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe factorial of a positive integer n is the product of all positive integers less than or equal to n.\n\nFor example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.\n\nWe make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.\n\nFor example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.\n\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\nAdditionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.\nGiven an integer n, return the clumsy factorial of n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def clumsy(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def clumsy(self, N: int) -> int:\n        op = 0\n        s = [N]\n        for i in range(N - 1, 0, -1):\n            if op == 0:\n                s.append(s.pop() * i)\n            elif op == 1:\n                s.append(int(s.pop() / i))\n            elif op == 2:\n                s.append(i)\n            else:\n                s.append(-i)\n            op = (op + 1) % 4\n        return sum(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(4) == 7\n    assert candidate(10) == 12\n\n\ncheck(Solution().clumsy)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\nWe may rotate the ith domino, so that tops[i] and bottoms[i] swap values.\nReturn the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.\nIf it cannot be done, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:\n        def f(x: int) -> int:\n            cnt1 = cnt2 = 0\n            for a, b in zip(tops, bottoms):\n                if x not in (a, b):\n                    return inf\n                cnt1 += a == x\n                cnt2 += b == x\n            return len(tops) - max(cnt1, cnt2)\n\n        ans = min(f(tops[0]), f(bottoms[0]))\n        return -1 if ans == inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]) == 2\n    assert candidate(tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]) == -1\n\n\ncheck(Solution().minDominoRotations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\nA binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:\n        def dfs(preorder):\n            if not preorder:\n                return None\n            root = TreeNode(preorder[0])\n            left, right = 1, len(preorder)\n            while left < right:\n                mid = (left + right) >> 1\n                if preorder[mid] > preorder[0]:\n                    right = mid\n                else:\n                    left = mid + 1\n            root.left = dfs(preorder[1:left])\n            root.right = dfs(preorder[left:])\n            return root\n\n        return dfs(preorder)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(preorder = [8,5,1,7,10,12]), tree_node([8,5,10,1,7,None,12]))\n\n\ncheck(Solution().bstFromPreorder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\nGiven two strings source and target, return the minimum number of subsequences of source such that their concatenation equals target. If the task is impossible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestWay(self, source: str, target: str) -> int:\n```",
        "solutions": "class Solution:\n    def shortestWay(self, source: str, target: str) -> int:\n        def f(i, j):\n            while i < m and j < n:\n                if source[i] == target[j]:\n                    j += 1\n                i += 1\n            return j\n\n        m, n = len(source), len(target)\n        ans = j = 0\n        while j < n:\n            k = f(0, j)\n            if k == j:\n                return -1\n            j = k\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(source = \"abc\", target = \"abcbc\") == 2\n    assert candidate(source = \"abc\", target = \"acdbc\") == -1\n    assert candidate(source = \"xyz\", target = \"xzyxz\") == 3\n\n\ncheck(Solution().shortestWay)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a campus represented on the X-Y plane, there are n workers and m bikes, with n <= m.\nYou are given an array workers of length n where workers[i] = [xi, yi] is the position of the ith worker. You are also given an array bikes of length m where bikes[j] = [xj, yj] is the position of the jth bike. All the given positions are unique.\nAssign a bike to each worker. Among the available bikes and workers, we choose the (workeri, bikej) pair with the shortest Manhattan distance between each other and assign the bike to that worker.\nIf there are multiple (workeri, bikej) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index. If there are multiple ways to do that, we choose the pair with the smallest bike index. Repeat this process until there are no available workers.\nReturn an array answer of length n, where answer[i] is the index (0-indexed) of the bike that the ith worker is assigned to.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def assignBikes(\n        self, workers: List[List[int]], bikes: List[List[int]]\n    ) -> List[int]:\n        n, m = len(workers), len(bikes)\n        arr = []\n        for i, j in product(range(n), range(m)):\n            dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n            arr.append((dist, i, j))\n        arr.sort()\n        vis1 = [False] * n\n        vis2 = [False] * m\n        ans = [0] * n\n        for _, i, j in arr:\n            if not vis1[i] and not vis2[j]:\n                vis1[i] = vis2[j] = True\n                ans[i] = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]) == [1,0]\n    assert candidate(workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]) == [0,2,1]\n\n\ncheck(Solution().assignBikes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n\nGiven an integer n, return its complement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bitwiseComplement(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def bitwiseComplement(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 0\n        find = False\n        for i in range(30, -1, -1):\n            b = n & (1 << i)\n            if not find and b == 0:\n                continue\n            find = True\n            if b == 0:\n                ans |= 1 << i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(7) == 0\n    assert candidate(10) == 5\n\n\ncheck(Solution().bitwiseComplement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a list of songs where the ith song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        cnt = Counter(t % 60 for t in time)\n        ans = sum(cnt[x] * cnt[60 - x] for x in range(1, 30))\n        ans += cnt[0] * (cnt[0] - 1) // 2\n        ans += cnt[30] * (cnt[30] - 1) // 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(time = [30,20,150,100,40]) == 3\n    assert candidate(time = [60,60,60]) == 3\n\n\ncheck(Solution().numPairsDivisibleBy60)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        return n - self.f(n)\n\n    def f(self, n):\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    ans += A(10 - (m - i), i)\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 20) == 1\n    assert candidate(n = 100) == 10\n    assert candidate(n = 1000) == 262\n\n\ncheck(Solution().numDupDigitsAtMostN)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings of the same length s1 and s2 and a string baseStr.\nWe say s1[i] and s2[i] are equivalent characters.\n\nFor example, if s1 = \"abc\" and s2 = \"cde\", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.\n\nEquivalent characters follow the usual rules of any equivalence relation:\n\nReflexivity: 'a' == 'a'.\nSymmetry: 'a' == 'b' implies 'b' == 'a'.\nTransitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.\n\nFor example, given the equivalency information from s1 = \"abc\" and s2 = \"cde\", \"acd\" and \"aab\" are equivalent strings of baseStr = \"eed\", and \"aab\" is the lexicographically smallest equivalent string of baseStr.\nReturn the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:\n```",
        "solutions": "class Solution:\n    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:\n        p = list(range(26))\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i in range(len(s1)):\n            a, b = ord(s1[i]) - ord('a'), ord(s2[i]) - ord('a')\n            pa, pb = find(a), find(b)\n            if pa < pb:\n                p[pb] = pa\n            else:\n                p[pa] = pb\n\n        res = []\n        for a in baseStr:\n            a = ord(a) - ord('a')\n            res.append(chr(find(a) + ord('a')))\n        return ''.join(res)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\") == \"makkek\"\n    assert candidate(s1 = \"hello\", s2 = \"world\", baseStr = \"hold\") == \"hdld\"\n    assert candidate(s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\") == \"aauaaaaada\"\n\n\ncheck(Solution().smallestEquivalentString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums which is sorted in ascending order and all of its elements are unique and given also an integer k, return the kth missing number starting from the leftmost number of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        if k > missing(n - 1):\n            return nums[n - 1] + k - missing(n - 1)\n        l, r = 0, n - 1\n        while l < r:\n            mid = (l + r) >> 1\n            if missing(mid) >= k:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l - 1] + k - missing(l - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,7,9,10], k = 1) == 5\n    assert candidate(nums = [4,7,9,10], k = 3) == 8\n    assert candidate(nums = [1,2,4], k = 3) == 6\n\n\ncheck(Solution().missingElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the length of the longest repeating substrings. If no repeating substring exists, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1 if i else 1\n                    ans = max(ans, dp[i][j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"abcd\") == 0\n    assert candidate(\"abbaba\") == 2\n    assert candidate(\"aabcaabdaab\") == 3\n    assert candidate(\"aaaaa\") == 4\n\n\ncheck(Solution().longestRepeatingSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of non-empty subarrays with the leftmost element of the subarray\u00a0not larger than other elements in the subarray.\nA subarray is a contiguous part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validSubarrays(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def validSubarrays(self, nums: List[int]) -> int:\n        n = len(nums)\n        right = [n] * n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        return sum(j - i for i, j in enumerate(right))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,2,5,3]) == 11\n    assert candidate(nums = [3,2,1]) == 3\n    assert candidate(nums = [2,2,2]) == 6\n\n\ncheck(Solution().validSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n        s = sum(arr)\n        if s % 3 != 0:\n            return False\n        i, j = 0, len(arr) - 1\n        a = b = 0\n        while i < len(arr):\n            a += arr[i]\n            if a == s // 3:\n                break\n            i += 1\n        while ~j:\n            b += arr[j]\n            if b == s // 3:\n                break\n            j -= 1\n        return i < j - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [0,2,1,-6,6,-7,9,1,2,0,1]) == True\n    assert candidate(arr = [0,2,1,-6,6,7,9,-1,2,0,1]) == False\n    assert candidate(arr = [3,3,6,5,-2,2,5,1,-9,4]) == True\n\n\ncheck(Solution().canThreePartsEqualSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.\nThe score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.\nReturn the maximum score of a pair of sightseeing spots.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(values = [8,1,5,2,6]) == 11\n    assert candidate(values = [1,2]) == 2\n\n\ncheck(Solution().maxScoreSightseeingPair)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n. If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestRepunitDivByK(self, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestRepunitDivByK(self, k: int) -> int:\n        n = 1 % k\n        for i in range(1, k + 1):\n            if n == 0:\n                return i\n            n = (n * 10 + 1) % k\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 1) == 1\n    assert candidate(k = 2) == -1\n    assert candidate(k = 3) == 3\n\n\ncheck(Solution().smallestRepunitDivByK)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def queryString(self, s: str, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def queryString(self, s: str, n: int) -> bool:\n        if n > 1000:\n            return False\n        return all(bin(i)[2:] in s for i in range(n, n // 2, -1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0110\", n = 3) == True\n    assert candidate(s = \"0110\", n = 4) == False\n\n\ncheck(Solution().queryString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of distinct integers arr, where arr is sorted in ascending order, return the smallest index i that satisfies arr[i] == i. If there is no such index, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if arr[mid] >= mid:\n                right = mid\n            else:\n                left = mid + 1\n        return left if arr[left] == left else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [-10,-5,0,3,7]) == 3\n    assert candidate(arr = [0,2,5,8,17]) == 0\n    assert candidate(arr = [-10,-5,3,4,7,9]) == -1\n\n\ncheck(Solution().fixedPoint)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> int:\n        n, m = len(workers), len(bikes)\n        f = [[inf] * (1 << m) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, (x1, y1) in enumerate(workers, 1):\n            for j in range(1 << m):\n                for k, (x2, y2) in enumerate(bikes):\n                    if j >> k & 1:\n                        f[i][j] = min(\n                            f[i][j],\n                            f[i - 1][j ^ (1 << k)] + abs(x1 - x2) + abs(y1 - y2),\n                        )\n        return min(f[n])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]) == 6\n    assert candidate(workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]) == 4\n    assert candidate(workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]) == 4995\n\n\ncheck(Solution().assignBikes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\nWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\nWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\n\nNote that after rotating a number, we can ignore leading zeros.\n\nFor example, after rotating 8000, we have 0008 which is considered as just 8.\n\nGiven an integer n, return true if it is a confusing number, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def confusingNumber(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def confusingNumber(self, n: int) -> bool:\n        x, y = n, 0\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        while x:\n            x, v = divmod(x, 10)\n            if d[v] < 0:\n                return False\n            y = y * 10 + d[v]\n        return y != n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(6) == True\n    assert candidate(89) == True\n    assert candidate(11) == False\n    assert candidate(25) == False\n\n\ncheck(Solution().confusingNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return a binary string representing its representation in base -2.\nNote that the returned string should not have leading zeros unless the string is \"0\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def baseNeg2(self, n: int) -> str:\n```",
        "solutions": "class Solution:\n    def baseNeg2(self, n: int) -> str:\n        k = 1\n        ans = []\n        while n:\n            if n % 2:\n                ans.append('1')\n                n -= k\n            else:\n                ans.append('0')\n            n //= 2\n            k *= -1\n        return ''.join(ans[::-1]) or '0'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == \"110\"\n    assert candidate(n = 3) == \"111\"\n    assert candidate(n = 4) == \"100\"\n\n\ncheck(Solution().baseNeg2)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary array nums (0-indexed).\nWe define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).\n\nFor example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5.\n\nReturn an array of booleans answer where answer[i] is true if xi is divisible by 5.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def prefixesDivBy5(self, nums: List[int]) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def prefixesDivBy5(self, nums: List[int]) -> List[bool]:\n        ans = []\n        x = 0\n        for v in nums:\n            x = (x << 1 | v) % 5\n            ans.append(x == 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,1]) == [True,False,False]\n    assert candidate(nums = [1,1,1]) == [False,False,False]\n\n\ncheck(Solution().prefixesDivBy5)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list with n nodes.\nFor each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.\nReturn an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def nextLargerNodes(self, head: Optional[ListNode]) -> List[int]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def nextLargerNodes(self, head: Optional[ListNode]) -> List[int]:\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        stk = []\n        n = len(nums)\n        ans = [0] * n\n        for i in range(n - 1, -1, -1):\n            while stk and stk[-1] <= nums[i]:\n                stk.pop()\n            if stk:\n                ans[i] = stk[-1]\n            stk.append(nums[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([2,1,5])) == [5,5,0]\n    assert candidate(head = list_node([2,7,4,3,5])) == [7,0,5,5,0]\n\n\ncheck(Solution().nextLargerNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.\nReturn the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numEnclaves(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numEnclaves(self, grid: List[List[int]]) -> int:\n        def dfs(i, j):\n            grid[i][j] = 0\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y]:\n                    dfs(x, y)\n\n        m, n = len(grid), len(grid[0])\n        dirs = (-1, 0, 1, 0, -1)\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] and (i == 0 or i == m - 1 or j == 0 or j == n - 1):\n                    dfs(i, j)\n        return sum(v for row in grid for v in row)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]) == 3\n    assert candidate(grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]) == 0\n\n\ncheck(Solution().numEnclaves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string text and an array of strings words, return an array of all index pairs [i, j] so that the substring text[i...j] is in words.\nReturn the pairs [i, j] in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def indexPairs(self, text: str, words: List[str]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def indexPairs(self, text: str, words: List[str]) -> List[List[int]]:\n        words = set(words)\n        n = len(text)\n        return [\n            [i, j] for i in range(n) for j in range(i, n) if text[i : j + 1] in words\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"thestoryofleetcodeandme\", words = [\"story\",\"fleet\",\"leetcode\"]) == [[3,7],[9,13],[10,17]]\n    assert candidate(text = \"ababa\", words = [\"aba\",\"ab\"]) == [[0,1],[0,2],[2,3],[2,4]]\n\n\ncheck(Solution().indexPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s representing a list of words. Each letter in the word has one or more options.\n\nIf there is one option, the letter is represented as is.\nIf there is more than one option, then curly braces delimit the options. For example, \"{a,b,c}\" represents options [\"a\", \"b\", \"c\"].\n\nFor example, if s = \"a{b,c}\", the first character is always 'a', but the second character can be 'b' or 'c'. The original list is [\"ab\", \"ac\"].\nReturn all words that can be formed in this manner, sorted in lexicographical order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def expand(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def expand(self, s: str) -> List[str]:\n        def convert(s):\n            if not s:\n                return\n            if s[0] == '{':\n                j = s.find('}')\n                items.append(s[1:j].split(','))\n                convert(s[j + 1 :])\n            else:\n                j = s.find('{')\n                if j != -1:\n                    items.append(s[:j].split(','))\n                    convert(s[j:])\n                else:\n                    items.append(s.split(','))\n\n        def dfs(i, t):\n            if i == len(items):\n                ans.append(''.join(t))\n                return\n            for c in items[i]:\n                t.append(c)\n                dfs(i + 1, t)\n                t.pop()\n\n        items = []\n        convert(s)\n        ans = []\n        dfs(0, [])\n        ans.sort()\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"{a,b}c{d,e}f\") == [\"acdf\",\"acef\",\"bcdf\",\"bcef\"]\n    assert candidate(s = \"abcd\") == [\"abcd\"]\n\n\ncheck(Solution().expand)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\nWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\nWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\n\nNote that after rotating a number, we can ignore leading zeros.\n\nFor example, after rotating 8000, we have 0008 which is considered as just 8.\n\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def confusingNumberII(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def confusingNumberII(self, n: int) -> int:\n        def check(x: int) -> bool:\n            y, t = 0, x\n            while t:\n                t, v = divmod(t, 10)\n                y = y * 10 + d[v]\n            return x != y\n\n        def dfs(pos: int, limit: bool, x: int) -> int:\n            if pos >= len(s):\n                return int(check(x))\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if d[i] != -1:\n                    ans += dfs(pos + 1, limit and i == up, x * 10 + i)\n            return ans\n\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        s = str(n)\n        return dfs(0, True, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 20) == 6\n    assert candidate(n = 100) == 19\n\n\ncheck(Solution().confusingNumberII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\n\nFor example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.\n\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeOuterParentheses(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeOuterParentheses(self, s: str) -> str:\n        ans = []\n        cnt = 0\n        for c in s:\n            if c == '(':\n                cnt += 1\n                if cnt > 1:\n                    ans.append(c)\n            else:\n                cnt -= 1\n                if cnt > 0:\n                    ans.append(c)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(()())(())\") == \"()()()\"\n    assert candidate(s = \"(()())(())(()(()))\") == \"()()()()(())\"\n    assert candidate(s = \"()()\") == \"\"\n\n\ncheck(Solution().removeOuterParentheses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\nFor example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.\nThe test cases are generated so that the answer fits in a 32-bits integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumRootToLeaf(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumRootToLeaf(self, root: TreeNode) -> int:\n        def dfs(root, t):\n            if root is None:\n                return 0\n            t = (t << 1) | root.val\n            if root.left is None and root.right is None:\n                return t\n            return dfs(root.left, t) + dfs(root.right, t)\n\n        return dfs(root, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,0,1,0,1,0,1])) == 22\n    assert candidate(root = tree_node([0])) == 0\n\n\ncheck(Solution().sumRootToLeaf)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.\nA query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n        def check(s, t):\n            m, n = len(s), len(t)\n            i = j = 0\n            while j < n:\n                while i < m and s[i] != t[j] and s[i].islower():\n                    i += 1\n                if i == m or s[i] != t[j]:\n                    return False\n                i, j = i + 1, j + 1\n            while i < m and s[i].islower():\n                i += 1\n            return i == m\n\n        return [check(q, pattern) for q in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\") == [True,False,True,True,False]\n    assert candidate(queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\") == [True,False,True,False,False]\n    assert candidate(queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\") == [False,True,False,False,False]\n\n\ncheck(Solution().camelMatch)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\n\nFor example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].\n\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def videoStitching(self, clips: List[List[int]], time: int) -> int:\n```",
        "solutions": "class Solution:\n    def videoStitching(self, clips: List[List[int]], time: int) -> int:\n        last = [0] * time\n        for a, b in clips:\n            if a < time:\n                last[a] = max(last[a], b)\n        ans = mx = pre = 0\n        for i, v in enumerate(last):\n            mx = max(mx, v)\n            if mx <= i:\n                return -1\n            if pre == i:\n                ans += 1\n                pre = mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10) == 3\n    assert candidate(clips = [[0,1],[1,2]], time = 5) == -1\n    assert candidate(clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9) == 3\n\n\ncheck(Solution().videoStitching)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return 0 if the sum of the digits of the minimum integer in nums is odd, or 1 otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfDigits(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfDigits(self, nums: List[int]) -> int:\n        x = min(nums)\n        s = 0\n        while x:\n            s += x % 10\n            x //= 10\n        return s & 1 ^ 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([34,23,1,24,75,33,54,8]) == 0\n    assert candidate([99,77,33,66,55]) == 1\n\n\ncheck(Solution().sumOfDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of integers and\u00a0integer k, return the maximum sum such that there exists i < j with nums[i] + nums[j] = sum and sum < k. If no i, j exist satisfying this equation, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoSumLessThanK(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def twoSumLessThanK(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = -1\n        for i, x in enumerate(nums):\n            j = bisect_left(nums, k - x, lo=i + 1) - 1\n            if i < j:\n                ans = max(ans, x + nums[j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [34,23,1,24,75,33,54,8], k = 60) == 58\n    assert candidate(nums = [10,20,30], k = 15) == -1\n\n\ncheck(Solution().twoSumLessThanK)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob take turns playing a game, with Alice starting first.\nInitially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:\n\nChoosing any x with 0 < x < n and n % x == 0.\nReplacing the number n on the chalkboard with n - x.\n\nAlso, if a player cannot make a move, they lose the game.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divisorGame(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def divisorGame(self, n: int) -> bool:\n        return n % 2 == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == True\n    assert candidate(n = 3) == False\n\n\ncheck(Solution().divisorGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nNote that:\n\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nA sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[1] * 1001 for _ in range(n)]\n        ans = 0\n        for i in range(1, n):\n            for k in range(i):\n                j = nums[i] - nums[k] + 500\n                f[i][j] = max(f[i][j], f[k][j] + 1)\n                ans = max(ans, f[i][j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,6,9,12]) == 4\n    assert candidate(nums = [9,4,7,2,10]) == 3\n    assert candidate(nums = [20,1,15,3,10,5,8]) == 4\n\n\ncheck(Solution().longestArithSeqLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a year year and a month month, return the number of days of that month.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfDays(self, year: int, month: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfDays(self, year: int, month: int) -> int:\n        leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n        days = [0, 31, 29 if leap else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        return days[month]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(year = 1992, month = 7) == 31\n    assert candidate(year = 2000, month = 2) == 29\n    assert candidate(year = 1900, month = 2) == 28\n\n\ncheck(Solution().numberOfDays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, remove the vowels 'a', 'e', 'i', 'o', and 'u' from it, and return the new string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeVowels(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeVowels(self, s: str) -> str:\n        return \"\".join(c for c in s if c not in \"aeiou\")\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcodeisacommunityforcoders\") == \"ltcdscmmntyfrcdrs\"\n    assert candidate(s = \"aeiou\") == \"\"\n\n\ncheck(Solution().removeVowels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if and only if it is an Armstrong number.\nThe k-digit number n is an Armstrong number if and only if the kth power of each digit sums to n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isArmstrong(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isArmstrong(self, n: int) -> bool:\n        k = len(str(n))\n        s, x = 0, n\n        while x:\n            s += (x % 10) ** k\n            x //= 10\n        return s == n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 153) == True\n    assert candidate(n = 123) == False\n\n\ncheck(Solution().isArmstrong)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.\nA node a is an ancestor of b if either: any child of a is equal to b\u00a0or any child of a is an ancestor of b.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mi: int, mx: int):\n            if root is None:\n                return\n            nonlocal ans\n            ans = max(ans, abs(mi - root.val), abs(mx - root.val))\n            mi = min(mi, root.val)\n            mx = max(mx, root.val)\n            dfs(root.left, mi, mx)\n            dfs(root.right, mi, mx)\n\n        ans = 0\n        dfs(root, root.val, root.val)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([8,3,10,1,6,None,14,None,None,4,7,13])) == 7\n    assert candidate(root = tree_node([1,None,2,None,0,3])) == 3\n\n\ncheck(Solution().maxAncestorDiff)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti],\u00a0the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        return sum(costs[i][0] + costs[i + n][1] for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(costs = [[10,20],[30,200],[400,50],[30,20]]) == 110\n    assert candidate(costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]) == 1859\n    assert candidate(costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]) == 3086\n\n\ncheck(Solution().twoCitySchedCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the largest integer that only occurs once. If no integer occurs once, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestUniqueNumber(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def largestUniqueNumber(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        return max((x for x, v in cnt.items() if v == 1), default=-1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([5,7,3,9,4,9,8,3,1]) == 8\n    assert candidate([9,9,8,8]) == -1\n\n\ncheck(Solution().largestUniqueNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei.\nIn one semester, you can take any number of courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. If there is no way to take all the courses, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        g = defaultdict(list)\n        indeg = [0] * n\n        for prev, nxt in relations:\n            prev, nxt = prev - 1, nxt - 1\n            g[prev].append(nxt)\n            indeg[nxt] += 1\n        q = deque(i for i, v in enumerate(indeg) if v == 0)\n        ans = 0\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                i = q.popleft()\n                n -= 1\n                for j in g[i]:\n                    indeg[j] -= 1\n                    if indeg[j] == 0:\n                        q.append(j)\n        return -1 if n else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, relations = [[1,3],[2,3]]) == 2\n    assert candidate(n = 3, relations = [[1,2],[2,3],[3,1]]) == -1\n\n\ncheck(Solution().minimumSemesters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums sorted in non-decreasing order and an integer target, return true if target is a majority element, or false otherwise.\nA majority element in an array nums is an element that appears more than nums.length / 2 times in the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isMajorityElement(self, nums: List[int], target: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isMajorityElement(self, nums: List[int], target: int) -> bool:\n        left = bisect_left(nums, target)\n        right = bisect_right(nums, target)\n        return right - left > len(nums) // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,5,5,5,5,5,6,6], target = 5) == True\n    assert candidate(nums = [10,100,101,101], target = 101) == False\n\n\ncheck(Solution().isMajorityElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\n\nanswer[0] is the minimum number of moves you can play, and\nanswer[1] is the maximum number of moves you can play.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:\n        x, z = min(a, b, c), max(a, b, c)\n        y = a + b + c - x - z\n        mi = mx = 0\n        if z - x > 2:\n            mi = 1 if y - x < 3 or z - y < 3 else 2\n            mx = z - x - 2\n        return [mi, mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 1, b = 2, c = 5) == [1, 2]\n    assert candidate(a = 4, b = 3, c = 2) == [0, 0]\n\n\ncheck(Solution().numMovesStones)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.\nTwo squares are called adjacent if they are next to each other in any of the 4 directions.\nTwo squares belong to the same connected component if they have the same color and they are adjacent.\nThe border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).\nYou should color the border of the connected component that contains the square grid[row][col] with color.\nReturn the final grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def colorBorder(self, grid: List[List[int]], row: int, col: int, color: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def colorBorder(\n        self, grid: List[List[int]], row: int, col: int, color: int\n    ) -> List[List[int]]:\n        def dfs(i: int, j: int, c: int) -> None:\n            vis[i][j] = True\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if not vis[x][y]:\n                        if grid[x][y] == c:\n                            dfs(x, y, c)\n                        else:\n                            grid[i][j] = color\n                else:\n                    grid[i][j] = color\n\n        m, n = len(grid), len(grid[0])\n        vis = [[False] * n for _ in range(m)]\n        dfs(row, col, grid[row][col])\n        return grid\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1],[1,2]], row = 0, col = 0, color = 3) == [[3,3],[3,2]]\n    assert candidate(grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3) == [[1,3,3],[2,3,3]]\n    assert candidate(grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2) == [[2,2,2],[2,1,2],[2,2,2]]\n\n\ncheck(Solution().colorBorder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:\n\nnums1[i] == nums2[j], and\nthe line we draw does not intersect any other connecting (non-horizontal) line.\n\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for i in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,4,2], nums2 = [1,2,4]) == 2\n    assert candidate(nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]) == 3\n    assert candidate(nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]) == 2\n\n\ncheck(Solution().maxUncrossedLines)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once).\nReturn the sum of lengths of all good strings in words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n```",
        "solutions": "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        cnt = Counter(chars)\n        ans = 0\n        for w in words:\n            wc = Counter(w)\n            if all(cnt[c] >= v for c, v in wc.items()):\n                ans += len(w)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\") == 6\n    assert candidate(words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\") == 10\n\n\ncheck(Solution().countCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.\nCall a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\n\nIn particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\n\nanswer[0] is the minimum number of moves you can play, and\nanswer[1] is the maximum number of moves you can play.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n        stones.sort()\n        mi = n = len(stones)\n        mx = max(stones[-1] - stones[1] + 1, stones[-2] - stones[0] + 1) - (n - 1)\n        i = 0\n        for j, x in enumerate(stones):\n            while x - stones[i] + 1 > n:\n                i += 1\n            if j - i + 1 == n - 1 and x - stones[i] == n - 2:\n                mi = min(mi, 2)\n            else:\n                mi = min(mi, n - (j - i + 1))\n        return [mi, mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([7,4,9]) == [1,2]\n    assert candidate([6,5,4,3,10]) == [2,3]\n    assert candidate([100,101,104,102,103]) == [0,0]\n\n\ncheck(Solution().numMovesStonesII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\nA boomerang is a set of three points that are all distinct and not in a straight line.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        (x1, y1), (x2, y2), (x3, y3) = points\n        return (y2 - y1) * (x3 - x2) != (y3 - y2) * (x2 - x1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,1],[2,3],[3,2]]) == True\n    assert candidate(points = [[1,1],[2,2],[3,3]]) == False\n\n\ncheck(Solution().isBoomerang)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.\nReturn the smallest level x such that the sum of all the values of nodes at level x is maximal.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n        q = deque([root])\n        mx = -inf\n        i = 0\n        while q:\n            i += 1\n            s = 0\n            for _ in range(len(q)):\n                node = q.popleft()\n                s += node.val\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            if mx < s:\n                mx = s\n                ans = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,7,0,7,-8,None,None])) == 2\n    assert candidate(root = tree_node([989,None,10250,98693,-89388,None,None,None,-32127])) == 2\n\n\ncheck(Solution().maxLevelSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n grid\u00a0containing only values 0 and 1, where\u00a00 represents water\u00a0and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\u00a0If no land or water exists in the grid, return -1.\nThe distance used in this problem is the Manhattan distance:\u00a0the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        q = deque((i, j) for i in range(n) for j in range(n) if grid[i][j])\n        ans = -1\n        if len(q) in (0, n * n):\n            return ans\n        dirs = (-1, 0, 1, 0, -1)\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if 0 <= x < n and 0 <= y < n and grid[x][y] == 0:\n                        grid[x][y] = 1\n                        q.append((x, y))\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,1],[0,0,0],[1,0,1]]) == 2\n    assert candidate(grid = [[1,0,0],[0,0,0],[0,0,0]]) == 4\n\n\ncheck(Solution().maxDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:\n\nThe north direction is the positive direction of the y-axis.\nThe south direction is the negative direction of the y-axis.\nThe east direction is the positive direction of the x-axis.\nThe west direction is the negative direction of the x-axis.\n\nThe robot can receive one of three instructions:\n\n\"G\": go straight 1 unit.\n\"L\": turn 90 degrees to the left (i.e., anti-clockwise direction).\n\"R\": turn 90 degrees to the right (i.e., clockwise direction).\n\nThe robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        k = 0\n        dist = [0] * 4\n        for c in instructions:\n            if c == 'L':\n                k = (k + 1) % 4\n            elif c == 'R':\n                k = (k + 3) % 4\n            else:\n                dist[k] += 1\n        return (dist[0] == dist[2] and dist[1] == dist[3]) or k != 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(instructions = \"GGLLGG\") == True\n    assert candidate(instructions = \"GG\") == False\n    assert candidate(instructions = \"GL\") == True\n\n\ncheck(Solution().isRobotBounded)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        g = defaultdict(list)\n        for x, y in paths:\n            x, y = x - 1, y - 1\n            g[x].append(y)\n            g[y].append(x)\n        ans = [0] * n\n        for x in range(n):\n            used = {ans[y] for y in g[x]}\n            for c in range(1, 5):\n                if c not in used:\n                    ans[x] = c\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, paths = [[1,2],[2,3],[3,1]]) == [1,2,3]\n    assert candidate(n = 4, paths = [[1,2],[3,4]]) == [1,2,1,2]\n    assert candidate(n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]) == [1,2,3,4]\n\n\ncheck(Solution().gardenNoAdj)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        f = [0] * (n + 1)\n        for i in range(1, n + 1):\n            mx = 0\n            for j in range(i, max(0, i - k), -1):\n                mx = max(mx, arr[j - 1])\n                f[i] = max(f[i], f[j - 1] + mx * (i - j + 1))\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,15,7,9,2,5,10], k = 3) == 84\n    assert candidate(arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4) == 83\n    assert candidate(arr = [1], k = 1) == 1\n\n\ncheck(Solution().maxSumAfterPartitioning)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times.\u00a0The occurrences\u00a0may overlap.\nReturn any duplicated\u00a0substring that has the longest possible length.\u00a0If s does not have a duplicated substring, the answer is \"\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestDupSubstring(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def longestDupSubstring(self, s: str) -> str:\n        def check(l):\n            vis = set()\n            for i in range(n - l + 1):\n                t = s[i : i + l]\n                if t in vis:\n                    return t\n                vis.add(t)\n            return ''\n\n        n = len(s)\n        left, right = 0, n\n        ans = ''\n        while left < right:\n            mid = (left + right + 1) >> 1\n            t = check(mid)\n            ans = t or ans\n            if t:\n                left = mid\n            else:\n                right = mid - 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"banana\") == \"ana\"\n    assert candidate(s = \"abcd\") == \"\"\n\n\ncheck(Solution().longestDupSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a special keyboard with all keys in a single row.\nGiven a string keyboard of length 26 indicating the layout of the keyboard (indexed from 0 to 25). Initially, your finger is at index 0. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index i to index j is |i - j|.\nYou want to type a string word. Write a function to calculate how much time it takes to type it with one finger.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calculateTime(self, keyboard: str, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def calculateTime(self, keyboard: str, word: str) -> int:\n        pos = {c: i for i, c in enumerate(keyboard)}\n        ans = i = 0\n        for c in word:\n            ans += abs(pos[c] - i)\n            i = pos[c]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"cba\") == 4\n    assert candidate(keyboard = \"pqrstuvwxyzabcdefghijklmno\", word = \"leetcode\") == 73\n\n\ncheck(Solution().calculateTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.\nIn one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.\nReturn true if and only if you can transform str1 into str2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canConvert(self, str1: str, str2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canConvert(self, str1: str, str2: str) -> bool:\n        if str1 == str2:\n            return True\n        if len(set(str2)) == 26:\n            return False\n        d = {}\n        for a, b in zip(str1, str2):\n            if a not in d:\n                d[a] = b\n            elif d[a] != b:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(str1 = \"aabcc\", str2 = \"ccdee\") == True\n    assert candidate(str1 = \"leetcode\", str2 = \"codeleet\") == False\n\n\ncheck(Solution().canConvert)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have some number of sticks with positive integer lengths. These lengths are given as an array\u00a0sticks, where\u00a0sticks[i]\u00a0is the length of the\u00a0ith\u00a0stick.\nYou can connect any two sticks of lengths x and y into one stick\u00a0by paying a cost of x + y. You must connect\u00a0all the sticks until there is only one stick remaining.\nReturn\u00a0the minimum cost of connecting all the given sticks into one stick in this way.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def connectSticks(self, sticks: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def connectSticks(self, sticks: List[int]) -> int:\n        heapify(sticks)\n        ans = 0\n        while len(sticks) > 1:\n            z = heappop(sticks) + heappop(sticks)\n            ans += z\n            heappush(sticks, z)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sticks = [2,4,3]) == 14\n    assert candidate(sticks = [1,8,3,5]) == 30\n    assert candidate(sticks = [5]) == 0\n\n\ncheck(Solution().connectSticks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\n\nIf x == y, both stones are destroyed, and\nIf x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\n\nAt the end of the game, there is at most one stone left.\nReturn the weight of the last remaining stone. If there are no stones left, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        h = [-x for x in stones]\n        heapify(h)\n        while len(h) > 1:\n            y, x = -heappop(h), -heappop(h)\n            if x != y:\n                heappush(h, x - y)\n        return 0 if not h else -h[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([2,7,4,1,8,1]) == 1\n\n\ncheck(Solution().lastStoneWeight)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeDuplicates(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeDuplicates(self, s: str) -> str:\n        stk = []\n        for c in s:\n            if stk and stk[-1] == c:\n                stk.pop()\n            else:\n                stk.append(c)\n        return ''.join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"abbaca\") == \"ca\"\n\n\ncheck(Solution().removeDuplicates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\n\nFor example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\".\n\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        def check(w1, w2):\n            if len(w2) - len(w1) != 1:\n                return False\n            i = j = cnt = 0\n            while i < len(w1) and j < len(w2):\n                if w1[i] != w2[j]:\n                    cnt += 1\n                else:\n                    i += 1\n                j += 1\n            return cnt < 2 and i == len(w1)\n\n        n = len(words)\n        dp = [1] * (n + 1)\n        words.sort(key=lambda x: len(x))\n        res = 1\n        for i in range(1, n):\n            for j in range(i):\n                if check(words[j], words[i]):\n                    dp[i] = max(dp[i], dp[j] + 1)\n            res = max(res, dp[i])\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]) == 4\n    assert candidate(words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]) == 5\n    assert candidate(words = [\"abcd\",\"dbqca\"]) == 1\n\n\ncheck(Solution().longestStrChain)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:\n\nIf x == y, both stones are destroyed, and\nIf x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\n\nAt the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone. If there are no stones left, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        s = sum(stones)\n        m, n = len(stones), s >> 1\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(n + 1):\n                dp[i][j] = dp[i - 1][j]\n                if stones[i - 1] <= j:\n                    dp[i][j] = max(\n                        dp[i][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]\n                    )\n        return s - 2 * dp[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(stones = [2,7,4,1,8,1]) == 1\n    assert candidate(stones = [31,26,33,21,40]) == 5\n\n\ncheck(Solution().lastStoneWeightII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of substrings that have only one distinct letter.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countLetters(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countLetters(self, s: str) -> int:\n        n = len(s)\n        i = ans = 0\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            ans += (1 + j - i) * (j - i) // 2\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaaba\") == 8\n    assert candidate(s = \"aaaaaaaaaa\") == 55\n\n\ncheck(Solution().countLetters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the last substring of s in lexicographical order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lastSubstring(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def lastSubstring(self, s: str) -> str:\n        i, j, k = 0, 1, 0\n        while j + k < len(s):\n            if s[i + k] == s[j + k]:\n                k += 1\n            elif s[i + k] < s[j + k]:\n                i += k + 1\n                k = 0\n                if i >= j:\n                    j = i + 1\n            else:\n                j += k + 1\n                k = 0\n        return s[i:]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abab\") == \"bab\"\n    assert candidate(s = \"leetcode\") == \"tcode\"\n\n\ncheck(Solution().lastSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array colors, in which there are three colors: 1, 2 and\u00a03.\nYou are also given some queries. Each query consists of two integers i\u00a0and c, return\u00a0the shortest distance between the given index\u00a0i and the target color c. If there is no solution return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def shortestDistanceColor(\n        self, colors: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n = len(colors)\n        right = [[inf] * 3 for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(3):\n                right[i][j] = right[i + 1][j]\n            right[i][colors[i] - 1] = i\n        left = [[-inf] * 3 for _ in range(n + 1)]\n        for i, c in enumerate(colors, 1):\n            for j in range(3):\n                left[i][j] = left[i - 1][j]\n            left[i][c - 1] = i - 1\n        ans = []\n        for i, c in queries:\n            d = min(i - left[i + 1][c - 1], right[i][c - 1] - i)\n            ans.append(-1 if d > n else d)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]) == [3,0,3]\n    assert candidate(colors = [1,2], queries = [[0,3]]) == [-1]\n\n\ncheck(Solution().shortestDistanceColor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a bookstore owner that has a store open for n minutes. You are given an integer array customers of length n where customers[i] is the number of the customers that enter the store at the start of the ith minute and all those customers leave after the end of that minute.\nDuring certain minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.\nWhen the bookstore owner is grumpy, the customers entering during that minute are not satisfied. Otherwise, they are satisfied.\nThe bookstore owner knows a secret technique to remain not grumpy for minutes consecutive minutes, but this technique can only be used once.\nReturn the maximum number of customers that can be satisfied throughout the day.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxSatisfied(\n        self, customers: List[int], grumpy: List[int], minutes: int\n    ) -> int:\n        mx = cnt = sum(c * g for c, g in zip(customers[:minutes], grumpy))\n        for i in range(minutes, len(customers)):\n            cnt += customers[i] * grumpy[i]\n            cnt -= customers[i - minutes] * grumpy[i - minutes]\n            mx = max(mx, cnt)\n        return sum(c * (g ^ 1) for c, g in zip(customers, grumpy)) + mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3) == 16\n    assert candidate(customers = [1], grumpy = [0], minutes = 1) == 1\n\n\ncheck(Solution().maxSatisfied)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. If it cannot be done, then return the same array.\nNote that a swap exchanges the positions of two numbers arr[i] and arr[j]\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        for i in range(n - 1, 0, -1):\n            if arr[i - 1] > arr[i]:\n                for j in range(n - 1, i - 1, -1):\n                    if arr[j] < arr[i - 1] and arr[j] != arr[j - 1]:\n                        arr[i - 1], arr[j] = arr[j], arr[i - 1]\n                        return arr\n        return arr\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,2,1]) == [3,1,2]\n    assert candidate(arr = [1,1,5]) == [1,1,5]\n    assert candidate(arr = [1,9,4,6,7]) == [1,7,4,6,9]\n\n\ncheck(Solution().prevPermOpt1)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have some apples and a basket that can carry up to 5000 units of weight.\nGiven an integer array weight where weight[i] is the weight of the ith apple, return the maximum number of apples you can put in the basket.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumberOfApples(self, weight: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxNumberOfApples(self, weight: List[int]) -> int:\n        weight.sort()\n        s = 0\n        for i, x in enumerate(weight):\n            s += x\n            if s > 5000:\n                return i\n        return len(weight)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(weight = [100,200,150,1000]) == 4\n    assert candidate(weight = [900,950,800,1000,700,800]) == 5\n\n\ncheck(Solution().maxNumberOfApples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].\nA knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nReturn the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minKnightMoves(self, x: int, y: int) -> int:\n```",
        "solutions": "class Solution:\n    def minKnightMoves(self, x: int, y: int) -> int:\n        q = deque([(0, 0)])\n        ans = 0\n        vis = {(0, 0)}\n        dirs = ((-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1))\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                if (i, j) == (x, y):\n                    return ans\n                for a, b in dirs:\n                    c, d = i + a, j + b\n                    if (c, d) not in vis:\n                        vis.add((c, d))\n                        q.append((c, d))\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 2, y = 1) == 1\n    assert candidate(x = 5, y = 5) == 4\n\n\ncheck(Solution().minKnightMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix mat where every row is sorted in strictly increasing order, return the smallest common element in all rows.\nIf there is no common element, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestCommonElement(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def smallestCommonElement(self, mat: List[List[int]]) -> int:\n        cnt = Counter()\n        for row in mat:\n            for x in row:\n                cnt[x] += 1\n                if cnt[x] == len(mat):\n                    return x\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]) == 5\n    assert candidate(mat = [[1,2,3],[2,3,4],[2,3,5]]) == 2\n\n\ncheck(Solution().smallestCommonElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n houses in a village. We want to supply water for all the houses by building wells and laying pipes.\nFor each house i, we can either build a well inside it directly with cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array pipes where each pipes[j] = [house1j, house2j, costj] represents the cost to connect house1j and house2j together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.\nReturn the minimum total cost to supply water to all houses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minCostToSupplyWater(\n        self, n: int, wells: List[int], pipes: List[List[int]]\n    ) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i, w in enumerate(wells, 1):\n            pipes.append([0, i, w])\n        pipes.sort(key=lambda x: x[2])\n        p = list(range(n + 1))\n        ans = 0\n        for a, b, c in pipes:\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                n -= 1\n                ans += c\n                if n == 0:\n                    return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]) == 3\n    assert candidate(n = 2, wells = [1,1], pipes = [[1,2,1]]) == 2\n\n\ncheck(Solution().minCostToSupplyWater)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a matrix\u00a0and a target, return the number of non-empty submatrices that sum to target.\nA submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.\nTwo submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate\u00a0that is different: for example, if x1 != x1'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:\n        def f(nums: List[int]) -> int:\n            d = defaultdict(int)\n            d[0] = 1\n            cnt = s = 0\n            for x in nums:\n                s += x\n                cnt += d[s - target]\n                d[s] += 1\n            return cnt\n\n        m, n = len(matrix), len(matrix[0])\n        ans = 0\n        for i in range(m):\n            col = [0] * n\n            for j in range(i, m):\n                for k in range(n):\n                    col[k] += matrix[j][k]\n                ans += f(col)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0) == 4\n    assert candidate(matrix = [[1,-1],[-1,1]], target = 0) == 5\n    assert candidate(matrix = [[904]], target = 0) == 0\n\n\ncheck(Solution().numSubmatrixSumTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFor two strings s and t, we say \"t divides s\" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n```",
        "solutions": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def check(a, b):\n            c = \"\"\n            while len(c) < len(b):\n                c += a\n            return c == b\n\n        for i in range(min(len(str1), len(str2)), 0, -1):\n            t = str1[:i]\n            if check(t, str1) and check(t, str2):\n                return t\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(str1 = \"ABCABC\", str2 = \"ABC\") == \"ABC\"\n    assert candidate(str1 = \"ABABAB\", str2 = \"ABAB\") == \"AB\"\n    assert candidate(str1 = \"LEET\", str2 = \"CODE\") == \"\"\n\n\ncheck(Solution().gcdOfStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix matrix.\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).\nReturn the maximum number of rows that have all values equal after some number of flips.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:\n        cnt = Counter()\n        for row in matrix:\n            t = tuple(row) if row[0] == 0 else tuple(x ^ 1 for x in row)\n            cnt[t] += 1\n        return max(cnt.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[0,1],[1,1]]) == 1\n    assert candidate(matrix = [[0,1],[1,0]]) == 2\n    assert candidate(matrix = [[0,0,0],[0,0,1],[1,1,0]]) == 2\n\n\ncheck(Solution().maxEqualRowsAfterFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two numbers arr1 and arr2 in base -2, return the result of adding them together.\nEach number is given in array format:\u00a0 as an array of 0s and 1s, from most significant bit to least significant bit.\u00a0 For example, arr = [1,1,0,1] represents the number (-2)^3\u00a0+ (-2)^2 + (-2)^0 = -3.\u00a0 A number arr in array, format is also guaranteed to have no leading zeros: either\u00a0arr == [0] or arr[0] == 1.\nReturn the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:\n        i, j = len(arr1) - 1, len(arr2) - 1\n        c = 0\n        ans = []\n        while i >= 0 or j >= 0 or c:\n            a = 0 if i < 0 else arr1[i]\n            b = 0 if j < 0 else arr2[j]\n            x = a + b + c\n            c = 0\n            if x >= 2:\n                x -= 2\n                c -= 1\n            elif x == -1:\n                x = 1\n                c += 1\n            ans.append(x)\n            i, j = i - 1, j - 1\n        while len(ans) > 1 and ans[-1] == 0:\n            ans.pop()\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [1,1,1,1,1], arr2 = [1,0,1]) == [1,0,0,0,0]\n    assert candidate(arr1 = [0], arr2 = [0]) == [0]\n    assert candidate(arr1 = [0], arr2 = [1]) == [1]\n\n\ncheck(Solution().addNegabinary)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven three integer arrays arr1, arr2 and arr3\u00a0sorted in strictly increasing order, return a sorted array of only\u00a0the\u00a0integers that appeared in all three arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def arraysIntersection(\n        self, arr1: List[int], arr2: List[int], arr3: List[int]\n    ) -> List[int]:\n        cnt = Counter(arr1 + arr2 + arr3)\n        return [x for x in arr1 if cnt[x] == 3]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]) == [1,5]\n    assert candidate(arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]) == []\n\n\ncheck(Solution().arraysIntersection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\n\nFor example, 321 is a stepping number while 421 is not.\n\nGiven two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        ans = []\n        if low == 0:\n            ans.append(0)\n        q = deque(range(1, 10))\n        while q:\n            v = q.popleft()\n            if v > high:\n                break\n            if v >= low:\n                ans.append(v)\n            x = v % 10\n            if x:\n                q.append(v * 10 + x - 1)\n            if x < 9:\n                q.append(v * 10 + x + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(low = 0, high = 21) == [0,1,2,3,4,5,6,7,8,9,10,12,21]\n\n\ncheck(Solution().countSteppingNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nConsider a matrix M with dimensions width * height, such that every cell has value 0\u00a0or 1, and any square\u00a0sub-matrix of M of size sideLength * sideLength\u00a0has at most maxOnes\u00a0ones.\nReturn the maximum possible number of ones that the matrix M can have.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumNumberOfOnes(self, width: int, height: int, sideLength: int, maxOnes: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumNumberOfOnes(\n        self, width: int, height: int, sideLength: int, maxOnes: int\n    ) -> int:\n        x = sideLength\n        cnt = [0] * (x * x)\n        for i in range(width):\n            for j in range(height):\n                k = (i % x) * x + (j % x)\n                cnt[k] += 1\n        cnt.sort(reverse=True)\n        return sum(cnt[:maxOnes])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(width = 3, height = 3, sideLength = 2, maxOnes = 1) == 4\n    assert candidate(width = 3, height = 3, sideLength = 2, maxOnes = 2) == 6\n\n\ncheck(Solution().maximumNumberOfOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second.\nReturn an array of all the words third for each occurrence of \"first second third\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:\n        words = text.split()\n        ans = []\n        for i in range(len(words) - 2):\n            a, b, c = words[i : i + 3]\n            if a == first and b == second:\n                ans.append(c)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\") == [\"girl\",\"student\"]\n    assert candidate(text = \"we will we will rock you\", first = \"we\", second = \"will\") == [\"we\",\"rock\"]\n\n\ncheck(Solution().findOcurrences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.\nA node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.\nA leaf is a node with no children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sufficientSubset(self, root: Optional[TreeNode], limit: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sufficientSubset(\n        self, root: Optional[TreeNode], limit: int\n    ) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        limit -= root.val\n        if root.left is None and root.right is None:\n            return None if limit > 0 else root\n        root.left = self.sufficientSubset(root.left, limit)\n        root.right = self.sufficientSubset(root.right, limit)\n        return None if root.left is None and root.right is None else root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14]), limit = 1), tree_node([1,2,3,4,None,None,7,8,9,None,14]))\n    assert is_same_tree(candidate(root = tree_node([5,4,8,11,None,17,4,7,1,None,None,5,3]), limit = 22), tree_node([5,4,8,11,None,17,4,7,None,None,None,5]))\n    assert is_same_tree(candidate(root = tree_node([1,2,-3,-5,None,4,None]), limit = -1), tree_node([1,None,-3,4]))\n\n\ncheck(Solution().sufficientSubset)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestSubsequence(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return \"\".join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"bcabc\") == \"abc\"\n    assert candidate(s = \"cbacdcbc\") == \"acdb\"\n\n\ncheck(Solution().smallestSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n\u00a0\u00a0tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n```",
        "solutions": "class Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        def dfs(cnt: Counter) -> int:\n            ans = 0\n            for i, x in cnt.items():\n                if x > 0:\n                    ans += 1\n                    cnt[i] -= 1\n                    ans += dfs(cnt)\n                    cnt[i] += 1\n            return ans\n\n        cnt = Counter(tiles)\n        return dfs(cnt)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"AAB\") == 8\n    assert candidate(\"AAABBC\") == 188\n    assert candidate(\"V\") == 1\n\n\ncheck(Solution().numTilePossibilities)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn some array arr, the values were in arithmetic progression: the values arr[i + 1] - arr[i] are all equal for every 0 <= i < arr.length - 1.\nA value from arr was removed that was not the first or last value in the array.\nGiven arr, return the removed value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def missingNumber(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def missingNumber(self, arr: List[int]) -> int:\n        return (arr[0] + arr[-1]) * (len(arr) + 1) // 2 - sum(arr)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [5,7,11,13]) == 9\n    assert candidate(arr = [15,13,12]) == 14\n\n\ncheck(Solution().missingNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the availability time slots arrays slots1 and slots2 of two people and a meeting duration duration, return the earliest time slot that works for both of them and is of duration duration.\nIf there is no common time slot that satisfies the requirements, return an empty array.\nThe format of a time slot is an array of two elements [start, end] representing an inclusive time range from start to end.\nIt is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots [start1, end1] and [start2, end2] of the same person, either start1 > end2 or start2 > end1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minAvailableDuration(\n        self, slots1: List[List[int]], slots2: List[List[int]], duration: int\n    ) -> List[int]:\n        slots1.sort()\n        slots2.sort()\n        m, n = len(slots1), len(slots2)\n        i = j = 0\n        while i < m and j < n:\n            start = max(slots1[i][0], slots2[j][0])\n            end = min(slots1[i][1], slots2[j][1])\n            if end - start >= duration:\n                return [start, start + duration]\n            if slots1[i][1] < slots2[j][1]:\n                i += 1\n            else:\n                j += 1\n        return []\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8) == [60,68]\n    assert candidate(slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12) == []\n\n\ncheck(Solution().minAvailableDuration)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have some coins.\u00a0 The i-th\u00a0coin has a probability\u00a0prob[i] of facing heads when tossed.\nReturn the probability that the number of coins facing heads equals target if you toss every coin exactly once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n```",
        "solutions": "class Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        n = len(prob)\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i, p in enumerate(prob, 1):\n            for j in range(min(i, target) + 1):\n                f[i][j] = (1 - p) * f[i - 1][j]\n                if j:\n                    f[i][j] += p * f[i - 1][j - 1]\n        return f[n][target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prob = [0.4], target = 1) == 0.40000\n    assert candidate(prob = [0.5,0.5,0.5,0.5,0.5], target = 0) == 0.03125\n\n\ncheck(Solution().probabilityOfHeads)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a list of blocks, where blocks[i] = t means that the\u00a0i-th block needs\u00a0t\u00a0units of time to be built. A block can only be built by exactly one worker.\nA worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.\nThe time cost of spliting one worker into two workers is\u00a0given as an integer split. Note that if two workers split at the same time, they split in parallel so the cost would be\u00a0split.\nOutput the minimum time needed to build all blocks.\nInitially, there is only one worker.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minBuildTime(self, blocks: List[int], split: int) -> int:\n```",
        "solutions": "class Solution:\n    def minBuildTime(self, blocks: List[int], split: int) -> int:\n        heapify(blocks)\n        while len(blocks) > 1:\n            heappop(blocks)\n            heappush(blocks, heappop(blocks) + split)\n        return blocks[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(blocks = [1], split = 1) == 1\n    assert candidate(blocks = [1,2], split = 5) == 7\n    assert candidate(blocks = [1,2,3], split = 1) == 4\n\n\ncheck(Solution().minBuildTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given n item's value and label as two integer arrays values and labels. You are also given two integers numWanted and useLimit.\nYour task is to find a subset of items with the maximum sum of their values such that:\n\nThe number of items is at most numWanted.\nThe number of items with the same label is at most useLimit.\n\nReturn the maximum sum.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestValsFromLabels(self, values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:\n```",
        "solutions": "class Solution:\n    def largestValsFromLabels(\n        self, values: List[int], labels: List[int], numWanted: int, useLimit: int\n    ) -> int:\n        ans = num = 0\n        cnt = Counter()\n        for v, l in sorted(zip(values, labels), reverse=True):\n            if cnt[l] < useLimit:\n                cnt[l] += 1\n                num += 1\n                ans += v\n                if num == numWanted:\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1) == 9\n    assert candidate(values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2) == 12\n    assert candidate(values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1) == 16\n\n\ncheck(Solution().largestValsFromLabels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:\n```",
        "solutions": "class Solution:\n    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:\n        m, n = len(str1), len(str2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        ans = []\n        i, j = m, n\n        while i or j:\n            if i == 0:\n                j -= 1\n                ans.append(str2[j])\n            elif j == 0:\n                i -= 1\n                ans.append(str1[i])\n            else:\n                if f[i][j] == f[i - 1][j]:\n                    i -= 1\n                    ans.append(str1[i])\n                elif f[i][j] == f[i][j - 1]:\n                    j -= 1\n                    ans.append(str2[j])\n                else:\n                    i, j = i - 1, j - 1\n                    ans.append(str1[i])\n        return ''.join(ans[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(str1 = \"abac\", str2 = \"cab\") == \"cabac\"\n    assert candidate(str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\") == \"aaaaaaaa\"\n\n\ncheck(Solution().shortestCommonSupersequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.\nA clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\n\nAll the visited cells of the path are 0.\nAll the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n\nThe length of a clear path is the number of visited cells of this path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0]:\n            return -1\n        n = len(grid)\n        grid[0][0] = 1\n        q = deque([(0, 0)])\n        ans = 1\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                if i == j == n - 1:\n                    return ans\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < n and 0 <= y < n and grid[x][y] == 0:\n                            grid[x][y] = 1\n                            q.append((x, y))\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1],[1,0]]) == 2\n    assert candidate(grid = [[0,0,0],[1,1,0],[1,1,0]]) == 4\n    assert candidate(grid = [[1,0,0],[1,1,0],[1,1,0]]) == -1\n\n\ncheck(Solution().shortestPathBinaryMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an initial array arr, every day you produce a new array using the array of the previous day.\nOn the i-th day, you do the following operations on the array of day\u00a0i-1\u00a0to produce the array of day i:\n\nIf an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.\nIf an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.\nThe first\u00a0and last elements never change.\n\nAfter some days, the array does not change. Return that final array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def transformArray(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def transformArray(self, arr: List[int]) -> List[int]:\n        f = True\n        while f:\n            f = False\n            t = arr[:]\n            for i in range(1, len(t) - 1):\n                if t[i] > t[i - 1] and t[i] > t[i + 1]:\n                    arr[i] -= 1\n                    f = True\n                if t[i] < t[i - 1] and t[i] < t[i + 1]:\n                    arr[i] += 1\n                    f = True\n        return arr\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([6,2,3,4]) == [6,3,3,4]\n    assert candidate([1,6,3,4,3,5]) == [1,4,4,4,4,5]\n\n\ncheck(Solution().transformArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe diameter of a tree is the number of edges in the longest path in that tree.\nThere is an undirected tree of n nodes labeled from 0 to n - 1. You are given a 2D array edges where edges.length == n - 1 and edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree.\nReturn the diameter of the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n        def dfs(i: int, fa: int, t: int):\n            for j in g[i]:\n                if j != fa:\n                    dfs(j, i, t + 1)\n            nonlocal ans, a\n            if ans < t:\n                ans = t\n                a = i\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        ans = a = 0\n        dfs(0, -1, 0)\n        dfs(a, -1, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[0,1],[0,2]]) == 2\n    assert candidate(edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]) == 4\n\n\ncheck(Solution().treeDiameter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, return true if s is a k-palindrome.\nA string is k-palindrome if it can be transformed into a palindrome by removing at most k characters from it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n                if f[i][j] + k >= n:\n                    return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcdeca\", k = 2) == True\n    assert candidate(s = \"abbababa\", k = 1) == True\n\n\ncheck(Solution().isValidPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\nYou are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.\nReturn true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n```",
        "solutions": "class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        mx = max(e[2] for e in trips)\n        d = [0] * (mx + 1)\n        for x, f, t in trips:\n            d[f] += x\n            d[t] -= x\n        return all(s <= capacity for s in accumulate(d))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(trips = [[2,1,5],[3,3,7]], capacity = 4) == False\n    assert candidate(trips = [[2,1,5],[3,3,7]], capacity = 5) == True\n\n\ncheck(Solution().carPooling)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nUnder the grammar given below, strings can represent a set of lowercase words. Let\u00a0R(expr)\u00a0denote the set of words the expression represents.\nThe grammar can best be understood through simple examples:\n\nSingle letters represent a singleton set containing that word.\n\t\nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\n\nWhen we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\t\nR(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}\nR(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"} (notice the final set only contains each word at most once)\n\n\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t\nR(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}\nR(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}\n\n\n\nFormally, the three rules for our grammar:\n\nFor every lowercase letter x, we have R(x) = {x}.\nFor expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...\nFor expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) \u00d7 R(e2)}, where + denotes concatenation, and \u00d7 denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        def dfs(exp):\n            j = exp.find('}')\n            if j == -1:\n                s.add(exp)\n                return\n            i = exp.rfind('{', 0, j - 1)\n            a, c = exp[:i], exp[j + 1 :]\n            for b in exp[i + 1 : j].split(','):\n                dfs(a + b + c)\n\n        s = set()\n        dfs(expression)\n        return sorted(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(expression = \"{a,b}{c,{d,e}}\") == [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n    assert candidate(expression = \"{{a,z},a{b,c},{ab,z}}\") == [\"a\",\"ab\",\"ac\",\"z\"]\n\n\ncheck(Solution().braceExpansionII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-negative integer num, Return its encoding string.\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def encode(self, num: int) -> str:\n```",
        "solutions": "class Solution:\n    def encode(self, num: int) -> str:\n        return bin(num + 1)[3:]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 23) == \"1000\"\n    assert candidate(num = 107) == \"101100\"\n\n\ncheck(Solution().encode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn an infinite binary tree where every node has two children, the nodes are labelled in row order.\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the\u00a0node with that label.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pathInZigZagTree(self, label: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def pathInZigZagTree(self, label: int) -> List[int]:\n        x = i = 1\n        while (x << 1) <= label:\n            x <<= 1\n            i += 1\n        ans = [0] * i\n        while i:\n            ans[i - 1] = label\n            label = ((1 << (i - 1)) + (1 << i) - 1 - label) >> 1\n            i -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(label = 14) == [1,3,4,14]\n    assert candidate(label = 26) == [1,2,6,10,26]\n\n\ncheck(Solution().pathInZigZagTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe distribute some\u00a0number of candies, to a row of n =\u00a0num_people\u00a0people in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give n\u00a0candies to the last person.\nThen, we go back to the start of the row, giving n\u00a0+ 1 candies to the first person, n\u00a0+ 2 candies to the second person, and so on until we give 2 * n\u00a0candies to the last person.\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\u00a0 The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\nReturn an array (of length num_people\u00a0and sum candies) that represents the final distribution of candies.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n        ans = [0] * num_people\n        i = 0\n        while candies:\n            ans[i % num_people] += min(candies, i + 1)\n            candies -= min(candies, i + 1)\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candies = 7, num_people = 4) == [1,2,3,1]\n    assert candidate(candies = 10, num_people = 3) == [5,2,3]\n\n\ncheck(Solution().distributeCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.\nWe want to place these books in order onto bookcase shelves that have a total width shelfWidth.\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\n\nFor example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\n\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:\n```",
        "solutions": "class Solution:\n    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:\n        n = len(books)\n        f = [0] * (n + 1)\n        for i, (w, h) in enumerate(books, 1):\n            f[i] = f[i - 1] + h\n            for j in range(i - 1, 0, -1):\n                w += books[j - 1][0]\n                if w > shelfWidth:\n                    break\n                h = max(h, books[j - 1][1])\n                f[i] = min(f[i], f[j - 1] + h)\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4) == 6\n\n\ncheck(Solution().minHeightShelves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit '0' with the letter 'O', and the digit '1' with the letter 'I'. Such a representation is valid if and only if it consists only of the letters in the set {'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}.\nGiven a string num representing a decimal integer n, return the Hexspeak representation of n if it is valid, otherwise return \"ERROR\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def toHexspeak(self, num: str) -> str:\n```",
        "solutions": "class Solution:\n    def toHexspeak(self, num: str) -> str:\n        s = set('ABCDEFIO')\n        t = hex(int(num))[2:].upper().replace('0', 'O').replace('1', 'I')\n        return t if all(c in s for c in t) else 'ERROR'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"257\") == \"IOI\"\n    assert candidate(num = \"3\") == \"ERROR\"\n\n\ncheck(Solution().toHexspeak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form [a, b). A real number x is in the set if one of its intervals [a, b) contains x (i.e. a <= x < b).\nYou are given a sorted list of disjoint intervals intervals representing a set of real numbers as described above, where intervals[i] = [ai, bi] represents the interval [ai, bi). You are also given another interval toBeRemoved.\nReturn the set of real numbers with the interval toBeRemoved removed from intervals. In other words, return the set of real numbers such that every x in the set is in intervals but not in toBeRemoved. Your answer should be a sorted list of disjoint intervals as described above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeInterval(self, intervals: List[List[int]], toBeRemoved: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def removeInterval(\n        self, intervals: List[List[int]], toBeRemoved: List[int]\n    ) -> List[List[int]]:\n        x, y = toBeRemoved\n        ans = []\n        for a, b in intervals:\n            if a >= y or b <= x:\n                ans.append([a, b])\n            else:\n                if a < x:\n                    ans.append([a, x])\n                if b > y:\n                    ans.append([y, b])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]) == [[0,1],[6,7]]\n    assert candidate(intervals = [[0,5]], toBeRemoved = [2,3]) == [[0,2],[3,5]]\n    assert candidate(intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]) == [[-5,-4],[-3,-2],[4,5],[8,9]]\n\n\ncheck(Solution().removeInterval)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA tree rooted at node 0 is given as follows:\n\nThe number of nodes is nodes;\nThe value of the ith node is value[i];\nThe parent of the ith node is parent[i].\n\nRemove every subtree whose sum of values of nodes is zero.\nReturn the number of the remaining nodes in the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def deleteTreeNodes(self, nodes: int, parent: List[int], value: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def deleteTreeNodes(self, nodes: int, parent: List[int], value: List[int]) -> int:\n        def dfs(i):\n            s, m = value[i], 1\n            for j in g[i]:\n                t, n = dfs(j)\n                s += t\n                m += n\n            if s == 0:\n                m = 0\n            return (s, m)\n\n        g = defaultdict(list)\n        for i in range(1, nodes):\n            g[parent[i]].append(i)\n        return dfs(0)[1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]) == 2\n    assert candidate(nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]) == 6\n    assert candidate(nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]) == 5\n    assert candidate(nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]) == 5\n\n\ncheck(Solution().deleteTreeNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array arr.\nIn one move, you can select a palindromic subarray arr[i], arr[i + 1], ..., arr[j] where i <= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\nReturn the minimum number of moves needed to remove all numbers from the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumMoves(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumMoves(self, arr: List[int]) -> int:\n        n = len(arr)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if i + 1 == j:\n                    f[i][j] = 1 if arr[i] == arr[j] else 2\n                else:\n                    t = f[i + 1][j - 1] if arr[i] == arr[j] else inf\n                    for k in range(i, j):\n                        t = min(t, f[i][k] + f[k + 1][j])\n                    f[i][j] = t\n        return f[0][n - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2]) == 2\n    assert candidate(arr = [1,3,4,1,5]) == 3\n\n\ncheck(Solution().minimumMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a valid (IPv4) IP address, return a defanged version of that IP address.\nA defanged\u00a0IP address\u00a0replaces every period \".\" with \"[.]\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def defangIPaddr(self, address: str) -> str:\n```",
        "solutions": "class Solution:\n    def defangIPaddr(self, address: str) -> str:\n        return address.replace('.', '[.]')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(address = \"1.1.1.1\") == \"1[.]1[.]1[.]1\"\n    assert candidate(address = \"255.100.50.0\") == \"255[.]100[.]50[.]0\"\n\n\ncheck(Solution().defangIPaddr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n flights that are labeled from 1 to n.\nYou are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.\nReturn an array answer of length n, where answer[i] is the total number of seats reserved for flight i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        ans = [0] * n\n        for first, last, seats in bookings:\n            ans[first - 1] += seats\n            if last < n:\n                ans[last] -= seats\n        return list(accumulate(ans))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5) == [10,55,45,25,25]\n    assert candidate(bookings = [[1,2,10],[2,2,15]], n = 2) == [10,25]\n\n\ncheck(Solution().corpFlightBookings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def trimMean(self, arr: List[int]) -> float:\n```",
        "solutions": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        n = len(arr)\n        start, end = int(n * 0.05), int(n * 0.95)\n        arr.sort()\n        t = arr[start:end]\n        return round(sum(t) / len(t), 5)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]) == 2.00000\n    assert candidate(arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]) == 4.00000\n    assert candidate(arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]) == 4.77778\n    assert candidate(arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]) == 5.27778\n    assert candidate(arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]) == 5.29167\n\n\ncheck(Solution().trimMean)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn\u00a0integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers\u00a0in the range [low, high]\u00a0inclusive that have sequential digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        ans = []\n        for i in range(1, 9):\n            x = i\n            for j in range(i + 1, 10):\n                x = x * 10 + j\n                if low <= x <= high:\n                    ans.append(x)\n        return sorted(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(low = 100, high = 300) == [123,234]\n    assert candidate(low = 1000, high = 13000) == [1234,2345,3456,4567,5678,6789,12345]\n\n\ncheck(Solution().sequentialDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.\nSort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n        pos = {x: i for i, x in enumerate(arr2)}\n        return sorted(arr1, key=lambda x: pos.get(x, 1000 + x))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]) == [2,2,2,1,4,3,3,9,6,7,19]\n    assert candidate(arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]) == [22,28,8,6,17,44]\n\n\ncheck(Solution().relativeSortArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the lowest common ancestor of its deepest leaves.\nRecall that:\n\nThe node of a binary tree is a leaf if and only if it has no children\nThe depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.\nThe lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return None, 0\n            l, d1 = dfs(root.left)\n            r, d2 = dfs(root.right)\n            if d1 > d2:\n                return l, d1 + 1\n            if d1 < d2:\n                return r, d2 + 1\n            return root, d1 + 1\n\n        return dfs(root)[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([3,5,1,6,2,0,8,None,None,7,4])), tree_node([2,7,4]))\n    assert is_same_tree(candidate(root = tree_node([1])), tree_node([1]))\n    assert is_same_tree(candidate(root = tree_node([0,1,3,None,2])), tree_node([2]))\n\n\ncheck(Solution().lcaDeepestLeaves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n        ans = s = 0\n        pos = {}\n        for i, x in enumerate(hours):\n            s += 1 if x > 8 else -1\n            if s > 0:\n                ans = i + 1\n            elif s - 1 in pos:\n                ans = max(ans, i - pos[s - 1])\n            if s not in pos:\n                pos[s] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(hours = [9,9,6,0,6,6,9]) == 3\n    assert candidate(hours = [6,6,6]) == 0\n\n\ncheck(Solution().longestWPI)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        for i, val in enumerate(arr):\n            if val == arr[i + (n >> 2)]:\n                return val\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,2,6,6,6,6,7,10]) == 6\n\n\ncheck(Solution().findSpecialInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.\nThe interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.\nReturn the number of remaining intervals.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        cnt, pre = 1, intervals[0]\n        for e in intervals[1:]:\n            if pre[1] < e[1]:\n                cnt += 1\n                pre = e\n        return cnt\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,4],[3,6],[2,8]]) == 2\n\n\ncheck(Solution().removeCoveredIntervals)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:\n\nx % z == 0,\ny % z == 0, and\nz > threshold.\n\nGiven the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly.\u00a0(i.e. there is some path between them).\nReturn an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n\nclass Solution:\n    def areConnected(\n        self, n: int, threshold: int, queries: List[List[int]]\n    ) -> List[bool]:\n        uf = UnionFind(n + 1)\n        for a in range(threshold + 1, n + 1):\n            for b in range(a + a, n + 1, a):\n                uf.union(a, b)\n        return [uf.find(a) == uf.find(b) for a, b in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]) == [False,False,True]\n    assert candidate(n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]) == [True,True,True,True,True]\n    assert candidate(n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]) == [False,False,False,False,False]\n\n\ncheck(Solution().areConnected)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        f = [[0] * n for _ in range(n + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row):\n                x = min((f[i - 1][k] for k in range(n) if k != j), default=0)\n                f[i][j] = v + x\n        return min(f[n])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,3],[4,5,6],[7,8,9]]) == 13\n    assert candidate(grid = [[7]]) == 7\n\n\ncheck(Solution().minFallingPathSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        cnt = Counter()\n        ans = 0\n        for a, b in dominoes:\n            x = a * 10 + b if a < b else b * 10 + a\n            ans += cnt[x]\n            cnt[x] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dominoes = [[1,2],[2,1],[3,4],[5,6]]) == 1\n    assert candidate(dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]) == 3\n\n\ncheck(Solution().numEquivDominoPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays of integers with equal lengths, return the maximum value of:\n|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\nwhere the maximum is taken over all 0 <= i, j < arr1.length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        dirs = (1, -1, -1, 1, 1)\n        ans = -inf\n        for a, b in pairwise(dirs):\n            mx, mi = -inf, inf\n            for i, (x, y) in enumerate(zip(arr1, arr2)):\n                mx = max(mx, a * x + b * y + i)\n                mi = min(mi, a * x + b * y + i)\n                ans = max(ans, mx - mi)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [1,2,3,4], arr2 = [-1,4,5,6]) == 13\n    assert candidate(arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]) == 20\n\n\ncheck(Solution().maxAbsValExpr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array arr,\u00a0replace every element in that array with the greatest element among the elements to its\u00a0right, and replace the last element with -1.\nAfter doing so, return the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def replaceElements(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def replaceElements(self, arr: List[int]) -> List[int]:\n        m = -1\n        for i in range(len(arr) - 1, -1, -1):\n            t = arr[i]\n            arr[i] = m\n            m = max(m, t)\n        return arr\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [17,18,5,4,6,1]) == [18,6,6,6,1,-1]\n    assert candidate(arr = [400]) == [-1]\n\n\ncheck(Solution().replaceElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a square board\u00a0of characters. You can move on the board starting at the bottom right square marked with the character\u00a0'S'.\nYou need\u00a0to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character\u00a01, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\nIn case there is no path, return\u00a0[0, 0].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        def update(i, j, x, y):\n            if x >= n or y >= n or f[x][y] == -1 or board[i][j] in \"XS\":\n                return\n            if f[x][y] > f[i][j]:\n                f[i][j] = f[x][y]\n                g[i][j] = g[x][y]\n            elif f[x][y] == f[i][j]:\n                g[i][j] += g[x][y]\n\n        n = len(board)\n        f = [[-1] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        f[-1][-1], g[-1][-1] = 0, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                update(i, j, i + 1, j)\n                update(i, j, i, j + 1)\n                update(i, j, i + 1, j + 1)\n                if f[i][j] != -1 and board[i][j].isdigit():\n                    f[i][j] += int(board[i][j])\n        mod = 10**9 + 7\n        return [0, 0] if f[0][0] == -1 else [f[0][0], g[0][0] % mod]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [\"E23\",\"2X2\",\"12S\"]) == [7,1]\n    assert candidate(board = [\"E12\",\"1X1\",\"21S\"]) == [4,2]\n    assert candidate(board = [\"E11\",\"XXX\",\"11S\"]) == [0,0]\n\n\ncheck(Solution().pathsWithMaxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe Tribonacci sequence Tn is defined as follows:\u00a0\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def tribonacci(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        a, b, c = 0, 1, 1\n        for _ in range(n):\n            a, b, c = b, c, a + b + c\n        return a\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == 4\n    assert candidate(n = 25) == 1389537\n\n\ncheck(Solution().tribonacci)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D grid of 0s and 1s, return the number of elements in\u00a0the largest square\u00a0subgrid that has all 1s on its border, or 0 if such a subgrid\u00a0doesn't exist in the grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        down = [[0] * n for _ in range(m)]\n        right = [[0] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j]:\n                    down[i][j] = down[i + 1][j] + 1 if i + 1 < m else 1\n                    right[i][j] = right[i][j + 1] + 1 if j + 1 < n else 1\n        for k in range(min(m, n), 0, -1):\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    if (\n                        down[i][j] >= k\n                        and right[i][j] >= k\n                        and right[i + k - 1][j] >= k\n                        and down[i][j + k - 1] >= k\n                    ):\n                        return k * k\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,1],[1,0,1],[1,1,1]]) == 9\n    assert candidate(grid = [[1,1,0,0]]) == 1\n\n\ncheck(Solution().largest1BorderedSquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe are given a list nums of integers representing a list compressed with run-length encoding.\nConsider each adjacent pair\u00a0of elements [freq, val] = [nums[2*i], nums[2*i+1]]\u00a0(with i >= 0).\u00a0 For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\nReturn the decompressed list.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decompressRLElist(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def decompressRLElist(self, nums: List[int]) -> List[int]:\n        res = []\n        for i in range(1, len(nums), 2):\n            res.extend([nums[i]] * nums[i - 1])\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == [2,4,4,4]\n    assert candidate(nums = [1,1,2,3]) == [1,3,3]\n\n\ncheck(Solution().decompressRLElist)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:\n\ni - k <= r <= i + k,\nj - k <= c <= j + k, and\n(r, c) is a valid position in the matrix.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixBlockSum(self, mat: List[List[int]], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def matrixBlockSum(self, mat: List[List[int]], k: int) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                x1, y1 = max(i - k, 0), max(j - k, 0)\n                x2, y2 = min(m - 1, i + k), min(n - 1, j + k)\n                ans[i][j] = (\n                    s[x2 + 1][y2 + 1] - s[x1][y2 + 1] - s[x2 + 1][y1] + s[x1][y1]\n                )\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1) == [[12,21,16],[27,45,33],[24,39,28]]\n    assert candidate(mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2) == [[45,45,45],[45,45,45],[45,45,45]]\n\n\ncheck(Solution().matrixBlockSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\nA grandparent of a node is the parent of its parent if it exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumEvenGrandparent(self, root: TreeNode) -> int:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumEvenGrandparent(self, root: TreeNode) -> int:\n        def dfs(root: TreeNode, x: int) -> int:\n            if root is None:\n                return 0\n            ans = dfs(root.left, root.val) + dfs(root.right, root.val)\n            if x % 2 == 0:\n                if root.left:\n                    ans += root.left.val\n                if root.right:\n                    ans += root.right.val\n            return ans\n\n        return dfs(root, 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([6,7,8,2,7,1,3,9,None,1,4,None,None,None,5])) == 18\n\n\ncheck(Solution().sumEvenGrandparent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nReturn the number of distinct non-empty substrings of text\u00a0that can be written as the concatenation of some string with itself (i.e. it can be written as a + a\u00a0where a is some string).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctEchoSubstrings(self, text: str) -> int:\n```",
        "solutions": "class Solution:\n    def distinctEchoSubstrings(self, text: str) -> int:\n        def get(l, r):\n            return (h[r] - h[l - 1] * p[r - l + 1]) % mod\n\n        n = len(text)\n        base = 131\n        mod = int(1e9) + 7\n        h = [0] * (n + 10)\n        p = [1] * (n + 10)\n        for i, c in enumerate(text):\n            t = ord(c) - ord('a') + 1\n            h[i + 1] = (h[i] * base) % mod + t\n            p[i + 1] = (p[i] * base) % mod\n        vis = set()\n        for i in range(n - 1):\n            for j in range(i + 1, n, 2):\n                k = (i + j) >> 1\n                a = get(i + 1, k + 1)\n                b = get(k + 2, j + 1)\n                if a == b:\n                    vis.add(a)\n        return len(vis)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"abcabcabc\") == 3\n    assert candidate(text = \"leetcodeleetcode\") == 2\n\n\ncheck(Solution().distinctEchoSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of integers, a move\u00a0consists of choosing any element and decreasing it by 1.\nAn array A is a\u00a0zigzag array\u00a0if either:\n\nEvery even-indexed element is greater than adjacent elements, ie.\u00a0A[0] > A[1] < A[2] > A[3] < A[4] > ...\nOR, every odd-indexed element is greater than adjacent elements, ie.\u00a0A[0] < A[1] > A[2] < A[3] > A[4] < ...\n\nReturn the minimum number of moves to transform the given array nums into a zigzag array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        ans = [0, 0]\n        n = len(nums)\n        for i in range(2):\n            for j in range(i, n, 2):\n                d = 0\n                if j:\n                    d = max(d, nums[j] - nums[j - 1] + 1)\n                if j < n - 1:\n                    d = max(d, nums[j] - nums[j + 1] + 1)\n                ans[i] += d\n        return min(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 2\n    assert candidate(nums = [9,6,1,6,2]) == 4\n\n\ncheck(Solution().movesToMakeZigzag)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nTwo players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.\nInitially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. The first player colors the node with value x red, and the second player colors the node with value y blue.\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\nYou are the second player. If it is possible to choose such a y to ensure you win the game, return true. If it is not possible, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def btreeGameWinningMove(self, root: Optional[TreeNode], n: int, x: int) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def btreeGameWinningMove(self, root: Optional[TreeNode], n: int, x: int) -> bool:\n        def dfs(root):\n            if root is None or root.val == x:\n                return root\n            return dfs(root.left) or dfs(root.right)\n\n        def count(root):\n            if root is None:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n\n        node = dfs(root)\n        l, r = count(node.left), count(node.right)\n        return max(l, r, n - l - r - 1) > n // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5,6,7,8,9,10,11]), n = 11, x = 3) == True\n    assert candidate(root = tree_node([1,2,3]), n = 3, x = 1) == False\n\n\ncheck(Solution().btreeGameWinningMove)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\n\nA common subsequence of two strings is a subsequence that is common to both strings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        return f[m][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text1 = \"abcde\", text2 = \"ace\" ) == 3  \n    assert candidate(text1 = \"abc\", text2 = \"abc\") == 3\n    assert candidate(text1 = \"abc\", text2 = \"def\") == 0\n\n\ncheck(Solution().longestCommonSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\n\nsubtexti is a non-empty string.\nThe concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).\nsubtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).\n\nReturn the largest possible value of k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestDecomposition(self, text: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestDecomposition(self, text: str) -> int:\n        n = len(text)\n        if n < 2:\n            return n\n        for i in range(n // 2 + 1):\n            if text[:i] == text[-i:]:\n                return 2 + self.longestDecomposition(text[i:-i])\n        return 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"ghiabcdefhelloadamhelloabcdefghi\") == 7\n    assert candidate(text = \"merchant\") == 1\n    assert candidate(text = \"antaprezatepzapreanta\") == 11\n\n\ncheck(Solution().longestDecomposition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def breakPalindrome(self, palindrome: str) -> str:\n```",
        "solutions": "class Solution:\n    def breakPalindrome(self, palindrome: str) -> str:\n        n = len(palindrome)\n        if n == 1:\n            return \"\"\n        s = list(palindrome)\n        i = 0\n        while i < n // 2 and s[i] == \"a\":\n            i += 1\n        if i == n // 2:\n            s[-1] = \"b\"\n        else:\n            s[i] = \"a\"\n        return \"\".join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(palindrome = \"abccba\") == \"aaccba\"\n    assert candidate(palindrome = \"a\") == \"\"\n\n\ncheck(Solution().breakPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        g = [[] for _ in range(m + n)]\n        for i, row in enumerate(mat):\n            for j, x in enumerate(row):\n                g[m - i + j].append(x)\n        for e in g:\n            e.sort(reverse=True)\n        for i in range(m):\n            for j in range(n):\n                mat[i][j] = g[m - i + j].pop()\n        return mat\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]) == [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n    assert candidate(mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]) == [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n\n\ncheck(Solution().diagonalSort)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        q = deque([root])\n        while q:\n            ans = 0\n            for _ in range(len(q)):\n                root = q.popleft()\n                ans += root.val\n                if root.left:\n                    q.append(root.left)\n                if root.right:\n                    q.append(root.right)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5,None,6,7,None,None,None,None,8])) == 15\n    assert candidate(root = tree_node([6,7,8,2,7,1,3,9,None,1,4,None,None,None,5])) == 19\n\n\ncheck(Solution().deepestLeavesSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\nFind maximum possible value of the final array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = s = sum(abs(x - y) for x, y in pairwise(nums))\n        for x, y in pairwise(nums):\n            ans = max(ans, s + abs(nums[0] - y) - abs(x - y))\n            ans = max(ans, s + abs(nums[-1] - x) - abs(x - y))\n        for k1, k2 in pairwise((1, -1, -1, 1, 1)):\n            mx, mi = -inf, inf\n            for x, y in pairwise(nums):\n                a = k1 * x + k2 * y\n                b = abs(x - y)\n                mx = max(mx, a - b)\n                mi = min(mi, a + b)\n            ans = max(ans, s + max(mx - mi, 0))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,1,5,4]) == 10\n    assert candidate(nums = [2,4,9,24,2,1,10]) == 68\n\n\ncheck(Solution().maxValueAfterReverse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers\u00a0arr, replace each element with its rank.\nThe rank represents how large the element is. The rank has the following rules:\n\nRank is an integer starting from 1.\nThe larger the element, the larger the rank. If two elements are equal, their rank must be the same.\nRank should be as small as possible.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrayRankTransform(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def arrayRankTransform(self, arr: List[int]) -> List[int]:\n        t = sorted(set(arr))\n        return [bisect_right(t, x) for x in arr]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [40,10,20,30]) == [4,1,2,3]\n    assert candidate(arr = [100,100,100]) == [1,1,1]\n    assert candidate(arr = [37,12,28,9,100,56,80,5,12]) == [5,3,4,2,8,6,7,1,3]\n\n\ncheck(Solution().arrayRankTransform)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].\nThe rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:\n\nThe rank is an integer starting from 1.\nIf two elements p and q are in the same row or column, then:\n\t\nIf p < q then rank(p) < rank(q)\nIf p == q then rank(p) == rank(q)\nIf p > q then rank(p) > rank(q)\n\n\nThe rank should be as small as possible.\n\nThe test cases are generated so that answer is unique under the given rules.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa != pb:\n            if self.size[pa] > self.size[pb]:\n                self.p[pb] = pa\n                self.size[pa] += self.size[pb]\n            else:\n                self.p[pa] = pb\n                self.size[pb] += self.size[pa]\n\n    def reset(self, x):\n        self.p[x] = x\n        self.size[x] = 1\n\n\nclass Solution:\n    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:\n        m, n = len(matrix), len(matrix[0])\n        d = defaultdict(list)\n        for i, row in enumerate(matrix):\n            for j, v in enumerate(row):\n                d[v].append((i, j))\n        row_max = [0] * m\n        col_max = [0] * n\n        ans = [[0] * n for _ in range(m)]\n        uf = UnionFind(m + n)\n        for v in sorted(d):\n            rank = defaultdict(int)\n            for i, j in d[v]:\n                uf.union(i, j + m)\n            for i, j in d[v]:\n                rank[uf.find(i)] = max(rank[uf.find(i)], row_max[i], col_max[j])\n            for i, j in d[v]:\n                ans[i][j] = row_max[i] = col_max[j] = 1 + rank[uf.find(i)]\n            for i, j in d[v]:\n                uf.reset(i)\n                uf.reset(j + m)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,2],[3,4]]) == [[1,2],[2,3]]\n    assert candidate(matrix = [[7,7],[7,7]]) == [[1,1],[1,1]]\n    assert candidate(matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]) == [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n    assert candidate(matrix = [[7,3,6],[1,4,5],[9,8,2]]) == [[5,1,4],[1,2,3],[6,3,1]]\n\n\ncheck(Solution().matrixRankTransform)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def dayOfYear(self, date: str) -> int:\n```",
        "solutions": "class Solution:\n    def dayOfYear(self, date: str) -> int:\n        y, m, d = (int(s) for s in date.split('-'))\n        v = 29 if y % 400 == 0 or (y % 4 == 0 and y % 100) else 28\n        days = [31, v, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        return sum(days[: m - 1]) + d\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(date = \"2019-01-09\") == 9\n    assert candidate(date = \"2019-02-10\") == 41\n\n\ncheck(Solution().dayOfYear)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string text. You can swap two of the characters in the text.\nReturn the length of the longest substring with repeated characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxRepOpt1(self, text: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxRepOpt1(self, text: str) -> int:\n        cnt = Counter(text)\n        n = len(text)\n        ans = i = 0\n        while i < n:\n            j = i\n            while j < n and text[j] == text[i]:\n                j += 1\n            l = j - i\n            k = j + 1\n            while k < n and text[k] == text[i]:\n                k += 1\n            r = k - j - 1\n            ans = max(ans, min(l + r + 1, cnt[text[i]]))\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"ababa\") == 3\n    assert candidate(text = \"aaabaaa\") == 6\n    assert candidate(text = \"aaabbaaa\") == 4\n    assert candidate(text = \"aaaaa\") == 5\n    assert candidate(text = \"abcdef\") == 1\n\n\ncheck(Solution().maxRepOpt1)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n dice, and each dice has k faces numbered from 1 to k.\nGiven three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numRollsToTarget(self, n: int, k: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def numRollsToTarget(self, n: int, k: int, target: int) -> int:\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        mod = 10**9 + 7\n        for i in range(1, n + 1):\n            for j in range(1, min(i * k, target) + 1):\n                for h in range(1, min(j, k) + 1):\n                    f[i][j] = (f[i][j] + f[i - 1][j - h]) % mod\n        return f[n][target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, k = 6, target = 3) == 1\n    assert candidate(n = 2, k = 6, target = 7) == 6\n    assert candidate(n = 30, k = 30, target = 500) == 222616187\n\n\ncheck(Solution().numRollsToTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n```",
        "solutions": "class Solution:\n    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n        s = set(brokenLetters)\n        return sum(all(c not in s for c in w) for w in text.split())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"hello world\", brokenLetters = \"ad\") == 1\n    assert candidate(text = \"leet code\", brokenLetters = \"lt\") == 1\n    assert candidate(text = \"leet code\", brokenLetters = \"e\") == 0\n\n\ncheck(Solution().canBeTypedWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.\nAfter doing so, return the head of the final linked list.\u00a0 You may return any such answer.\n\u00a0\n(Note that in the examples below, all sequences are serializations of ListNode objects.)\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeZeroSumSublists(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeZeroSumSublists(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n        last = {}\n        s, cur = 0, dummy\n        while cur:\n            s += cur.val\n            last[s] = cur\n            cur = cur.next\n        s, cur = 0, dummy\n        while cur:\n            s += cur.val\n            cur.next = last[s].next\n            cur = cur.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,2,-3,3,1])), list_node([3,1]))\n    assert is_same_list(candidate(head = list_node([1,2,3,-3,4])), list_node([1,2,4]))\n    assert is_same_list(candidate(head = list_node([1,2,3,-3,-2])), list_node([1]))\n\n\ncheck(Solution().removeZeroSumSublists)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA transaction is possibly invalid if:\n\nthe amount exceeds $1000, or;\nif it occurs within (and including) 60 minutes of another transaction with the same name in a different city.\n\nYou are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\nReturn a list of transactions that are possibly invalid. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:\n        d = defaultdict(list)\n        idx = set()\n        for i, x in enumerate(transactions):\n            name, time, amount, city = x.split(\",\")\n            time, amount = int(time), int(amount)\n            d[name].append((time, city, i))\n            if amount > 1000:\n                idx.add(i)\n            for t, c, j in d[name]:\n                if c != city and abs(time - t) <= 60:\n                    idx.add(i)\n                    idx.add(j)\n        return [transactions[i] for i in idx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]) == [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n    assert candidate(transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]) == [\"alice,50,1200,mtv\"]\n    assert candidate(transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]) == [\"bob,50,1200,mtv\"]\n\n\ncheck(Solution().invalidTransactions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nLet the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.\nYou are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.\nReturn an integer array answer, where each answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:\n        def f(s: str) -> int:\n            cnt = Counter(s)\n            return next(cnt[c] for c in ascii_lowercase if cnt[c])\n\n        n = len(words)\n        nums = sorted(f(w) for w in words)\n        return [n - bisect_right(nums, f(q)) for q in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queries = [\"cbd\"], words = [\"zaaaz\"]) == [1]\n    assert candidate(queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]) == [1,2]\n\n\ncheck(Solution().numSmallerByFrequency)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD\u00a0as shown in the examples.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def daysBetweenDates(self, date1: str, date2: str) -> int:\n```",
        "solutions": "class Solution:\n    def daysBetweenDates(self, date1: str, date2: str) -> int:\n        def isLeapYear(year: int) -> bool:\n            return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n        def daysInMonth(year: int, month: int) -> int:\n            days = [\n                31,\n                28 + int(isLeapYear(year)),\n                31,\n                30,\n                31,\n                30,\n                31,\n                31,\n                30,\n                31,\n                30,\n                31,\n            ]\n            return days[month - 1]\n\n        def calcDays(date: str) -> int:\n            year, month, day = map(int, date.split(\"-\"))\n            days = 0\n            for y in range(1971, year):\n                days += 365 + int(isLeapYear(y))\n            for m in range(1, month):\n                days += daysInMonth(year, m)\n            days += day\n            return days\n\n        return abs(calcDays(date1) - calcDays(date2))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(date1 = \"2019-06-29\", date2 = \"2019-06-30\") == 1\n    assert candidate(date1 = \"2020-01-15\", date2 = \"2019-12-31\") == 15\n\n\ncheck(Solution().daysBetweenDates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.\nIf node i has no left child then leftChild[i] will equal -1, similarly for the right child.\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def validateBinaryTreeNodes(\n        self, n: int, leftChild: List[int], rightChild: List[int]\n    ) -> bool:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(n))\n        vis = [False] * n\n        for i, (a, b) in enumerate(zip(leftChild, rightChild)):\n            for j in (a, b):\n                if j != -1:\n                    if vis[j] or find(i) == find(j):\n                        return False\n                    p[find(i)] = find(j)\n                    vis[j] = True\n                    n -= 1\n        return n == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]) == True\n    assert candidate(n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]) == False\n    assert candidate(n = 2, leftChild = [1,0], rightChild = [-1,-1]) == False\n\n\ncheck(Solution().validateBinaryTreeNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        f = [[-inf] * 3 for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                f[i][j] = max(f[i - 1][j], f[i - 1][(j - x % 3 + 3) % 3] + 1)\n        if f[n][0] <= 0:\n            return \"\"\n        arr = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            if f[i - 1][k] + 1 == f[i][j]:\n                arr.append(digits[i - 1])\n                j = k\n        i = 0\n        while i < len(arr) - 1 and arr[i] == 0:\n            i += 1\n        return \"\".join(map(str, arr[i:]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(digits = [8,1,9]) == \"981\"\n    assert candidate(digits = [8,6,7,1,0]) == \"8760\"\n    assert candidate(digits = [1]) == \"\"\n    assert candidate(digits = [0,0,0,0,0,0]) == \"0\"\n\n\ncheck(Solution().largestMultipleOfThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nReturn the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer\u00a0is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\u00a0both smaller than it.)\nSince the answer may be large, return the answer modulo 10^9 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        def count(n):\n            cnt = 0\n            primes = [True] * (n + 1)\n            for i in range(2, n + 1):\n                if primes[i]:\n                    cnt += 1\n                    for j in range(i + i, n + 1, i):\n                        primes[j] = False\n            return cnt\n\n        cnt = count(n)\n        ans = factorial(cnt) * factorial(n - cnt)\n        return ans % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 12\n    assert candidate(n = 100) == 682289015\n\n\ncheck(Solution().numPrimeArrangements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.\nReturn a boolean array answer where answer[i] is the result of the ith query queries[i].\nNote that each letter is counted individually for replacement, so if, for example s[lefti...righti] = \"aaa\", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        n = len(s)\n        ss = [[0] * 26 for _ in range(n + 1)]\n        for i, c in enumerate(s, 1):\n            ss[i] = ss[i - 1][:]\n            ss[i][ord(c) - ord(\"a\")] += 1\n        ans = []\n        for l, r, k in queries:\n            cnt = sum((ss[r + 1][j] - ss[l][j]) & 1 for j in range(26))\n            ans.append(cnt // 2 <= k)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]) == [True,False,False,True,True]\n\n\ncheck(Solution().canMakePaliQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWith respect to a given puzzle string, a word is valid if both the following conditions are satisfied:\n\nword contains the first letter of puzzle.\nFor each letter in word, that letter is in puzzle.\n\t\nFor example, if the puzzle is \"abcdefg\", then valid words are \"faced\", \"cabbage\", and \"baggage\", while\ninvalid words are \"beefed\" (does not include 'a') and \"based\" (includes 's' which is not in the puzzle).\n\n\n\nReturn an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        cnt = Counter()\n        for w in words:\n            mask = 0\n            for c in w:\n                mask |= 1 << (ord(c) - ord(\"a\"))\n            cnt[mask] += 1\n\n        ans = []\n        for p in puzzles:\n            mask = 0\n            for c in p:\n                mask |= 1 << (ord(c) - ord(\"a\"))\n            x, i, j = 0, ord(p[0]) - ord(\"a\"), mask\n            while j:\n                if j >> i & 1:\n                    x += cnt[j]\n                j = (j - 1) & mask\n            ans.append(x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\nwords = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], \npuzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]) == [1,1,3,2,4,0]\n\n\ncheck(Solution().findNumOfValidWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a date string in the form\u00a0Day Month Year, where:\n\nDay\u00a0is in the set {\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}.\nMonth\u00a0is in the set {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}.\nYear\u00a0is in the range [1900, 2100].\n\nConvert the date string to the format YYYY-MM-DD, where:\n\nYYYY denotes the 4 digit year.\nMM denotes the 2 digit month.\nDD denotes the 2 digit day.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reformatDate(self, date: str) -> str:\n```",
        "solutions": "class Solution:\n    def reformatDate(self, date: str) -> str:\n        s = date.split()\n        s.reverse()\n        months = \" JanFebMarAprMayJunJulAugSepOctNovDec\"\n        s[1] = str(months.index(s[1]) // 3 + 1).zfill(2)\n        s[2] = s[2][:-2].zfill(2)\n        return \"-\".join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(date = \"20th Oct 2052\") == \"2052-10-20\"\n    assert candidate(date = \"6th Jun 1933\") == \"1933-06-06\"\n    assert candidate(date = \"26th May 1960\") == \"1960-05-26\"\n\n\ncheck(Solution().reformatDate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def f(x: int) -> int:\n            i = 2\n            cnt, s = 2, x + 1\n            while i <= x // i:\n                if x % i == 0:\n                    cnt += 1\n                    s += i\n                    if i * i != x:\n                        cnt += 1\n                        s += x // i\n                i += 1\n            return s if cnt == 4 else 0\n\n        return sum(f(x) for x in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [21,4,7]) == 32\n\n\ncheck(Solution().sumFourDivisors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.\nA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        def dfs(root: TreeNode):\n            if root is None:\n                return\n            dfs(root.left)\n            nums.append(root.val)\n            dfs(root.right)\n\n        def build(i: int, j: int) -> TreeNode:\n            if i > j:\n                return None\n            mid = (i + j) >> 1\n            left = build(i, mid - 1)\n            right = build(mid + 1, j)\n            return TreeNode(nums[mid], left, right)\n\n        nums = []\n        dfs(root)\n        return build(0, len(nums) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([1,None,2,None,3,None,4,None,None])), tree_node([2,1,3,None,None,None,4]))\n\n\ncheck(Solution().balanceBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [0] * n\n        ans = -inf\n        q = deque()\n        for i, v in enumerate(nums):\n            if q and i - q[0] > k:\n                q.popleft()\n            dp[i] = max(0, 0 if not q else dp[q[0]]) + v\n            while q and dp[q[-1]] <= dp[i]:\n                q.pop()\n            q.append(i)\n            ans = max(ans, dp[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,2,-10,5,20], k = 2) == 37\n    assert candidate(nums = [-1,-2,-3], k = 1) == -1\n    assert candidate(nums = [10,-2,-10,-5,20], k = 2) == 23\n\n\ncheck(Solution().constrainedSubsetSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA bus\u00a0has n stops numbered from 0 to n - 1 that form\u00a0a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number\u00a0i and (i + 1) % n.\nThe bus goes along both directions\u00a0i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given\u00a0start\u00a0and destination\u00a0stops.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n```",
        "solutions": "class Solution:\n    def distanceBetweenBusStops(\n        self, distance: List[int], start: int, destination: int\n    ) -> int:\n        a, n = 0, len(distance)\n        while start != destination:\n            a += distance[start]\n            start = (start + 1) % n\n        return min(a, sum(distance) - a)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(distance = [1,2,3,4], start = 0, destination = 1) == 1\n    assert candidate(distance = [1,2,3,4], start = 0, destination = 2) == 3\n    assert candidate(distance = [1,2,3,4], start = 0, destination = 3) == 4\n\n\ncheck(Solution().distanceBetweenBusStops)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers, return the maximum sum for a non-empty\u00a0subarray (contiguous elements) with at most one element deletion.\u00a0In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the\u00a0sum of the remaining elements is maximum possible.\nNote that the subarray needs to be non-empty after deleting one element.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        n = len(arr)\n        left = [0] * n\n        right = [0] * n\n        s = 0\n        for i, x in enumerate(arr):\n            s = max(s, 0) + x\n            left[i] = s\n        s = 0\n        for i in range(n - 1, -1, -1):\n            s = max(s, 0) + arr[i]\n            right[i] = s\n        ans = max(left)\n        for i in range(1, n - 1):\n            ans = max(ans, left[i - 1] + right[i + 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,-2,0,3]) == 4\n    assert candidate(arr = [1,-2,-2,3]) == 3\n    assert candidate(arr = [-1,-1,-1,-1]) == -1\n\n\ncheck(Solution().maximumSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a date, return the corresponding day of the week for that date.\nThe input is given as three integers representing the day, month and year respectively.\nReturn the answer as one of the following values\u00a0{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:\n```",
        "solutions": "class Solution:\n    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:\n        return datetime.date(year, month, day).strftime('%A')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(day = 31, month = 8, year = 2019) == \"Saturday\"\n    assert candidate(day = 18, month = 7, year = 1999) == \"Sunday\"\n    assert candidate(day = 15, month = 8, year = 1993) == \"Sunday\"\n\n\ncheck(Solution().dayOfTheWeek)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays\u00a0arr1 and arr2, return the minimum number of operations (possibly zero) needed\u00a0to make arr1 strictly increasing.\nIn one operation, you can choose two indices\u00a00 <=\u00a0i < arr1.length\u00a0and\u00a00 <= j < arr2.length\u00a0and do the assignment\u00a0arr1[i] = arr2[j].\nIf there is no way to make\u00a0arr1\u00a0strictly increasing,\u00a0return\u00a0-1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        arr2.sort()\n        m = 0\n        for x in arr2:\n            if m == 0 or x != arr2[m - 1]:\n                arr2[m] = x\n                m += 1\n        arr2 = arr2[:m]\n        arr = [-inf] + arr1 + [inf]\n        n = len(arr)\n        f = [inf] * n\n        f[0] = 0\n        for i in range(1, n):\n            if arr[i - 1] < arr[i]:\n                f[i] = f[i - 1]\n            j = bisect_left(arr2, arr[i])\n            for k in range(1, min(i - 1, j) + 1):\n                if arr[i - k - 1] < arr2[j - k]:\n                    f[i] = min(f[i], f[i - k - 1] + k)\n        return -1 if f[n - 1] >= inf else f[n - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]) == 1\n    assert candidate(arr1 = [1,5,3,6,7], arr2 = [4,3,1]) == 2\n    assert candidate(arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]) == -1\n\n\ncheck(Solution().makeArrayIncreasing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, return true\u00a0if there are three consecutive odd numbers in the array. Otherwise, return\u00a0false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n        cnt = 0\n        for v in arr:\n            if v & 1:\n                cnt += 1\n            else:\n                cnt = 0\n            if cnt == 3:\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,6,4,1]) == False\n    assert candidate(arr = [1,2,34,3,4,5,7,23,12]) == True\n\n\ncheck(Solution().threeConsecutiveOdds)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.\nYou will buy an axis-aligned square plot of land that is centered at (0, 0).\nGiven an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.\nThe value of |x| is defined as:\n\nx if x >= 0\n-x if x < 0\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        x = 1\n        while 2 * x * (x + 1) * (2 * x + 1) < neededApples:\n            x += 1\n        return x * 8\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(neededApples = 1) == 8\n    assert candidate(neededApples = 13) == 16\n    assert candidate(neededApples = 1000000000) == 5040\n\n\ncheck(Solution().minimumPerimeter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        cnt = Counter(text)\n        cnt['o'] >>= 1\n        cnt['l'] >>= 1\n        return min(cnt[c] for c in 'balon')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"nlaebolko\") == 1\n    assert candidate(text = \"loonbalxballpoon\") == 2\n    assert candidate(text = \"leetcode\") == 0\n\n\ncheck(Solution().maxNumberOfBalloons)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reverseParentheses(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stk = []\n        for c in s:\n            if c == ')':\n                t = []\n                while stk[-1] != '(':\n                    t.append(stk.pop())\n                stk.pop()\n                stk.extend(t)\n            else:\n                stk.append(c)\n        return ''.join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(abcd)\") == \"dcba\"\n    assert candidate(s = \"(u(love)i)\") == \"iloveu\"\n    assert candidate(s = \"(ed(et(oc))el)\") == \"leetcode\"\n    assert candidate(s = \"a(bcdefghijkl(mno)p)q\") == \"apmnolkjihgfedcbq\"\n\n\ncheck(Solution().reverseParentheses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr and an integer k, modify the array by repeating it k times.\nFor example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.\nAs the answer can be very large, return the answer modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        s = mx_pre = mi_pre = mx_sub = 0\n        for x in arr:\n            s += x\n            mx_pre = max(mx_pre, s)\n            mi_pre = min(mi_pre, s)\n            mx_sub = max(mx_sub, s - mi_pre)\n        ans = mx_sub\n        mod = 10**9 + 7\n        if k == 1:\n            return ans % mod\n        mx_suf = s - mi_pre\n        ans = max(ans, mx_pre + mx_suf)\n        if s > 0:\n            ans = max(ans, (k - 2) * s + mx_pre + mx_suf)\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2], k = 3) == 9\n    assert candidate(arr = [1,-2,1], k = 5) == 2\n    assert candidate(arr = [-1,-2], k = 7) == 0\n\n\ncheck(Solution().kConcatenationMaxSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def criticalConnections(\n        self, n: int, connections: List[List[int]]\n    ) -> List[List[int]]:\n        def tarjan(a: int, fa: int):\n            nonlocal now\n            now += 1\n            dfn[a] = low[a] = now\n            for b in g[a]:\n                if b == fa:\n                    continue\n                if not dfn[b]:\n                    tarjan(b, a)\n                    low[a] = min(low[a], low[b])\n                    if low[b] > dfn[a]:\n                        ans.append([a, b])\n                else:\n                    low[a] = min(low[a], dfn[b])\n\n        g = [[] for _ in range(n)]\n        for a, b in connections:\n            g[a].append(b)\n            g[b].append(a)\n\n        dfn = [0] * n\n        low = [0] * n\n        now = 0\n        ans = []\n        tarjan(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]) == [[1,3]]\n    assert candidate(n = 2, connections = [[0,1]]) == [[0,1]]\n\n\ncheck(Solution().criticalConnections)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA fancy string is a string where no three consecutive characters are equal.\nGiven a string s, delete the minimum possible number of characters from s to make it fancy.\nReturn the final string after the deletion. It can be shown that the answer will always be unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeFancyString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def makeFancyString(self, s: str) -> str:\n        ans = []\n        for c in s:\n            if len(ans) > 1 and ans[-1] == ans[-2] == c:\n                continue\n            ans.append(c)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leeetcode\") == \"leetcode\"\n    assert candidate(s = \"aaabaaaa\") == \"aabaa\"\n    assert candidate(s = \"aab\") == \"aab\"\n\n\ncheck(Solution().makeFancyString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a game with integers. You start with the integer 1 and you want to reach the integer target.\nIn one move, you can either:\n\nIncrement the current integer by one (i.e., x = x + 1).\nDouble the current integer (i.e., x = 2 * x).\n\nYou can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.\nGiven the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n```",
        "solutions": "class Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n        if target == 1:\n            return 0\n        if maxDoubles == 0:\n            return target - 1\n        if target % 2 == 0 and maxDoubles:\n            return 1 + self.minMoves(target >> 1, maxDoubles - 1)\n        return 1 + self.minMoves(target - 1, maxDoubles)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 5, maxDoubles = 0) == 4\n    assert candidate(target = 19, maxDoubles = 2) == 7\n    assert candidate(target = 10, maxDoubles = 4) == 4\n\n\ncheck(Solution().minMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.\nA person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).\nReturn an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canSeePersonsCount(self, heights: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def canSeePersonsCount(self, heights: List[int]) -> List[int]:\n        n = len(heights)\n        ans = [0] * n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and stk[-1] < heights[i]:\n                ans[i] += 1\n                stk.pop()\n            if stk:\n                ans[i] += 1\n            stk.append(heights[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [10,6,8,5,11,9]) == [3,1,2,1,1,0]\n    assert candidate(heights = [5,1,2,3,10]) == [4,1,1,1,0]\n\n\ncheck(Solution().canSeePersonsCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.\nReturn a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows\n\na, b are from arr\na < b\nb - a equals to the minimum absolute difference of any two elements in arr\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:\n        arr.sort()\n        mi = min(b - a for a, b in pairwise(arr))\n        return [[a, b] for a, b in pairwise(arr) if b - a == mi]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [4,2,1,3]) == [[1,2],[2,3],[3,4]]\n    assert candidate(arr = [1,3,6,10,15]) == [[1,3]]\n    assert candidate(arr = [3,8,-10,23,19,-4,-14,27]) == [[-14,-10],[19,23],[23,27]]\n\n\ncheck(Solution().minimumAbsDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n```",
        "solutions": "class Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(s)\n        p = list(range(n))\n        for a, b in pairs:\n            p[find(a)] = find(b)\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[find(i)].append(c)\n        for i in d.keys():\n            d[i].sort(reverse=True)\n        return \"\".join(d[find(i)].pop() for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"dcab\", pairs = [[0,3],[1,2]]) == \"bacd\"\n    assert candidate(s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]) == \"abcd\"\n    assert candidate(s = \"cba\", pairs = [[0,1],[1,2]]) == \"abc\"\n\n\ncheck(Solution().smallestStringWithSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.\nEach plant needs a specific amount of water. You will water the plants in the following way:\n\nWater the plants in order from left to right.\nAfter watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.\nYou cannot refill the watering can early.\n\nYou are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wateringPlants(self, plants: List[int], capacity: int) -> int:\n```",
        "solutions": "class Solution:\n    def wateringPlants(self, plants: List[int], capacity: int) -> int:\n        ans, water = 0, capacity\n        for i, p in enumerate(plants):\n            if water >= p:\n                water -= p\n                ans += 1\n            else:\n                water = capacity - p\n                ans += i * 2 + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(plants = [2,2,3,3], capacity = 5) == 14\n    assert candidate(plants = [1,1,1,4,2,3], capacity = 4) == 30\n    assert candidate(plants = [7,7,7,7,7,7,7], capacity = 8) == 49\n\n\ncheck(Solution().wateringPlants)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.\nGiven an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestMagicSquare(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largestMagicSquare(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        rowsum = [[0] * (n + 1) for _ in range(m + 1)]\n        colsum = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                rowsum[i][j] = rowsum[i][j - 1] + grid[i - 1][j - 1]\n                colsum[i][j] = colsum[i - 1][j] + grid[i - 1][j - 1]\n\n        def check(x1, y1, x2, y2):\n            val = rowsum[x1 + 1][y2 + 1] - rowsum[x1 + 1][y1]\n            for i in range(x1 + 1, x2 + 1):\n                if rowsum[i + 1][y2 + 1] - rowsum[i + 1][y1] != val:\n                    return False\n            for j in range(y1, y2 + 1):\n                if colsum[x2 + 1][j + 1] - colsum[x1][j + 1] != val:\n                    return False\n            s, i, j = 0, x1, y1\n            while i <= x2:\n                s += grid[i][j]\n                i += 1\n                j += 1\n            if s != val:\n                return False\n            s, i, j = 0, x1, y2\n            while i <= x2:\n                s += grid[i][j]\n                i += 1\n                j -= 1\n            if s != val:\n                return False\n            return True\n\n        for k in range(min(m, n), 1, -1):\n            i = 0\n            while i + k - 1 < m:\n                j = 0\n                while j + k - 1 < n:\n                    i2, j2 = i + k - 1, j + k - 1\n                    if check(i, j, i2, j2):\n                        return k\n                    j += 1\n                i += 1\n        return 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]) == 3\n    assert candidate(grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]) == 2\n\n\ncheck(Solution().largestMagicSquare)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:\n\n(r1i, c1i) is the coordinate of the top-left cell of the ith artifact and\n(r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact.\n\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\nGiven a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.\nThe test cases are generated such that:\n\nNo two artifacts overlap.\nEach artifact only covers at most 4 cells.\nThe entries of dig are unique.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def digArtifacts(\n        self, n: int, artifacts: List[List[int]], dig: List[List[int]]\n    ) -> int:\n        def check(a: List[int]) -> bool:\n            x1, y1, x2, y2 = a\n            return all(\n                (x, y) in s for x in range(x1, x2 + 1) for y in range(y1, y2 + 1)\n            )\n\n        s = {(i, j) for i, j in dig}\n        return sum(check(a) for a in artifacts)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]) == 1\n    assert candidate(n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]) == 2\n\n\ncheck(Solution().digArtifacts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        cnt = Counter(arr)\n        return len(set(cnt.values())) == len(cnt)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,2,1,1,3]) == True\n    assert candidate(arr = [1,2]) == False\n    assert candidate(arr = [-3,0,1,-3,1,1,1,-3,10,0]) == True\n\n\ncheck(Solution().uniqueOccurrences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        t = []\n        i, n = 0, len(s)\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            cnt = j - i\n            cnt %= k\n            if t and t[-1][0] == s[i]:\n                t[-1][1] = (t[-1][1] + cnt) % k\n                if t[-1][1] == 0:\n                    t.pop()\n            elif cnt:\n                t.append([s[i], cnt])\n            i = j\n        ans = [c * v for c, v in t]\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcd\", k = 2) == \"abcd\"\n    assert candidate(s = \"deeedbbcccbdaa\", k = 3) == \"aa\"\n    assert candidate(s = \"pbbcggttciiippooaais\", k = 2) == \"ps\"\n\n\ncheck(Solution().removeDuplicates)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\nA board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.\nA board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\nReturn an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findBall(self, grid: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findBall(self, grid: List[List[int]]) -> List[int]:\n        def dfs(i: int, j: int) -> int:\n            if i == m:\n                return j\n            if j == 0 and grid[i][j] == -1:\n                return -1\n            if j == n - 1 and grid[i][j] == 1:\n                return -1\n            if grid[i][j] == 1 and grid[i][j + 1] == -1:\n                return -1\n            if grid[i][j] == -1 and grid[i][j - 1] == 1:\n                return -1\n            return dfs(i + 1, j + 1) if grid[i][j] == 1 else dfs(i + 1, j - 1)\n\n        m, n = len(grid), len(grid[0])\n        return [dfs(0, j) for j in range(n)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]) == [1,-1,-1,-1,-1]\n    assert candidate(grid = [[-1]]) == [-1]\n    assert candidate(grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]) == [0,1,2,3,4,-1]\n\n\ncheck(Solution().findBall)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an undirected weighted graph of\u00a0n\u00a0nodes (0-indexed), represented by an edge list where\u00a0edges[i] = [a, b]\u00a0is an undirected edge connecting the nodes\u00a0a\u00a0and\u00a0b\u00a0with a probability of success of traversing that edge\u00a0succProb[i].\nGiven two nodes\u00a0start\u00a0and\u00a0end, find the path with the maximum probability of success to go from\u00a0start\u00a0to\u00a0end\u00a0and return its success probability.\nIf there is no path from\u00a0start\u00a0to\u00a0end, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:\n```",
        "solutions": "class Solution:\n    def maxProbability(\n        self,\n        n: int,\n        edges: List[List[int]],\n        succProb: List[float],\n        start: int,\n        end: int,\n    ) -> float:\n        g = defaultdict(list)\n        for (a, b), s in zip(edges, succProb):\n            g[a].append((b, s))\n            g[b].append((a, s))\n        q = [(-1, start)]\n        d = [0] * n\n        d[start] = 1\n        while q:\n            w, u = heappop(q)\n            w = -w\n            if d[u] > w:\n                continue\n            for v, t in g[u]:\n                if d[v] < d[u] * t:\n                    d[v] = d[u] * t\n                    heappush(q, (-d[v], v))\n        return d[end]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2) == 0.25000\n    assert candidate(n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2) == 0.30000\n    assert candidate(n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2) == 0.00000\n\n\ncheck(Solution().maxProbability)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.\nThe floor() function returns the integer part of the division.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        cnt = Counter(nums)\n        mx = max(nums)\n        s = [0] * (mx + 1)\n        for i in range(1, mx + 1):\n            s[i] = s[i - 1] + cnt[i]\n        ans = 0\n        for y in range(1, mx + 1):\n            if cnt[y]:\n                d = 1\n                while d * y <= mx:\n                    ans += cnt[y] * d * (s[min(mx, d * y + y - 1)] - s[d * y - 1])\n                    ans %= mod\n                    d += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,5,9]) == 10\n    assert candidate(nums = [7,7,7,7,7,7,7]) == 49\n\n\ncheck(Solution().sumOfFlooredPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe have n chips, where the position of the ith chip is position[i].\nWe need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:\n\nposition[i] + 2 or position[i] - 2 with cost = 0.\nposition[i] + 1 or position[i] - 1 with cost = 1.\n\nReturn the minimum cost needed to move all the chips to the same position.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        a = sum(p % 2 for p in position)\n        b = len(position) - a\n        return min(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(position = [1,2,3]) == 1\n    assert candidate(position = [2,2,2,3,3]) == 2\n    assert candidate(position = [1,1000000000]) == 1\n\n\ncheck(Solution().minCostToMoveChips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.\nA subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        f = defaultdict(int)\n        for x in arr:\n            f[x] = f[x - difference] + 1\n        return max(f.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,4], difference = 1) == 4\n    assert candidate(arr = [1,3,5,7], difference = 1) == 1\n    assert candidate(arr = [1,5,7,8,5,3,4,2,1], difference = -2) == 4\n\n\ncheck(Solution().longestSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\nEvery time you are located in a cell you will collect all the gold in that cell.\nFrom your position, you can walk one step to the left, right, up, or down.\nYou can't visit the same cell more than once.\nNever visit a cell with 0 gold.\nYou can start and stop collecting gold from any position in the grid that has some gold.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaximumGold(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def getMaximumGold(self, grid: List[List[int]]) -> int:\n        def dfs(i: int, j: int) -> int:\n            if not (0 <= i < m and 0 <= j < n and grid[i][j]):\n                return 0\n            v = grid[i][j]\n            grid[i][j] = 0\n            ans = max(dfs(i + a, j + b) for a, b in pairwise(dirs)) + v\n            grid[i][j] = v\n            return ans\n\n        m, n = len(grid), len(grid[0])\n        dirs = (-1, 0, 1, 0, -1)\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,6,0],[5,8,7],[0,9,0]]) == 24\n    assert candidate(grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]) == 28\n\n\ncheck(Solution().getMaximumGold)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, your task is to count how many strings of length n can be formed under the following rules:\n\nEach character is a lower case vowel\u00a0('a', 'e', 'i', 'o', 'u')\nEach vowel\u00a0'a' may only be followed by an 'e'.\nEach vowel\u00a0'e' may only be followed by an 'a'\u00a0or an 'i'.\nEach vowel\u00a0'i' may not be followed by another 'i'.\nEach vowel\u00a0'o' may only be followed by an 'i' or a\u00a0'u'.\nEach vowel\u00a0'u' may only be followed by an 'a'.\n\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        f = [1] * 5\n        mod = 10**9 + 7\n        for _ in range(n - 1):\n            g = [0] * 5\n            g[0] = (f[1] + f[2] + f[4]) % mod\n            g[1] = (f[0] + f[2]) % mod\n            g[2] = (f[1] + f[3]) % mod\n            g[3] = f[2]\n            g[4] = (f[2] + f[3]) % mod\n            f = g\n        return sum(f) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 5\n    assert candidate(n = 2) == 10\n    assert candidate(n = 5) == 68\n\n\ncheck(Solution().countVowelPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.\nThe mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.\nYou are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.\nNotes:\n\nElements with the same mapped values should appear in the same relative order as in the input.\nThe elements of nums should only be sorted based on their mapped values and not be replaced by them.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortJumbled(self, mapping: List[int], nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sortJumbled(self, mapping: List[int], nums: List[int]) -> List[int]:\n        def f(x: int) -> int:\n            if x == 0:\n                return mapping[0]\n            y, k = 0, 1\n            while x:\n                x, v = divmod(x, 10)\n                v = mapping[v]\n                y = k * v + y\n                k *= 10\n            return y\n\n        arr = sorted((f(x), i) for i, x in enumerate(nums))\n        return [nums[i] for _, i in arr]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]) == [338,38,991]\n    assert candidate(mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]) == [123,456,789]\n\n\ncheck(Solution().sortJumbled)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.\nYou are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused.\nReturn the maximum number of candies each child can get.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumCandies(self, candies: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumCandies(self, candies: List[int], k: int) -> int:\n        left, right = 0, max(candies)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            cnt = sum(v // mid for v in candies)\n            if cnt >= k:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candies = [5,8,6], k = 3) == 5\n    assert candidate(candies = [2,5], k = 11) == 0\n\n\ncheck(Solution().maximumCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nBalanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it into some number of substrings such that:\n\nEach substring is balanced.\n\nReturn the maximum number of balanced strings you can obtain.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def balancedStringSplit(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        ans = l = 0\n        for c in s:\n            if c == 'L':\n                l += 1\n            else:\n                l -= 1\n            if l == 0:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"RLRRLLRLRL\") == 4\n    assert candidate(s = \"RLRRRLLRLL\") == 2\n    assert candidate(s = \"LLLLRRRR\") == 1\n\n\ncheck(Solution().balancedStringSplit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a 0-indexed 8 x 8 chessboard, there can be multiple black queens and one white king.\nYou are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king.\nReturn the coordinates of the black queens that can directly attack the king. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def queensAttacktheKing(\n        self, queens: List[List[int]], king: List[int]\n    ) -> List[List[int]]:\n        n = 8\n        s = {(i, j) for i, j in queens}\n        ans = []\n        for a in range(-1, 2):\n            for b in range(-1, 2):\n                if a or b:\n                    x, y = king\n                    while 0 <= x + a < n and 0 <= y + b < n:\n                        x, y = x + a, y + b\n                        if (x, y) in s:\n                            ans.append([x, y])\n                            break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]) == [[0,1],[1,0],[3,3]]\n    assert candidate(queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]) == [[2,2],[3,4],[4,4]]\n\n\ncheck(Solution().queensAttacktheKing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxEqualFreq(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxEqualFreq(self, nums: List[int]) -> int:\n        cnt = Counter()\n        ccnt = Counter()\n        ans = mx = 0\n        for i, v in enumerate(nums, 1):\n            if v in cnt:\n                ccnt[cnt[v]] -= 1\n            cnt[v] += 1\n            mx = max(mx, cnt[v])\n            ccnt[cnt[v]] += 1\n            if mx == 1:\n                ans = i\n            elif ccnt[mx] * mx + ccnt[mx - 1] * (mx - 1) == i and ccnt[mx] == 1:\n                ans = i\n            elif ccnt[mx] * mx + 1 == i and ccnt[1] == 1:\n                ans = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,2,1,1,5,3,3,5]) == 7\n    assert candidate(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]) == 13\n\n\ncheck(Solution().maxEqualFreq)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [directioni, amounti]:\n\ndirectioni can be 0 (for left shift) or 1 (for right shift).\namounti is the amount by which string s is to be shifted.\nA left shift by 1 means remove the first character of s and append it to the end.\nSimilarly, a right shift by 1 means remove the last character of s and add it to the beginning.\n\nReturn the final string after all operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n```",
        "solutions": "class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        x = sum((b if a else -b) for a, b in shift)\n        x %= len(s)\n        return s[-x:] + s[:-x]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\", shift = [[0,1],[1,2]]) == \"cab\"\n    assert candidate(s = \"abcdefg\", shift = [[1,1],[1,1],[0,2],[1,3]]) == \"efgabcd\"\n\n\ncheck(Solution().stringShift)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile.\nIn one move, you can perform either of the following:\n\nIf the pile is not empty, remove the topmost element of the pile.\nIf there are one or more removed elements, add any one of them back onto the pile. This element becomes the new topmost element.\n\nYou are also given an integer k, which denotes the total number of moves to be made.\nReturn the maximum value of the topmost element of the pile possible after exactly k moves. In case it is not possible to obtain a non-empty pile after k moves, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumTop(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumTop(self, nums: List[int], k: int) -> int:\n        if k == 0:\n            return nums[0]\n        n = len(nums)\n        if n == 1:\n            if k % 2:\n                return -1\n            return nums[0]\n        ans = max(nums[: k - 1], default=-1)\n        if k < n:\n            ans = max(ans, nums[k])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,2,2,4,0,6], k = 4) == 5\n    assert candidate(nums = [2], k = 1) == -1\n\n\ncheck(Solution().maximumTop)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n representing the number of nodes in a connected undirected graph containing exactly one cycle. The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [node1i, node2i] denotes that there is a bidirectional edge connecting node1i and node2i in the graph.\nThe distance between two nodes a and b is defined to be the minimum number of edges that are needed to go from a to b.\nReturn an integer array answer of size n, where answer[i] is the minimum distance between the ith node and any node in the cycle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distanceToCycle(self, n: int, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def distanceToCycle(self, n: int, edges: List[List[int]]) -> List[int]:\n        g = defaultdict(set)\n        for a, b in edges:\n            g[a].add(b)\n            g[b].add(a)\n        q = deque(i for i in range(n) if len(g[i]) == 1)\n        f = [0] * n\n        seq = []\n        while q:\n            i = q.popleft()\n            seq.append(i)\n            for j in g[i]:\n                g[j].remove(i)\n                f[i] = j\n                if len(g[j]) == 1:\n                    q.append(j)\n            g[i].clear()\n        ans = [0] * n\n        for i in seq[::-1]:\n            ans[i] = ans[f[i]] + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[1,2],[2,4],[4,3],[3,1],[0,1],[5,2],[6,5]]) == [1,0,0,0,0,1,2]\n    assert candidate(n = 9, edges = [[0,1],[1,2],[0,2],[2,6],[6,7],[6,8],[0,3],[3,4],[3,5]]) == [0,0,0,1,2,2,1,2,2]\n\n\ncheck(Solution().distanceToCycle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2, both of length n.\nYou can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].\n\nFor example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15].\n\nYou may choose to apply the mentioned operation once or not do anything.\nThe score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.\nReturn the maximum possible score.\nA subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(nums1, nums2):\n            d = [a - b for a, b in zip(nums1, nums2)]\n            t = mx = d[0]\n            for v in d[1:]:\n                if t > 0:\n                    t += v\n                else:\n                    t = v\n                mx = max(mx, t)\n            return mx\n\n        s1, s2 = sum(nums1), sum(nums2)\n        return max(s2 + f(nums1, nums2), s1 + f(nums2, nums1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [60,60,60], nums2 = [10,90,10]) == 210\n    assert candidate(nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]) == 220\n    assert candidate(nums1 = [7,11,13], nums2 = [1,1,1]) == 31\n\n\ncheck(Solution().maximumsSplicedArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array\u00a0coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points\u00a0make a straight line in the XY plane.\n\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\n        x1, y1 = coordinates[0]\n        x2, y2 = coordinates[1]\n        for x, y in coordinates[2:]:\n            if (x - x1) * (y2 - y1) != (y - y1) * (x2 - x1):\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]) == True\n    assert candidate(coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]) == False\n\n\ncheck(Solution().checkStraightLine)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.\nIf a folder[i] is located within another folder[j], it is called a sub-folder of it. A sub-folder of folder[j] must start with folder[j], followed by a \"/\". For example, \"/a/b\" is a sub-folder of \"/a\", but \"/b\" is not a sub-folder of \"/a/b/c\".\nThe format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.\n\nFor example, \"/leetcode\" and \"/leetcode/problems\" are valid paths while an empty string and \"/\" are not.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeSubfolders(self, folder: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def removeSubfolders(self, folder: List[str]) -> List[str]:\n        folder.sort()\n        ans = [folder[0]]\n        for f in folder[1:]:\n            m, n = len(ans[-1]), len(f)\n            if m >= n or not (ans[-1] == f[:m] and f[m] == '/'):\n                ans.append(f)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]) == [\"/a\",\"/c/d\",\"/c/f\"]\n    assert candidate(folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]) == [\"/a\"]\n\n\ncheck(Solution().removeSubfolders)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.\nA string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def balancedString(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = Counter(s)\n        n = len(s)\n        if all(v <= n // 4 for v in cnt.values()):\n            return 0\n        ans, j = n, 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while j <= i and all(v <= n // 4 for v in cnt.values()):\n                ans = min(ans, i - j + 1)\n                cnt[s[j]] += 1\n                j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"QWER\") == 0\n    assert candidate(s = \"QQWE\") == 1\n    assert candidate(s = \"QQQW\") == 2\n    assert candidate(s = \"QQQQ\") == 3\n\n\ncheck(Solution().balancedString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string array words, where words[i] consists of lowercase English letters.\nIn one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions.\nReturn words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, \"dacb\" is an anagram of \"abdc\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeAnagrams(self, words: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def removeAnagrams(self, words: List[str]) -> List[str]:\n        return [\n            w\n            for i, w in enumerate(words)\n            if i == 0 or sorted(w) != sorted(words[i - 1])\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]) == [\"abba\",\"cd\"]\n    assert candidate(words = [\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\"]\n\n\ncheck(Solution().removeAnagrams)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.\nReturn a list answer of size 2 where:\n\nanswer[0] is a list of all players that have not lost any matches.\nanswer[1] is a list of all players that have lost exactly one match.\n\nThe values in the two lists should be returned in increasing order.\nNote:\n\nYou should only consider the players that have played at least one match.\nThe testcases will be generated such that no two matches will have the same outcome.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n        cnt = Counter()\n        for a, b in matches:\n            if a not in cnt:\n                cnt[a] = 0\n            cnt[b] += 1\n        ans = [[], []]\n        for u, v in cnt.items():\n            if v < 2:\n                ans[v].append(u)\n        ans[0].sort()\n        ans[1].sort()\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]) == [[1,2,10],[4,5,7,8]]\n    assert candidate(matches = [[2,3],[1,3],[5,4],[6,4]]) == [[1,2,5,6],[]]\n\n\ncheck(Solution().findWinners)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. The array nums is beautiful if:\n\nnums.length is even.\nnums[i] != nums[i + 1] for all i % 2 == 0.\n\nNote that an empty array is considered beautiful.\nYou can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.\nReturn the minimum number of elements to delete from nums to make it beautiful.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        n = len(nums)\n        i = ans = 0\n        while i < n - 1:\n            if nums[i] == nums[i + 1]:\n                ans += 1\n                i += 1\n            else:\n                i += 2\n        ans += (n - ans) % 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,2,3,5]) == 1\n    assert candidate(nums = [1,1,2,2,3,3]) == 2\n\n\ncheck(Solution().minDeletion)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of lowercase English letters.\nIn one move, you can select any two adjacent characters of s and swap them.\nReturn the minimum number of moves needed to make s a palindrome.\nNote that the input will be generated such that s can always be converted to a palindrome.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabb\") == 2\n    assert candidate(s = \"letelt\") == 2\n\n\ncheck(Solution().minMovesToMakePalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven 2 integers n and start. Your task is return any permutation p\u00a0of (0,1,2.....,2^n -1) such that :\n\np[0] = start\np[i] and p[i+1]\u00a0differ by only one bit in their binary representation.\np[0] and p[2^n -1]\u00a0must also differ by only one bit in their binary representation.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n        g = [i ^ (i >> 1) for i in range(1 << n)]\n        j = g.index(start)\n        return g[j:] + g[:j]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, start = 3) == [3,2,0,1]\n    assert candidate(n = 3, start = 2) == [2,6,7,5,4,0,1,3]\n\n\ncheck(Solution().circularPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n```",
        "solutions": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        def dfs(i: int, j: int, t: int):\n            nonlocal ans\n            if j == m:\n                i += 1\n                j = 0\n            if i == n:\n                ans = t\n                return\n            if filled[i] >> j & 1:\n                dfs(i, j + 1, t)\n            elif t + 1 < ans:\n                r = c = 0\n                for k in range(i, n):\n                    if filled[k] >> j & 1:\n                        break\n                    r += 1\n                for k in range(j, m):\n                    if filled[i] >> k & 1:\n                        break\n                    c += 1\n                mx = r if r < c else c\n                for w in range(1, mx + 1):\n                    for k in range(w):\n                        filled[i + w - 1] |= 1 << (j + k)\n                        filled[i + k] |= 1 << (j + w - 1)\n                    dfs(i, j + w, t + 1)\n                for x in range(i, i + mx):\n                    for y in range(j, j + mx):\n                        filled[x] ^= 1 << y\n\n        ans = n * m\n        filled = [0] * n\n        dfs(0, 0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, m = 3) == 3\n    assert candidate(n = 5, m = 8) == 5\n    assert candidate(n = 11, m = 13) == 6\n\n\ncheck(Solution().tilingRectangle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nn passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\nTake their own seat if it is still available, and\nPick other seats randomly when they find their seat occupied\n\nReturn the probability that the nth person gets his own seat.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n```",
        "solutions": "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n == 1 else 0.5\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 1.00000\n\n\ncheck(Solution().nthPersonGetsNthSeat)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. The returned letter should be in uppercase. If no such letter exists, return an empty string.\nAn English letter b is greater than another letter a if b appears after a in the English alphabet.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def greatestLetter(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def greatestLetter(self, s: str) -> str:\n        ss = set(s)\n        for c in ascii_uppercase[::-1]:\n            if c in ss and c.lower() in ss:\n                return c\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"lEeTcOdE\") == \"E\"\n    assert candidate(s = \"arRAzFif\") == \"R\"\n    assert candidate(s = \"AbCdEfGhIjK\") == \"\"\n\n\ncheck(Solution().greatestLetter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def tupleSameProduct(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def tupleSameProduct(self, nums: List[int]) -> int:\n        cnt = defaultdict(int)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                x = nums[i] * nums[j]\n                cnt[x] += 1\n        return sum(v * (v - 1) // 2 for v in cnt.values()) << 3\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,4,6]) == 8\n    assert candidate(nums = [1,2,4,5,10]) == 16\n\n\ncheck(Solution().tupleSameProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.\nYou can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\nReturn the maximum height of the stacked cuboids.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        for c in cuboids:\n            c.sort()\n        cuboids.sort()\n        n = len(cuboids)\n        f = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[j][1] <= cuboids[i][1] and cuboids[j][2] <= cuboids[i][2]:\n                    f[i] = max(f[i], f[j])\n            f[i] += cuboids[i][2]\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cuboids = [[50,45,20],[95,37,53],[45,23,12]]) == 190\n    assert candidate(cuboids = [[38,25,45],[76,35,3]]) == 76\n    assert candidate(cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]) == 102\n\n\ncheck(Solution().maxHeight)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].\nReturn the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        xy = yx = 0\n        for a, b in zip(s1, s2):\n            xy += a < b\n            yx += a > b\n        if (xy + yx) % 2:\n            return -1\n        return xy // 2 + yx // 2 + xy % 2 + yx % 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"xx\", s2 = \"yy\") == 1\n    assert candidate(s1 = \"xy\", s2 = \"yx\") == 2\n    assert candidate(s1 = \"xx\", s2 = \"xy\") == -1\n\n\ncheck(Solution().minimumSwap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n        cnt = Counter({0: 1})\n        ans = t = 0\n        for v in nums:\n            t += v & 1\n            ans += cnt[t - k]\n            cnt[t] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,2,1,1], k = 3) == 2\n    assert candidate(nums = [2,4,6], k = 1) == 0\n    assert candidate(nums = [2,2,2,1,2,2,1,2,2,2], k = 2) == 16\n\n\ncheck(Solution().numberOfSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s of '(' , ')' and lowercase English characters.\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\n\nIt is the empty string, contains only lowercase characters, or\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        stk = []\n        x = 0\n        for c in s:\n            if c == ')' and x == 0:\n                continue\n            if c == '(':\n                x += 1\n            elif c == ')':\n                x -= 1\n            stk.append(c)\n        x = 0\n        ans = []\n        for c in stk[::-1]:\n            if c == '(' and x == 0:\n                continue\n            if c == ')':\n                x += 1\n            elif c == '(':\n                x -= 1\n            ans.append(c)\n        return ''.join(ans[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"lee(t(c)o)de)\") == \"lee(t(c)o)de\"\n    assert candidate(s = \"a)b(c)d\") == \"ab(c)d\"\n    assert candidate(s = \"))((\") == \"\"\n\n\ncheck(Solution().minRemoveToMakeValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of\u00a0positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers.\u00a0The array is said to be\u00a0good\u00a0if you can obtain a sum of\u00a01\u00a0from the array by any possible subset and multiplicand.\nReturn\u00a0True\u00a0if the array is good\u00a0otherwise\u00a0return\u00a0False.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        return reduce(gcd, nums) == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [12,5,7,23]) == True\n    assert candidate(nums = [29,6,10]) == True\n    assert candidate(nums = [3,6]) == False\n\n\ncheck(Solution().isGoodArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.\nA palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:\n        l = (intLength + 1) >> 1\n        start, end = 10 ** (l - 1), 10**l - 1\n        ans = []\n        for q in queries:\n            v = start + q - 1\n            if v > end:\n                ans.append(-1)\n                continue\n            s = str(v)\n            s += s[::-1][intLength % 2 :]\n            ans.append(int(s))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queries = [1,2,3,4,5,90], intLength = 3) == [101,111,121,131,141,999]\n    assert candidate(queries = [2,4,6], intLength = 4) == [1111,1331,1551]\n\n\ncheck(Solution().kthPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.\nFor each location indices[i], do both of the following:\n\nIncrement all the cells on row ri.\nIncrement all the cells on column ci.\n\nGiven m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def oddCells(self, m: int, n: int, indices: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def oddCells(self, m: int, n: int, indices: List[List[int]]) -> int:\n        g = [[0] * n for _ in range(m)]\n        for r, c in indices:\n            for i in range(m):\n                g[i][c] += 1\n            for j in range(n):\n                g[r][j] += 1\n        return sum(v % 2 for row in g for v in row)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 2, n = 3, indices = [[0,1],[1,1]]) == 6\n    assert candidate(m = 2, n = 2, indices = [[1,1],[0,0]]) == 0\n\n\ncheck(Solution().oddCells)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of words, list of\u00a0 single\u00a0letters (might be repeating)\u00a0and score\u00a0of every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two\u00a0or more times).\nIt is not necessary to use all characters in letters and each letter can only be used once. Score of letters\u00a0'a', 'b', 'c', ... ,'z' is given by\u00a0score[0], score[1], ... , score[25] respectively.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxScoreWords(\n        self, words: List[str], letters: List[str], score: List[int]\n    ) -> int:\n        cnt = Counter(letters)\n        n = len(words)\n        ans = 0\n        for i in range(1 << n):\n            cur = Counter(''.join([words[j] for j in range(n) if i >> j & 1]))\n            if all(v <= cnt[c] for c, v in cur.items()):\n                t = sum(v * score[ord(c) - ord('a')] for c, v in cur.items())\n                ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]) == 23\n    assert candidate(words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]) == 27\n    assert candidate(words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]) == 0\n\n\ncheck(Solution().maxScoreWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).\nTax is calculated as follows:\n\nThe first upper0 dollars earned are taxed at a rate of percent0.\nThe next upper1 - upper0 dollars earned are taxed at a rate of percent1.\nThe next upper2 - upper1 dollars earned are taxed at a rate of percent2.\nAnd so on.\n\nYou are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def calculateTax(self, brackets: List[List[int]], income: int) -> float:\n```",
        "solutions": "class Solution:\n    def calculateTax(self, brackets: List[List[int]], income: int) -> float:\n        ans = prev = 0\n        for upper, percent in brackets:\n            ans += max(0, min(income, upper) - prev) * percent\n            prev = upper\n        return ans / 100\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(brackets = [[3,50],[7,10],[12,25]], income = 10) == 2.65000\n    assert candidate(brackets = [[1,0],[4,25],[5,50]], income = 2) == 0.25000\n    assert candidate(brackets = [[2,50]], income = 0) == 0.00000\n\n\ncheck(Solution().calculateTax)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of positive integers nums. A triplet of three distinct indices (i, j, k) is called a single divisor triplet of nums if nums[i] + nums[j] + nums[k] is divisible by exactly one of nums[i], nums[j], or nums[k].\nReturn the number of single divisor triplets of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def singleDivisorTriplet(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def singleDivisorTriplet(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        ans = 0\n        for a, x in cnt.items():\n            for b, y in cnt.items():\n                for c, z in cnt.items():\n                    s = a + b + c\n                    if sum(s % v == 0 for v in (a, b, c)) == 1:\n                        if a == b:\n                            ans += x * (x - 1) * z\n                        elif a == c:\n                            ans += x * (x - 1) * y\n                        elif b == c:\n                            ans += x * y * (y - 1)\n                        else:\n                            ans += x * y * z\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,6,7,3,2]) == 12\n    assert candidate(nums = [1,2,2]) == 6\n    assert candidate(nums = [1,1,1]) == 0\n\n\ncheck(Solution().singleDivisorTriplet)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D grid of size m x n\u00a0and an integer k. You need to shift the grid\u00a0k times.\nIn one shift operation:\n\nElement at grid[i][j] moves to grid[i][j + 1].\nElement at grid[i][n - 1] moves to grid[i + 1][0].\nElement at grid[m\u00a0- 1][n - 1] moves to grid[0][0].\n\nReturn the 2D grid after applying shift operation k times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        ans = [[0] * n for _ in range(m)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                x, y = divmod((i * n + j + k) % (m * n), n)\n                ans[x][y] = v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1) == [[9,1,2],[3,4,5],[6,7,8]]\n    assert candidate(grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4) == [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n    assert candidate(grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9) == [[1,2,3],[4,5,6],[7,8,9]]\n\n\ncheck(Solution().shiftGrid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[-inf] * 3 for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(nums, 1):\n            for j in range(3):\n                f[i][j] = max(f[i - 1][j], f[i - 1][(j - x) % 3] + x)\n        return f[n][0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,6,5,1,8]) == 18\n    assert candidate(nums = [4]) == 0\n    assert candidate(nums = [1,2,3,4,4]) == 12\n\n\ncheck(Solution().maxSumDivThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, count how many elements x there are, such that x + 1 is also in arr. If there are duplicates in arr, count them separately.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countElements(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        cnt = Counter(arr)\n        return sum(v for x, v in cnt.items() if cnt[x + 1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3]) == 2\n    assert candidate(arr = [1,1,3,3,5,5,7,7]) == 0\n\n\ncheck(Solution().countElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:\n\nanswer[0] is a list of all distinct integers in nums1 which are not present in nums2.\nanswer[1] is a list of all distinct integers in nums2 which are not present in nums1.\n\nNote that the integers in the lists may be returned in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:\n        s1, s2 = set(nums1), set(nums2)\n        return [list(s1 - s2), list(s2 - s1)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3], nums2 = [2,4,6]) == [[1,3],[4,6]]\n    assert candidate(nums1 = [1,2,3,3], nums2 = [1,1,2,2]) == [[3],[]]\n\n\ncheck(Solution().findDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row.\nEach possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the last row of grid can be ignored.\nThe cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = grid[0]\n        for i in range(1, m):\n            g = [inf] * n\n            for j in range(n):\n                for k in range(n):\n                    g[j] = min(g[j], f[k] + moveCost[grid[i - 1][k]][j] + grid[i][j])\n            f = g\n        return min(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]) == 17\n    assert candidate(grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]) == 6\n\n\ncheck(Solution().minPathCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\nYou can move according to these rules:\n\nIn 1 second, you can either:\n\n\t\nmove vertically by one\u00a0unit,\nmove horizontally by one unit, or\nmove diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).\n\n\nYou have to visit the points in the same order as they appear in the array.\nYou are allowed to pass through points that appear later in the order, but these do not count as visits.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:\n        return sum(\n            max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) for p1, p2 in pairwise(points)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,1],[3,4],[-1,0]]) == 7\n    assert candidate(points = [[3,2],[-2,2]]) == 5\n\n\ncheck(Solution().minTimeToVisitAllPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a map of a server center, represented as a m * n integer matrix\u00a0grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n\nReturn the number of servers\u00a0that communicate with any other server.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        row = [0] * m\n        col = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    row[i] += 1\n                    col[j] += 1\n        return sum(\n            grid[i][j] and (row[i] > 1 or col[j] > 1)\n            for i in range(m)\n            for j in range(n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0],[0,1]]) == 0\n    assert candidate(grid = [[1,0],[1,1]]) == 3\n    assert candidate(grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]) == 4\n\n\ncheck(Solution().countServers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nTic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:\n\nPlayers take turns placing characters into empty squares ' '.\nThe first player A always places 'X' characters, while the second player B always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never on filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\nGiven a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".\nYou can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n```",
        "solutions": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        n = len(moves)\n        cnt = [0] * 8\n        for k in range(n - 1, -1, -2):\n            i, j = moves[k]\n            cnt[i] += 1\n            cnt[j + 3] += 1\n            if i == j:\n                cnt[6] += 1\n            if i + j == 2:\n                cnt[7] += 1\n            if any(v == 3 for v in cnt):\n                return \"B\" if k & 1 else \"A\"\n        return \"Draw\" if n == 9 else \"Pending\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]) == \"A\"\n    assert candidate(moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]) == \"B\"\n    assert candidate(moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]) == \"Draw\"\n    assert candidate(moves = [[0,0],[1,1]]) == \"Pending\"\n\n\ncheck(Solution().tictactoe)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:\n\nJumbo Burger: 4 tomato slices and 1 cheese slice.\nSmall Burger: 2 Tomato slices and 1 cheese slice.\n\nReturn [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]:\n        k = 4 * cheeseSlices - tomatoSlices\n        y = k // 2\n        x = cheeseSlices - y\n        return [] if k % 2 or y < 0 or x < 0 else [x, y]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tomatoSlices = 16, cheeseSlices = 7) == [1,6]\n    assert candidate(tomatoSlices = 17, cheeseSlices = 4) == []\n    assert candidate(tomatoSlices = 4, cheeseSlices = 17) == []\n    assert candidate(tomatoSlices = 0, cheeseSlices = 0) == [0,0]\n    assert candidate(tomatoSlices = 2, cheeseSlices = 1) == [0,1]\n\n\ncheck(Solution().numOfBurgers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s containing lowercase letters and an integer k. You need to :\n\nFirst, change some characters of s to other lowercase English letters.\nThen divide s into k non-empty disjoint substrings such that each substring is a palindrome.\n\nReturn the minimal number of characters that you need to change to divide the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n        n = len(s)\n        g = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = int(s[i] != s[j])\n                if i + 1 < j:\n                    g[i][j] += g[i + 1][j - 1]\n\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, min(i, k) + 1):\n                if j == 1:\n                    f[i][j] = g[0][i - 1]\n                else:\n                    f[i][j] = inf\n                    for h in range(j - 1, i):\n                        f[i][j] = min(f[i][j], f[h][j - 1] + g[h][i - 1])\n        return f[n][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\", k = 2) == 1\n    assert candidate(s = \"aabbc\", k = 3) == 0\n    assert candidate(s = \"leetcode\", k = 8) == 0\n\n\ncheck(Solution().palindromePartition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer number n, return the difference between the product of its digits and the sum of its digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        x, y = 1, 0\n        while n:\n            n, v = divmod(n, 10)\n            x *= v\n            y += v\n        return x - y\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 234) == 15 \n    assert candidate(n = 4421) == 21\n\n\ncheck(Solution().subtractProductAndSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\nThe test cases are generated so\u00a0that there will be an answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestDivisor(self, nums: List[int], threshold: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestDivisor(self, nums: List[int], threshold: int) -> int:\n        l, r = 1, max(nums)\n        while l < r:\n            mid = (l + r) >> 1\n            if sum((x + mid - 1) // mid for x in nums) <= threshold:\n                r = mid\n            else:\n                l = mid + 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,5,9], threshold = 6) == 5\n    assert candidate(nums = [2,3,5,7,11], threshold = 11) == 3\n    assert candidate(nums = [19], threshold = 5) == 4\n\n\ncheck(Solution().smallestDivisor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.\nReturn the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.\nA binary matrix is a matrix with all cells equal to 0 or 1 only.\nA zero matrix is a matrix with all cells equal to 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFlips(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minFlips(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        state = sum(1 << (i * n + j) for i in range(m) for j in range(n) if mat[i][j])\n        q = deque([state])\n        vis = {state}\n        ans = 0\n        dirs = [0, -1, 0, 1, 0, 0]\n        while q:\n            for _ in range(len(q)):\n                state = q.popleft()\n                if state == 0:\n                    return ans\n                for i in range(m):\n                    for j in range(n):\n                        nxt = state\n                        for k in range(5):\n                            x, y = i + dirs[k], j + dirs[k + 1]\n                            if not 0 <= x < m or not 0 <= y < n:\n                                continue\n                            if nxt & (1 << (x * n + y)):\n                                nxt -= 1 << (x * n + y)\n                            else:\n                                nxt |= 1 << (x * n + y)\n                        if nxt not in vis:\n                            vis.add(nxt)\n                            q.append(nxt)\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[0,0],[0,1]]) == 3\n    assert candidate(mat = [[0]]) == 0\n    assert candidate(mat = [[1,0,0],[1,0,0]]) == -1\n\n\ncheck(Solution().minFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.\nThe most significant bit is at the head of the linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        \n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        ans = 0\n        while head:\n            ans = ans << 1 | head.val\n            head = head.next\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([1,0,1])) == 5\n    assert candidate(head = list_node([0])) == 0\n    assert candidate(head = list_node([1])) == 1\n    assert candidate(head = list_node([1,0,0,1,0,0,1,1,1,0,0,0,0,0,0])) == 18880\n    assert candidate(head = list_node([0,0])) == 0\n\n\ncheck(Solution().getDecimalValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4) == 2\n    assert candidate(mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1) == 0\n\n\ncheck(Solution().maxSideLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        m, n = len(grid), len(grid[0])\n        if k >= m + n - 3:\n            return m + n - 2\n        q = deque([(0, 0, k)])\n        vis = {(0, 0, k)}\n        ans = 0\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                i, j, k = q.popleft()\n                for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n:\n                        if x == m - 1 and y == n - 1:\n                            return ans\n                        if grid[x][y] == 0 and (x, y, k) not in vis:\n                            q.append((x, y, k))\n                            vis.add((x, y, k))\n                        if grid[x][y] == 1 and k > 0 and (x, y, k - 1) not in vis:\n                            q.append((x, y, k - 1))\n                            vis.add((x, y, k - 1))\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate( grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1) == 6\n    assert candidate(grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1) == -1\n\n\ncheck(Solution().shortestPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return true if nums is consecutive, otherwise return false.\nAn array is consecutive if it contains every number in the range [x, x + n - 1] (inclusive), where x is the minimum number in the array and n is the length of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isConsecutive(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isConsecutive(self, nums: List[int]) -> bool:\n        mi, mx = min(nums), max(nums)\n        n = len(nums)\n        return len(set(nums)) == n and mx == mi + n - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,4,2]) == True\n    assert candidate(nums = [1,3]) == False\n    assert candidate(nums = [3,5,4]) == True\n\n\ncheck(Solution().isConsecutive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\nThe unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.\nReturn the minimum unfairness of all distributions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        def dfs(i):\n            if i >= len(cookies):\n                nonlocal ans\n                ans = max(cnt)\n                return\n            for j in range(k):\n                if cnt[j] + cookies[i] >= ans or (j and cnt[j] == cnt[j - 1]):\n                    continue\n                cnt[j] += cookies[i]\n                dfs(i + 1)\n                cnt[j] -= cookies[i]\n\n        ans = inf\n        cnt = [0] * k\n        cookies.sort(reverse=True)\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cookies = [8,15,10,20,8], k = 2) == 31\n    assert candidate(cookies = [6,1,3,2,2,4,1,2], k = 3) == 7\n\n\ncheck(Solution().distributeCookies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one operation, you can:\n\nChoose an index i in the range 0 <= i < nums.length\nSet nums[i] to nums[i] + 1 or nums[i] - 1\n\nReturn the minimum number of operations to make nums non-decreasing or non-increasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convertArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def convertArray(self, nums: List[int]) -> int:\n        def solve(nums):\n            n = len(nums)\n            f = [[0] * 1001 for _ in range(n + 1)]\n            for i, x in enumerate(nums, 1):\n                mi = inf\n                for j in range(1001):\n                    if mi > f[i - 1][j]:\n                        mi = f[i - 1][j]\n                    f[i][j] = mi + abs(x - j)\n            return min(f[n])\n\n        return min(solve(nums), solve(nums[::-1]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,4,5,0]) == 4\n    assert candidate(nums = [2,2,3,4]) == 0\n    assert candidate(nums = [0]) == 0\n\n\ncheck(Solution().convertArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        return sum(len(str(v)) % 2 == 0 for v in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [12,345,2,6,7896]) == 2\n    assert candidate(nums = [555,901,482,1771]) == 1 \n\n\ncheck(Solution().findNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.\nReturn true if it is possible. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPossibleDivide(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isPossibleDivide(self, nums: List[int], k: int) -> bool:\n        cnt = Counter(nums)\n        for v in sorted(nums):\n            if cnt[v]:\n                for x in range(v, v + k):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,3,4,4,5,6], k = 4) == True\n    assert candidate(nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3) == True\n    assert candidate(nums = [3,3,2,2,1,1], k = 3) == True\n    assert candidate(nums = [1,2,3,4], k = 3) == False\n\n\ncheck(Solution().isPossibleDivide)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the maximum number of occurrences of any substring under the following rules:\n\nThe number of unique characters in the substring must be less than or equal to maxLetters.\nThe substring size must be between minSize and maxSize inclusive.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        ans = 0\n        cnt = Counter()\n        for i in range(len(s) - minSize + 1):\n            t = s[i : i + minSize]\n            ss = set(t)\n            if len(ss) <= maxLetters:\n                cnt[t] += 1\n                ans = max(ans, cnt[t])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4) == 2\n    assert candidate(s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3) == 2\n    assert candidate(s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3) == 3\n    assert candidate(s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3) == 0\n\n\ncheck(Solution().maxFreq)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\n\nstatus[i] is 1 if the ith box is open and 0 if the ith box is closed,\ncandies[i] is the number of candies in the ith box,\nkeys[i] is a list of the labels of the boxes you can open after opening the ith box.\ncontainedBoxes[i] is a list of the boxes you found inside the ith box.\n\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\nReturn the maximum number of candies you can get following the rules above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCandies(self, status: List[int], candies: List[int], keys: List[List[int]], containedBoxes: List[List[int]], initialBoxes: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        q = deque([i for i in initialBoxes if status[i] == 1])\n        ans = sum(candies[i] for i in initialBoxes if status[i] == 1)\n        has = set(initialBoxes)\n        took = {i for i in initialBoxes if status[i] == 1}\n\n        while q:\n            i = q.popleft()\n            for k in keys[i]:\n                status[k] = 1\n                if k in has and k not in took:\n                    ans += candies[k]\n                    took.add(k)\n                    q.append(k)\n            for j in containedBoxes[i]:\n                has.add(j)\n                if status[j] and j not in took:\n                    ans += candies[j]\n                    took.add(j)\n                    q.append(j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]) == 16\n    assert candidate(status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]) == 6\n    assert candidate(status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]) == 1\n    assert candidate(status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []) == 0\n    assert candidate(status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]) == 7\n\n\ncheck(Solution().maxCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        def dfs(root, t):\n            if root is None:\n                return\n            dfs(root.left, t)\n            t.append(root.val)\n            dfs(root.right, t)\n\n        def merge(t1, t2):\n            ans = []\n            i = j = 0\n            while i < len(t1) and j < len(t2):\n                if t1[i] <= t2[j]:\n                    ans.append(t1[i])\n                    i += 1\n                else:\n                    ans.append(t2[j])\n                    j += 1\n            while i < len(t1):\n                ans.append(t1[i])\n                i += 1\n            while j < len(t2):\n                ans.append(t2[j])\n                j += 1\n            return ans\n\n        t1, t2 = [], []\n        dfs(root1, t1)\n        dfs(root2, t2)\n        return merge(t1, t2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root1 = tree_node([2,1,4]), root2 = tree_node([1,0,3])) == [0,1,1,2,3,4]\n    assert candidate(root1 = tree_node([1,None,8]), root2 = tree_node([8,1])) == [1,1,8,8]\n\n\ncheck(Solution().getAllElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of non-negative integers arr, you are initially positioned at start\u00a0index of the array. When you are at index i, you can jump\u00a0to i + arr[i] or i - arr[i], check if you can reach\u00a0any index with value 0.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        q = deque([start])\n        while q:\n            i = q.popleft()\n            if arr[i] == 0:\n                return True\n            x = arr[i]\n            arr[i] = -1\n            for j in (i + x, i - x):\n                if 0 <= j < len(arr) and arr[j] >= 0:\n                    q.append(j)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [4,2,3,0,3,1,2], start = 5) == True\n    assert candidate(arr = [4,2,3,0,3,1,2], start = 0) == True \n    assert candidate(arr = [3,0,2,1,2], start = 2) == False\n\n\ncheck(Solution().canReach)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an equation, represented by words on the left side and the result on the right side.\nYou need to check if the equation is solvable under the following rules:\n\nEach character is decoded as one digit (0 - 9).\nNo two characters can map to the same digit.\nEach words[i] and result are decoded as one number without leading zeros.\nSum of numbers on the left side (words) will equal to the number on the right side (result).\n\nReturn true if the equation is solvable, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSolvable(self, words: List[str], result: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isAnyMapping(\n        self, words, row, col, bal, letToDig, digToLet, totalRows, totalCols\n    ):\n        # If traversed all columns.\n        if col == totalCols:\n            return bal == 0\n\n        # At the end of a particular column.\n        if row == totalRows:\n            return bal % 10 == 0 and self.isAnyMapping(\n                words, 0, col + 1, bal // 10, letToDig, digToLet, totalRows, totalCols\n            )\n\n        w = words[row]\n\n        # If the current string 'w' has no character in the ('col')th index.\n        if col >= len(w):\n            return self.isAnyMapping(\n                words, row + 1, col, bal, letToDig, digToLet, totalRows, totalCols\n            )\n\n        # Take the current character in the variable letter.\n        letter = w[len(w) - 1 - col]\n\n        # Create a variable 'sign' to check whether we have to add it or subtract it.\n        if row < totalRows - 1:\n            sign = 1\n        else:\n            sign = -1\n\n        # If we have a prior valid mapping, then use that mapping.\n        # The second condition is for the leading zeros.\n        if letter in letToDig and (\n            letToDig[letter] != 0\n            or (letToDig[letter] == 0 and len(w) == 1)\n            or col != len(w) - 1\n        ):\n\n            return self.isAnyMapping(\n                words,\n                row + 1,\n                col,\n                bal + sign * letToDig[letter],\n                letToDig,\n                digToLet,\n                totalRows,\n                totalCols,\n            )\n\n        # Choose a new mapping.\n        else:\n            for i in range(10):\n                # If 'i'th mapping is valid then select it.\n                if digToLet[i] == \"-\" and (\n                    i != 0 or (i == 0 and len(w) == 1) or col != len(w) - 1\n                ):\n                    digToLet[i] = letter\n                    letToDig[letter] = i\n\n                    # Call the function again with the new mapping.\n                    if self.isAnyMapping(\n                        words,\n                        row + 1,\n                        col,\n                        bal + sign * letToDig[letter],\n                        letToDig,\n                        digToLet,\n                        totalRows,\n                        totalCols,\n                    ):\n                        return True\n\n                    # Unselect the mapping.\n                    digToLet[i] = \"-\"\n                    if letter in letToDig:\n                        del letToDig[letter]\n\n        # If nothing is correct then just return false.\n        return False\n\n    def isSolvable(self, words, result):\n        # Add the string 'result' in the list 'words'.\n        words.append(result)\n\n        # Initialize 'totalRows' with the size of the list.\n        totalRows = len(words)\n\n        # Find the longest string in the list and set 'totalCols' with the size of that string.\n        totalCols = max(len(word) for word in words)\n\n        # Create a HashMap for the letter to digit mapping.\n        letToDig = {}\n\n        # Create a list for the digit to letter mapping.\n        digToLet = [\"-\"] * 10\n\n        return self.isAnyMapping(\n            words, 0, 0, 0, letToDig, digToLet, totalRows, totalCols\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"SEND\",\"MORE\"], result = \"MONEY\") == True\n    assert candidate(words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\") == True\n    assert candidate(words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\") == True\n    assert candidate(words = [\"LEET\",\"CODE\"], result = \"POINT\") == False\n\n\ncheck(Solution().isSolvable)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:\n\nIt has a length of k.\nIt is a divisor of num.\n\nGiven integers num and k, return the k-beauty of num.\nNote:\n\nLeading zeros are allowed.\n0 is not a divisor of any value.\n\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        ans = 0\n        s = str(num)\n        for i in range(len(s) - k + 1):\n            t = int(s[i : i + k])\n            if t and num % t == 0:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 240, k = 2) == 2\n    assert candidate(num = 430043, k = 2) == 2\n\n\ncheck(Solution().divisorSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:\n\nCharacters ('a' to 'i') are represented by ('1' to '9') respectively.\nCharacters ('j' to 'z') are represented by ('10#' to '26#') respectively.\n\nReturn the string formed after mapping.\nThe test cases are generated so that a unique mapping will always exist.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def freqAlphabets(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def freqAlphabets(self, s: str) -> str:\n        def get(s):\n            return chr(ord('a') + int(s) - 1)\n\n        i, n = 0, len(s)\n        res = []\n        while i < n:\n            if i + 2 < n and s[i + 2] == '#':\n                res.append(get(s[i : i + 2]))\n                i += 3\n            else:\n                res.append(get(s[i]))\n                i += 1\n        return ''.join(res)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"10#11#12\") == \"jkab\"\n    assert candidate(s = \"1326#\") == \"acz\"\n\n\ncheck(Solution().freqAlphabets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your\u00a0friends, level 2 of videos are all watched videos by the friends of your\u00a0friends and so on. In general, the level k of videos are all\u00a0watched videos by people\u00a0with the shortest path exactly equal\u00a0to\u00a0k with you. Given your\u00a0id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def watchedVideosByFriends(self, watchedVideos: List[List[str]], friends: List[List[int]], id: int, level: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def watchedVideosByFriends(\n        self,\n        watchedVideos: List[List[str]],\n        friends: List[List[int]],\n        id: int,\n        level: int,\n    ) -> List[str]:\n        n = len(friends)\n        vis = [False] * n\n        q = deque([id])\n        vis[id] = True\n        for _ in range(level):\n            size = len(q)\n            for _ in range(size):\n                u = q.popleft()\n                for v in friends[u]:\n                    if not vis[v]:\n                        q.append(v)\n                        vis[v] = True\n        freq = Counter()\n        for _ in range(len(q)):\n            u = q.pop()\n            for w in watchedVideos[u]:\n                freq[w] += 1\n        videos = list(freq.items())\n        videos.sort(key=lambda x: (x[1], x[0]))\n        return [v[0] for v in videos]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1) == [\"B\",\"C\"] \n    assert candidate(watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2) == [\"D\"]\n\n\ncheck(Solution().watchedVideosByFriends)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nNo-Zero integer is a positive integer that does not contain any 0 in its decimal representation.\nGiven an integer n, return a list of two integers [a, b] where:\n\na and b are No-Zero integers.\na + b = n\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getNoZeroIntegers(self, n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getNoZeroIntegers(self, n: int) -> List[int]:\n        for a in range(1, n):\n            b = n - a\n            if \"0\" not in str(a) + str(b):\n                return [a, b]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == [1,1]\n    assert candidate(n = 11) == [2,9]\n    assert candidate(n = 10000) == [1,9999]\n    assert candidate(n = 69) == [1,68]\n    assert candidate(n = 1010) == [11,999]\n\n\ncheck(Solution().getNoZeroIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make (\u00a0a OR b == c\u00a0). (bitwise OR operation).\r\nFlip operation\u00a0consists of change\u00a0any\u00a0single bit 1 to 0 or change the bit 0 to 1\u00a0in their binary representation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n```",
        "solutions": "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(32):\n            x, y, z = a >> i & 1, b >> i & 1, c >> i & 1\n            ans += x + y if z == 0 else int(x == 0 and y == 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 2, b = 6, c = 5) == 3\n    assert candidate(a = 4, b = 2, c = 7) == 1\n    assert candidate(a = 1, b = 2, c = 3) == 0\n\n\ncheck(Solution().minFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        cnt, size = 0, n\n        p = list(range(n))\n        for a, b in connections:\n            if find(a) == find(b):\n                cnt += 1\n            else:\n                p[find(a)] = find(b)\n                size -= 1\n        return -1 if size - 1 > cnt else size - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, connections = [[0,1],[0,2],[1,2]]) == 1\n    assert candidate(n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]) == 2\n    assert candidate(n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]) == -1\n    assert candidate(n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]) == 0\n\n\ncheck(Solution().makeConnected)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.\n\nFor example, the letter 'A' is located at coordinate (0, 0), the letter 'B' is located at coordinate (0, 1), the letter 'P' is located at coordinate (2, 3) and the letter 'Z' is located at coordinate (4, 1).\n\nGiven the string word, return the minimum total distance to type such string using only two fingers.\nThe distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.\nNote that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDistance(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * 26 for _ in range(26)] for _ in range(n)]\n        for j in range(26):\n            f[0][ord(word[0]) - ord('A')][j] = 0\n            f[0][j][ord(word[0]) - ord('A')] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                if j == a:\n                    for k in range(26):\n                        t = dist(k, b)\n                        f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                        f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')])\n        b = min(f[n - 1][j][ord(word[-1]) - ord('A')] for j in range(26))\n        return int(min(a, b))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"CAKE\") == 3\n    assert candidate(word = \"HAPPY\") == 6\n\n\ncheck(Solution().minimumDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer num, return the number of steps to reduce it to zero.\nIn one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSteps(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSteps(self, num: int) -> int:\n        ans = 0\n        while num:\n            if num & 1:\n                num -= 1\n            else:\n                num >>= 1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 14) == 6\n    assert candidate(num = 8) == 4\n    assert candidate(num = 123) == 12\n\n\ncheck(Solution().numberOfSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n```",
        "solutions": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        threshold *= k\n        s = sum(arr[:k])\n        ans = int(s >= threshold)\n        for i in range(k, len(arr)):\n            s += arr[i] - arr[i - k]\n            ans += int(s >= threshold)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4) == 3\n    assert candidate(arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5) == 6\n\n\ncheck(Solution().numOfSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of\u00a0integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\n\ni + 1 where:\u00a0i + 1 < arr.length.\ni - 1 where:\u00a0i - 1 >= 0.\nj where: arr[i] == arr[j] and i != j.\n\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [100,-23,-23,404,100,23,23,23,3,404]) == 3\n    assert candidate(arr = [7]) == 0\n    assert candidate(arr = [7,6,9,6,9,6,9,7]) == 1\n\n\ncheck(Solution().minJumps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximum69Number (self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximum69Number(self, num: int) -> int:\n        return int(str(num).replace(\"6\", \"9\", 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 9669) == 9969\n    assert candidate(num = 9996) == 9999\n    assert candidate(num = 9999) == 9999\n\n\ncheck(Solution().maximum69Number)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s.\u00a0Return\u00a0all the words vertically in the same order in which they appear in s.\r\nWords are returned as a list of strings, complete with\u00a0spaces when is necessary. (Trailing spaces are not allowed).\r\nEach word would be put on only one column and that in one column there will be only one word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def printVertically(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def printVertically(self, s: str) -> List[str]:\n        words = s.split()\n        n = max(len(w) for w in words)\n        ans = []\n        for j in range(n):\n            t = [w[j] if j < len(w) else ' ' for w in words]\n            while t[-1] == ' ':\n                t.pop()\n            ans.append(''.join(t))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"HOW ARE YOU\") == [\"HAY\",\"ORO\",\"WEU\"]\n    assert candidate(s = \"TO BE OR NOT TO BE\") == [\"TBONTB\",\"OEROOE\",\"   T\"]\n    assert candidate(s = \"CONTEST IS COMING\") == [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]\n\n\ncheck(Solution().printVertically)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree root and an integer target, delete all the leaf nodes with value target.\nNote that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def removeLeafNodes(\n        self, root: Optional[TreeNode], target: int\n    ) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        root.left = self.removeLeafNodes(root.left, target)\n        root.right = self.removeLeafNodes(root.right, target)\n        if root.left is None and root.right is None and root.val == target:\n            return None\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([1,2,3,2,None,2,4]), target = 2), tree_node([1,None,3,None,4]))\n    assert is_same_tree(candidate(root = tree_node([1,3,3,3,2]), target = 3), tree_node([1,3,None,None,2]))\n    assert is_same_tree(candidate(root = tree_node([1,2,None,2,None,2]), target = 2), tree_node([1]))\n    assert is_same_tree(candidate(root = tree_node([1,1,1]), target = 1), tree_node([]))\n    assert is_same_tree(candidate(root = tree_node([1,2,3]), target = 1), tree_node([1,2,3]))\n\n\ncheck(Solution().removeLeafNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e., the\u00a0length of the garden is n).\nThere are n + 1 taps located at points [0, 1, ..., n] in the garden.\nGiven an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTaps(self, n: int, ranges: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -> int:\n        last = [0] * (n + 1)\n        for i, x in enumerate(ranges):\n            l, r = max(0, i - x), i + x\n            last[l] = max(last[l], r)\n\n        ans = mx = pre = 0\n        for i in range(n):\n            mx = max(mx, last[i])\n            if mx <= i:\n                return -1\n            if pre == i:\n                ans += 1\n                pre = mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, ranges = [3,4,1,1,0,0]) == 1\n    assert candidate(n = 3, ranges = [0,0,0,0]) == -1\n\n\ncheck(Solution().minTaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        return 1 if s[::-1] == s else 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ababa\") == 1\n    assert candidate(s = \"abb\") == 2\n    assert candidate(s = \"baabb\") == 2\n\n\ncheck(Solution().removePalindromeSub)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array restaurants where \u00a0restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true)\u00a0or false\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0maxPrice and maxDistance\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def filterRestaurants(self, restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        ans = []\n        for idx, _, vegan, price, dist in restaurants:\n            if vegan >= veganFriendly and price <= maxPrice and dist <= maxDistance:\n                ans.append(idx)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10) == [3,1,5] \n    assert candidate(restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10) == [4,3,2,1,5]\n    assert candidate(restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3) == [4,5]\n\n\ncheck(Solution().filterRestaurants)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n```",
        "solutions": "class Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n        n = len(jobDifficulty)\n        f = [[inf] * (d + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, min(d + 1, i + 1)):\n                mx = 0\n                for k in range(i, 0, -1):\n                    mx = max(mx, jobDifficulty[k - 1])\n                    f[i][j] = min(f[i][j], f[k - 1][j - 1] + mx)\n        return -1 if f[n][d] >= inf else f[n][d]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(jobDifficulty = [6,5,4,3,2,1], d = 2) == 7\n    assert candidate(jobDifficulty = [9,9,9], d = 4) == -1\n    assert candidate(jobDifficulty = [1,1,1], d = 3) == 3\n    assert candidate(jobDifficulty = [7,1,7,1,7,1], d = 3) == 15\n    assert candidate(jobDifficulty = [11,111,22,222,33,333,44,444], d = 6) == 843\n\n\ncheck(Solution().minDifficulty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s\u00a0consisting only of characters a, b and c.\nReturn the number of substrings containing at least\u00a0one occurrence of all these characters a, b and c.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        d = {\"a\": -1, \"b\": -1, \"c\": -1}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c] = i\n            ans += min(d[\"a\"], d[\"b\"], d[\"c\"]) + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcabc\") == 10\n    assert candidate(s = \"aaacb\") == 3\n    assert candidate(s = \"abc\") == 1\n\n\ncheck(Solution().numberOfSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n orders, each order consists of a pickup and a delivery service.\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of\u00a0pickup(i).\u00a0\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countOrders(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countOrders(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = 1\n        for i in range(2, n + 1):\n            f = (f * i * (2 * i - 1)) % mod\n        return f\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 1\n    assert candidate(n = 2) == 6\n    assert candidate(n = 3) == 90\n\n\ncheck(Solution().countOrders)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.\nReturn the minimum size of the set so that at least half of the integers of the array are removed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n        cnt = Counter(arr)\n        ans = m = 0\n        for _, v in cnt.most_common():\n            m += v\n            ans += 1\n            if m * 2 >= len(arr):\n                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,3,3,3,5,5,5,2,2,7]) == 2\n    assert candidate(arr = [7,7,7,7,7,7]) == 1\n\n\ncheck(Solution().minSetSize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\nReturn the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n        def sum(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            return root.val + sum(root.left) + sum(root.right)\n\n        def dfs(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            t = root.val + dfs(root.left) + dfs(root.right)\n            nonlocal ans, s\n            if t < s:\n                ans = max(ans, t * (s - t))\n            return t\n\n        mod = 10**9 + 7\n        s = sum(root)\n        ans = 0\n        dfs(root)\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,4,5,6])) == 110\n    assert candidate(root = tree_node([1,None,2,3,4,None,None,5,6])) == 90\n    assert candidate(root = tree_node([2,3,9,10,7,8,6,5,4,11,1])) == 1025\n    assert candidate(root = tree_node([1,1])) == 1\n\n\ncheck(Solution().maxProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array arr of integers, check if there exist two indices i and j such that :\n\ni != j\n0 <= i, j < arr.length\narr[i] == 2 * arr[j]\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        s = set()\n        for x in arr:\n            if x * 2 in s or (x % 2 == 0 and x // 2 in s):\n                return True\n            s.add(x)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [10,2,5,3]) == True\n    assert candidate(arr = [7,1,14,11]) == True\n    assert candidate(arr = [3,1,7,11]) == False\n\n\ncheck(Solution().checkIfExist)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t an anagram of s.\nAn Anagram of a string is a string that contains the same characters with a different (or the same) ordering.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSteps(self, s: str, t: str) -> int:\n```",
        "solutions": "class Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for c in t:\n            if cnt[c] > 0:\n                cnt[c] -= 1\n            else:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"bab\", t = \"aba\") == 1\n    assert candidate(s = \"leetcode\", t = \"practice\") == 5\n    assert candidate(s = \"anagram\", t = \"mangaar\") == 0\n\n\ncheck(Solution().minSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s. Reorder the string using the following algorithm:\n\nRemove the smallest character from s and append it to the result.\nRemove the smallest character from s that is greater than the last appended character, and append it to the result.\nRepeat step 2 until no more characters can be removed.\nRemove the largest character from s and append it to the result.\nRemove the largest character from s that is smaller than the last appended character, and append it to the result.\nRepeat step 5 until no more characters can be removed.\nRepeat steps 1 through 6 until all characters from s have been removed.\n\nIf the smallest or largest character appears more than once, you may choose any occurrence to append to the result.\nReturn the resulting string after reordering s using this algorithm.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def sortString(self, s: str) -> str:\n        cnt = Counter(s)\n        cs = ascii_lowercase + ascii_lowercase[::-1]\n        ans = []\n        while len(ans) < len(s):\n            for c in cs:\n                if cnt[c]:\n                    ans.append(c)\n                    cnt[c] -= 1\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaaabbbbcccc\") == \"abccbaabccba\"\n    assert candidate(s = \"rat\") == \"art\"\n    assert candidate(s = \"leetcode\") == \"cdelotee\"\n    assert candidate(s = \"ggggggg\") == \"ggggggg\"\n    assert candidate(s = \"spo\") == \"ops\"\n\n\ncheck(Solution().sortString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        pos = [inf] * 32\n        pos[0] = -1\n        vowels = 'aeiou'\n        state = ans = 0\n        for i, c in enumerate(s):\n            for j, v in enumerate(vowels):\n                if c == v:\n                    state ^= 1 << j\n            ans = max(ans, i - pos[state])\n            pos[state] = min(pos[state], i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"eleetminicoworoep\") == 13\n    assert candidate(s = \"leetcodeisgreat\") == 5\n    assert candidate(s = \"bcbcbc\") == 6\n\n\ncheck(Solution().findTheLongestSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree.\nA ZigZag path for a binary tree is defined as follow:\n\nChoose any node in the binary tree and a direction (right or left).\nIf the current direction is right, move to the right child of the current node; otherwise, move to the left child.\nChange the direction from right to left or from left to right.\nRepeat the second and third steps until you can't move in the tree.\n\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\nReturn the longest ZigZag path contained in that tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        def dfs(root, l, r):\n            if root is None:\n                return\n            nonlocal ans\n            ans = max(ans, l, r)\n            dfs(root.left, r + 1, 0)\n            dfs(root.right, 0, l + 1)\n\n        ans = 0\n        dfs(root, 0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,None,1,1,1,None,None,1,1,None,1,None,None,None,1,None,1])) == 3\n    assert candidate(root = tree_node([1,1,1,None,1,None,None,1,1,None,1])) == 4\n    assert candidate(root = tree_node([1])) == 0\n\n\ncheck(Solution().longestZigZag)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode]) -> tuple:\n            if root is None:\n                return 1, inf, -inf, 0\n            lbst, lmi, lmx, ls = dfs(root.left)\n            rbst, rmi, rmx, rs = dfs(root.right)\n            if lbst and rbst and lmx < root.val < rmi:\n                nonlocal ans\n                s = ls + rs + root.val\n                ans = max(ans, s)\n                return 1, min(lmi, root.val), max(rmx, root.val), s\n            return 0, 0, 0, 0\n\n        ans = 0\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,4,3,2,4,2,5,None,None,None,None,None,None,4,6])) == 20\n    assert candidate(root = tree_node([4,3,None,1,2])) == 2\n    assert candidate(root = tree_node([-4,-2,-5])) == 0\n    assert candidate(root = tree_node([2,1,3])) == 6\n    assert candidate(root = tree_node([5,4,8,3,None,6,3])) == 7\n\n\ncheck(Solution().maxSumBST)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        i, j = m - 1, 0\n        ans = 0\n        while i >= 0 and j < n:\n            if grid[i][j] < 0:\n                ans += n - j\n                i -= 1\n            else:\n                j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]) == 8\n    assert candidate(grid = [[3,2],[1,0]]) == 0\n\n\ncheck(Solution().countNegatives)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.\nYou can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.\nReturn the maximum number of events you can attend.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxEvents(self, events: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxEvents(self, events: List[List[int]]) -> int:\n        d = defaultdict(list)\n        i, j = inf, 0\n        for s, e in events:\n            d[s].append(e)\n            i = min(i, s)\n            j = max(j, e)\n        h = []\n        ans = 0\n        for s in range(i, j + 1):\n            while h and h[0] < s:\n                heappop(h)\n            for e in d[s]:\n                heappush(h, e)\n            if h:\n                ans += 1\n                heappop(h)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(events = [[1,2],[2,3],[3,4]]) == 3\n    assert candidate(events= [[1,2],[2,3],[3,4],[1,2]]) == 4\n\n\ncheck(Solution().maxEvents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :\n\nlet x be the sum of all elements currently in your array.\nchoose index i, such that 0 <= i < n and set the value of arr at index i to x.\nYou may repeat this procedure as many times as needed.\n\nReturn true if it is possible to construct the target array from arr, otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPossible(self, target: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isPossible(self, target: List[int]) -> bool:\n        s = sum(target)\n        pq = [-x for x in target]\n        heapify(pq)\n        while -pq[0] > 1:\n            mx = -heappop(pq)\n            t = s - mx\n            if t == 0 or mx - t < 1:\n                return False\n            x = (mx % t) or t\n            heappush(pq, -x)\n            s = s - mx + x\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = [9,3,5]) == True\n    assert candidate(target = [1,1,1,2]) == False\n    assert candidate(target = [8,5]) == True\n\n\ncheck(Solution().isPossible)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's\u00a0such that\u00a0j != i and nums[j] < nums[i].\nReturn the answer in an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        arr = sorted(nums)\n        return [bisect_left(arr, x) for x in nums]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [8,1,2,2,3]) == [4,0,1,1,3]\n    assert candidate(nums = [6,5,4,8]) == [2,1,0,3]\n    assert candidate(nums = [7,7,7,7]) == [0,0,0,0]\n\n\ncheck(Solution().smallerNumbersThanCurrent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\nYou are given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\nReturn a string of all teams sorted by the ranking system.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        n = len(votes[0])\n        cnt = defaultdict(lambda: [0] * n)\n        for vote in votes:\n            for i, c in enumerate(vote):\n                cnt[c][i] += 1\n        return \"\".join(sorted(votes[0], key=lambda x: (cnt[x], -ord(x)), reverse=True))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]) == \"ACB\"\n    assert candidate(votes = [\"WXYZ\",\"XYZW\"]) == \"XWYZ\"\n    assert candidate(votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]) == \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\n    assert candidate(votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]) == \"ABC\"\n    assert candidate(votes = [\"M\",\"M\",\"M\",\"M\"]) == \"M\"\n\n\ncheck(Solution().rankTeams)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:\n\n1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])\n2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])\n3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])\n4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])\n\nNotice that there could be some signs on the cells of the grid that point outside the grid.\nYou will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.\nYou can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.\nReturn the minimum cost to make the grid have at least one valid path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        dirs = [[0, 0], [0, 1], [0, -1], [1, 0], [-1, 0]]\n        q = deque([(0, 0, 0)])\n        vis = set()\n        while q:\n            i, j, d = q.popleft()\n            if (i, j) in vis:\n                continue\n            vis.add((i, j))\n            if i == m - 1 and j == n - 1:\n                return d\n            for k in range(1, 5):\n                x, y = i + dirs[k][0], j + dirs[k][1]\n                if 0 <= x < m and 0 <= y < n:\n                    if grid[i][j] == k:\n                        q.appendleft((x, y, d))\n                    else:\n                        q.append((x, y, d + 1))\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]) == 3\n    assert candidate(grid = [[1,1,3],[3,2,2],[1,1,4]]) == 0\n    assert candidate(grid = [[1,2],[4,3]]) == 1\n    assert candidate(grid = [[2,2,2],[2,2,2]]) == 3\n    assert candidate(grid = [[4]]) == 0\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n```",
        "solutions": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        def check(a: int) -> bool:\n            i = bisect_left(arr2, a - d)\n            return i == len(arr2) or arr2[i] > a + d\n\n        arr2.sort()\n        return sum(check(a) for a in arr1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2) == 2\n    assert candidate(arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3) == 2\n    assert candidate(arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6) == 1\n\n\ncheck(Solution().findTheDistanceValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA cinema\u00a0has n\u00a0rows of seats, numbered from 1 to n\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8]\u00a0means the seat located in row 3 and labelled with 8\u00a0is already reserved.\nReturn the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats. A four-person group\u00a0occupies four\u00a0adjacent seats in one single row. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        d = defaultdict(int)\n        for i, j in reservedSeats:\n            d[i] |= 1 << (10 - j)\n        masks = (0b0111100000, 0b0000011110, 0b0001111000)\n        ans = (n - len(d)) * 2\n        for x in d.values():\n            for mask in masks:\n                if (x & mask) == 0:\n                    x |= mask\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]) == 4\n    assert candidate(n = 2, reservedSeats = [[2,1],[1,8],[2,6]]) == 2\n    assert candidate(n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]) == 4\n\n\ncheck(Solution().maxNumberOfFamilies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\n\nYou will pick any pizza slice.\nYour friend Alice will pick the next slice in the anti-clockwise direction of your pick.\nYour friend Bob will pick the next slice in the clockwise direction of your pick.\nRepeat until there are no more slices of pizzas.\n\nGiven an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        def g(nums: List[int]) -> int:\n            m = len(nums)\n            f = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(1, m + 1):\n                for j in range(1, n + 1):\n                    f[i][j] = max(\n                        f[i - 1][j], (f[i - 2][j - 1] if i >= 2 else 0) + nums[i - 1]\n                    )\n            return f[m][n]\n\n        n = len(slices) // 3\n        a, b = g(slices[:-1]), g(slices[1:])\n        return max(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(slices = [1,2,3,4,5,6]) == 10\n    assert candidate(slices = [8,9,8,6,1,1]) == 16\n\n\ncheck(Solution().maxSizeSlices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.\nA binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.\nReturn the number of times the binary string is prefix-aligned during the flipping process.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numTimesAllBlue(self, flips: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numTimesAllBlue(self, flips: List[int]) -> int:\n        ans = mx = 0\n        for i, x in enumerate(flips, 1):\n            mx = max(mx, x)\n            ans += mx == i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(flips = [3,2,4,1,5]) == 2\n    assert candidate(flips = [4,1,2,3]) == 1\n\n\ncheck(Solution().numTimesAllBlue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfMinutes(self, n: int, headID: int, manager: List[int], informTime: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numOfMinutes(\n        self, n: int, headID: int, manager: List[int], informTime: List[int]\n    ) -> int:\n        def dfs(i: int) -> int:\n            ans = 0\n            for j in g[i]:\n                ans = max(ans, dfs(j) + informTime[i])\n            return ans\n\n        g = defaultdict(list)\n        for i, x in enumerate(manager):\n            g[x].append(i)\n        return dfs(headID)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, headID = 0, manager = [-1], informTime = [0]) == 0\n    assert candidate(n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]) == 1\n\n\ncheck(Solution().numOfMinutes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\nReturn the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n```",
        "solutions": "class Solution:\n    def frogPosition(\n        self, n: int, edges: List[List[int]], t: int, target: int\n    ) -> float:\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        q = deque([(1, 1.0)])\n        vis = [False] * (n + 1)\n        vis[1] = True\n        while q and t >= 0:\n            for _ in range(len(q)):\n                u, p = q.popleft()\n                cnt = len(g[u]) - int(u != 1)\n                if u == target:\n                    return p if cnt * t == 0 else 0\n                for v in g[u]:\n                    if not vis[v]:\n                        vis[v] = True\n                        q.append((v, p / cnt))\n            t -= 1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4) == 0.16666666666666666 \n    assert candidate(n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7) == 0.3333333333333333\n\n\ncheck(Solution().frogPosition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.\nA lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def luckyNumbers(self, matrix: List[List[int]]) -> List[int]:\n        rows = {min(row) for row in matrix}\n        cols = {max(col) for col in zip(*matrix)}\n        return list(rows & cols)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[3,7,8],[9,11,13],[15,16,17]]) == [15]\n    assert candidate(matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]) == [12]\n    assert candidate(matrix = [[7,8],[1,2]]) == [7]\n\n\ncheck(Solution().luckyNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.\nChoose at most k different engineers out of the n engineers to form a team with the maximum performance.\nThe performance of a team is the sum of its engineers' speeds multiplied by the minimum efficiency among its engineers.\nReturn the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        t = sorted(zip(speed, efficiency), key=lambda x: -x[1])\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in t:\n            tot += s\n            ans = max(ans, tot * e)\n            heappush(h, s)\n            if len(h) == k:\n                tot -= heappop(h)\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2) == 60\n    assert candidate(n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3) == 68\n    assert candidate(n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4) == 72\n\n\ncheck(Solution().maxPerformance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n.\nEach number from 1 to n is grouped according to the sum of its digits.\nReturn the number of groups that have the largest size.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        cnt = Counter()\n        ans = mx = 0\n        for i in range(1, n + 1):\n            s = 0\n            while i:\n                s += i % 10\n                i //= 10\n            cnt[s] += 1\n            if mx < cnt[s]:\n                mx = cnt[s]\n                ans = 1\n            elif mx == cnt[s]:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 13) == 4\n    assert candidate(n = 2) == 2\n    assert candidate(n = 15) == 6\n    assert candidate(n = 24) == 5\n\n\ncheck(Solution().countLargestGroup)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.\nReturn true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkOverlap(self, radius: int, xCenter: int, yCenter: int, x1: int, y1: int, x2: int, y2: int) -> bool:\n```",
        "solutions": "class Solution:\n    def checkOverlap(\n        self,\n        radius: int,\n        xCenter: int,\n        yCenter: int,\n        x1: int,\n        y1: int,\n        x2: int,\n        y2: int,\n    ) -> bool:\n        def f(i: int, j: int, k: int) -> int:\n            if i <= k <= j:\n                return 0\n            return i - k if k < i else k - j\n\n        a = f(x1, x2, xCenter)\n        b = f(y1, y2, yCenter)\n        return a * a + b * b <= radius * radius\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1) == True\n    assert candidate(radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1) == False\n    assert candidate(radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1) == True\n\n\ncheck(Solution().checkOverlap)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if len(s) < k:\n            return False\n        cnt = Counter(s)\n        return sum(v & 1 for v in cnt.values()) <= k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"annabelle\", k = 2) == True\n    assert candidate(s = \"leetcode\", k = 3) == False\n    assert candidate(s = \"True\", k = 4) == True\n    assert candidate(s = \"yzyzyzyzyzyzyzy\", k = 2) == True\n    assert candidate(s = \"cr\", k = 7) == False\n\n\ncheck(Solution().canConstruct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.\nLike-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].\nReturn the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort(reverse=True)\n        ans = s = 0\n        for x in satisfaction:\n            s += x\n            if s <= 0:\n                break\n            ans += s\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(satisfaction = [-1,-8,0,5,-9]) == 14\n    assert candidate(satisfaction = [4,3,2]) == 20\n    assert candidate(satisfaction = [-1,-4,-5]) == 0\n\n\ncheck(Solution().maxSatisfaction)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays of integers\u00a0nums and index. Your task is to create target array under the following rules:\n\nInitially target array is empty.\nFrom left to right read nums[i] and index[i], insert at index index[i]\u00a0the value nums[i]\u00a0in\u00a0target array.\nRepeat the previous step until there are no elements to read in nums and index.\n\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n        target = []\n        for x, i in zip(nums, index):\n            target.insert(i, x)\n        return target\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,3,4], index = [0,1,2,2,1]) == [0,4,1,3,2]\n    assert candidate(nums = [1,2,3,4,0], index = [0,1,2,3,0]) == [0,1,2,3,4]\n    assert candidate(nums = [1], index = [0]) == [1]\n\n\ncheck(Solution().createTargetArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:\n\n1 which means a street connecting the left cell and the right cell.\n2 which means a street connecting the upper cell and the lower cell.\n3 which means a street connecting the left cell and the lower cell.\n4 which means a street connecting the right cell and the lower cell.\n5 which means a street connecting the left cell and the upper cell.\n6 which means a street connecting the right cell and the upper cell.\n\n\nYou will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hasValidPath(self, grid: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def hasValidPath(self, grid: List[List[int]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        p = list(range(m * n))\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def left(i, j):\n            if j > 0 and grid[i][j - 1] in (1, 4, 6):\n                p[find(i * n + j)] = find(i * n + j - 1)\n\n        def right(i, j):\n            if j < n - 1 and grid[i][j + 1] in (1, 3, 5):\n                p[find(i * n + j)] = find(i * n + j + 1)\n\n        def up(i, j):\n            if i > 0 and grid[i - 1][j] in (2, 3, 4):\n                p[find(i * n + j)] = find((i - 1) * n + j)\n\n        def down(i, j):\n            if i < m - 1 and grid[i + 1][j] in (2, 5, 6):\n                p[find(i * n + j)] = find((i + 1) * n + j)\n\n        for i in range(m):\n            for j in range(n):\n                e = grid[i][j]\n                if e == 1:\n                    left(i, j)\n                    right(i, j)\n                elif e == 2:\n                    up(i, j)\n                    down(i, j)\n                elif e == 3:\n                    left(i, j)\n                    down(i, j)\n                elif e == 4:\n                    right(i, j)\n                    down(i, j)\n                elif e == 5:\n                    left(i, j)\n                    up(i, j)\n                else:\n                    right(i, j)\n                    up(i, j)\n        return find(0) == find(m * n - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,4,3],[6,5,2]]) == True\n    assert candidate(grid = [[1,2,1],[1,2,1]]) == False\n    assert candidate(grid = [[1,1,2]]) == False\n    assert candidate(grid = [[1,1,1,1,1,1,3]]) == True\n    assert candidate(grid = [[2],[2],[2],[2],[2],[2],[6]]) == True\n\n\ncheck(Solution().hasValidPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).\nGiven a string s, return the longest happy prefix of s. Return an empty string \"\" if no such prefix exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPrefix(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def longestPrefix(self, s: str) -> str:\n        for i in range(1, len(s)):\n            if s[:-i] == s[i:]:\n                return s[i:]\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"level\") == \"l\"\n    assert candidate(s = \"ababab\") == \"abab\"\n\n\ncheck(Solution().longestPrefix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.\nReturn the largest lucky integer in the array. If there is no lucky integer return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLucky(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        cnt = Counter(arr)\n        ans = -1\n        for x, v in cnt.items():\n            if x == v and ans < x:\n                ans = x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,2,3,4]) == 2\n    assert candidate(arr = [1,2,2,3,3,3]) == 3\n    assert candidate(arr = [2,2,2,3,3]) == -1\n    assert candidate(arr = [5]) == -1\n    assert candidate(arr = [7,7,7,7,7,7,7]) == 7\n\n\ncheck(Solution().findLucky)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\nChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\nA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        ans, n = 0, len(rating)\n        for i, b in enumerate(rating):\n            l = sum(a < b for a in rating[:i])\n            r = sum(c > b for c in rating[i + 1 :])\n            ans += l * r\n            ans += (i - l) * (n - i - 1 - r)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rating = [2,5,3,4,1]) == 3\n    assert candidate(rating = [2,1,3]) == 0\n    assert candidate(rating = [1,2,3,4]) == 4\n\n\ncheck(Solution().numTeams)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers\u00a0nums, you start with an initial positive value startValue.\nIn each iteration, you calculate the step by step sum of startValue\u00a0plus\u00a0elements in nums\u00a0(from left to right).\nReturn the minimum positive value of\u00a0startValue such that the step by step sum is never less than 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        s, t = 0, inf\n        for num in nums:\n            s += num\n            t = min(t, s)\n        return max(1, 1 - t)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-3,2,-3,4,2]) == 5\n    assert candidate(nums = [1,2]) == 1\n    assert candidate(nums = [1,-2,-3]) == 5\n\n\ncheck(Solution().minStartValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer\u00a0k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.\nThe Fibonacci numbers are defined as:\n\nF1 = 1\nF2 = 1\nFn = Fn-1 + Fn-2 for n > 2.\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        def dfs(k):\n            if k < 2:\n                return k\n            a = b = 1\n            while b <= k:\n                a, b = b, a + b\n            return 1 + dfs(k - a)\n\n        return dfs(k)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 7) == 2 \n    assert candidate(k = 10) == 2 \n    assert candidate(k = 19) == 3 \n\n\ncheck(Solution().findMinFibonacciNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA happy string is a string that:\n\nconsists only of letters of the set ['a', 'b', 'c'].\ns[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).\n\nFor example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\nGiven two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.\nReturn the kth string of this list or return an empty string if there are less than k happy strings of length n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                dfs(t + c)\n\n        ans = []\n        dfs('')\n        return '' if len(ans) < k else ans[k - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, k = 3) == \"c\"\n    assert candidate(n = 1, k = 4) == \"\"\n    assert candidate(n = 3, k = 9) == \"cab\"\n    assert candidate(n = 2, k = 7) == \"\"\n    assert candidate(n = 10, k = 100) == \"abacbabacb\"\n\n\ncheck(Solution().getHappyString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non\u00a0included elements in such subsequence.\u00a0\nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\u00a0\nNote that the solution with the given constraints is guaranteed to be\u00a0unique. Also return the answer sorted in non-increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        ans = []\n        s, t = sum(nums), 0\n        for x in sorted(nums, reverse=True):\n            t += x\n            ans.append(x)\n            if t > s - t:\n                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,10,9,8]) == [10,9] \n    assert candidate(nums = [4,4,7,6,7]) == [7,7,6] \n\n\ncheck(Solution().minSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:\n\n\nIf the current number is even, you have to divide it by 2.\n\n\nIf the current number is odd, you have to add 1 to it.\n\n\nIt is guaranteed that you can always reach one for all test cases.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSteps(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numSteps(self, s: str) -> int:\n        carry = False\n        ans = 0\n        for c in s[:0:-1]:\n            if carry:\n                if c == '0':\n                    c = '1'\n                    carry = False\n                else:\n                    c = '0'\n            if c == '1':\n                ans += 1\n                carry = True\n            ans += 1\n        if carry:\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1101\") == 6\n    assert candidate(s = \"10\") == 1\n    assert candidate(s = \"1\") == 0\n\n\ncheck(Solution().numSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of string words, return all strings in words that is a substring of another word. You can return the answer in any order.\nA substring is a contiguous sequence of characters within a string\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def stringMatching(self, words: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def stringMatching(self, words: List[str]) -> List[str]:\n        ans = []\n        for i, s in enumerate(words):\n            if any(i != j and s in t for j, t in enumerate(words)):\n                ans.append(s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"mass\",\"as\",\"hero\",\"superhero\"]) == [\"as\",\"hero\"]\n    assert candidate(words = [\"leetcode\",\"et\",\"code\"]) == [\"et\",\"code\"]\n    assert candidate(words = [\"blue\",\"green\",\"bu\"]) == []\n\n\ncheck(Solution().stringMatching)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:\n\nIn the beginning, you have the permutation P=[1,2,3,...,m].\nFor the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i].\n\nReturn an array containing the result for the given queries.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def processQueries(self, queries: List[int], m: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def processQueries(self, queries: List[int], m: int) -> List[int]:\n        p = list(range(1, m + 1))\n        ans = []\n        for v in queries:\n            j = p.index(v)\n            ans.append(j)\n            p.pop(j)\n            p.insert(0, v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queries = [3,1,2,1], m = 5) == [2,1,2,1] \n    assert candidate(queries = [4,1,2,2], m = 4) == [3,1,2,0]\n    assert candidate(queries = [7,5,5,8,3], m = 8) == [6,5,0,7,5]\n\n\ncheck(Solution().processQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nHTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\nThe special characters and their entities for HTML are:\n\nQuotation Mark: the entity is &quot; and symbol character is \".\nSingle Quote Mark: the entity is &apos; and symbol character is '.\nAmpersand: the entity is &amp; and symbol character is &.\nGreater Than Sign: the entity is &gt; and symbol character is >.\nLess Than Sign: the entity is &lt; and symbol character is <.\nSlash: the entity is &frasl; and symbol character is /.\n\nGiven the input text string to the HTML parser, you have to implement the entity parser.\nReturn the text after replacing the entities by the special characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def entityParser(self, text: str) -> str:\n```",
        "solutions": "class Solution:\n    def entityParser(self, text: str) -> str:\n        d = {\n            '&quot;': '\"',\n            '&apos;': \"'\",\n            '&amp;': \"&\",\n            \"&gt;\": '>',\n            \"&lt;\": '<',\n            \"&frasl;\": '/',\n        }\n        i, n = 0, len(text)\n        ans = []\n        while i < n:\n            for l in range(1, 8):\n                j = i + l\n                if text[i:j] in d:\n                    ans.append(d[text[i:j]])\n                    i = j\n                    break\n            else:\n                ans.append(text[i])\n                i += 1\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"&amp; is an HTML entity but &ambassador; is not.\") == \"& is an HTML entity but &ambassador; is not.\"\n    assert candidate(text = \"and I quote: &quot;...&quot;\") == \"and I quote: \\\"...\\\"\"\n    assert candidate(text = \"Stay home! Practice on Leetcode :)\") == \"Stay home! Practice on Leetcode :)\"\n    assert candidate(text = \"x &gt; y &amp;&amp; x &lt; y is always False\") == \"x > y && x < y is always False\"\n    assert candidate(text = \"leetcode.com&frasl;problemset&frasl;all\") == \"leetcode.com/problemset/all\"\n\n\ncheck(Solution().entityParser)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfWays(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        f0 = f1 = 6\n        for _ in range(n - 1):\n            g0 = (3 * f0 + 2 * f1) % mod\n            g1 = (2 * f0 + 2 * f1) % mod\n            f0, f1 = g0, g1\n        return (f0 + f1) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 12\n    assert candidate(n = 2) == 54\n    assert candidate(n = 3) == 246\n    assert candidate(n = 7) == 106494\n    assert candidate(n = 5000) == 30228214\n\n\ncheck(Solution().numOfWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.\nReturn a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\nNote that multiple kids can have the greatest number of candies.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        mx = max(candies)\n        return [candy + extraCandies >= mx for candy in candies]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candies = [2,3,5,1,3], extraCandies = 3) == [True,True,True,False,True] \n    assert candidate(candies = [4,2,1,1,2], extraCandies = 1) == [True,False,False,False,False] \n    assert candidate(candies = [12,1,12], extraCandies = 10) == [True,False,True]\n\n\ncheck(Solution().kidsWithCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer num. You will apply the following steps exactly two times:\n\nPick a digit x (0 <= x <= 9).\nPick another digit y (0 <= y <= 9). The digit y can be equal to x.\nReplace all the occurrences of x in the decimal representation of num by y.\nThe new integer cannot have any leading zeros, also the new integer cannot be 0.\n\nLet a and b be the results of applying the operations to num the first and second times, respectively.\nReturn the max difference between a and b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDiff(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        a, b = str(num), str(num)\n        for c in a:\n            if c != \"9\":\n                a = a.replace(c, \"9\")\n                break\n        if b[0] != \"1\":\n            b = b.replace(b[0], \"1\")\n        else:\n            for c in b[1:]:\n                if c not in \"01\":\n                    b = b.replace(c, \"0\")\n                    break\n        return int(a) - int(b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 555) == 888\n    assert candidate(num = 9) == 8\n    assert candidate(num = 123456) == 820000\n    assert candidate(num = 10000) == 80000\n    assert candidate(num = 9288) == 8700\n\n\ncheck(Solution().maxDiff)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings: s1 and s2 with the same\u00a0size, check if some\u00a0permutation of string s1 can break\u00a0some\u00a0permutation of string s2 or vice-versa. In other words s2 can break s1\u00a0or vice-versa.\nA string x\u00a0can break\u00a0string y\u00a0(both of size n) if x[i] >= y[i]\u00a0(in alphabetical order)\u00a0for all i\u00a0between 0 and n-1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        cs1 = sorted(s1)\n        cs2 = sorted(s2)\n        return all(a >= b for a, b in zip(cs1, cs2)) or all(\n            a <= b for a, b in zip(cs1, cs2)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"abc\", s2 = \"xya\") == True\n    assert candidate(s1 = \"abe\", s2 = \"acd\") == False \n    assert candidate(s1 = \"leetcodee\", s2 = \"interview\") == True\n\n\ncheck(Solution().checkIfCanBreak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n people and 40 types of hats labeled from 1 to 40.\nGiven a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberWays(self, hats: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numberWays(self, hats: List[List[int]]) -> int:\n        g = defaultdict(list)\n        for i, h in enumerate(hats):\n            for v in h:\n                g[v].append(i)\n        mod = 10**9 + 7\n        n = len(hats)\n        m = max(max(h) for h in hats)\n        f = [[0] * (1 << n) for _ in range(m + 1)]\n        f[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1 << n):\n                f[i][j] = f[i - 1][j]\n                for k in g[i]:\n                    if j >> k & 1:\n                        f[i][j] = (f[i][j] + f[i - 1][j ^ (1 << k)]) % mod\n        return f[m][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(hats = [[3,4],[4,5],[5]]) == 1\n    assert candidate(hats = [[3,5,1],[3,5]]) == 4\n    assert candidate(hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == 24\n    assert candidate(hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]) == 111\n\n\ncheck(Solution().numberWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven\u00a0the array orders, which represents the orders that customers have done in a restaurant. More specifically\u00a0orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi\u00a0is the table customer sit at, and foodItemi\u00a0is the item customer orders.\nReturn the restaurant's \u201cdisplay table\u201d. The \u201cdisplay table\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = set()\n        foods = set()\n        mp = Counter()\n        for _, table, food in orders:\n            tables.add(int(table))\n            foods.add(food)\n            mp[f'{table}.{food}'] += 1\n        foods = sorted(list(foods))\n        tables = sorted(list(tables))\n        res = [['Table'] + foods]\n        for table in tables:\n            t = [str(table)]\n            for food in foods:\n                t.append(str(mp[f'{table}.{food}']))\n            res.append(t)\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]) == [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \n    assert candidate(orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]) == [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \n    assert candidate(orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]) == [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]\n\n\ncheck(Solution().displayTable)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \"croak\" are mixed.\nReturn the minimum number of different frogs to finish all the croaks in the given string.\nA valid \"croak\" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid \"croak\" return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n```",
        "solutions": "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        if len(croakOfFrogs) % 5 != 0:\n            return -1\n        idx = {c: i for i, c in enumerate('croak')}\n        cnt = [0] * 5\n        ans = x = 0\n        for i in map(idx.get, croakOfFrogs):\n            cnt[i] += 1\n            if i == 0:\n                x += 1\n                ans = max(ans, x)\n            else:\n                if cnt[i - 1] == 0:\n                    return -1\n                cnt[i - 1] -= 1\n                if i == 4:\n                    x -= 1\n        return -1 if x else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(croakOfFrogs = \"croakcroak\") == 1 \n    assert candidate(croakOfFrogs = \"crcoakroak\") == 2 \n    assert candidate(croakOfFrogs = \"croakcrook\") == -1\n\n\ncheck(Solution().minNumberOfFrogs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:\n\nYou should build the array arr which has the following properties:\n\narr has exactly n integers.\n1 <= arr[i] <= m where (0 <= i < n).\nAfter applying the mentioned algorithm to arr, the value search_cost is equal to k.\n\nReturn the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfArrays(self, n: int, m: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numOfArrays(self, n: int, m: int, k: int) -> int:\n        if k == 0:\n            return 0\n        dp = [[[0] * (m + 1) for _ in range(k + 1)] for _ in range(n + 1)]\n        mod = 10**9 + 7\n        for i in range(1, m + 1):\n            dp[1][1][i] = 1\n        for i in range(2, n + 1):\n            for c in range(1, min(k + 1, i + 1)):\n                for j in range(1, m + 1):\n                    dp[i][c][j] = dp[i - 1][c][j] * j\n                    for j0 in range(1, j):\n                        dp[i][c][j] += dp[i - 1][c - 1][j0]\n                        dp[i][c][j] %= mod\n        ans = 0\n        for i in range(1, m + 1):\n            ans += dp[n][k][i]\n            ans %= mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, m = 3, k = 1) == 6\n    assert candidate(n = 5, m = 2, k = 3) == 0\n    assert candidate(n = 9, m = 1, k = 1) == 1\n\n\ncheck(Solution().numOfArrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a\u00a0string s\u00a0of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, s: str) -> int:\n        return max(s[:i].count('0') + s[i:].count('1') for i in range(1, len(s)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"011101\") == 5 \n    assert candidate(s = \"00111\") == 5\n    assert candidate(s = \"1111\") == 3\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        ans = s = sum(cardPoints[-k:])\n        for i, x in enumerate(cardPoints[:k]):\n            s += x - cardPoints[-k + i]\n            ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cardPoints = [1,2,3,4,5,6,1], k = 3) == 12\n    assert candidate(cardPoints = [2,2,2], k = 2) == 4\n    assert candidate(cardPoints = [9,7,7,9,7,7,9], k = 7) == 55\n    assert candidate(cardPoints = [1,1000,1], k = 1) == 1\n    assert candidate(cardPoints = [1,79,80,1,1,1,200,1], k = 3) == 202\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        arr = []\n        for i, row in enumerate(nums):\n            for j, v in enumerate(row):\n                arr.append((i + j, j, v))\n        arr.sort()\n        return [v[2] for v in arr]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[1,2,3],[4,5,6],[7,8,9]]) == [1,4,2,7,5,3,8,6,9]\n    assert candidate(nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]) == [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n    assert candidate(nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]) == [1,4,2,5,3,8,6,9,7,10,11]\n    assert candidate(nums = [[1,2,3,4,5,6]]) == [1,2,3,4,5,6]\n\n\ncheck(Solution().findDiagonalOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe power of the string is the maximum length of a non-empty substring that contains only one unique character.\nGiven a string s, return the power of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPower(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxPower(self, s: str) -> int:\n        ans = t = 1\n        for a, b in pairwise(s):\n            if a == b:\n                t += 1\n                ans = max(ans, t)\n            else:\n                t = 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcode\") == 2\n    assert candidate(s = \"abbcccddddeeeeedcba\") == 5\n\n\ncheck(Solution().maxPower)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        return [\n            f'{i}/{j}'\n            for i in range(1, n)\n            for j in range(i + 1, n + 1)\n            if gcd(i, j) == 1\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == [\"1/2\"]\n    assert candidate(n = 3) == [\"1/2\",\"1/3\",\"2/3\"]\n    assert candidate(n = 4) == [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\n    assert candidate(n = 1) == []\n\n\ncheck(Solution().simplifiedFractions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree root, a node X in the tree is named\u00a0good if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def goodNodes(self, root: TreeNode) -> int:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def goodNodes(self, root: TreeNode) -> int:\n        def dfs(root: TreeNode, mx: int):\n            if root is None:\n                return\n            nonlocal ans\n            if mx <= root.val:\n                ans += 1\n                mx = root.val\n            dfs(root.left, mx)\n            dfs(root.right, mx)\n\n        ans = 0\n        dfs(root, -1000000)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([3,1,4,3,None,1,5])) == 4\n    assert candidate(root = tree_node([3,3,None,4,2])) == 3\n    assert candidate(root = tree_node([1])) == 1\n\n\ncheck(Solution().goodNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:\n\nThe cost of painting a digit (i + 1) is given by cost[i] (0-indexed).\nThe total cost used must be equal to target.\nThe integer does not have 0 digits.\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n```",
        "solutions": "class Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        f = [[-inf] * (target + 1) for _ in range(10)]\n        f[0][0] = 0\n        g = [[0] * (target + 1) for _ in range(10)]\n        for i, c in enumerate(cost, 1):\n            for j in range(target + 1):\n                if j < c or f[i][j - c] + 1 < f[i - 1][j]:\n                    f[i][j] = f[i - 1][j]\n                    g[i][j] = j\n                else:\n                    f[i][j] = f[i][j - c] + 1\n                    g[i][j] = j - c\n        if f[9][target] < 0:\n            return \"0\"\n        ans = []\n        i, j = 9, target\n        while i:\n            if j == g[i][j]:\n                i -= 1\n            else:\n                ans.append(str(i))\n                j = g[i][j]\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cost = [4,3,2,5,6,7,2,5,5], target = 9) == \"7772\"\n    assert candidate(cost = [7,6,5,5,5,6,8,7,8], target = 12) == \"85\"\n    assert candidate(cost = [2,4,6,2,4,6,4,4,4], target = 5) == \"0\"\n    assert candidate(cost = [6,10,15,40,40,40,40,40,40], target = 47) == \"32211\"\n\n\ncheck(Solution().largestNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def destCity(self, paths: List[List[str]]) -> str:\n```",
        "solutions": "class Solution:\n    def destCity(self, paths: List[List[str]]) -> str:\n        s = {a for a, _ in paths}\n        return next(b for _, b in paths if b not in s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]) == \"Sao Paulo\" \n    assert candidate(paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]) == \"A\"\n    assert candidate(paths = [[\"A\",\"Z\"]]) == \"Z\"\n\n\ncheck(Solution().destCity)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        j = -inf\n        for i, x in enumerate(nums):\n            if x:\n                if i - j - 1 < k:\n                    return False\n                j = i\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,0,0,0,1,0,0,1], k = 2) == True\n    assert candidate(nums = [1,0,0,1,0,1], k = 2) == False\n    assert candidate(nums = [1,1,1,1,1], k = 0) == True\n    assert candidate(nums = [0,1,0,1], k = 1) == True\n\n\ncheck(Solution().kLengthApart)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubarray(self, nums: List[int], limit: int) -> int:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def longestSubarray(self, nums: List[int], limit: int) -> int:\n        sl = SortedList()\n        ans = j = 0\n        for i, x in enumerate(nums):\n            sl.add(x)\n            while sl[-1] - sl[0] > limit:\n                sl.remove(nums[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [8,2,4,7], limit = 4) == 2 \n    assert candidate(nums = [10,1,2,4,7,2], limit = 5) == 4 \n    assert candidate(nums = [4,2,2,2,4,4,2,2], limit = 0) == 3\n\n\ncheck(Solution().longestSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.\nYou are allowed to choose exactly one element from each row to form an array.\nReturn the kth smallest array sum among all possible arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthSmallest(self, mat: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kthSmallest(self, mat: List[List[int]], k: int) -> int:\n        pre = [0]\n        for cur in mat:\n            pre = sorted(a + b for a in pre for b in cur[:k])[:k]\n        return pre[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,3,11],[2,4,6]], k = 5) == 7\n    assert candidate(mat = [[1,3,11],[2,4,6]], k = 9) == 17\n    assert candidate(mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7) == 9\n    assert candidate(mat = [[1,1,10],[2,2,9]], k = 7) == 12\n\n\ncheck(Solution().kthSmallest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array target and an integer n.\nYou have an empty stack with the two following operations:\n\n\"Push\": pushes an integer to the top of the stack.\n\"Pop\": removes the integer on the top of the stack.\n\nYou also have a stream of the integers in the range [1, n].\nUse the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. You should follow the following rules:\n\nIf the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.\nIf the stack is not empty, pop the integer at the top of the stack.\nIf, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack.\n\nReturn the stack operations needed to build target following the mentioned rules. If there are multiple valid answers, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def buildArray(self, target: List[int], n: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def buildArray(self, target: List[int], n: int) -> List[str]:\n        cur, ans = 0, []\n        for v in target:\n            cur += 1\n            while cur < v:\n                ans.extend(['Push', 'Pop'])\n                cur += 1\n            ans.append('Push')\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = [1,3], n = 3) == [\"Push\",\"Push\",\"Pop\",\"Push\"]\n    assert candidate(target = [1,2,3], n = 3) == [\"Push\",\"Push\",\"Push\"]\n    assert candidate(target = [1,2], n = 4) == [\"Push\",\"Push\"]\n\n\ncheck(Solution().buildArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr.\nWe want to select three indices i, j and k where (0 <= i < j <= k < arr.length).\nLet's define a and b as follows:\n\na = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]\nb = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]\n\nNote that ^ denotes the bitwise-xor operation.\nReturn the number of triplets (i, j and k) Where a == b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        pre = [0] * (n + 1)\n        for i in range(n):\n            pre[i + 1] = pre[i] ^ arr[i]\n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    a, b = pre[j] ^ pre[i], pre[k + 1] ^ pre[j]\n                    if a == b:\n                        ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,3,1,6,7]) == 4\n    assert candidate(arr = [1,1,1,1,1]) == 10\n    assert candidate(arr = [2,3]) == 0\n    assert candidate(arr = [1,3,5,7,9]) == 3\n    assert candidate(arr = [7,11,12,9,5,2,7,17,22]) == 8\n\n\ncheck(Solution().countTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n```",
        "solutions": "class Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n        def dfs(u, cost):\n            if vis[u]:\n                return 0\n            vis[u] = True\n            nxt_cost = 0\n            for v in g[u]:\n                nxt_cost += dfs(v, 2)\n            if not hasApple[u] and nxt_cost == 0:\n                return 0\n            return cost + nxt_cost\n\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        vis = [False] * n\n        return dfs(0, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [False,False,True,False,True,True,False]) == 8 \n    assert candidate(n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [False,False,True,False,False,True,False]) == 6\n    assert candidate(n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [False,False,False,False,False,False,False]) == 0\n\n\ncheck(Solution().minTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays of equal length target and arr. In one step, you can select any non-empty subarray of arr and reverse it. You are allowed to make any number of steps.\nReturn true if you can make arr equal to target\u00a0or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:\n        return sorted(target) == sorted(arr)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = [1,2,3,4], arr = [2,4,1,3]) == True\n    assert candidate(target = [7], arr = [7]) == True\n    assert candidate(target = [3,7,9], arr = [3,7,11]) == False\n\n\ncheck(Solution().canBeEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        ss = {s[i : i + k] for i in range(len(s) - k + 1)}\n        return len(ss) == 1 << k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"00110110\", k = 2) == True\n    assert candidate(s = \"0110\", k = 1) == True\n    assert candidate(s = \"0110\", k = 2) == False\n\n\ncheck(Solution().hasAllCodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\nYou have two robots that can collect cherries for you:\n\nRobot #1 is located at the top-left corner (0, 0), and\nRobot #2 is located at the top-right corner (0, cols - 1).\n\nReturn the maximum number of cherries collection using both robots by following the rules below:\n\nFrom a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\nWhen any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\nWhen both robots stay in the same cell, only one takes the cherries.\nBoth robots cannot move outside of the grid at any moment.\nBoth robots should reach the bottom row in grid.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[[-1] * n for _ in range(n)] for _ in range(m)]\n        f[0][0][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(1, m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                    for y1 in range(j1 - 1, j1 + 2):\n                        for y2 in range(j2 - 1, j2 + 2):\n                            if 0 <= y1 < n and 0 <= y2 < n and f[i - 1][y1][y2] != -1:\n                                f[i][j1][j2] = max(f[i][j1][j2], f[i - 1][y1][y2] + x)\n        return max(f[-1][j1][j2] for j1, j2 in product(range(n), range(n)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]) == 24\n    assert candidate(grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]) == 28\n    assert candidate(grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]) == 22\n    assert candidate(grid = [[1,1],[1,1]]) == 4\n\n\ncheck(Solution().cherryPickup)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n```",
        "solutions": "class Solution:\n    def busyStudent(\n        self, startTime: List[int], endTime: List[int], queryTime: int\n    ) -> int:\n        return sum(a <= queryTime <= b for a, b in zip(startTime, endTime))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(startTime = [1,2,3], endTime = [3,2,7], queryTime = 4) == 1\n    assert candidate(startTime = [4], endTime = [4], queryTime = 4) == 1\n    assert candidate(startTime = [4], endTime = [4], queryTime = 5) == 0\n    assert candidate(startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7) == 0\n    assert candidate(startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5) == 5\n\n\ncheck(Solution().busyStudent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sentence\u00a0text (A\u00a0sentence\u00a0is a string of space-separated words) in the following format:\n\nFirst letter is in upper case.\nEach word in text are separated by a single space.\n\nYour task is to rearrange the words in text such that\u00a0all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\nReturn the new text\u00a0following the format shown above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrangeWords(self, text: str) -> str:\n```",
        "solutions": "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        words = text.split()\n        words[0] = words[0].lower()\n        words.sort(key=len)\n        words[0] = words[0].title()\n        return \" \".join(words)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"Leetcode is cool\") == \"Is cool leetcode\"\n    assert candidate(text = \"Keep calm and code on\") == \"On and keep calm code\"\n    assert candidate(text = \"To be or not to be\") == \"To be or to be not\"\n\n\ncheck(Solution().arrangeWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).\nReturn the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        d = {}\n        idx = 0\n        t = []\n        for v in favoriteCompanies:\n            for c in v:\n                if c not in d:\n                    d[c] = idx\n                    idx += 1\n            t.append({d[c] for c in v})\n        ans = []\n        for i, nums1 in enumerate(t):\n            ok = True\n            for j, nums2 in enumerate(t):\n                if i == j:\n                    continue\n                if not (nums1 - nums2):\n                    ok = False\n                    break\n            if ok:\n                ans.append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]) == [0,1,4] \n    assert candidate(favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]) == [0,1] \n    assert candidate(favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]) == [0,1,2,3]\n\n\ncheck(Solution().peopleIndexes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\nA prefix of a string s is any leading contiguous substring of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n```",
        "solutions": "class Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        for i, s in enumerate(sentence.split(), 1):\n            if s.startswith(searchWord):\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"i love eating burger\", searchWord = \"burg\") == 4\n    assert candidate(sentence = \"this problem is an easy problem\", searchWord = \"pro\") == 2\n    assert candidate(sentence = \"i am tired\", searchWord = \"you\") == -1\n\n\ncheck(Solution().isPrefixOfWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = set(\"aeiou\")\n        ans = cnt = sum(c in vowels for c in s[:k])\n        for i in range(k, len(s)):\n            cnt += int(s[i] in vowels) - int(s[i - k] in vowels)\n            ans = max(ans, cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abciiidef\", k = 3) == 3\n    assert candidate(s = \"aeiou\", k = 2) == 2\n    assert candidate(s = \"leetcode\", k = 3) == 2\n    assert candidate(s = \"rhythms\", k = 4) == 0\n    assert candidate(s = \"tryhard\", k = 4) == 1\n\n\ncheck(Solution().maxVowels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mask: int):\n            if root is None:\n                return 0\n            mask ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int((mask & (mask - 1)) == 0)\n            return dfs(root.left, mask) + dfs(root.right, mask)\n\n        return dfs(root, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([2,3,1,3,1,None,1])) == 2 \n    assert candidate(root = tree_node([2,1,1,1,3,None,None,None,None,None,1])) == 1 \n    assert candidate(root = tree_node([9])) == 1\n\n\ncheck(Solution().pseudoPalindromicPaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays nums1\u00a0and nums2.\nReturn the maximum dot product\u00a0between\u00a0non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0[2,3,5]\u00a0is a subsequence of\u00a0[1,2,3,4,5]\u00a0while [1,5,3]\u00a0is not).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,1,-2,5], nums2 = [3,0,-6]) == 18\n    assert candidate(nums1 = [3,-2], nums2 = [2,-6,7]) == 21\n    assert candidate(nums1 = [-1,-1], nums2 = [1,1]) == -1\n\n\ncheck(Solution().maxDotProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array prices where prices[i] is the price of the ith item in a shop.\nThere is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.\nReturn an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def finalPrices(self, prices: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def finalPrices(self, prices: List[int]) -> List[int]:\n        ans = []\n        for i, v in enumerate(prices):\n            ans.append(v)\n            for j in range(i + 1, len(prices)):\n                if prices[j] <= v:\n                    ans[-1] -= prices[j]\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prices = [8,4,6,2,3]) == [4,2,4,2,3]\n    assert candidate(prices = [1,2,3,4,5]) == [1,2,3,4,5]\n    assert candidate(prices = [10,1,1,6]) == [9,0,1,6]\n\n\ncheck(Solution().finalPrices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDistance(self, houses: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minDistance(self, houses: List[int], k: int) -> int:\n        houses.sort()\n        n = len(houses)\n        g = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = g[i + 1][j - 1] + houses[j] - houses[i]\n        f = [[inf] * (k + 1) for _ in range(n)]\n        for i in range(n):\n            f[i][1] = g[0][i]\n            for j in range(2, min(k + 1, i + 2)):\n                for p in range(i):\n                    f[i][j] = min(f[i][j], f[p][j - 1] + g[p + 1][i])\n        return f[-1][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(houses = [1,4,8,10,20], k = 3) == 5\n    assert candidate(houses = [2,3,5,12,18], k = 2) == 9\n    assert candidate(houses = [7,4,6,1], k = 1) == 8\n    assert candidate(houses = [3,6,14,10], k = 4) == 0\n\n\ncheck(Solution().minDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        d = {0: 0}\n        s, n = 0, len(arr)\n        f = [inf] * (n + 1)\n        ans = inf\n        for i, v in enumerate(arr, 1):\n            s += v\n            f[i] = f[i - 1]\n            if s - target in d:\n                j = d[s - target]\n                f[i] = min(f[i], i - j)\n                ans = min(ans, f[j] + i - j)\n            d[s] = i\n        return -1 if ans > n else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,2,2,4,3], target = 3) == 2\n    assert candidate(arr = [7,3,4,7], target = 7) == 2\n    assert candidate(arr = [4,3,2,6,2,3,4], target = 6) == -1\n    assert candidate(arr = [5,5,4,4,5], target = 3) == -1\n    assert candidate(arr = [3,1,1,1,5,1,2,1], target = 3) == 3\n\n\ncheck(Solution().minSumOfLengths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans = 0\n        for i, a in enumerate(nums):\n            for b in nums[i + 1 :]:\n                ans = max(ans, (a - 1) * (b - 1))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,5,2]) == 12 \n    assert candidate(nums = [1,5,4,5]) == 16\n    assert candidate(nums = [3,7]) == 12\n\n\ncheck(Solution().maxProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:\n\nhorizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and\nverticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.\n\nReturn the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxArea(\n        self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]\n    ) -> int:\n        horizontalCuts.extend([0, h])\n        verticalCuts.extend([0, w])\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        x = max(b - a for a, b in pairwise(horizontalCuts))\n        y = max(b - a for a, b in pairwise(verticalCuts))\n        return (x * y) % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]) == 4 \n    assert candidate(h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]) == 6\n    assert candidate(h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]) == 9\n\n\ncheck(Solution().maxArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\nRoads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.\nThis year, there will be a big event in the capital (city 0), and many people want to travel to this city.\nYour task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.\nIt's guaranteed that each city can reach city 0 after reorder.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minReorder(self, n: int, connections: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minReorder(self, n: int, connections: List[List[int]]) -> int:\n        def dfs(a: int, fa: int) -> int:\n            return sum(c + dfs(b, a) for b, c in g[a] if b != fa)\n\n        g = [[] for _ in range(n)]\n        for a, b in connections:\n            g[a].append((b, 1))\n            g[b].append((a, 0))\n        return dfs(0, -1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]) == 3\n    assert candidate(n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]) == 2\n    assert candidate(n = 3, connections = [[1,0],[2,0]]) == 0\n\n\ncheck(Solution().minReorder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\nReturn the array in the form [x1,y1,x2,y2,...,xn,yn].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        ans = []\n        for i in range(n):\n            ans.append(nums[i])\n            ans.append(nums[i + n])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,5,1,3,4,7], n = 3) == [2,3,5,4,1,7] \n    assert candidate(nums = [1,2,3,4,4,3,2,1], n = 4) == [1,4,2,3,3,2,4,1]\n    assert candidate(nums = [1,1,2,2], n = 2) == [1,2,1,2]\n\n\ncheck(Solution().shuffle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr and an integer k.\nA value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.\nIf |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].\nReturn a list of the strongest k values in the array. return the answer in any arbitrary order.\nMedian is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).\n\nFor arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6.\nFor arr = [-7, 22, 17,\u20093], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) >> 1]\n        arr.sort(key=lambda x: (-abs(x - m), -x))\n        return arr[:k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,4,5], k = 2) == [5,1]\n    assert candidate(arr = [1,1,3,5,5], k = 2) == [5,5]\n    assert candidate(arr = [6,7,11,7,6,8], k = 5) == [11,8,6,6,7]\n    assert candidate(arr = [6,-3,7,2,11], k = 3) == [-3,11,2]\n    assert candidate(arr = [-7,22,17,3], k = 2) == [22,17]\n\n\ncheck(Solution().getStrongest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\n\nFor example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].\n\nGiven an array houses, an m x n matrix cost and an integer target where:\n\nhouses[i]: is the color of the house i, and 0 if the house is not painted yet.\ncost[i][j]: is the cost of paint the house i with the color j + 1.\n\nReturn the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, houses: List[int], cost: List[List[int]], m: int, n: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(\n        self, houses: List[int], cost: List[List[int]], m: int, n: int, target: int\n    ) -> int:\n        f = [[[inf] * (target + 1) for _ in range(n + 1)] for _ in range(m)]\n        if houses[0] == 0:\n            for j, c in enumerate(cost[0], 1):\n                f[0][j][1] = c\n        else:\n            f[0][houses[0]][1] = 0\n        for i in range(1, m):\n            if houses[i] == 0:\n                for j in range(1, n + 1):\n                    for k in range(1, min(target + 1, i + 2)):\n                        for j0 in range(1, n + 1):\n                            if j == j0:\n                                f[i][j][k] = min(\n                                    f[i][j][k], f[i - 1][j][k] + cost[i][j - 1]\n                                )\n                            else:\n                                f[i][j][k] = min(\n                                    f[i][j][k], f[i - 1][j0][k - 1] + cost[i][j - 1]\n                                )\n            else:\n                j = houses[i]\n                for k in range(1, min(target + 1, i + 2)):\n                    for j0 in range(1, n + 1):\n                        if j == j0:\n                            f[i][j][k] = min(f[i][j][k], f[i - 1][j][k])\n                        else:\n                            f[i][j][k] = min(f[i][j][k], f[i - 1][j0][k - 1])\n\n        ans = min(f[-1][j][target] for j in range(1, n + 1))\n        return -1 if ans >= inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3) == 9\n    assert candidate(houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3) == 11\n    assert candidate(houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5) == 5\n    assert candidate(houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3) == -1\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of unique integers salary where salary[i] is the salary of the ith employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def average(self, salary: List[int]) -> float:\n```",
        "solutions": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        s = sum(salary) - min(salary) - max(salary)\n        return s / (len(salary) - 2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(salary = [4000,3000,1000,2000]) == 2500.00000\n    assert candidate(salary = [1000,2000,3000]) == 2000.00000\n    assert candidate(salary = [6000,5000,4000,3000,2000,1000]) == 3500.00000\n    assert candidate(salary = [8000,9000,2000,3000,6000,1000]) == 4750.00000\n\n\ncheck(Solution().average)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                k -= 1\n                if k == 0:\n                    return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 12, k = 3) == 3\n    assert candidate(n = 7, k = 2) == 7\n    assert candidate(n = 4, k = 4) == -1\n\n\ncheck(Solution().kthFactor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n        left = [0] * (n + 1)\n        right = [0] * (n + 1)\n        for i, x in enumerate(nums, 1):\n            if x:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 1, -1, -1):\n            if nums[i]:\n                right[i] = right[i + 1] + 1\n        return max(left[i] + right[i + 1] for i in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,0,1]) == 3\n    assert candidate(nums = [0,1,1,1,0,1,1,0,1]) == 5\n    assert candidate(nums = [1,1,1]) == 2\n\n\ncheck(Solution().longestSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums. We define a running sum of an array as\u00a0runningSum[i] = sum(nums[0]\u2026nums[i]).\nReturn the running sum of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        return list(accumulate(nums))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == [1,3,6,10]\n    assert candidate(nums = [1,1,1,1,1]) == [1,2,3,4,5]\n    assert candidate(nums = [3,1,2,10,1]) == [3,4,6,16,17]\n\n\ncheck(Solution().runningSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers\u00a0arr\u00a0and an integer k.\u00a0Find the least number of unique integers\u00a0after removing exactly k elements.\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        cnt = Counter(arr)\n        for i, v in enumerate(sorted(cnt.values())):\n            k -= v\n            if k < 0:\n                return len(cnt) - i\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [5,5,4], k = 1) == 1\n    assert candidate(arr = [4,3,1,1,3,3,2], k = 3) == 2\n\n\ncheck(Solution().findLeastNumOfUniqueInts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array bloomDay, an integer m and an integer k.\nYou want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n        if m * k > len(bloomDay):\n            return -1\n\n        def check(day: int) -> bool:\n            cnt = cur = 0\n            for bd in bloomDay:\n                cur = cur + 1 if bd <= day else 0\n                if cur == k:\n                    cnt += 1\n                    cur = 0\n            return cnt >= m\n\n        left, right = min(bloomDay), max(bloomDay)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bloomDay = [1,10,3,10,2], m = 3, k = 1) == 3\n    assert candidate(bloomDay = [1,10,3,10,2], m = 3, k = 2) == -1\n    assert candidate(bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3) == 12\n    assert candidate(bloomDay = [1000000000,1000000000], m = 1, k = 1) == 1000000000\n    assert candidate(bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2) == 9\n\n\ncheck(Solution().minDays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n```",
        "solutions": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        return reduce(xor, ((start + 2 * i) for i in range(n)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, start = 0) == 8\n    assert candidate(n = 4, start = 3) == 8\n    assert candidate(n = 1, start = 7) == 7\n    assert candidate(n = 10, start = 5) == 2\n\n\ncheck(Solution().xorOperation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].\nSince two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\nReturn an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getFolderNames(self, names: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def getFolderNames(self, names: List[str]) -> List[str]:\n        d = defaultdict(int)\n        for i, name in enumerate(names):\n            if name in d:\n                k = d[name]\n                while f'{name}({k})' in d:\n                    k += 1\n                d[name] = k + 1\n                names[i] = f'{name}({k})'\n            d[names[i]] = 1\n        return names\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]) == [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\n    assert candidate(names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]) == [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\n    assert candidate(names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]) == [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\n    assert candidate(names = [\"wano\",\"wano\",\"wano\",\"wano\"]) == [\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]\n    assert candidate(names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]) == [\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]\n\n\ncheck(Solution().getFolderNames)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYour country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.\nGiven an integer array rains where:\n\nrains[i] > 0 means there will be rains over the rains[i] lake.\nrains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.\n\nReturn an array ans where:\n\nans.length == rains.length\nans[i] == -1 if rains[i] > 0.\nans[i] is the lake you choose to dry in the ith day if rains[i] == 0.\n\nIf there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n        n = len(rains)\n        ans = [-1] * n\n        sunny = SortedList()\n        rainy = {}\n        for i, v in enumerate(rains):\n            if v:\n                if v in rainy:\n                    idx = sunny.bisect_right(rainy[v])\n                    if idx == len(sunny):\n                        return []\n                    ans[sunny[idx]] = v\n                    sunny.discard(sunny[idx])\n                rainy[v] = i\n            else:\n                sunny.add(i)\n                ans[i] = 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rains = [1,2,3,4]) == [-1,-1,-1,-1]\n    assert candidate(rains = [1,2,0,0,2,1]) == [-1,-1,2,1,-1,-1]\n    assert candidate(rains = [1,2,0,1,2]) == []\n\n\ncheck(Solution().avoidFlood)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a weighted undirected connected graph with n\u00a0vertices numbered from 0 to n - 1,\u00a0and an array edges\u00a0where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes\u00a0ai\u00a0and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles\u00a0and with the minimum possible total edge weight.\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a\u00a0critical edge. On\u00a0the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\nNote that you can return the indices of the edges in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.n = n\n\n    def union(self, a, b):\n        if self.find(a) == self.find(b):\n            return False\n        self.p[self.find(a)] = self.find(b)\n        self.n -= 1\n        return True\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n\nclass Solution:\n    def findCriticalAndPseudoCriticalEdges(\n        self, n: int, edges: List[List[int]]\n    ) -> List[List[int]]:\n        for i, e in enumerate(edges):\n            e.append(i)\n        edges.sort(key=lambda x: x[2])\n        uf = UnionFind(n)\n        v = sum(w for f, t, w, _ in edges if uf.union(f, t))\n        ans = [[], []]\n        for f, t, w, i in edges:\n            uf = UnionFind(n)\n            k = sum(z for x, y, z, j in edges if j != i and uf.union(x, y))\n            if uf.n > 1 or (uf.n == 1 and k > v):\n                ans[0].append(i)\n                continue\n\n            uf = UnionFind(n)\n            uf.union(f, t)\n            k = w + sum(z for x, y, z, j in edges if j != i and uf.union(x, y))\n            if k == v:\n                ans[1].append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]) == [[0,1],[2,3,4,5]]\n    assert candidate(n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]) == [[],[0,1,2,3]]\n\n\ncheck(Solution().findCriticalAndPseudoCriticalEdges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:\n```",
        "solutions": "class Solution:\n    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:\n        arr = []\n        for i in range(n):\n            s = 0\n            for j in range(i, n):\n                s += nums[j]\n                arr.append(s)\n        arr.sort()\n        mod = 10**9 + 7\n        return sum(arr[left - 1 : right]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4], n = 4, left = 1, right = 5) == 13 \n    assert candidate(nums = [1,2,3,4], n = 4, left = 3, right = 4) == 6\n    assert candidate(nums = [1,2,3,4], n = 4, left = 1, right = 10) == 50\n\n\ncheck(Solution().rangeSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums.\nIn one move, you can choose one element of nums and change it to any value.\nReturn the minimum difference between the largest and smallest value of nums after performing at most three moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 5:\n            return 0\n        nums.sort()\n        ans = inf\n        for l in range(4):\n            r = 3 - l\n            ans = min(ans, nums[n - 1 - r] - nums[l])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,3,2,4]) == 0\n    assert candidate(nums = [1,5,0,10,14]) == 1\n    assert candidate(nums = [3,100,20]) == 0\n\n\ncheck(Solution().minDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.\nReturn true If you can find a way to do that or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canArrange(self, arr: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canArrange(self, arr: List[int], k: int) -> bool:\n        cnt = Counter(x % k for x in arr)\n        return cnt[0] % 2 == 0 and all(cnt[i] == cnt[k - i] for i in range(1, k))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,4,5,10,6,7,8,9], k = 5) == True\n    assert candidate(arr = [1,2,3,4,5,6], k = 7) == True\n    assert candidate(arr = [1,2,3,4,5,6], k = 10) == False\n\n\ncheck(Solution().canArrange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        mod = 10**9 + 7\n        nums.sort()\n        n = len(nums)\n        f = [1] + [0] * n\n        for i in range(1, n + 1):\n            f[i] = f[i - 1] * 2 % mod\n        ans = 0\n        for i, x in enumerate(nums):\n            if x * 2 > target:\n                break\n            j = bisect_right(nums, target - x, i + 1) - 1\n            ans = (ans + f[j - i]) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,5,6,7], target = 9) == 4\n    assert candidate(nums = [3,3,6,8], target = 10) == 6\n    assert candidate(nums = [2,3,3,4,6,7], target = 12) == 61\n\n\ncheck(Solution().numSubseq)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.\nReturn the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n        ans = -inf\n        pq = []\n        for x, y in points:\n            while pq and x - pq[0][1] > k:\n                heappop(pq)\n            if pq:\n                ans = max(ans, x + y - pq[0][0])\n            heappush(pq, (x - y, x))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,3],[2,0],[5,10],[6,-10]], k = 1) == 4\n    assert candidate(points = [[0,0],[3,0],[9,2]], k = 3) == 3\n\n\ncheck(Solution().findMaxValueOfEquation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\nGiven an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr.sort()\n        d = arr[1] - arr[0]\n        return all(b - a == d for a, b in pairwise(arr))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,5,1]) == True\n    assert candidate(arr = [1,2,4]) == False\n\n\ncheck(Solution().canMakeArithmeticProgression)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right.\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\nWhen an ant reaches one end of the plank at a time t, it falls out of the plank immediately.\nGiven an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:\n        ans = 0\n        for x in left:\n            ans = max(ans, x)\n        for x in right:\n            ans = max(ans, n - x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, left = [4,3], right = [0,1]) == 4\n    assert candidate(n = 7, left = [], right = [0,1,2,3,4,5,6,7]) == 7\n    assert candidate(n = 7, left = [0,1,2,3,4,5,6,7], right = []) == 7\n\n\ncheck(Solution().getLastMoment)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary matrix mat, return the number of submatrices that have all ones.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSubmat(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numSubmat(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j]:\n                    g[i][j] = 1 if j == 0 else 1 + g[i][j - 1]\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                col = inf\n                for k in range(i, -1, -1):\n                    col = min(col, g[k][j])\n                    ans += col\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,0,1],[1,1,0],[1,1,0]]) == 13\n    assert candidate(mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]) == 24\n\n\ncheck(Solution().numSubmat)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times.\nReturn the minimum integer you can obtain also as a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minInteger(self, num: str, k: int) -> str:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        pos = defaultdict(deque)\n        for i, v in enumerate(num, 1):\n            pos[int(v)].append(i)\n        ans = []\n        n = len(num)\n        tree = BinaryIndexedTree(n)\n        for i in range(1, n + 1):\n            for v in range(10):\n                q = pos[v]\n                if q:\n                    j = q[0]\n                    dist = tree.query(n) - tree.query(j) + j - i\n                    if dist <= k:\n                        k -= dist\n                        q.popleft()\n                        ans.append(str(v))\n                        tree.update(j, 1)\n                        break\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"4321\", k = 4) == \"1342\"\n    assert candidate(num = \"100\", k = 1) == \"010\"\n    assert candidate(num = \"36789\", k = 1000) == \"36789\"\n    assert candidate(num = \"22\", k = 22) == \"22\"\n    assert candidate(num = \"9438957234785635408\", k = 23) == \"0345989723478563548\"\n\n\ncheck(Solution().minInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two non-negative integers low and high. Return the count of odd numbers between low and high\u00a0(inclusive).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countOdds(self, low: int, high: int) -> int:\n```",
        "solutions": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n        return ((high + 1) >> 1) - (low >> 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(low = 3, high = 7) == 3\n    assert candidate(low = 8, high = 10) == 1\n\n\ncheck(Solution().countOdds)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        cnt = [1, 0]\n        ans = s = 0\n        for x in arr:\n            s += x\n            ans = (ans + cnt[s & 1 ^ 1]) % mod\n            cnt[s & 1] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,3,5]) == 4\n    assert candidate(arr = [2,4,6]) == 0\n    assert candidate(arr = [1,2,3,4,5,6,7]) == 16\n    assert candidate(arr = [100,100,99,99]) == 4\n    assert candidate(arr = [7]) == 1\n\n\ncheck(Solution().numOfSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s.\nA split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.\nReturn the number of good splits you can make in s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSplits(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numSplits(self, s: str) -> int:\n        cnt = Counter(s)\n        vis = set()\n        ans = 0\n        for c in s:\n            vis.add(c)\n            cnt[c] -= 1\n            if cnt[c] == 0:\n                cnt.pop(c)\n            ans += len(vis) == len(cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aacaba\") == 2\n    assert candidate(s = \"abcd\") == 1\n    assert candidate(s = \"aaaaa\") == 4\n    assert candidate(s = \"acbadbaada\") == 2\n\n\ncheck(Solution().numSplits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.\nIn one operation you can choose any subarray from initial and increment each value by one.\nReturn the minimum number of operations to form a target array from initial.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minNumberOperations(self, target: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minNumberOperations(self, target: List[int]) -> int:\n        return target[0] + sum(max(0, b - a) for a, b in pairwise(target))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = [1,2,3,2,1]) == 3\n    assert candidate(target = [3,1,1,2]) == 4\n    assert candidate(target = [3,1,5,4,2]) == 7\n    assert candidate(target = [1,1,1,1]) == 1\n\n\ncheck(Solution().minNumberOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums, return the number of good pairs.\nA pair (i, j) is called good if nums[i] == nums[j] and i < j.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        ans = 0\n        cnt = Counter()\n        for x in nums:\n            ans += cnt[x]\n            cnt[x] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,1,1,3]) == 4\n    assert candidate(nums = [1,1,1,1]) == 6\n    assert candidate(nums = [1,2,3]) == 0\n\n\ncheck(Solution().numIdenticalPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSub(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numSub(self, s: str) -> int:\n        ans = cnt = 0\n        for c in s:\n            if c == \"1\":\n                cnt += 1\n            else:\n                cnt = 0\n            ans += cnt\n        return ans % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0110111\") == 9\n    assert candidate(s = \"101\") == 2\n    assert candidate(s = \"111111\") == 21\n    assert candidate(s = \"000\") == 0\n\n\ncheck(Solution().numSub)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.\nThe operation of drinking a full water bottle turns it into an empty bottle.\nGiven the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:\n```",
        "solutions": "class Solution:\n    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:\n        ans = numBottles\n        while numBottles >= numExchange:\n            numBottles -= numExchange - 1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numBottles = 9, numExchange = 3) == 13\n    assert candidate(numBottles = 15, numExchange = 4) == 19\n\n\ncheck(Solution().numWaterBottles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n        def dfs(i, fa):\n            ans[i] -= cnt[labels[i]]\n            cnt[labels[i]] += 1\n            for j in g[i]:\n                if j != fa:\n                    dfs(j, i)\n            ans[i] += cnt[labels[i]]\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        cnt = Counter()\n        ans = [0] * n\n        dfs(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\") == [2,1,1,1,1,1,1]\n    assert candidate(n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\") == [4,2,1,1]\n    assert candidate(n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\") == [3,2,1,1,1]\n\n\ncheck(Solution().countSubTrees)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWinston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ans = abs(arr[0] - target)\n        s = {arr[0]}\n        for x in arr:\n            s = {x & y for y in s} | {x}\n            ans = min(ans, min(abs(y - target) for y in s))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [9,12,3,7,15], target = 5) == 2\n    assert candidate(arr = [1000000,1000000,1000000], target = 1) == 999999\n    assert candidate(arr = [1,2,4,8,16], target = 0) == 0\n\n\ncheck(Solution().closestToTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array arr of positive integers sorted in a strictly increasing order, and an integer k.\nReturn the kth positive integer that is missing from this array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if arr[0] > k:\n            return k\n        left, right = 0, len(arr)\n        while left < right:\n            mid = (left + right) >> 1\n            if arr[mid] - mid - 1 >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left - 1] + k - (arr[left - 1] - (left - 1) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,3,4,7,11], k = 5) == 9\n    assert candidate(arr = [1,2,3,4], k = 2) == 6\n\n\ncheck(Solution().findKthPositive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings\u00a0s\u00a0and\u00a0t, your goal is to convert\u00a0s\u00a0into\u00a0t\u00a0in\u00a0k\u00a0moves or less.\nDuring the\u00a0ith\u00a0(1 <= i <= k)\u00a0move you can:\n\nChoose any index\u00a0j\u00a0(1-indexed) from\u00a0s, such that\u00a01 <= j <= s.length\u00a0and j\u00a0has not been chosen in any previous move,\u00a0and shift the character at that index\u00a0i\u00a0times.\nDo nothing.\n\nShifting a character means replacing it by the next letter in the alphabet\u00a0(wrapping around so that\u00a0'z'\u00a0becomes\u00a0'a'). Shifting a character by\u00a0i\u00a0means applying the shift operations\u00a0i\u00a0times.\nRemember that any index\u00a0j\u00a0can be picked at most once.\nReturn\u00a0true\u00a0if it's possible to convert\u00a0s\u00a0into\u00a0t\u00a0in no more than\u00a0k\u00a0moves, otherwise return\u00a0false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canConvertString(self, s: str, t: str, k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canConvertString(self, s: str, t: str, k: int) -> bool:\n        if len(s) != len(t):\n            return False\n        cnt = [0] * 26\n        for a, b in zip(s, t):\n            x = (ord(b) - ord(a) + 26) % 26\n            cnt[x] += 1\n        for i in range(1, 26):\n            if i + 26 * (cnt[i] - 1) > k:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"input\", t = \"ouput\", k = 9) == True\n    assert candidate(s = \"abc\", t = \"bcd\", k = 10) == False\n    assert candidate(s = \"aab\", t = \"bbb\", k = 27) == True\n\n\ncheck(Solution().canConvertString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:\n\nAny left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.\nLeft parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.\n\nIn other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.\n\nFor example, \"())\", \"())(())))\" and \"(())())))\" are balanced, \")()\", \"()))\" and \"(()))\" are not balanced.\n\nYou can insert the characters '(' and ')' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minInsertions(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        ans = x = 0\n        i, n = 0, len(s)\n        while i < n:\n            if s[i] == '(':\n                # \u5f85\u5339\u914d\u7684\u5de6\u62ec\u53f7\u52a0 1\n                x += 1\n            else:\n                if i < n - 1 and s[i + 1] == ')':\n                    # \u6709\u8fde\u7eed\u4e24\u4e2a\u53f3\u62ec\u53f7\uff0ci \u5f80\u540e\u79fb\u52a8\n                    i += 1\n                else:\n                    # \u53ea\u6709\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u63d2\u5165\u4e00\u4e2a\n                    ans += 1\n                if x == 0:\n                    # \u65e0\u5f85\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u63d2\u5165\u4e00\u4e2a\n                    ans += 1\n                else:\n                    # \u5f85\u5339\u914d\u7684\u5de6\u62ec\u53f7\u51cf 1\n                    x -= 1\n            i += 1\n        # \u904d\u5386\u7ed3\u675f\uff0c\u4ecd\u6709\u5f85\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u8bf4\u660e\u53f3\u62ec\u53f7\u4e0d\u8db3\uff0c\u63d2\u5165 x << 1 \u4e2a\n        ans += x << 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(()))\") == 1\n    assert candidate(s = \"())\") == 0\n    assert candidate(s = \"))())(\") == 3\n    assert candidate(s = \"((((((\") == 12\n    assert candidate(s = \")))))))\") == 5\n\n\ncheck(Solution().minInsertions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        ans = 0\n        i, n = 0, len(nums)\n        while i < n:\n            s = 0\n            vis = {0}\n            while i < n:\n                s += nums[i]\n                if s - target in vis:\n                    ans += 1\n                    break\n                i += 1\n                vis.add(s)\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1,1,1], target = 2) == 2\n    assert candidate(nums = [-1,3,5,1,4,2,-9], target = 6) == 2\n    assert candidate(nums = [-2,6,6,3,5,4,1,2,8], target = 10) == 3\n    assert candidate(nums = [0,0,0], target = 0) == 3\n\n\ncheck(Solution().maxNonOverlapping)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def restoreString(self, s: str, indices: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def restoreString(self, s: str, indices: List[int]) -> str:\n        ans = [0] * len(s)\n        for i, c in enumerate(s):\n            ans[indices[i]] = c\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]) == \"leetcode\"\n    assert candidate(s = \"abc\", indices = [0,1,2]) == \"abc\"\n\n\ncheck(Solution().restoreString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFlips(self, target: str) -> int:\n```",
        "solutions": "class Solution:\n    def minFlips(self, target: str) -> int:\n        ans = 0\n        for v in target:\n            if (ans & 1) ^ int(v):\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = \"10111\") == 3\n    assert candidate(target = \"101\") == 3\n    assert candidate(target = \"00000\") == 0\n\n\ncheck(Solution().minFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.\nReturn the number of good leaf node pairs in the tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        def dfs(root, cnt, i):\n            if root is None or i >= distance:\n                return\n            if root.left is None and root.right is None:\n                cnt[i] += 1\n                return\n            dfs(root.left, cnt, i + 1)\n            dfs(root.right, cnt, i + 1)\n\n        if root is None:\n            return 0\n        ans = self.countPairs(root.left, distance) + self.countPairs(\n            root.right, distance\n        )\n        cnt1 = Counter()\n        cnt2 = Counter()\n        dfs(root.left, cnt1, 1)\n        dfs(root.right, cnt2, 1)\n\n        for k1, v1 in cnt1.items():\n            for k2, v2 in cnt2.items():\n                if k1 + k2 <= distance:\n                    ans += v1 * v2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,2,3,None,4]), distance = 3) == 1\n    assert candidate(root = tree_node([1,2,3,4,5,6,7]), distance = 3) == 2\n    assert candidate(root = tree_node([7,1,4,6,None,5,3,None,None,None,None,None,2]), distance = 3) == 1\n    assert candidate(root = tree_node([100]), distance = 1) == 0\n    assert candidate(root = tree_node([1,1,1]), distance = 2) == 1\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers arr, and three integers\u00a0a,\u00a0b\u00a0and\u00a0c. You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k])\u00a0is good if the following conditions are true:\n\n0 <= i < j < k <\u00a0arr.length\n|arr[i] - arr[j]| <= a\n|arr[j] - arr[k]| <= b\n|arr[i] - arr[k]| <= c\n\nWhere |x| denotes the absolute value of x.\nReturn the number of good triplets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n```",
        "solutions": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans, n = 0, len(arr)\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    ans += (\n                        abs(arr[i] - arr[j]) <= a\n                        and abs(arr[j] - arr[k]) <= b\n                        and abs(arr[i] - arr[k]) <= c\n                    )\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3) == 4\n    assert candidate(arr = [1,1,2,2,3], a = 0, b = 0, c = 1) == 0\n\n\ncheck(Solution().countGoodTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        mx = arr[0]\n        cnt = 0\n        for x in arr[1:]:\n            if mx < x:\n                mx = x\n                cnt = 1\n            else:\n                cnt += 1\n            if cnt == k:\n                break\n        return mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,1,3,5,4,6,7], k = 2) == 5\n    assert candidate(arr = [3,2,1], k = 10) == 3\n    assert candidate(arr = [1,9,8,2,3,7,6,4,5], k = 7) == 9\n    assert candidate(arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000) == 99\n\n\ncheck(Solution().getWinner)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        pos = [-1] * n\n        for i in range(n):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 1:\n                    pos[i] = j\n                    break\n        ans = 0\n        for i in range(n):\n            k = -1\n            for j in range(i, n):\n                if pos[j] <= i:\n                    ans += j - i\n                    k = j\n                    break\n            if k == -1:\n                return -1\n            while k > i:\n                pos[k], pos[k - 1] = pos[k - 1], pos[k]\n                k -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,0,1],[1,1,0],[1,0,0]]) == 3\n    assert candidate(grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]) == -1\n    assert candidate(grid = [[1,0,0],[1,1,0],[1,1,1]]) == 0\n\n\ncheck(Solution().minSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\n\nChoose array nums1 or nums2 to traverse (from index-0).\nTraverse the current array from left to right.\nIf you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\nThe score is defined as the sum of unique values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n        mod = 10**9 + 7\n        m, n = len(nums1), len(nums2)\n        i = j = 0\n        f = g = 0\n        while i < m or j < n:\n            if i == m:\n                g += nums2[j]\n                j += 1\n            elif j == n:\n                f += nums1[i]\n                i += 1\n            elif nums1[i] < nums2[j]:\n                f += nums1[i]\n                i += 1\n            elif nums1[i] > nums2[j]:\n                g += nums2[j]\n                j += 1\n            else:\n                f = g = max(f, g) + nums1[i]\n                i += 1\n                j += 1\n        return max(f, g) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]) == 30\n    assert candidate(nums1 = [1,3,5,7,9], nums2 = [3,5,100]) == 109\n    assert candidate(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]) == 40\n\n\ncheck(Solution().maxSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, add a dot (\".\") as the thousands separator and return it in string format.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def thousandSeparator(self, n: int) -> str:\n```",
        "solutions": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        cnt = 0\n        ans = []\n        while 1:\n            n, v = divmod(n, 10)\n            ans.append(str(v))\n            cnt += 1\n            if n == 0:\n                break\n            if cnt == 3:\n                ans.append('.')\n                cnt = 0\n        return ''.join(ans[::-1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 987) == \"987\"\n    assert candidate(n = 1234) == \"1.234\"\n    assert candidate(n = 123456789) == \"123.456.789\"\n    assert candidate(n = 0) == \"0\"\n\n\ncheck(Solution().thousandSeparator)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a\u00a0directed acyclic graph,\u00a0with\u00a0n\u00a0vertices numbered from\u00a00\u00a0to\u00a0n-1,\u00a0and an array\u00a0edges\u00a0where\u00a0edges[i] = [fromi, toi]\u00a0represents a directed edge from node\u00a0fromi\u00a0to node\u00a0toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n        cnt = Counter(t for _, t in edges)\n        return [i for i in range(n) if cnt[i] == 0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]) == [0,3]\n    assert candidate(n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]) == [0,2,3]\n\n\ncheck(Solution().findSmallestSetOfVertices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n```",
        "solutions": "class Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        m, n = len(grid), len(grid[0])\n        p = list(range(m * n))\n        for i in range(m):\n            for j in range(n):\n                for a, b in [[0, 1], [1, 0]]:\n                    x, y = i + a, j + b\n                    if x < m and y < n and grid[x][y] == grid[i][j]:\n                        if find(x * n + y) == find(i * n + j):\n                            return True\n                        p[find(x * n + y)] = find(i * n + j)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]) == True\n    assert candidate(grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]) == True\n    assert candidate(grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]) == False\n\n\ncheck(Solution().containsCycle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s of lower and upper case English letters.\nA good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:\n\n0 <= i <= s.length - 2\ns[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.\n\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeGood(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def makeGood(self, s: str) -> str:\n        stk = []\n        for c in s:\n            if not stk or abs(ord(stk[-1]) - ord(c)) != 32:\n                stk.append(c)\n            else:\n                stk.pop()\n        return \"\".join(stk)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leEeetcode\") == \"leetcode\"\n    assert candidate(s = \"abBAcC\") == \"\"\n    assert candidate(s = \"s\") == \"s\"\n\n\ncheck(Solution().makeGood)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two positive integers n and k, the binary string Sn is formed as follows:\n\nS1 = \"0\"\nSi = Si - 1 + \"1\" + reverse(invert(Si - 1)) for i > 1\n\nWhere + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first four strings in the above sequence are:\n\nS1 = \"0\"\nS2 = \"011\"\nS3 = \"0111001\"\nS4 = \"011100110110001\"\n\nReturn the kth bit in Sn. It is guaranteed that k is valid for the given n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def dfs(n: int, k: int) -> int:\n            if k == 1:\n                return 0\n            if (k & (k - 1)) == 0:\n                return 1\n            m = 1 << n\n            if k * 2 < m - 1:\n                return dfs(n - 1, k)\n            return dfs(n - 1, m - k) ^ 1\n\n        return str(dfs(n, k))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 1) == \"0\"\n    assert candidate(n = 4, k = 11) == \"1\"\n    assert candidate(n = 1, k = 1) == \"0\"\n    assert candidate(n = 2, k = 3) == \"1\"\n\n\ncheck(Solution().findKthBit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.\nReturn the length of the maximum length awesome substring of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestAwesome(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestAwesome(self, s: str) -> int:\n        st = 0\n        d = {0: -1}\n        ans = 1\n        for i, c in enumerate(s):\n            v = int(c)\n            st ^= 1 << v\n            if st in d:\n                ans = max(ans, i - d[st])\n            else:\n                d[st] = i\n            for v in range(10):\n                if st ^ (1 << v) in d:\n                    ans = max(ans, i - d[st ^ (1 << v)])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"3242415\") == 5\n    assert candidate(s = \"12345678\") == 1\n    assert candidate(s = \"213123\") == 6\n    assert candidate(s = \"00\") == 2\n\n\ncheck(Solution().longestAwesome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\n\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, n: int, cuts: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, n: int, cuts: List[int]) -> int:\n        cuts.extend([0, n])\n        cuts.sort()\n        m = len(cuts)\n        f = [[0] * m for _ in range(m)]\n        for l in range(2, m):\n            for i in range(m - l):\n                j = i + l\n                f[i][j] = inf\n                for k in range(i + 1, j):\n                    f[i][j] = min(f[i][j], f[i][k] + f[k][j] + cuts[j] - cuts[i])\n        return f[0][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, cuts = [1,3,4,5]) == 16\n    assert candidate(n = 9, cuts = [5,6,1,4,2]) == 22\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e.,\u00a00 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, n: int) -> int:\n        return sum(n - (i << 1 | 1) for i in range(n >> 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 2\n    assert candidate(n = 6) == 9\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\nRick stated that magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position and the integer m. Return the required force.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDistance(self, position: List[int], m: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxDistance(self, position: List[int], m: int) -> int:\n        def check(f):\n            prev = position[0]\n            cnt = 1\n            for curr in position[1:]:\n                if curr - prev >= f:\n                    prev = curr\n                    cnt += 1\n            return cnt >= m\n\n        position.sort()\n        left, right = 1, position[-1]\n        while left < right:\n            mid = (left + right + 1) >> 1\n\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(position = [1,2,3,4,7], m = 3) == 3\n    assert candidate(position = [5,4,3,2,1,1000000000], m = 2) == 999999999\n\n\ncheck(Solution().maxDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.\nReturn the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numWays(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numWays(self, s: str) -> int:\n        def find(x):\n            t = 0\n            for i, c in enumerate(s):\n                t += int(c == '1')\n                if t == x:\n                    return i\n\n        cnt, m = divmod(sum(c == '1' for c in s), 3)\n        if m:\n            return 0\n        n = len(s)\n        mod = 10**9 + 7\n        if cnt == 0:\n            return ((n - 1) * (n - 2) // 2) % mod\n        i1, i2 = find(cnt), find(cnt + 1)\n        j1, j2 = find(cnt * 2), find(cnt * 2 + 1)\n        return (i2 - i1) * (j2 - j1) % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"10101\") == 4\n    assert candidate(s = \"1001\") == 0\n    assert candidate(s = \"0000\") == 3\n    assert candidate(s = \"100100010100110\") == 12\n\n\ncheck(Solution().numWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.\nReturn the length of the shortest subarray to remove.\nA subarray is a contiguous subsequence of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:\n        n = len(arr)\n        i, j = 0, n - 1\n        while i + 1 < n and arr[i] <= arr[i + 1]:\n            i += 1\n        while j - 1 >= 0 and arr[j - 1] <= arr[j]:\n            j -= 1\n        if i >= j:\n            return 0\n        ans = min(n - i - 1, j)\n        for l in range(i + 1):\n            r = bisect_left(arr, arr[l], lo=j)\n            ans = min(ans, r - l - 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,3,10,4,2,3,5]) == 3\n    assert candidate(arr = [5,4,3,2,1]) == 4\n    assert candidate(arr = [1,2,3]) == 0\n    assert candidate(arr = [1]) == 0\n\n\ncheck(Solution().findLengthOfShortestSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]\nReturn an array of the most visited sectors sorted in ascending order.\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostVisited(self, n: int, rounds: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def mostVisited(self, n: int, rounds: List[int]) -> List[int]:\n        if rounds[0] <= rounds[-1]:\n            return list(range(rounds[0], rounds[-1] + 1))\n        return list(range(1, rounds[-1] + 1)) + list(range(rounds[0], n + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, rounds = [1,3,1,2]) == [1,2]\n    assert candidate(n = 2, rounds = [2,1,2,1,2,1,2,1,2]) == [2]\n    assert candidate(n = 7, rounds = [1,3,5,7]) == [1,2,3,4,5,6,7]\n\n\ncheck(Solution().mostVisited)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\n\nIn each step, you will choose any 3 piles of coins (not necessarily consecutive).\nOf your choice, Alice will pick the pile with the maximum number of coins.\nYou will pick the next pile with the maximum number of coins.\nYour friend Bob will pick the last pile.\nRepeat until there are no more piles of coins.\n\nGiven an array of integers piles where piles[i] is the number of coins in the ith pile.\nReturn the maximum number of coins that you can have.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCoins(self, piles: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxCoins(self, piles: List[int]) -> int:\n        piles.sort()\n        return sum(piles[-2 : len(piles) // 3 - 1 : -2])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(piles = [2,4,1,2,7,8]) == 9\n    assert candidate(piles = [2,4,5]) == 4\n    assert candidate(piles = [9,8,7,6,5,1,2,3,4]) == 18\n\n\ncheck(Solution().maxCoins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array arr that represents a permutation of numbers from 1 to n.\nYou have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.\nYou are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLatestStep(self, arr: List[int], m: int) -> int:\n```",
        "solutions": "class Solution:\n    def findLatestStep(self, arr: List[int], m: int) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                return\n            p[pa] = pb\n            size[pb] += size[pa]\n\n        n = len(arr)\n        if m == n:\n            return n\n        vis = [False] * n\n        p = list(range(n))\n        size = [1] * n\n        ans = -1\n        for i, v in enumerate(arr):\n            v -= 1\n            if v and vis[v - 1]:\n                if size[find(v - 1)] == m:\n                    ans = i\n                union(v, v - 1)\n            if v < n - 1 and vis[v + 1]:\n                if size[find(v + 1)] == m:\n                    ans = i\n                union(v, v + 1)\n            vis[v] = True\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [3,5,1,2,4], m = 1) == 4\n    assert candidate(arr = [3,1,5,4,2], m = 2) == -1\n    assert candidate(arr = [1], m = 1) == 1\n    assert candidate(arr = [2,1], m = 2) == 2\n\n\ncheck(Solution().findLatestStep)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers arr, find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        n = len(arr)\n        for i in range(n - m * k + 1):\n            j = 0\n            while j < m * k:\n                if arr[i + j] != arr[i + (j % m)]:\n                    break\n                j += 1\n            if j == m * k:\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,2,4,4,4,4], m = 1, k = 3) == True\n    assert candidate(arr = [1,2,1,2,1,1,1,3], m = 2, k = 2) == True\n    assert candidate(arr = [1,2,1,2,1,3], m = 2, k = 3) == False\n    assert candidate(arr = [1,2,3,1,2], m = 2, k = 2) == False\n    assert candidate(arr = [2,2,2,2], m = 2, k = 3) == False\n\n\ncheck(Solution().containsPattern)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn the maximum length of a subarray with positive product.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        f1 = 1 if nums[0] > 0 else 0\n        f2 = 1 if nums[0] < 0 else 0\n        res = f1\n        for num in nums[1:]:\n            pf1, pf2 = f1, f2\n            if num > 0:\n                f1 += 1\n                if f2 > 0:\n                    f2 += 1\n                else:\n                    f2 = 0\n            elif num < 0:\n                pf1, pf2 = f1, f2\n                f2 = pf1 + 1\n                if pf2 > 0:\n                    f1 = pf2 + 1\n                else:\n                    f1 = 0\n            else:\n                f1 = 0\n                f2 = 0\n            res = max(res, f1)\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-2,-3,4]) == 4\n    assert candidate(nums = [0,1,-2,-3,-4]) == 3\n    assert candidate(nums = [-1,-2,-3,0,1]) == 2\n\n\ncheck(Solution().getMaxLen)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDays(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minDays(self, grid: List[List[int]]) -> int:\n        if self.count(grid) != 1:\n            return 0\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    grid[i][j] = 0\n                    if self.count(grid) != 1:\n                        return 1\n                    grid[i][j] = 1\n        return 2\n\n    def count(self, grid):\n        def dfs(i, j):\n            grid[i][j] = 2\n            for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:\n                    dfs(x, y)\n\n        m, n = len(grid), len(grid[0])\n        cnt = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dfs(i, j)\n                    cnt += 1\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 2:\n                    grid[i][j] = 1\n        return cnt\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]) == 2\n    assert candidate(grid = [[1,1]]) == 2\n\n\ncheck(Solution().minDays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\n\nFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\n\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfWays(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numOfWays(self, nums: List[int]) -> int:\n        def dfs(nums):\n            if len(nums) < 2:\n                return 1\n            left = [x for x in nums if x < nums[0]]\n            right = [x for x in nums if x > nums[0]]\n            m, n = len(left), len(right)\n            a, b = dfs(left), dfs(right)\n            return (((c[m + n][m] * a) % mod) * b) % mod\n\n        n = len(nums)\n        mod = 10**9 + 7\n        c = [[0] * n for _ in range(n)]\n        c[0][0] = 1\n        for i in range(1, n):\n            c[i][0] = 1\n            for j in range(1, i + 1):\n                c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod\n        return (dfs(nums) - 1 + mod) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,3]) == 1\n    assert candidate(nums = [3,4,5,1,2]) == 5\n    assert candidate(nums = [1,2,3]) == 0\n\n\ncheck(Solution().numOfWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.\nA subarray is a contiguous subsequence of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ans, n = 0, len(arr)\n        for i in range(n):\n            s = 0\n            for j in range(i, n):\n                s += arr[j]\n                if (j - i + 1) & 1:\n                    ans += s\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,4,2,5,3]) == 58\n    assert candidate(arr = [1,2]) == 3\n    assert candidate(arr = [10,11,12]) == 66\n\n\ncheck(Solution().sumOddLengthSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        k = sum(nums) % p\n        if k == 0:\n            return 0\n        last = {0: -1}\n        cur = 0\n        ans = len(nums)\n        for i, x in enumerate(nums):\n            cur = (cur + x) % p\n            target = (cur - k + p) % p\n            if target in last:\n                ans = min(ans, i - last[target])\n            last[cur] = i\n        return -1 if ans == len(nums) else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,4,2], p = 6) == 1\n    assert candidate(nums = [6,3,5,2], p = 9) == 2\n    assert candidate(nums = [1,2,3], p = 3) == 0\n    assert candidate(nums = [1,2,3], p = 7) == -1\n    assert candidate(nums = [1000000000,1000000000,1000000000], p = 3) == 0\n\n\ncheck(Solution().minSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.\nReturn the maximum total sum of all requests among all permutations of nums.\nSince the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n        n = len(nums)\n        d = [0] * n\n        for l, r in requests:\n            d[l] += 1\n            if r + 1 < n:\n                d[r + 1] -= 1\n        for i in range(1, n):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        return sum(a * b for a, b in zip(nums, d)) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5], requests = [[1,3],[0,1]]) == 19\n    assert candidate(nums = [1,2,3,4,5,6], requests = [[0,1]]) == 11\n    assert candidate(nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]) == 47\n\n\ncheck(Solution().maxSumRangeQuery)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a list of strings dict where all the strings are of the same length.\nReturn true if there are 2 strings that only differ by 1 character in the same index, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        s = set()\n        for word in dict:\n            for i in range(len(word)):\n                t = word[:i] + \"*\" + word[i + 1 :]\n                if t in s:\n                    return True\n                s.add(t)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dict = [\"abcd\",\"acbd\", \"aacd\"]) == True\n    assert candidate(dict = [\"ab\",\"cd\",\"yz\"]) == False\n    assert candidate(dict = [\"abcd\",\"cccc\",\"abyd\",\"abab\"]) == True\n\n\ncheck(Solution().differByOne)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\nReturn the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def modifyString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def modifyString(self, s: str) -> str:\n        s = list(s)\n        n = len(s)\n        for i in range(n):\n            if s[i] == \"?\":\n                for c in \"abc\":\n                    if (i and s[i - 1] == c) or (i + 1 < n and s[i + 1] == c):\n                        continue\n                    s[i] = c\n                    break\n        return \"\".join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"?zs\") == \"azs\"\n    assert candidate(s = \"ubv?w\") == \"ubvaw\"\n\n\ncheck(Solution().modifyString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:\n\nType 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.\nType 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        ans = 0\n        for a, x in cnt1.items():\n            for b, y in cnt2.items():\n                if a * a % b == 0:\n                    c = a * a // b\n                    if b == c:\n                        ans += x * y * (y - 1)\n                    else:\n                        ans += x * y * cnt2[c]\n                if b * b % a == 0:\n                    c = b * b // a\n                    if a == c:\n                        ans += x * (x - 1) * y\n                    else:\n                        ans += x * y * cnt1[c]\n        return ans >> 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [7,4], nums2 = [5,2,8,9]) == 1\n    assert candidate(nums1 = [1,1], nums2 = [1,1,1]) == 9\n    assert candidate(nums1 = [7,7,8,3], nums2 = [1,2,9,7]) == 2\n    assert candidate(nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]) == 0\n\n\ncheck(Solution().numTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.\nAlice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.\nReturn the minimum time Bob needs to make the rope colorful.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -> int:\n        ans = i = 0\n        n = len(colors)\n        while i < n:\n            j = i\n            s = mx = 0\n            while j < n and colors[j] == colors[i]:\n                s += neededTime[j]\n                if mx < neededTime[j]:\n                    mx = neededTime[j]\n                j += 1\n            if j - i > 1:\n                ans += s - mx\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(colors = \"abaac\", neededTime = [1,2,3,4,5]) == 3\n    assert candidate(colors = \"abc\", neededTime = [1,2,3]) == 0\n    assert candidate(colors = \"aabaa\", neededTime = [1,2,3,4,1]) == 2\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob have an undirected graph of n nodes and three types of edges:\n\nType 1: Can be traversed by Alice only.\nType 2: Can be traversed by Bob only.\nType 3: Can be traversed by both Alice and Bob.\n\nGiven an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n        self.cnt = n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a - 1), self.find(b - 1)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        self.cnt -= 1\n        return True\n\n\nclass Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n        ufa = UnionFind(n)\n        ufb = UnionFind(n)\n        ans = 0\n        for t, u, v in edges:\n            if t == 3:\n                if ufa.union(u, v):\n                    ufb.union(u, v)\n                else:\n                    ans += 1\n        for t, u, v in edges:\n            if t == 1:\n                ans += not ufa.union(u, v)\n            if t == 2:\n                ans += not ufb.union(u, v)\n        return ans if ufa.cnt == 1 and ufb.cnt == 1 else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]) == 2\n    assert candidate(n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]) == 0\n    assert candidate(n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]) == -1\n\n\ncheck(Solution().maxNumEdgesToRemove)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two arrays of positive integers, boxes and warehouse, representing the heights of some boxes of unit width and the heights of n rooms in a warehouse respectively. The warehouse's rooms are labelled from 0 to n - 1 from left to right where warehouse[i] (0-indexed) is the height of the ith room.\nBoxes are put into the warehouse by the following rules:\n\nBoxes cannot be stacked.\nYou can rearrange the insertion order of the boxes.\nBoxes can only be pushed into the warehouse from left to right only.\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn the maximum number of boxes you can put into the warehouse.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n        boxes.sort()\n        i, j = 0, n - 1\n        while i < len(boxes):\n            while j >= 0 and left[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            i, j = i + 1, j - 1\n        return i\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(boxes = [4,3,4,1], warehouse = [5,3,3,4,1]) == 3\n    assert candidate(boxes = [1,2,2,3,4], warehouse = [3,4,1,2]) == 3\n    assert candidate(boxes = [1,2,3], warehouse = [1,2,3,4]) == 1\n\n\ncheck(Solution().maxBoxesInWarehouse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an m x n binary matrix mat, return the number of special positions in mat.\nA position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        r = [0] * m\n        c = [0] * n\n        for i, row in enumerate(mat):\n            for j, v in enumerate(row):\n                r[i] += v\n                c[j] += v\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1 and r[i] == 1 and c[j] == 1:\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,0,0],[0,0,1],[1,0,0]]) == 1\n    assert candidate(mat = [[1,0,0],[0,1,0],[0,0,1]]) == 3\n\n\ncheck(Solution().numSpecial)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a list of\u00a0preferences\u00a0for\u00a0n\u00a0friends, where n is always even.\nFor each person i,\u00a0preferences[i]\u00a0contains\u00a0a list of friends\u00a0sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list.\u00a0Friends in\u00a0each list are\u00a0denoted by integers from 0 to n-1.\nAll the friends are divided into pairs.\u00a0The pairings are\u00a0given in a list\u00a0pairs,\u00a0where pairs[i] = [xi, yi] denotes xi\u00a0is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy.\u00a0A friend x\u00a0is unhappy if x\u00a0is paired with y\u00a0and there exists a friend u\u00a0who\u00a0is paired with v\u00a0but:\n\nx\u00a0prefers u\u00a0over y,\u00a0and\nu\u00a0prefers x\u00a0over v.\n\nReturn the number of unhappy friends.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def unhappyFriends(\n        self, n: int, preferences: List[List[int]], pairs: List[List[int]]\n    ) -> int:\n        d = [{p: i for i, p in enumerate(v)} for v in preferences]\n        p = {}\n        for x, y in pairs:\n            p[x] = y\n            p[y] = x\n        ans = 0\n        for x in range(n):\n            y = p[x]\n            ans += any(d[u][x] < d[u][p[u]] for u in preferences[x][: d[x][y]])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]) == 2\n    assert candidate(n = 2, preferences = [[1], [0]], pairs = [[1, 0]]) == 0\n    assert candidate(n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]) == 4\n\n\ncheck(Solution().unhappyFriends)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n        g = [[0] * n for _ in range(n)]\n        dist = [inf] * n\n        vis = [False] * n\n        for i, (x1, y1) in enumerate(points):\n            for j in range(i + 1, n):\n                x2, y2 = points[j]\n                t = abs(x1 - x2) + abs(y1 - y2)\n                g[i][j] = g[j][i] = t\n        dist[0] = 0\n        ans = 0\n        for _ in range(n):\n            i = -1\n            for j in range(n):\n                if not vis[j] and (i == -1 or dist[j] < dist[i]):\n                    i = j\n            vis[i] = True\n            ans += dist[i]\n            for j in range(n):\n                if not vis[j]:\n                    dist[j] = min(dist[j], g[i][j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[0,0],[2,2],[3,10],[5,2],[7,0]]) == 20\n    assert candidate(points = [[3,12],[-2,5],[-4,1]]) == 18\n    assert candidate(points = [[0,0],[1,1],[1,0],[-1,1]]) == 4\n    assert candidate(points = [[-1000000,-1000000],[1000000,1000000]]) == 4000000\n    assert candidate(points = [[0,0]]) == 0\n\n\ncheck(Solution().minCostConnectPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, transform string s into string t using the following operation any number of times:\n\nChoose a non-empty substring in s and sort it in place so the characters are in ascending order.\n\n\t\nFor example, applying the operation on the underlined substring in \"14234\" results in \"12344\".\n\n\n\nReturn true if it is possible to transform s into t. Otherwise, return false.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        pos = defaultdict(deque)\n        for i, c in enumerate(s):\n            pos[int(c)].append(i)\n        for c in t:\n            x = int(c)\n            if not pos[x] or any(pos[i] and pos[i][0] < pos[x][0] for i in range(x)):\n                return False\n            pos[x].popleft()\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"84532\", t = \"34852\") == True\n    assert candidate(s = \"34521\", t = \"23415\") == True\n    assert candidate(s = \"12345\", t = \"12435\") == False\n    assert candidate(s = \"1\", t = \"2\") == False\n\n\ncheck(Solution().isTransformable)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\n\nThe ith (0-indexed) request arrives.\nIf all servers are busy, the request is dropped (not handled at all).\nIf the (i % k)th server is available, assign the request to that server.\nOtherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.\n\nYou are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        free = SortedList(range(k))\n        busy = []\n        cnt = [0] * k\n        for i, (start, t) in enumerate(zip(arrival, load)):\n            while busy and busy[0][0] <= start:\n                free.add(busy[0][1])\n                heappop(busy)\n            if not free:\n                continue\n            j = free.bisect_left(i % k)\n            if j == len(free):\n                j = 0\n            server = free[j]\n            cnt[server] += 1\n            heappush(busy, (start + t, server))\n            free.remove(server)\n\n        mx = max(cnt)\n        return [i for i, v in enumerate(cnt) if v == mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] ) == [1] \n    assert candidate(k = 3, arrival = [1,2,3,4], load = [1,2,1,2]) == [0]\n    assert candidate(k = 3, arrival = [1,2,3], load = [10,12,11]) == [0,1,2]\n    assert candidate(k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]) == [1]\n    assert candidate(k = 1, arrival = [1], load = [1]) == [0]\n\n\ncheck(Solution().busiestServers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.\nReturn the string after rearranging the spaces.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reorderSpaces(self, text: str) -> str:\n```",
        "solutions": "class Solution:\n    def reorderSpaces(self, text: str) -> str:\n        cnt = text.count(' ')\n        words = text.split()\n        m = len(words) - 1\n        if m == 0:\n            return words[0] + ' ' * cnt\n        return (' ' * (cnt // m)).join(words) + ' ' * (cnt % m)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"  this   is  a sentence \") == \"this   is   a   sentence\"\n    assert candidate(text = \" practice   makes   perfect\") == \"practice   makes   perfect \"\n    assert candidate(text = \"hello   world\") == \"hello   world\"\n    assert candidate(text = \"  walks  udp package   into  bar a\") == \"walks  udp  package  into  bar  a \"\n    assert candidate(text = \"a\") == \"a\"\n\n\ncheck(Solution().reorderSpaces)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string\u00a0s,\u00a0return the maximum\u00a0number of unique substrings that the given string can be split into.\nYou can split string\u00a0s into any list of\u00a0non-empty substrings, where the concatenation of the substrings forms the original string.\u00a0However, you must split the substrings such that all of them are unique.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n        def dfs(i, t):\n            if i >= len(s):\n                nonlocal ans\n                ans = max(ans, t)\n                return\n            for j in range(i + 1, len(s) + 1):\n                if s[i:j] not in vis:\n                    vis.add(s[i:j])\n                    dfs(j, t + 1)\n                    vis.remove(s[i:j])\n\n        vis = set()\n        ans = 1\n        dfs(0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ababccc\") == 5\n    assert candidate(s = \"aba\") == 2\n    assert candidate(s = \"aa\") == 1\n\n\ncheck(Solution().maxUniqueSplit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.\nAmong all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.\nReturn the maximum non-negative product modulo 109 + 7. If the maximum product is negative, return -1.\nNotice that the modulo is performed after getting the maximum product.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        mod = 10**9 + 7\n        dp = [[[grid[0][0]] * 2 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            dp[i][0] = [dp[i - 1][0][0] * grid[i][0]] * 2\n        for j in range(1, n):\n            dp[0][j] = [dp[0][j - 1][0] * grid[0][j]] * 2\n        for i in range(1, m):\n            for j in range(1, n):\n                v = grid[i][j]\n                if v >= 0:\n                    dp[i][j][0] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v\n                    dp[i][j][1] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v\n                else:\n                    dp[i][j][0] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v\n                    dp[i][j][1] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v\n        ans = dp[-1][-1][1]\n        return -1 if ans < 0 else ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]) == -1\n    assert candidate(grid = [[1,-2,1],[1,-2,1],[3,-4,1]]) == 8\n    assert candidate(grid = [[1,3],[0,-4]]) == 0\n\n\ncheck(Solution().maxProductPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.\nThe cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\nReturn the minimum cost it takes to connect the two groups.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def connectTwoGroups(self, cost: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def connectTwoGroups(self, cost: List[List[int]]) -> int:\n        m, n = len(cost), len(cost[0])\n        f = [[inf] * (1 << n) for _ in range(m + 1)]\n        f[0][0] = 0\n        for i in range(1, m + 1):\n            for j in range(1 << n):\n                for k in range(n):\n                    if (j >> k & 1) == 0:\n                        continue\n                    c = cost[i - 1][k]\n                    x = min(f[i][j ^ (1 << k)], f[i - 1][j], f[i - 1][j ^ (1 << k)]) + c\n                    f[i][j] = min(f[i][j], x)\n        return f[m][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cost = [[15, 96], [36, 2]]) == 17\n    assert candidate(cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]) == 4\n    assert candidate(cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]) == 10\n\n\ncheck(Solution().connectTwoGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two arrays of positive integers, boxes and warehouse, representing the heights of some boxes of unit width and the heights of n rooms in a warehouse respectively. The warehouse's rooms are labeled from 0 to n - 1 from left to right where warehouse[i] (0-indexed) is the height of the ith room.\nBoxes are put into the warehouse by the following rules:\n\nBoxes cannot be stacked.\nYou can rearrange the insertion order of the boxes.\nBoxes can be pushed into the warehouse from either side (left or right)\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn the maximum number of boxes you can put into the warehouse.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [0] * n\n        right = [0] * n\n        left[0] = right[-1] = inf\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i - 1])\n        for i in range(n - 2, -1, -1):\n            right[i] = min(right[i + 1], warehouse[i + 1])\n        for i in range(n):\n            warehouse[i] = min(warehouse[i], max(left[i], right[i]))\n        boxes.sort()\n        warehouse.sort()\n        ans = i = 0\n        for x in boxes:\n            while i < n and warehouse[i] < x:\n                i += 1\n            if i == n:\n                break\n            ans, i = ans + 1, i + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(boxes = [1,2,2,3,4], warehouse = [3,4,1,2]) == 4\n    assert candidate(boxes = [3,5,5,2], warehouse = [2,1,3,4,5]) == 3\n    assert candidate(boxes = [1,2,3], warehouse = [1,2,3,4]) == 3\n    assert candidate(boxes = [4,5,6], warehouse = [3,3,3,3,3]) == 0\n\n\ncheck(Solution().maxBoxesInWarehouse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\n\"./\" : Remain in the same folder.\n\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist).\n\nYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, logs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        ans = 0\n        for v in logs:\n            if v == \"../\":\n                ans = max(0, ans - 1)\n            elif v[0] != \".\":\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]) == 2\n    assert candidate(logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]) == 3\n    assert candidate(logs = [\"d1/\",\"../\",\"../\",\"../\"]) == 0\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperationsMaxProfit(\n        self, customers: List[int], boardingCost: int, runningCost: int\n    ) -> int:\n        ans = -1\n        mx = t = 0\n        wait = 0\n        i = 0\n        while wait or i < len(customers):\n            wait += customers[i] if i < len(customers) else 0\n            up = wait if wait < 4 else 4\n            wait -= up\n            t += up * boardingCost - runningCost\n            i += 1\n            if t > mx:\n                mx = t\n                ans = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(customers = [8,3], boardingCost = 5, runningCost = 6) == 3\n    assert candidate(customers = [10,9,6], boardingCost = 6, runningCost = 4) == 7\n    assert candidate(customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92) == -1\n\n\ncheck(Solution().minOperationsMaxProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSets(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSets(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        g = [[0] * (k + 1) for _ in range(n + 1)]\n        f[1][0] = 1\n        for i in range(2, n + 1):\n            for j in range(k + 1):\n                f[i][j] = (f[i - 1][j] + g[i - 1][j]) % mod\n                g[i][j] = g[i - 1][j]\n                if j:\n                    g[i][j] += f[i - 1][j - 1]\n                    g[i][j] %= mod\n                    g[i][j] += g[i - 1][j - 1]\n                    g[i][j] %= mod\n        return (f[-1][-1] + g[-1][-1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, k = 2) == 5\n    assert candidate(n = 3, k = 1) == 3\n    assert candidate(n = 30, k = 7) == 796297179\n    assert candidate(n = 5, k = 3) == 7\n    assert candidate(n = 3, k = 2) == 1\n\n\ncheck(Solution().numberOfSets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.\nYou are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.\nThe signal quality of the ith tower at a coordinate (x, y) is calculated with the formula \u230aqi / (1 + d)\u230b, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\nReturn the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.\nNote:\n\nA coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either:\n\n\t\nx1 < x2, or\nx1 == x2 and y1 < y2.\n\n\n\u230aval\u230b is the greatest integer less than or equal to val (the floor function).\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:\n        mx = 0\n        ans = [0, 0]\n        for i in range(51):\n            for j in range(51):\n                t = 0\n                for x, y, q in towers:\n                    d = ((x - i) ** 2 + (y - j) ** 2) ** 0.5\n                    if d <= radius:\n                        t += floor(q / (1 + d))\n                if t > mx:\n                    mx = t\n                    ans = [i, j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2) == [2,1]\n    assert candidate(towers = [[23,11,21]], radius = 9) == [23,11]\n    assert candidate(towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2) == [1,2]\n\n\ncheck(Solution().bestCoordinate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def specialArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for x in range(1, len(nums) + 1):\n            cnt = sum(v >= x for v in nums)\n            if cnt == x:\n                return x\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,5]) == 2\n    assert candidate(nums = [0,0]) == -1\n    assert candidate(nums = [0,4,3,0,4]) == 3\n    assert candidate(nums = [3,6,7,7,0]) == -1\n\n\ncheck(Solution().specialArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA binary tree is named Even-Odd if it meets the following conditions:\n\nThe root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.\nFor every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).\nFor every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).\n\nGiven the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isEvenOddTree(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isEvenOddTree(self, root: Optional[TreeNode]) -> bool:\n        even = 1\n        q = deque([root])\n        while q:\n            prev = 0 if even else inf\n            for _ in range(len(q)):\n                root = q.popleft()\n                if even and (root.val % 2 == 0 or prev >= root.val):\n                    return False\n                if not even and (root.val % 2 == 1 or prev <= root.val):\n                    return False\n                prev = root.val\n                if root.left:\n                    q.append(root.left)\n                if root.right:\n                    q.append(root.right)\n            even ^= 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,10,4,3,None,7,9,12,8,6,None,None,2])) == True\n    assert candidate(root = tree_node([5,4,2,3,3,7])) == False\n    assert candidate(root = tree_node([5,9,1,3,5,7])) == False\n    assert candidate(root = tree_node([1])) == True\n    assert candidate(root = tree_node([11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17])) == True\n\n\ncheck(Solution().isEvenOddTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, you must transform it into 0 using the following operations any number of times:\n\nChange the rightmost (0th) bit in the binary representation of n.\nChange the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.\n\nReturn the minimum number of operations to transform n into 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOneBitOperations(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOneBitOperations(self, n: int) -> int:\n        ans = 0\n        while n:\n            ans ^= n\n            n >>= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 2\n    assert candidate(n = 6) == 4\n\n\ncheck(Solution().minimumOneBitOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.\nInitially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].\n\nYour browser does not support the video tag or this video format.\n\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\nReturn the maximum number of points you can see.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def visiblePoints(self, points: List[List[int]], angle: int, location: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def visiblePoints(\n        self, points: List[List[int]], angle: int, location: List[int]\n    ) -> int:\n        v = []\n        x, y = location\n        same = 0\n        for xi, yi in points:\n            if xi == x and yi == y:\n                same += 1\n            else:\n                v.append(atan2(yi - y, xi - x))\n        v.sort()\n        n = len(v)\n        v += [deg + 2 * pi for deg in v]\n        t = angle * pi / 180\n        mx = max((bisect_right(v, v[i] + t) - i for i in range(n)), default=0)\n        return mx + same\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]) == 3\n    assert candidate(points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]) == 4\n    assert candidate(points = [[1,0],[2,1]], angle = 13, location = [1,1]) == 1\n\n\ncheck(Solution().visiblePoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDepth(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxDepth(self, s: str) -> int:\n        ans = d = 0\n        for c in s:\n            if c == '(':\n                d += 1\n                ans = max(ans, d)\n            elif c == ')':\n                d -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(1+(2*3)+((8)/4))+1\") == 3\n    assert candidate(s = \"(1)+((2))+(((3)))\") == 3\n    assert candidate(s = \"()(())((()()))\") == 3\n\n\ncheck(Solution().maxDepth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.\nWhen you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = \"abc\", then \"\" + \"abc\", \"a\" + \"bc\", \"ab\" + \"c\" , and \"abc\" + \"\" are valid splits.\nReturn true if it is possible to form a palindrome string, otherwise return false.\nNotice that\u00a0x + y denotes the concatenation of strings x and y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkPalindromeFormation(self, a: str, b: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkPalindromeFormation(self, a: str, b: str) -> bool:\n        def check1(a: str, b: str) -> bool:\n            i, j = 0, len(b) - 1\n            while i < j and a[i] == b[j]:\n                i, j = i + 1, j - 1\n            return i >= j or check2(a, i, j) or check2(b, i, j)\n\n        def check2(a: str, i: int, j: int) -> bool:\n            return a[i : j + 1] == a[i : j + 1][::-1]\n\n        return check1(a, b) or check1(b, a)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"x\", b = \"y\") == True\n    assert candidate(a = \"abdef\", b = \"fecab\") == True\n    assert candidate(a = \"ulacfd\", b = \"jizalu\") == True\n\n\ncheck(Solution().checkPalindromeFormation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\nFor each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.\nReturn an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.\nNotice\u00a0that\u00a0the distance between the two cities is the number of edges in the path between them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countSubgraphsForEachDiameter(\n        self, n: int, edges: List[List[int]]\n    ) -> List[int]:\n        def dfs(u: int, d: int = 0):\n            nonlocal mx, nxt, msk\n            if mx < d:\n                mx, nxt = d, u\n            msk ^= 1 << u\n            for v in g[u]:\n                if msk >> v & 1:\n                    dfs(v, d + 1)\n\n        g = defaultdict(list)\n        for u, v in edges:\n            u, v = u - 1, v - 1\n            g[u].append(v)\n            g[v].append(u)\n        ans = [0] * (n - 1)\n        nxt = mx = 0\n        for mask in range(1, 1 << n):\n            if mask & (mask - 1) == 0:\n                continue\n            msk, mx = mask, 0\n            cur = msk.bit_length() - 1\n            dfs(cur)\n            if msk == 0:\n                msk, mx = mask, 0\n                dfs(nxt)\n                ans[mx - 1] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[1,2],[2,3],[2,4]]) == [3,4,0]\n    assert candidate(n = 2, edges = [[1,2]]) == [1]\n    assert candidate(n = 3, edges = [[1,2],[2,3]]) == [2,1]\n\n\ncheck(Solution().countSubgraphsForEachDiameter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def frequencySort(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def frequencySort(self, nums: List[int]) -> List[int]:\n        cnt = Counter(nums)\n        return sorted(nums, key=lambda x: (cnt[x], -x))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,2,2,2,3]) == [3,1,1,2,2,2]\n    assert candidate(nums = [2,3,1,3,2]) == [1,3,3,2,2]\n    assert candidate(nums = [-1,1,-6,4,5,-6,1,4,1]) == [5,-1,4,4,-6,-6,1,1,1]\n\n\ncheck(Solution().frequencySort)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven n points on a 2D plane where points[i] = [xi, yi], Return\u00a0the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n        points.sort()\n        return max(b[0] - a[0] for a, b in pairwise(points))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[8,7],[9,9],[7,4],[9,7]]) == 1\n    assert candidate(points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]) == 3\n\n\ncheck(Solution().maxWidthOfVerticalArea)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.\nFor example, the underlined substrings in \"computer\" and \"computation\" only differ by the 'e'/'a', so this is a valid way.\nReturn the number of substrings that satisfy the condition above.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubstrings(self, s: str, t: str) -> int:\n```",
        "solutions": "class Solution:\n    def countSubstrings(self, s: str, t: str) -> int:\n        ans = 0\n        m, n = len(s), len(t)\n        for i, a in enumerate(s):\n            for j, b in enumerate(t):\n                if a != b:\n                    l = r = 0\n                    while i > l and j > l and s[i - l - 1] == t[j - l - 1]:\n                        l += 1\n                    while (\n                        i + r + 1 < m and j + r + 1 < n and s[i + r + 1] == t[j + r + 1]\n                    ):\n                        r += 1\n                    ans += (l + 1) * (r + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aba\", t = \"baba\") == 6\n    assert candidate(s = \"ab\", t = \"bb\") == 3\n    assert candidate(s = \"a\", t = \"a\") == 0\n    assert candidate(s = \"abe\", t = \"bbc\") == 10\n\n\ncheck(Solution().countSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\n        d = {}\n        ans = -1\n        for i, c in enumerate(s):\n            if c in d:\n                ans = max(ans, i - d[c] - 1)\n            else:\n                d[c] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aa\") == 0\n    assert candidate(s = \"abca\") == 2\n    assert candidate(s = \"cbzxy\") == -1\n    assert candidate(s = \"cabbac\") == 4\n\n\ncheck(Solution().maxLengthBetweenEqualCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\nAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\nRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\n\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLexSmallestString(self, s: str, a: int, b: int) -> str:\n```",
        "solutions": "class Solution:\n    def findLexSmallestString(self, s: str, a: int, b: int) -> str:\n        q = deque([s])\n        vis = {s}\n        ans = s\n        while q:\n            s = q.popleft()\n            if ans > s:\n                ans = s\n            t1 = ''.join(\n                [str((int(c) + a) % 10) if i & 1 else c for i, c in enumerate(s)]\n            )\n            t2 = s[-b:] + s[:-b]\n            for t in (t1, t2):\n                if t not in vis:\n                    vis.add(t)\n                    q.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"5525\", a = 9, b = 2) == \"2050\"\n    assert candidate(s = \"74\", a = 5, b = 1) == \"24\"\n    assert candidate(s = \"0011\", a = 4, b = 2) == \"0011\"\n\n\ncheck(Solution().findLexSmallestString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.\nHowever, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.\nGiven two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n        arr = sorted(zip(scores, ages))\n        n = len(arr)\n        f = [0] * n\n        for i, (score, age) in enumerate(arr):\n            for j in range(i):\n                if age >= arr[j][1]:\n                    f[i] = max(f[i], f[j])\n            f[i] += score\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(scores = [1,3,5,10,15], ages = [1,2,3,4,5]) == 34\n    assert candidate(scores = [4,5,6,5], ages = [2,1,2,1]) == 16\n    assert candidate(scores = [1,2,3,5], ages = [8,9,10,1]) == 6\n\n\ncheck(Solution().bestTeamScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0,\u00a0and every subsequent key was pressed at the exact time the previous key was released.\nThe tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.\nReturn the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:\n```",
        "solutions": "class Solution:\n    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:\n        ans = keysPressed[0]\n        mx = releaseTimes[0]\n        for i in range(1, len(keysPressed)):\n            d = releaseTimes[i] - releaseTimes[i - 1]\n            if d > mx or (d == mx and ord(keysPressed[i]) > ord(ans)):\n                mx = d\n                ans = keysPressed[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(releaseTimes = [9,29,49,50], keysPressed = \"cbcd\") == \"c\"\n    assert candidate(releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\") == \"a\"\n\n\ncheck(Solution().slowestKey)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.\nFor example, these are arithmetic sequences:\n\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic:\n\n1, 1, 2, 5, 7\nYou are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.\nReturn a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def checkArithmeticSubarrays(\n        self, nums: List[int], l: List[int], r: List[int]\n    ) -> List[bool]:\n        def check(nums, l, r):\n            n = r - l + 1\n            s = set(nums[l : l + n])\n            a1, an = min(nums[l : l + n]), max(nums[l : l + n])\n            d, mod = divmod(an - a1, n - 1)\n            return mod == 0 and all((a1 + (i - 1) * d) in s for i in range(1, n))\n\n        return [check(nums, left, right) for left, right in zip(l, r)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]) == [True,False,True]\n    assert candidate(nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]) == [False,True,False,False,True,True]\n\n\ncheck(Solution().checkArithmeticSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e.,\u00a00-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n    def connected(self, a, b):\n        return self.find(a) == self.find(b)\n\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        uf = UnionFind(m * n)\n        e = []\n        dirs = (0, 1, 0)\n        for i in range(m):\n            for j in range(n):\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n:\n                        e.append(\n                            (abs(heights[i][j] - heights[x][y]), i * n + j, x * n + y)\n                        )\n        e.sort()\n        for h, a, b in e:\n            uf.union(a, b)\n            if uf.connected(0, m * n - 1):\n                return h\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [[1,2,2],[3,8,2],[5,3,5]]) == 2\n    assert candidate(heights = [[1,2,3],[3,8,4],[5,3,5]]) == 1\n    assert candidate(heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]) == 0\n\n\ncheck(Solution().minimumEffortPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code\u00a0of length of n\u00a0and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\n\nIf k > 0, replace the ith number with the sum of the next k numbers.\nIf k < 0, replace the ith number with the sum of the previous k numbers.\nIf k == 0, replace the ith number with 0.\n\nAs code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].\nGiven the circular array code and an integer key k, return the decrypted code to defuse the bomb!\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decrypt(self, code: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def decrypt(self, code: List[int], k: int) -> List[int]:\n        n = len(code)\n        ans = [0] * n\n        if k == 0:\n            return ans\n        for i in range(n):\n            if k > 0:\n                for j in range(i + 1, i + k + 1):\n                    ans[i] += code[j % n]\n            else:\n                for j in range(i + k, i):\n                    ans[i] += code[(j + n) % n]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(code = [5,7,1,4], k = 3) == [12,10,16,13]\n    assert candidate(code = [1,2,3,4], k = 0) == [0,0,0,0]\n    assert candidate(code = [2,4,9,3], k = -2) == [12,5,6,13]\n\n\ncheck(Solution().decrypt)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of characters 'a' and 'b'\u200b\u200b\u200b\u200b.\nYou can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.\nReturn the minimum number of deletions needed to make s balanced.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDeletions(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDeletions(self, s: str) -> int:\n        n = len(s)\n        f = [0] * (n + 1)\n        b = 0\n        for i, c in enumerate(s, 1):\n            if c == 'b':\n                f[i] = f[i - 1]\n                b += 1\n            else:\n                f[i] = min(f[i - 1] + 1, b)\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aababbab\") == 2\n    assert candidate(s = \"bbaaaaabb\") == 2\n\n\ncheck(Solution().minimumDeletions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA certain bug's home is on the x-axis at position x. Help them get there from position 0.\nThe bug jumps according to the following rules:\n\nIt can jump exactly a positions forward (to the right).\nIt can jump exactly b positions backward (to the left).\nIt cannot jump backward twice in a row.\nIt cannot jump to any forbidden positions.\n\nThe bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.\nGiven an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n        s = set(forbidden)\n        q = deque([(0, 1)])\n        vis = {(0, 1)}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                i, k = q.popleft()\n                if i == x:\n                    return ans\n                nxt = [(i + a, 1)]\n                if k & 1:\n                    nxt.append((i - b, 0))\n                for j, k in nxt:\n                    if 0 <= j < 6000 and j not in s and (j, k) not in vis:\n                        q.append((j, k))\n                        vis.add((j, k))\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9) == 3\n    assert candidate(forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11) == -1\n    assert candidate(forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7) == 2\n\n\ncheck(Solution().minimumJumps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that:\n\nThe ith customer gets exactly quantity[i] integers,\nThe integers the ith customer gets are all equal, and\nEvery customer is satisfied.\n\nReturn true if it is possible to distribute nums according to the above conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:\n        m = len(quantity)\n        s = [0] * (1 << m)\n        for i in range(1, 1 << m):\n            for j in range(m):\n                if i >> j & 1:\n                    s[i] = s[i ^ (1 << j)] + quantity[j]\n                    break\n        cnt = Counter(nums)\n        arr = list(cnt.values())\n        n = len(arr)\n        f = [[False] * (1 << m) for _ in range(n)]\n        for i in range(n):\n            f[i][0] = True\n        for i, x in enumerate(arr):\n            for j in range(1, 1 << m):\n                if i and f[i - 1][j]:\n                    f[i][j] = True\n                    continue\n                k = j\n                while k:\n                    ok1 = j == k if i == 0 else f[i - 1][j ^ k]\n                    ok2 = s[k] <= x\n                    if ok1 and ok2:\n                        f[i][j] = True\n                        break\n                    k = (k - 1) & j\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4], quantity = [2]) == False\n    assert candidate(nums = [1,2,3,3], quantity = [2]) == True\n    assert candidate(nums = [1,1,2,2], quantity = [2,2]) == True\n\n\ncheck(Solution().canDistribute)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].\nReturn true if it is possible to form the array arr from pieces. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:\n        i = 0\n        while i < len(arr):\n            k = 0\n            while k < len(pieces) and pieces[k][0] != arr[i]:\n                k += 1\n            if k == len(pieces):\n                return False\n            j = 0\n            while j < len(pieces[k]) and arr[i] == pieces[k][j]:\n                i, j = i + 1, j + 1\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [15,88], pieces = [[88],[15]]) == True\n    assert candidate(arr = [49,18,16], pieces = [[16,18,49]]) == False\n    assert candidate(arr = [91,4,64,78], pieces = [[78],[4,64],[91]]) == True\n\n\ncheck(Solution().canFormArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),\n\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\nIf the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.\n\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n```",
        "solutions": "class Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        h = []\n        for i, a in enumerate(heights[:-1]):\n            b = heights[i + 1]\n            d = b - a\n            if d > 0:\n                heappush(h, d)\n                if len(h) > ladders:\n                    bricks -= heappop(h)\n                    if bricks < 0:\n                        return i\n        return len(heights) - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1) == 4\n    assert candidate(heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2) == 7\n    assert candidate(heights = [14,3,19,3], bricks = 17, ladders = 0) == 3\n\n\ncheck(Solution().furthestBuilding)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFor a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiven strings sequence and word, return the maximum k-repeating value of word in sequence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxRepeating(self, sequence: str, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def maxRepeating(self, sequence: str, word: str) -> int:\n        for k in range(len(sequence) // len(word), -1, -1):\n            if word * k in sequence:\n                return k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sequence = \"ababc\", word = \"ab\") == 2\n    assert candidate(sequence = \"ababc\", word = \"ba\") == 1\n    assert candidate(sequence = \"ababc\", word = \"ac\") == 0\n\n\ncheck(Solution().maxRepeating)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou may recall that an array arr is a mountain array if and only if:\n\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\n\nGiven an integer array nums\u200b\u200b\u200b, return the minimum number of elements to remove to make nums\u200b\u200b\u200b a mountain array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumMountainRemovals(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumMountainRemovals(self, nums: List[int]) -> int:\n        n = len(nums)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    left[i] = max(left[i], left[j] + 1)\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if nums[i] > nums[j]:\n                    right[i] = max(right[i], right[j] + 1)\n        return n - max(a + b - 1 for a, b in zip(left, right) if a > 1 and b > 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,1]) == 0\n    assert candidate(nums = [2,1,1,5,6,2,3,1]) == 3\n\n\ncheck(Solution().minimumMountainRemovals)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:\n\nnums[0] = 0\nnums[1] = 1\nnums[2 * i] = nums[i] when 2 <= 2 * i <= n\nnums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n\n\nReturn the maximum integer in the array nums\u200b\u200b\u200b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n        if n < 2:\n            return n\n        nums = [0] * (n + 1)\n        nums[1] = 1\n        for i in range(2, n + 1):\n            nums[i] = nums[i >> 1] if i % 2 == 0 else nums[i >> 1] + nums[(i >> 1) + 1]\n        return max(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7) == 3\n    assert candidate(n = 2) == 1\n    assert candidate(n = 3) == 2\n\n\ncheck(Solution().getMaximumGenerated)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string s is called good if there are no two different characters in s that have the same frequency.\nGiven a string s, return the minimum number of characters you need to delete to make s good.\nThe frequency of a character in a string is the number of times it appears in the string. For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, pre = 0, inf\n        for v in sorted(cnt.values(), reverse=True):\n            if pre == 0:\n                ans += v\n            elif v >= pre:\n                ans += v - pre + 1\n                pre -= 1\n            else:\n                pre = v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aab\") == 0\n    assert candidate(s = \"aaabbbcc\") == 2\n    assert candidate(s = \"ceabaacb\") == 2\n\n\ncheck(Solution().minDeletions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have an inventory of different colored balls, and there is a customer that wants orders balls of any color.\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color\u00a0you currently have in your inventory. For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).\nYou are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.\nReturn the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProfit(self, inventory: List[int], orders: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxProfit(self, inventory: List[int], orders: int) -> int:\n        inventory.sort(reverse=True)\n        mod = 10**9 + 7\n        ans = i = 0\n        n = len(inventory)\n        while orders > 0:\n            while i < n and inventory[i] >= inventory[0]:\n                i += 1\n            nxt = 0\n            if i < n:\n                nxt = inventory[i]\n            cnt = i\n            x = inventory[0] - nxt\n            tot = cnt * x\n            if tot > orders:\n                decr = orders // cnt\n                a1, an = inventory[0] - decr + 1, inventory[0]\n                ans += (a1 + an) * decr // 2 * cnt\n                ans += (inventory[0] - decr) * (orders % cnt)\n            else:\n                a1, an = nxt + 1, inventory[0]\n                ans += (a1 + an) * x // 2 * cnt\n                inventory[0] = nxt\n            orders -= tot\n            ans %= mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(inventory = [2,5], orders = 4) == 14\n    assert candidate(inventory = [3,5], orders = 6) == 19\n    assert candidate(inventory = [2,8,4,10,6], orders = 20) == 110\n    assert candidate(inventory = [1000000000], orders = 1000000000) == 21\n\n\ncheck(Solution().maxProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:\n\nThe number of elements currently in nums that are strictly less than instructions[i].\nThe number of elements currently in nums that are strictly greater than instructions[i].\n\nFor example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].\nReturn the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        m = max(instructions)\n        tree = BinaryIndexedTree(m)\n        ans = 0\n        mod = 10**9 + 7\n        for i, x in enumerate(instructions):\n            cost = min(tree.query(x - 1), i - tree.query(x))\n            ans += cost\n            tree.update(x, 1)\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(instructions = [1,5,6,2]) == 1\n    assert candidate(instructions = [1,2,3,6,5,4]) == 3\n    assert candidate(instructions = [1,3,3,3,2,4,2,1,2]) == 4\n\n\ncheck(Solution().createSortedArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.\nReturn the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        s = sum(nums) - x\n        vis = {0: -1}\n        mx, t = -1, 0\n        for i, v in enumerate(nums):\n            t += v\n            if t not in vis:\n                vis[t] = i\n            if t - s in vis:\n                mx = max(mx, i - vis[t - s])\n        return -1 if mx == -1 else len(nums) - mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,4,2,3], x = 5) == 2\n    assert candidate(nums = [5,6,7,8,9], x = 4) == -1\n    assert candidate(nums = [3,2,20,1,1,3], x = 10) == 5\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nTwo strings are considered close if you can attain one from the other using the following operations:\n\nOperation 1: Swap any two existing characters.\n\n\t\nFor example, abcde -> aecdb\n\n\nOperation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.\n\t\nFor example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)\n\n\n\nYou can use the operations on either string as many times as necessary.\nGiven two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:\n        cnt1, cnt2 = Counter(word1), Counter(word2)\n        return sorted(cnt1.values()) == sorted(cnt2.values()) and set(\n            cnt1.keys()\n        ) == set(cnt2.keys())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"abc\", word2 = \"bca\") == True\n    assert candidate(word1 = \"a\", word2 = \"aa\") == False\n    assert candidate(word1 = \"cabbba\", word2 = \"abbccc\") == True\n\n\ncheck(Solution().closeStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:\n        return ''.join(word1) == ''.join(word2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]) == True\n    assert candidate(word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]) == False\n    assert candidate(word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]) == True\n\n\ncheck(Solution().arrayStringsAreEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.\nThe numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string \"abe\" is equal to 1 + 2 + 5 = 8.\nYou are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 27) == \"aay\"\n    assert candidate(n = 5, k = 73) == \"aaszz\"\n\n\ncheck(Solution().getSmallestString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array\u00a0nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.\nFor example, if nums = [6,1,7,4,1]:\n\nChoosing to remove index 1 results in nums = [6,7,4,1].\nChoosing to remove index 2 results in nums = [6,1,4,1].\nChoosing to remove index 4 results in nums = [6,1,7,4].\n\nAn array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.\nReturn the number of indices that you could choose such that after the removal, nums is fair. \n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToMakeFair(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def waysToMakeFair(self, nums: List[int]) -> int:\n        s1, s2 = sum(nums[::2]), sum(nums[1::2])\n        ans = t1 = t2 = 0\n        for i, v in enumerate(nums):\n            ans += i % 2 == 0 and t2 + s1 - t1 - v == t1 + s2 - t2\n            ans += i % 2 == 1 and t2 + s1 - t1 == t1 + s2 - t2 - v\n            t1 += v if i % 2 == 0 else 0\n            t2 += v if i % 2 == 1 else 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,6,4]) == 1\n    assert candidate(nums = [1,1,1]) == 3\n    assert candidate(nums = [1,2,3]) == 0\n\n\ncheck(Solution().waysToMakeFair)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array tasks where tasks[i] = [actuali, minimumi]:\n\nactuali is the actual amount of energy you spend to finish the ith task.\nminimumi is the minimum amount of energy you require to begin the ith task.\n\nFor example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.\nYou can finish the tasks in any order you like.\nReturn the minimum initial amount of energy you will need to finish all the tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        ans = cur = 0\n        for a, m in sorted(tasks, key=lambda x: x[0] - x[1]):\n            if cur < m:\n                ans += m - cur\n                cur = m\n            cur -= a\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [[1,2],[2,4],[4,8]]) == 8\n    assert candidate(tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]) == 32\n    assert candidate(tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]) == 27\n\n\ncheck(Solution().minimumEffort)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        s = set(allowed)\n        return sum(all(c in s for c in w) for w in words)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]) == 2\n    assert candidate(allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]) == 7\n    assert candidate(allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]) == 4\n\n\ncheck(Solution().countConsistentStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums sorted in non-decreasing order.\nBuild and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.\nIn other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:\n        ans = []\n        s, t = sum(nums), 0\n        for i, x in enumerate(nums):\n            v = x * i - t + s - t - x * (len(nums) - i)\n            ans.append(v)\n            t += x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,5]) == [4,3,5]\n    assert candidate(nums = [1,4,6,8,10]) == [24,15,13,15,21]\n\n\ncheck(Solution().getSumAbsoluteDifferences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.\u00a0Both players know the other's values.\nDetermine the result of the game, and:\n\nIf Alice wins, return 1.\nIf Bob wins, return -1.\nIf the game results in a draw, return 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:\n        vals = [(a + b, i) for i, (a, b) in enumerate(zip(aliceValues, bobValues))]\n        vals.sort(reverse=True)\n        a = sum(aliceValues[i] for _, i in vals[::2])\n        b = sum(bobValues[i] for _, i in vals[1::2])\n        if a > b:\n            return 1\n        if a < b:\n            return -1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(aliceValues = [1,3], bobValues = [2,1]) == 1\n    assert candidate(aliceValues = [1,2], bobValues = [3,1]) == 0\n    assert candidate(aliceValues = [2,4,3], bobValues = [1,6,7]) == -1\n\n\ncheck(Solution().stoneGameVI)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b customer has in the j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b bank. Return the wealth that the richest customer has.\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(sum(v) for v in accounts)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(accounts = [[1,2,3],[3,2,1]]) == 6\n    assert candidate(accounts = [[1,5],[7,3],[3,5]]) == 10\n    assert candidate(accounts = [[2,8,7],[7,1,3],[1,9,5]]) == 17\n\n\ncheck(Solution().maximumWealth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\nWe define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        stk = []\n        n = len(nums)\n        for i, v in enumerate(nums):\n            while stk and stk[-1] > v and len(stk) + n - i > k:\n                stk.pop()\n            if len(stk) < k:\n                stk.append(v)\n        return stk\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,5,2,6], k = 2) == [2,6]\n    assert candidate(nums = [2,4,3,3,5,4,9,6], k = 4) == [2,3,3,4]\n\n\ncheck(Solution().mostCompetitive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMoves(self, nums: List[int], limit: int) -> int:\n```",
        "solutions": "class Solution:\n    def minMoves(self, nums: List[int], limit: int) -> int:\n        d = [0] * (limit * 2 + 2)\n        n = len(nums)\n\n        for i in range(n >> 1):\n            a, b = min(nums[i], nums[n - i - 1]), max(nums[i], nums[n - i - 1])\n\n            d[2] += 2\n            d[limit * 2 + 1] -= 2\n\n            d[a + 1] -= 1\n            d[b + limit + 1] += 1\n\n            d[a + b] -= 1\n            d[a + b + 1] += 1\n\n        ans, s = n, 0\n        for v in d[2 : limit * 2 + 1]:\n            s += v\n            if ans > s:\n                ans = s\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,4,3], limit = 4) == 1\n    assert candidate(nums = [1,2,2,1], limit = 2) == 2\n    assert candidate(nums = [1,2,1,2], limit = 2) == 0\n\n\ncheck(Solution().minMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums of n positive integers.\nYou can perform two types of operations on any element of the array any number of times:\n\nIf the element is even, divide it by 2.\n\n\t\nFor example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].\n\n\nIf the element is odd, multiply it by 2.\n\t\nFor example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].\n\n\n\nThe deviation of the array is the maximum difference between any two elements in the array.\nReturn the minimum deviation the array can have after performing some number of operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n        h = []\n        mi = inf\n        for v in nums:\n            if v & 1:\n                v <<= 1\n            h.append(-v)\n            mi = min(mi, v)\n        heapify(h)\n        ans = -h[0] - mi\n        while h[0] % 2 == 0:\n            x = heappop(h) // 2\n            heappush(h, x)\n            mi = min(mi, -x)\n            ans = min(ans, -h[0] - mi)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == 1\n    assert candidate(nums = [4,1,5,20,3]) == 3\n    assert candidate(nums = [2,10,8]) == 3\n\n\ncheck(Solution().minimumDeviation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def interpret(self, command: str) -> str:\n```",
        "solutions": "class Solution:\n    def interpret(self, command: str) -> str:\n        return command.replace('()', 'o').replace('(al)', 'al')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(command = \"G()(al)\") == \"Goal\"\n    assert candidate(command = \"G()()()()(al)\") == \"Gooooal\"\n    assert candidate(command = \"(al)G(al)()()G\") == \"alGalooG\"\n\n\ncheck(Solution().interpret)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.\nReturn the maximum number of operations you can perform on the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        l, r, ans = 0, len(nums) - 1, 0\n        while l < r:\n            s = nums[l] + nums[r]\n            if s == k:\n                ans += 1\n                l, r = l + 1, r - 1\n            elif s > k:\n                r -= 1\n            else:\n                l += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4], k = 5) == 2\n    assert candidate(nums = [3,1,3,4,3], k = 6) == 1\n\n\ncheck(Solution().maxOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def concatenatedBinary(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def concatenatedBinary(self, n: int) -> int:\n        mod = 10**9 + 7\n        ans = 0\n        for i in range(1, n + 1):\n            ans = (ans << i.bit_length() | i) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 1\n    assert candidate(n = 3) == 27\n    assert candidate(n = 12) == 505379714\n\n\ncheck(Solution().concatenatedBinary)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\n\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave it and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i\u200b\u200b\u200b\u200b\u200b\u200bth sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j\u200b\u200b\u200b\u200b\u200b\u200bth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:\n        cnt = Counter(students)\n        for v in sandwiches:\n            if cnt[v] == 0:\n                return cnt[v ^ 1]\n            cnt[v] -= 1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(students = [1,1,0,0], sandwiches = [0,1,0,1]) == 0 \n    assert candidate(students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]) == 3\n\n\ncheck(Solution().countStudents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:\n\narrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order.\ntimei is the time needed to prepare the order of the ith customer.\n\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.\nReturn the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def averageWaitingTime(self, customers: List[List[int]]) -> float:\n```",
        "solutions": "class Solution:\n    def averageWaitingTime(self, customers: List[List[int]]) -> float:\n        tot = t = 0\n        for a, b in customers:\n            t = max(t, a) + b\n            tot += t - a\n        return tot / len(customers)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(customers = [[1,2],[2,5],[4,3]]) == 5.00000\n    assert candidate(customers = [[5,2],[5,4],[10,3],[20,1]]) == 3.25000\n\n\ncheck(Solution().averageWaitingTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:\n\nOperation 1: If the number contains the substring \"00\", you can replace it with \"10\".\n\n\t\nFor example, \"00010\" -> \"10010\"\n\n\nOperation 2: If the number contains the substring \"10\", you can replace it with \"01\".\n\t\nFor example, \"00010\" -> \"00001\"\n\n\n\nReturn the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBinaryString(self, binary: str) -> str:\n```",
        "solutions": "class Solution:\n    def maximumBinaryString(self, binary: str) -> str:\n        k = binary.find('0')\n        if k == -1:\n            return binary\n        k += binary[k + 1 :].count('0')\n        return '1' * k + '0' + '1' * (len(binary) - k - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(binary = \"000110\") == \"111011\"\n    assert candidate(binary = \"01\") == \"01\"\n\n\ncheck(Solution().maximumBinaryString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n, the number of teams in a tournament that has strange rules:\n\nIf the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.\nIf the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.\n\nReturn the number of matches played in the tournament until a winner is decided.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfMatches(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfMatches(self, n: int) -> int:\n        return n - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7) == 6\n    assert candidate(n = 14) == 13\n\n\ncheck(Solution().numberOfMatches)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.\nGiven a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minPartitions(self, n: str) -> int:\n```",
        "solutions": "class Solution:\n    def minPartitions(self, n: str) -> int:\n        return int(max(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = \"32\") == 3\n    assert candidate(n = \"82734\") == 8\n    assert candidate(n = \"27346209830709182346\") == 9\n\n\ncheck(Solution().minPartitions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums consisting of n non-negative integers.\nYou are also given an array queries, where queries[i] = [xi, yi]. The answer to the ith query is the sum of all nums[j] where xi <= j < n and (j - xi) is divisible by yi.\nReturn an array answer where answer.length == queries.length and answer[i] is the answer to the ith query modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def solve(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def solve(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        mod = 10**9 + 7\n        n = len(nums)\n        m = int(sqrt(n))\n        suf = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(n - 1, -1, -1):\n                suf[i][j] = suf[i][min(n, j + i)] + nums[j]\n        ans = []\n        for x, y in queries:\n            if y <= m:\n                ans.append(suf[y][x] % mod)\n            else:\n                ans.append(sum(nums[x::y]) % mod)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,3,4,5,6,7], queries = [[0,3],[5,1],[4,2]]) == [9,18,10]\n    assert candidate(nums = [100,200,101,201,102,202,103,203], queries = [[0,7]]) == [303]\n\n\ncheck(Solution().solve)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n\n2 digits: A single block of length 2.\n3 digits: A single block of length 3.\n4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reformatNumber(self, number: str) -> str:\n```",
        "solutions": "class Solution:\n    def reformatNumber(self, number: str) -> str:\n        number = number.replace(\"-\", \"\").replace(\" \", \"\")\n        n = len(number)\n        ans = [number[i * 3 : i * 3 + 3] for i in range(n // 3)]\n        if n % 3 == 1:\n            ans[-1] = ans[-1][:2]\n            ans.append(number[-2:])\n        elif n % 3 == 2:\n            ans.append(number[-2:])\n        return \"-\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(number = \"1-23-45 6\") == \"123-456\"\n    assert candidate(number = \"123 4-567\") == \"123-45-67\"\n    assert candidate(number = \"123 4-5678\") == \"123-456-78\"\n    assert candidate(number = \"12\") == \"12\"\n    assert candidate(number = \"--17-5 229 35-39475 \") == \"175-229-353-94-75\"\n\n\ncheck(Solution().reformatNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer k.\nYou are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.\nYou want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.\nReturn the maximum score you can get.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        f = [0] * n\n        q = deque([0])\n        for i in range(n):\n            if i - q[0] > k:\n                q.popleft()\n            f[i] = nums[i] + f[q[0]]\n            while q and f[q[-1]] <= f[i]:\n                q.pop()\n            q.append(i)\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-1,-2,4,-7,3], k = 2) == 7\n    assert candidate(nums = [10,-5,-2,4,0,3], k = 3) == 17\n    assert candidate(nums = [1,-5,-20,4,-1,3,-6,-3], k = 2) == 0\n\n\ncheck(Solution().maxResult)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def distanceLimitedPathsExist(\n        self, n: int, edgeList: List[List[int]], queries: List[List[int]]\n    ) -> List[bool]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(n))\n        edgeList.sort(key=lambda x: x[2])\n        j = 0\n        ans = [False] * len(queries)\n        for i, (a, b, limit) in sorted(enumerate(queries), key=lambda x: x[1][2]):\n            while j < len(edgeList) and edgeList[j][2] < limit:\n                u, v, _ = edgeList[j]\n                p[find(u)] = find(v)\n                j += 1\n            ans[i] = find(a) == find(b)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]) == [False,True]\n    assert candidate(n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]) == [True,False]\n\n\ncheck(Solution().distanceLimitedPathsExist)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nHercy wants to save money for his first car. He puts money in the Leetcode\u00a0bank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday. \nGiven n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalMoney(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def totalMoney(self, n: int) -> int:\n        a, b = divmod(n, 7)\n        return (28 + 28 + 7 * (a - 1)) * a // 2 + (a * 2 + b + 1) * b // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == 10\n    assert candidate(n = 10) == 37\n    assert candidate(n = 20) == 96\n\n\ncheck(Solution().totalMoney)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and two integers x and y. You can perform two types of operations any number of times.\n\nRemove substring \"ab\" and gain x points.\n\n\t\nFor example, when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\".\n\n\nRemove substring \"ba\" and gain y points.\n\t\nFor example, when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\".\n\n\n\nReturn the maximum points you can gain after applying the above operations on s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n        if x < y:\n            return self.maximumGain(s[::-1], y, x)\n        ans = 0\n        stk1, stk2 = [], []\n        for c in s:\n            if c != 'b':\n                stk1.append(c)\n            else:\n                if stk1 and stk1[-1] == 'a':\n                    stk1.pop()\n                    ans += x\n                else:\n                    stk1.append(c)\n        while stk1:\n            c = stk1.pop()\n            if c != 'b':\n                stk2.append(c)\n            else:\n                if stk2 and stk2[-1] == 'a':\n                    stk2.pop()\n                    ans += y\n                else:\n                    stk2.append(c)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"cdbcbbaaabab\", x = 4, y = 5) == 19\n    assert candidate(s = \"aabbaaxybbaabb\", x = 5, y = 4) == 20\n\n\ncheck(Solution().maximumGain)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, find a sequence that satisfies all of the following:\n\nThe integer 1 occurs once in the sequence.\nEach integer between 2 and n occurs twice in the sequence.\nFor every integer i between 2 and n, the distance between the two occurrences of i is exactly i.\n\nThe distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.\nReturn the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. \nA sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = 0\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = 0, 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = 0, 1\n            return False\n\n        path = [0] * (n * 2)\n        cnt = [2] * (n * 2)\n        cnt[1] = 1\n        dfs(1)\n        return path[1:]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == [3,1,2,3,2]\n    assert candidate(n = 5) == [5,3,1,4,3,5,2,4,2]\n\n\ncheck(Solution().constructDistancedSequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array pairs, where pairs[i] = [xi, yi], and:\n\nThere are no duplicates.\nxi < yi\n\nLet ways be the number of rooted trees that satisfy the following conditions:\n\nThe tree consists of nodes whose values appeared in pairs.\nA pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.\nNote: the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:\n\n0 if ways == 0\n1 if ways == 1\n2 if ways > 1\n\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n        g = [[False] * 510 for _ in range(510)]\n        v = defaultdict(list)\n        for x, y in pairs:\n            g[x][y] = g[y][x] = True\n            v[x].append(y)\n            v[y].append(x)\n        nodes = []\n        for i in range(510):\n            if v[i]:\n                nodes.append(i)\n                g[i][i] = True\n        nodes.sort(key=lambda x: len(v[x]))\n        equal = False\n        root = 0\n        for i, x in enumerate(nodes):\n            j = i + 1\n            while j < len(nodes) and not g[x][nodes[j]]:\n                j += 1\n            if j < len(nodes):\n                y = nodes[j]\n                if len(v[x]) == len(v[y]):\n                    equal = True\n                for z in v[x]:\n                    if not g[y][z]:\n                        return 0\n            else:\n                root += 1\n        if root > 1:\n            return 0\n        return 2 if equal else 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pairs = [[1,2],[2,3]]) == 1\n    assert candidate(pairs = [[1,2],[2,3],[1,3]]) == 2\n    assert candidate(pairs = [[1,2],[2,3],[2,4],[1,5]]) == 0\n\n\ncheck(Solution().checkWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.\nReturn true if a and b are alike. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def halvesAreAlike(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def halvesAreAlike(self, s: str) -> bool:\n        cnt, n = 0, len(s) >> 1\n        vowels = set('aeiouAEIOU')\n        for i in range(n):\n            cnt += s[i] in vowels\n            cnt -= s[i + n] in vowels\n        return cnt == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"book\") == True\n    assert candidate(s = \"textbook\") == False\n\n\ncheck(Solution().halvesAreAlike)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.\nYou decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.\nGiven two integer arrays days and apples of length n, return the maximum number of apples you can eat.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n        n = len(days)\n        i = ans = 0\n        q = []\n        while i < n or q:\n            if i < n and apples[i]:\n                heappush(q, (i + days[i] - 1, apples[i]))\n            while q and q[0][0] < i:\n                heappop(q)\n            if q:\n                t, v = heappop(q)\n                v -= 1\n                ans += 1\n                if v and t > i:\n                    heappush(q, (t, v))\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(apples = [1,2,3,5,2], days = [3,2,1,4,2]) == 7\n    assert candidate(apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]) == 5\n\n\ncheck(Solution().eatenApples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\nThere are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\nReturn the minimum possible maximum working time of any assignment. \n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n        def dfs(i):\n            nonlocal ans\n            if i == len(jobs):\n                ans = min(ans, max(cnt))\n                return\n            for j in range(k):\n                if cnt[j] + jobs[i] >= ans:\n                    continue\n                cnt[j] += jobs[i]\n                dfs(i + 1)\n                cnt[j] -= jobs[i]\n                if cnt[j] == 0:\n                    break\n\n        cnt = [0] * k\n        jobs.sort(reverse=True)\n        ans = inf\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(jobs = [3,2,3], k = 3) == 3\n    assert candidate(jobs = [1,2,4,7,8], k = 2) == 11\n\n\ncheck(Solution().minimumTimeRequired)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].\nThe answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.\nReturn an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Trie:\n    __slots__ = [\"children\"]\n\n    def __init__(self):\n        self.children = [None] * 2\n\n    def insert(self, x: int):\n        node = self\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1]:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            elif node.children[v]:\n                node = node.children[v]\n            else:\n                return -1\n        return ans\n\n\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        trie = Trie()\n        nums.sort()\n        j, n = 0, len(queries)\n        ans = [-1] * n\n        for i, (x, m) in sorted(zip(range(n), queries), key=lambda x: x[1][1]):\n            while j < len(nums) and nums[j] <= m:\n                trie.insert(nums[j])\n                j += 1\n            ans[i] = trie.search(x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]) == [3,3,7]\n    assert candidate(nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]) == [15,-1,5]\n\n\ncheck(Solution().maximizeXor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n unique candies (labeled 1 through n) and k bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.\nThere can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\nFor example, (1), (2,3) and (2), (1,3) are considered different because candies 2 and 3 in the bag (2,3) in the first way are not in the same bag in the second way (they are split between the bags (2) and (1,3)). However, (1), (2,3) and (3,2), (1) are considered the same because the candies in each bag are all in the same bags in both ways.\nGiven two integers, n and k, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToDistribute(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def waysToDistribute(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[i][j] = (f[i - 1][j] * j + f[i - 1][j - 1]) % mod\n        return f[n][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 2) == 3\n    assert candidate(n = 4, k = 2) == 7\n    assert candidate(n = 20, k = 5) == 206085257\n\n\ncheck(Solution().waysToDistribute)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\n\nnumberOfBoxesi is the number of boxes of type i.\nnumberOfUnitsPerBoxi is the number of units in each box of the type i.\n\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        ans = 0\n        for a, b in sorted(boxTypes, key=lambda x: -x[1]):\n            ans += b * min(truckSize, a)\n            truckSize -= a\n            if truckSize <= 0:\n                break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4) == 8\n    assert candidate(boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10) == 91\n\n\ncheck(Solution().maximumUnits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\nYou can pick any two different foods to make a good meal.\nGiven an array of integers deliciousness where deliciousness[i] is the deliciousness of the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo 109 + 7.\nNote that items with different indices are considered different even if they have the same deliciousness value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, deliciousness: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, deliciousness: List[int]) -> int:\n        mod = 10**9 + 7\n        mx = max(deliciousness) << 1\n        cnt = Counter()\n        ans = 0\n        for d in deliciousness:\n            s = 1\n            while s <= mx:\n                ans = (ans + cnt[s - d]) % mod\n                s <<= 1\n            cnt[d] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(deliciousness = [1,3,5,7,9]) == 4\n    assert candidate(deliciousness = [1,1,1,3,3,3,7]) == 15\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA split of an integer array is good if:\n\nThe array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.\nThe sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.\n\nGiven nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToSplit(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def waysToSplit(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        s = list(accumulate(nums))\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            j = bisect_left(s, s[i] << 1, i + 1, n - 1)\n            k = bisect_right(s, (s[-1] + s[i]) >> 1, j, n - 1)\n            ans += k - j\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1]) == 1\n    assert candidate(nums = [1,2,2,2,5,0]) == 3\n    assert candidate(nums = [3,2,1]) == 0\n\n\ncheck(Solution().waysToSplit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array target that consists of distinct integers and another integer array arr that can have duplicates.\nIn one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.\nReturn the minimum number of operations needed to make target a subsequence of arr.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, target: List[int], arr: List[int]) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, val):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], val)\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def minOperations(self, target: List[int], arr: List[int]) -> int:\n        d = {v: i for i, v in enumerate(target)}\n        nums = [d[v] for v in arr if v in d]\n        return len(target) - self.lengthOfLIS(nums)\n\n    def lengthOfLIS(self, nums):\n        s = sorted(set(nums))\n        m = {v: i for i, v in enumerate(s, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = 0\n        for v in nums:\n            x = m[v]\n            t = tree.query(x - 1) + 1\n            ans = max(ans, t)\n            tree.update(x, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = [5,1,3], arr = [9,4,2,3,4]) == 2\n    assert candidate(target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]) == 3\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.\nYou are given an integer n, an array languages, and an array friendships where:\n\nThere are n languages numbered 1 through n,\nlanguages[i] is the set of languages the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b user knows, and\nfriendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi] denotes a friendship between the users u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b\u200b\u200b and vi.\n\nYou can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.\nNote that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTeachings(\n        self, n: int, languages: List[List[int]], friendships: List[List[int]]\n    ) -> int:\n        def check(u, v):\n            for x in languages[u - 1]:\n                for y in languages[v - 1]:\n                    if x == y:\n                        return True\n            return False\n\n        s = set()\n        for u, v in friendships:\n            if not check(u, v):\n                s.add(u)\n                s.add(v)\n        cnt = Counter()\n        for u in s:\n            for l in languages[u - 1]:\n                cnt[l] += 1\n        return len(s) - max(cnt.values(), default=0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]) == 1\n    assert candidate(n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]) == 2\n\n\ncheck(Solution().minimumTeachings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n        n = len(encoded) + 1\n        a = b = 0\n        for i in range(0, n - 1, 2):\n            a ^= encoded[i]\n        for i in range(1, n + 1):\n            b ^= i\n        perm = [0] * n\n        perm[-1] = a ^ b\n        for i in range(n - 2, -1, -1):\n            perm[i] = encoded[i] ^ perm[i + 1]\n        return perm\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(encoded = [3,1]) == [1,2,3]\n    assert candidate(encoded = [6,5,4,6]) == [2,4,1,5,3]\n\n\ncheck(Solution().decode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of distinct substrings of\u00a0s.\nA substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDistinct(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countDistinct(self, s: str) -> int:\n        n = len(s)\n        return len({s[i:j] for i in range(n) for j in range(i + 1, n + 1)})\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabbaba\") == 21\n    assert candidate(s = \"abcdefg\") == 28\n\n\ncheck(Solution().countDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a hidden integer array arr that consists of n non-negative integers.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].\nYou are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].\nReturn the original array arr. It can be proved that the answer exists and is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        ans = [first]\n        for e in encoded:\n            ans.append(ans[-1] ^ e)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(encoded = [1,2,3], first = 1) == [1,0,2,1]\n    assert candidate(encoded = [6,2,7,3], first = 4) == [4,2,0,7,4]\n\n\ncheck(Solution().decode)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.\nThe Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).\nReturn the minimum Hamming distance of source and target after performing any amount of swap operations on array source.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumHammingDistance(\n        self, source: List[int], target: List[int], allowedSwaps: List[List[int]]\n    ) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = defaultdict(Counter)\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] += 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] -= 1\n            ans += cnt[j][x] < 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]) == 1\n    assert candidate(source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []) == 2\n    assert candidate(source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]) == 0\n\n\ncheck(Solution().minimumHammingDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\nYou can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\nLet maxLen be the side length of the largest square you can obtain from any of the given rectangles.\nReturn the number of rectangles that can make a square with a side length of maxLen.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:\n        ans = mx = 0\n        for l, w in rectangles:\n            x = min(l, w)\n            if mx < x:\n                ans = 1\n                mx = x\n            elif mx == x:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rectangles = [[5,8],[3,9],[5,12],[16,5]]) == 3\n    assert candidate(rectangles = [[2,3],[3,7],[4,3],[3,7]]) == 3\n\n\ncheck(Solution().countGoodRectangles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBalls(self, lowLimit: int, highLimit: int) -> int:\n```",
        "solutions": "class Solution:\n    def countBalls(self, lowLimit: int, highLimit: int) -> int:\n        cnt = [0] * 50\n        for x in range(lowLimit, highLimit + 1):\n            y = 0\n            while x:\n                y += x % 10\n                x //= 10\n            cnt[y] += 1\n        return max(cnt)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(lowLimit = 1, highLimit = 10) == 2\n    assert candidate(lowLimit = 5, highLimit = 15) == 2\n    assert candidate(lowLimit = 19, highLimit = 28) == 2\n\n\ncheck(Solution().countBalls)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.\nReturn the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestSubmatrix(self, matrix: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largestSubmatrix(self, matrix: List[List[int]]) -> int:\n        for i in range(1, len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]:\n                    matrix[i][j] = matrix[i - 1][j] + 1\n        ans = 0\n        for row in matrix:\n            row.sort(reverse=True)\n            for j, v in enumerate(row, 1):\n                ans = max(ans, j * v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[0,0,1],[1,1,1],[1,0,1]]) == 4\n    assert candidate(matrix = [[1,0,1,0,1]]) == 3\n    assert candidate(matrix = [[1,1,0],[1,0,1]]) == 2\n    assert candidate(matrix = [[0,0],[0,0]]) == 0\n\n\ncheck(Solution().largestSubmatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn array A is larger than some array B if for the first index i where A[i] != B[i], A[i] > B[i].\nFor example, consider 0-indexing:\n\n[1,3,2,4] > [1,2,2,4], since at index 1, 3 > 2.\n[1,4,4,4] < [2,1,1,1], since at index 0, 1 < 2.\n\nA subarray is a contiguous subsequence of the array.\nGiven an integer array nums of distinct integers, return the largest subarray of nums of length k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestSubarray(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def largestSubarray(self, nums: List[int], k: int) -> List[int]:\n        i = nums.index(max(nums[: len(nums) - k + 1]))\n        return nums[i : i + k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,5,2,3], k = 3) == [5,2,3]\n    assert candidate(nums = [1,4,5,2,3], k = 4) == [4,5,2,3]\n    assert candidate(nums = [1,4,5,2,3], k = 1) == [5]\n\n\ncheck(Solution().largestSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        return sum(x for x, v in cnt.items() if v == 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,2]) == 4\n    assert candidate(nums = [1,1,1,1,1]) == 0\n    assert candidate(nums = [1,2,3,4,5]) == 15\n\n\ncheck(Solution().sumOfUnique)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).\nReturn the maximum absolute sum of any (possibly empty) subarray of nums.\nNote that abs(x) is defined as follows:\n\nIf x is a negative integer, then abs(x) = -x.\nIf x is a non-negative integer, then abs(x) = x.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxAbsoluteSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxAbsoluteSum(self, nums: List[int]) -> int:\n        f = g = 0\n        ans = 0\n        for x in nums:\n            f = max(f, 0) + x\n            g = min(g, 0) + x\n            ans = max(ans, f, abs(g))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-3,2,3,-4]) == 5\n    assert candidate(nums = [2,-5,1,-4,3,-2]) == 8\n\n\ncheck(Solution().maxAbsoluteSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:\n\nPick a non-empty prefix from the string s where all the characters in the prefix are equal.\nPick a non-empty suffix from the string s where all the characters in this suffix are equal.\nThe prefix and the suffix should not intersect at any index.\nThe characters from the prefix and suffix must be the same.\nDelete both the prefix and the suffix.\n\nReturn the minimum length of s after performing the above operation any number of times (possibly zero times).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumLength(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumLength(self, s: str) -> int:\n        i, j = 0, len(s) - 1\n        while i < j and s[i] == s[j]:\n            while i + 1 < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j - 1 and s[j - 1] == s[j]:\n                j -= 1\n            i, j = i + 1, j - 1\n        return max(0, j - i + 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ca\") == 2\n    assert candidate(s = \"cabaabac\") == 0\n    assert candidate(s = \"aabccabba\") == 3\n\n\ncheck(Solution().minimumLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumTime(self, time: str) -> str:\n```",
        "solutions": "class Solution:\n    def maximumTime(self, time: str) -> str:\n        t = list(time)\n        if t[0] == '?':\n            t[0] = '1' if '4' <= t[1] <= '9' else '2'\n        if t[1] == '?':\n            t[1] = '3' if t[0] == '2' else '9'\n        if t[3] == '?':\n            t[3] = '5'\n        if t[4] == '?':\n            t[4] = '9'\n        return ''.join(t)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(time = \"2?:?0\") == \"23:50\"\n    assert candidate(time = \"0?:3?\") == \"09:39\"\n    assert candidate(time = \"1?:22\") == \"19:22\"\n\n\ncheck(Solution().maximumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.\nYour goal is to satisfy one of the following three conditions:\n\nEvery letter in a is strictly less than every letter in b in the alphabet.\nEvery letter in b is strictly less than every letter in a in the alphabet.\nBoth a and b consist of only one distinct letter.\n\nReturn the minimum number of operations needed to achieve your goal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCharacters(self, a: str, b: str) -> int:\n```",
        "solutions": "class Solution:\n    def minCharacters(self, a: str, b: str) -> int:\n        def f(cnt1, cnt2):\n            for i in range(1, 26):\n                t = sum(cnt1[i:]) + sum(cnt2[:i])\n                nonlocal ans\n                ans = min(ans, t)\n\n        m, n = len(a), len(b)\n        cnt1 = [0] * 26\n        cnt2 = [0] * 26\n        for c in a:\n            cnt1[ord(c) - ord('a')] += 1\n        for c in b:\n            cnt2[ord(c) - ord('a')] += 1\n        ans = m + n\n        for c1, c2 in zip(cnt1, cnt2):\n            ans = min(ans, m + n - c1 - c2)\n        f(cnt1, cnt2)\n        f(cnt2, cnt1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"aba\", b = \"caa\") == 2\n    assert candidate(a = \"dabadd\", b = \"cda\") == 3\n\n\ncheck(Solution().minCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n        m, n = len(matrix), len(matrix[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                s[i + 1][j + 1] = s[i + 1][j] ^ s[i][j + 1] ^ s[i][j] ^ matrix[i][j]\n                ans.append(s[i + 1][j + 1])\n        return nlargest(k, ans)[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[5,2],[1,6]], k = 1) == 7\n    assert candidate(matrix = [[5,2],[1,6]], k = 2) == 5\n    assert candidate(matrix = [[5,2],[1,6]], k = 3) == 4\n    assert candidate(matrix = [[5,2],[1,6]], k = 4) == 0\n\n\ncheck(Solution().kthLargestValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n\nYou can place the boxes anywhere on the floor.\nIf box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.\n\nGiven an integer n, return the minimum possible number of boxes touching the floor.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumBoxes(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumBoxes(self, n: int) -> int:\n        s, k = 0, 1\n        while s + k * (k + 1) // 2 <= n:\n            s += k * (k + 1) // 2\n            k += 1\n        k -= 1\n        ans = k * (k + 1) // 2\n        k = 1\n        while s < n:\n            ans += 1\n            s += k\n            k += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 3\n    assert candidate(n = 4) == 3\n    assert candidate(n = 10) == 6\n\n\ncheck(Solution().minimumBoxes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.\nYou are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.\nIt is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.\nReturn the original array nums. If there are multiple solutions, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:\n        g = defaultdict(list)\n        for a, b in adjacentPairs:\n            g[a].append(b)\n            g[b].append(a)\n        n = len(adjacentPairs) + 1\n        ans = [0] * n\n        for i, v in g.items():\n            if len(v) == 1:\n                ans[0] = i\n                ans[1] = v[0]\n                break\n        for i in range(2, n):\n            v = g[ans[i - 1]]\n            ans[i] = v[0] if v[1] == ans[i - 2] else v[1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(adjacentPairs = [[2,1],[3,4],[3,2]]) == [1,2,3,4]\n    assert candidate(adjacentPairs = [[4,-2],[1,4],[-3,1]]) == [-2,4,1,-3]\n    assert candidate(adjacentPairs = [[100000,-100000]]) == [100000,-100000]\n\n\ncheck(Solution().restoreArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.\u200b\u200b\u200b\u200b\u200b\nA string is said to be palindrome if it the same string when reversed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkPartitioning(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and (i + 1 == j or g[i + 1][j - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if g[0][i] and g[i + 1][j] and g[j + 1][-1]:\n                    return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcbdd\") == True\n    assert candidate(s = \"bcbddxy\") == False\n\n\ncheck(Solution().checkPartitioning)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, \"abA\" is not because 'b' appears, but 'B' does not.\nGiven a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestNiceSubstring(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def longestNiceSubstring(self, s: str) -> str:\n        n = len(s)\n        ans = ''\n        for i in range(n):\n            ss = set()\n            for j in range(i, n):\n                ss.add(s[j])\n                if (\n                    all(c.lower() in ss and c.upper() in ss for c in ss)\n                    and len(ans) < j - i + 1\n                ):\n                    ans = s[i : j + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"YazaAay\") == \"aAa\"\n    assert candidate(s = \"Bb\") == \"Bb\"\n    assert candidate(s = \"c\") == \"\"\n    assert candidate(s = \"dDzeE\") == \"dD\"\n\n\ncheck(Solution().longestNiceSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array groups of length n. You are also given an integer array nums.\nYou are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).\nReturn true if you can do this task, and false otherwise.\nNote that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canChoose(self, groups: List[List[int]], nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canChoose(self, groups: List[List[int]], nums: List[int]) -> bool:\n        n, m = len(groups), len(nums)\n        i = j = 0\n        while i < n and j < m:\n            g = groups[i]\n            if g == nums[j : j + len(g)]:\n                j += len(g)\n                i += 1\n            else:\n                j += 1\n        return i == n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]) == True\n    assert candidate(groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]) == False\n    assert candidate(groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]) == False\n\n\ncheck(Solution().canChoose)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a tree (i.e.,\u00a0a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.\nTo represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\nAn ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.\nReturn an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].pop()\n\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]) == [-1,0,0,1]\n    assert candidate(nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]) == [-1,0,-1,0,0,0,-1]\n\n\ncheck(Solution().getCoprimes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\nIf isWater[i][j] == 0, cell (i, j) is a land cell.\nIf isWater[i][j] == 1, cell (i, j) is a water cell.\n\nYou must assign each cell a height in a way that follows these rules:\n\nThe height of each cell must be non-negative.\nIf the cell is a water cell, its height must be 0.\nAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n        m, n = len(isWater), len(isWater[0])\n        ans = [[-1] * n for _ in range(m)]\n        q = deque()\n        for i, row in enumerate(isWater):\n            for j, v in enumerate(row):\n                if v:\n                    q.append((i, j))\n                    ans[i][j] = 0\n        while q:\n            i, j = q.popleft()\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    ans[x][y] = ans[i][j] + 1\n                    q.append((x, y))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(isWater = [[0,1],[0,0]]) == [[1,0],[2,1]]\n    assert candidate(isWater = [[0,0,1],[1,0,0],[0,0,0]]) == [[1,1,0],[0,1,1],[1,2,2]]\n\n\ncheck(Solution().highestPeak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def check(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def check(self, nums: List[int]) -> bool:\n        return sum(nums[i - 1] > v for i, v in enumerate(nums)) <= 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,5,1,2]) == True\n    assert candidate(nums = [2,1,3,4]) == False\n    assert candidate(nums = [1,2,3]) == True\n\n\ncheck(Solution().check)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a solitaire game with three piles of stones of sizes a\u200b\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b, return the maximum score you can get.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n        s = sorted([a, b, c])\n        ans = 0\n        while s[1]:\n            ans += 1\n            s[1] -= 1\n            s[2] -= 1\n            s.sort()\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 2, b = 4, c = 6) == 6\n    assert candidate(a = 4, b = 4, c = 6) == 7\n    assert candidate(a = 1, b = 8, c = 8) == 8\n\n\ncheck(Solution().maximumScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:\n\nIf word1 is non-empty, append the first character in word1 to merge and delete it from word1.\n\n\t\nFor example, if word1 = \"abc\" and merge = \"dv\", then after choosing this operation, word1 = \"bc\" and merge = \"dva\".\n\n\nIf word2 is non-empty, append the first character in word2 to merge and delete it from word2.\n\t\nFor example, if word2 = \"abc\" and merge = \"\", then after choosing this operation, word2 = \"bc\" and merge = \"a\".\n\n\n\nReturn the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestMerge(self, word1: str, word2: str) -> str:\n```",
        "solutions": "class Solution:\n    def largestMerge(self, word1: str, word2: str) -> str:\n        i = j = 0\n        ans = []\n        while i < len(word1) and j < len(word2):\n            if word1[i:] > word2[j:]:\n                ans.append(word1[i])\n                i += 1\n            else:\n                ans.append(word2[j])\n                j += 1\n        ans.append(word1[i:])\n        ans.append(word2[j:])\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"cabaa\", word2 = \"bcaaa\") == \"cbcabaaaaa\"\n    assert candidate(word1 = \"abcabc\", word2 = \"abdcaba\") == \"abdcabcabcaba\"\n\n\ncheck(Solution().largestMerge)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAbsDifference(self, nums: List[int], goal: int) -> int:\n```",
        "solutions": "class Solution:\n    def minAbsDifference(self, nums: List[int], goal: int) -> int:\n        n = len(nums)\n        left = set()\n        right = set()\n\n        self.getSubSeqSum(0, 0, nums[: n // 2], left)\n        self.getSubSeqSum(0, 0, nums[n // 2 :], right)\n\n        result = inf\n        right = sorted(right)\n        rl = len(right)\n\n        for l in left:\n            remaining = goal - l\n            idx = bisect_left(right, remaining)\n\n            if idx < rl:\n                result = min(result, abs(remaining - right[idx]))\n\n            if idx > 0:\n                result = min(result, abs(remaining - right[idx - 1]))\n\n        return result\n\n    def getSubSeqSum(self, i: int, curr: int, arr: List[int], result: Set[int]):\n        if i == len(arr):\n            result.add(curr)\n            return\n\n        self.getSubSeqSum(i + 1, curr, arr, result)\n        self.getSubSeqSum(i + 1, curr + arr[i], arr, result)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,-7,3,5], goal = 6) == 0\n    assert candidate(nums = [7,-9,15,-2], goal = -5) == 1\n    assert candidate(nums = [1,2,3], goal = -7) == 7\n\n\ncheck(Solution().minAbsDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.\nThe string is called alternating if no two adjacent characters are equal. For example, the string \"010\" is alternating, while the string \"0100\" is not.\nReturn the minimum number of operations needed to make s alternating.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, s: str) -> int:\n        cnt = sum(c != '01'[i & 1] for i, c in enumerate(s))\n        return min(cnt, len(s) - cnt)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0100\") == 1\n    assert candidate(s = \"10\") == 0\n    assert candidate(s = \"1111\") == 2\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countHomogenous(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countHomogenous(self, s: str) -> int:\n        mod = 10**9 + 7\n        i, n = 0, len(s)\n        ans = 0\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            cnt = j - i\n            ans += (1 + cnt) * cnt // 2\n            ans %= mod\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abbcccaa\") == 13\n    assert candidate(s = \"xy\") == 2\n    assert candidate(s = \"zzzzz\") == 15\n\n\ncheck(Solution().countHomogenous)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        g = [[False] * n for _ in range(n)]\n        deg = [0] * n\n        for u, v in edges:\n            u, v = u - 1, v - 1\n            g[u][v] = g[v][u] = True\n            deg[u] += 1\n            deg[v] += 1\n        ans = inf\n        for i in range(n):\n            for j in range(i + 1, n):\n                if g[i][j]:\n                    for k in range(j + 1, n):\n                        if g[i][k] and g[j][k]:\n                            ans = min(ans, deg[i] + deg[j] + deg[k] - 6)\n        return -1 if ans == inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]) == 3\n    assert candidate(n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]) == 0\n\n\ncheck(Solution().minTrioDegree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:\n        ans, mi = -1, inf\n        for i, (a, b) in enumerate(points):\n            if a == x or b == y:\n                d = abs(a - x) + abs(b - y)\n                if mi > d:\n                    ans, mi = i, d\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]) == 2\n    assert candidate(x = 3, y = 4, points = [[3,4]]) == 0\n    assert candidate(x = 3, y = 4, points = [[2,3]]) == -1\n\n\ncheck(Solution().nearestValidPoint)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkPowersOfThree(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def checkPowersOfThree(self, n: int) -> bool:\n        while n:\n            if n % 3 > 1:\n                return False\n            n //= 3\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 12) == True\n    assert candidate(n = 91) == True\n    assert candidate(n = 21) == False\n\n\ncheck(Solution().checkPowersOfThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\n\nFor example, the beauty of \"abaacc\" is 3 - 1 = 2.\n\nGiven a string s, return the sum of beauty of all of its substrings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautySum(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def beautySum(self, s: str) -> int:\n        ans, n = 0, len(s)\n        for i in range(n):\n            cnt = Counter()\n            for j in range(i, n):\n                cnt[s[j]] += 1\n                ans += max(cnt.values()) - min(cnt.values())\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabcb\") == 5\n    assert candidate(s = \"aabcbaa\") == 17\n\n\ncheck(Solution().beautySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:\n\na < b\nincident(a, b) > queries[j]\n\nReturn an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.\nNote that there can be multiple edges between the same two nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countPairs(\n        self, n: int, edges: List[List[int]], queries: List[int]\n    ) -> List[int]:\n        cnt = [0] * n\n        g = defaultdict(int)\n        for a, b in edges:\n            a, b = a - 1, b - 1\n            a, b = min(a, b), max(a, b)\n            cnt[a] += 1\n            cnt[b] += 1\n            g[(a, b)] += 1\n\n        s = sorted(cnt)\n        ans = [0] * len(queries)\n        for i, t in enumerate(queries):\n            for j, x in enumerate(s):\n                k = bisect_right(s, t - x, lo=j + 1)\n                ans[i] += n - k\n            for (a, b), v in g.items():\n                if cnt[a] + cnt[b] > t and cnt[a] + cnt[b] - v <= t:\n                    ans[i] -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]) == [6,5]\n    assert candidate(n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]) == [10,10,9,8,6]\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. You must perform exactly one operation\u00a0where you can replace one\u00a0element nums[i] with nums[i] * nums[i].\u00a0\nReturn the maximum possible subarray sum after exactly\u00a0one operation. The subarray must be non-empty.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n        f = g = 0\n        ans = -inf\n        for x in nums:\n            ff = max(f, 0) + x\n            gg = max(max(f, 0) + x * x, g + x)\n            f, g = ff, gg\n            ans = max(ans, f, g)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,-1,-4,-3]) == 17\n    assert candidate(nums = [1,-1,1,1,-1,-1,1]) == 4\n\n\ncheck(Solution().maxSumAfterOperation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n```",
        "solutions": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        return ''.join(a + b for a, b in zip_longest(word1, word2, fillvalue=''))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"abc\", word2 = \"pqr\") == \"apbqcr\"\n    assert candidate(word1 = \"ab\", word2 = \"pqrs\") == \"apbqrs\"\n    assert candidate(word1 = \"abcd\", word2 = \"pq\") == \"apbqcd\"\n\n\ncheck(Solution().mergeAlternately)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.\nIn one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.\nReturn an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.\nEach answer[i] is calculated considering the initial state of the boxes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, boxes: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minOperations(self, boxes: str) -> List[int]:\n        n = len(boxes)\n        left = [0] * n\n        right = [0] * n\n        cnt = 0\n        for i in range(1, n):\n            if boxes[i - 1] == '1':\n                cnt += 1\n            left[i] = left[i - 1] + cnt\n        cnt = 0\n        for i in range(n - 2, -1, -1):\n            if boxes[i + 1] == '1':\n                cnt += 1\n            right[i] = right[i + 1] + cnt\n        return [a + b for a, b in zip(left, right)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(boxes = \"110\") == [1,1,3]\n    assert candidate(boxes = \"001011\") == [11,8,5,4,3,4]\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings, word1 and word2. You want to construct a string in the following manner:\n\nChoose some non-empty subsequence subsequence1 from word1.\nChoose some non-empty subsequence subsequence2 from word2.\nConcatenate the subsequences: subsequence1 + subsequence2, to make the string.\n\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward\u00a0as well as backward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        ans = 0\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                    if i < len(word1) <= j:\n                        ans = max(ans, f[i][j])\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"cacb\", word2 = \"cbba\") == 5\n    assert candidate(word1 = \"ab\", word2 = \"ab\") == 3\n    assert candidate(word1 = \"aa\", word2 = \"bb\") == 0\n\n\ncheck(Solution().longestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe ith item is said to match the rule if one of the following is true:\n\nruleKey == \"type\" and ruleValue == typei.\nruleKey == \"color\" and ruleValue == colori.\nruleKey == \"name\" and ruleValue == namei.\n\nReturn the number of items that match the given rule.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:\n```",
        "solutions": "class Solution:\n    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:\n        i = 0 if ruleKey[0] == 't' else (1 if ruleKey[0] == 'c' else 2)\n        return sum(v[i] == ruleValue for v in items)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\") == 1\n    assert candidate(items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\") == 2\n\n\ncheck(Solution().countMatches)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:\n\nThere must be exactly one ice cream base.\nYou can add one or more types of topping or have no toppings at all.\nThere are at most two of each type of topping.\n\nYou are given three inputs:\n\nbaseCosts, an integer array of length n, where each baseCosts[i] represents the price of the ith ice cream base flavor.\ntoppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the ith topping.\ntarget, an integer representing your target price for dessert.\n\nYou want to make a dessert with a total cost as close to target as possible.\nReturn the closest possible cost of the dessert to target. If there are multiple, return the lower one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closestCost(self, baseCosts: List[int], toppingCosts: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def closestCost(\n        self, baseCosts: List[int], toppingCosts: List[int], target: int\n    ) -> int:\n        def dfs(i, t):\n            if i >= len(toppingCosts):\n                arr.append(t)\n                return\n            dfs(i + 1, t)\n            dfs(i + 1, t + toppingCosts[i])\n\n        arr = []\n        dfs(0, 0)\n        arr.sort()\n        d = ans = inf\n\n        # \u9009\u62e9\u4e00\u79cd\u51b0\u6fc0\u6dcb\u57fa\u6599\n        for x in baseCosts:\n            # \u679a\u4e3e\u5b50\u96c6\u548c\n            for y in arr:\n                # \u4e8c\u5206\u67e5\u627e\n                i = bisect_left(arr, target - x - y)\n                for j in (i, i - 1):\n                    if 0 <= j < len(arr):\n                        t = abs(x + y + arr[j] - target)\n                        if d > t or (d == t and ans > x + y + arr[j]):\n                            d = t\n                            ans = x + y + arr[j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(baseCosts = [1,7], toppingCosts = [3,4], target = 10) == 10\n    assert candidate(baseCosts = [2,3], toppingCosts = [4,5,100], target = 18) == 17\n    assert candidate(baseCosts = [3,10], toppingCosts = [2,5], target = 9) == 8\n    assert candidate(baseCosts = [10], toppingCosts = [1], target = 1) == 10\n\n\ncheck(Solution().closestCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.\nIn one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.\nReturn the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        s1, s2 = sum(nums1), sum(nums2)\n        if s1 == s2:\n            return 0\n        if s1 > s2:\n            return self.minOperations(nums2, nums1)\n        arr = [6 - v for v in nums1] + [v - 1 for v in nums2]\n        d = s2 - s1\n        for i, v in enumerate(sorted(arr, reverse=True), 1):\n            d -= v\n            if d <= 0:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]) == 3\n    assert candidate(nums1 = [1,1,1,1,1,1,1], nums2 = [6]) == -1\n    assert candidate(nums1 = [6,6], nums2 = [1]) == 3\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:\n\npositioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.\nspeedi is the initial speed of the ith car in meters per second.\n\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.\nReturn an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:\n```",
        "solutions": "class Solution:\n    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:\n        stk = []\n        n = len(cars)\n        ans = [-1] * n\n        for i in range(n - 1, -1, -1):\n            while stk:\n                j = stk[-1]\n                if cars[i][1] > cars[j][1]:\n                    t = (cars[j][0] - cars[i][0]) / (cars[i][1] - cars[j][1])\n                    if ans[j] == -1 or t <= ans[j]:\n                        ans[i] = t\n                        break\n                stk.pop()\n            stk.append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cars = [[1,2],[2,1],[4,3],[7,2]]) == [1.00000,-1.00000,3.00000,-1.00000]\n    assert candidate(cars = [[3,4],[5,4],[6,3],[9,1]]) == [2.00000,1.00000,1.50000,-1.00000]\n\n\ncheck(Solution().getCollisionTimes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def secondHighest(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def secondHighest(self, s: str) -> int:\n        a = b = -1\n        for c in s:\n            if c.isdigit():\n                v = int(c)\n                if v > a:\n                    a, b = v, a\n                elif b < v < a:\n                    b = v\n        return b\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"dfa12321afd\") == 2\n    assert candidate(s = \"abc1111\") == -1\n\n\ncheck(Solution().secondHighest)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\nA nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, nums: List[int], low: int, high: int) -> int:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children = [None] * 2\n        self.cnt = 0\n\n    def insert(self, x):\n        node = self\n        for i in range(15, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x, limit):\n        node = self\n        ans = 0\n        for i in range(15, -1, -1):\n            if node is None:\n                return ans\n            v = x >> i & 1\n            if limit >> i & 1:\n                if node.children[v]:\n                    ans += node.children[v].cnt\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n\nclass Solution:\n    def countPairs(self, nums: List[int], low: int, high: int) -> int:\n        ans = 0\n        tree = Trie()\n        for x in nums:\n            ans += tree.search(x, high + 1) - tree.search(x, low)\n            tree.insert(x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,2,7], low = 2, high = 6) == 6\n    assert candidate(nums = [9,8,4,2,1], low = 5, high = 14) == 8\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\nReturn a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findBuildings(self, heights: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findBuildings(self, heights: List[int]) -> List[int]:\n        ans = []\n        mx = 0\n        for i in range(len(heights) - 1, -1, -1):\n            if heights[i] > mx:\n                ans.append(i)\n                mx = heights[i]\n        return ans[::-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [4,2,3,1]) == [0,2,3]\n    assert candidate(heights = [4,3,2,1]) == [0,1,2,3]\n    assert candidate(heights = [1,3,2,4]) == [3]\n    assert candidate(heights = [2,2,2,2]) == [3]\n\n\ncheck(Solution().findBuildings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return true\u200b\u200b\u200b if s contains at most one contiguous segment of ones. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkOnesSegment(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkOnesSegment(self, s: str) -> bool:\n        return '01' not in s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1001\") == False\n    assert candidate(s = \"110\") == True\n\n\ncheck(Solution().checkOnesSegment)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minElements(self, nums: List[int], limit: int, goal: int) -> int:\n```",
        "solutions": "class Solution:\n    def minElements(self, nums: List[int], limit: int, goal: int) -> int:\n        d = abs(sum(nums) - goal)\n        return (d + limit - 1) // limit\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-1,1], limit = 3, goal = -4) == 2\n    assert candidate(nums = [1,-10,9,1], limit = 100, goal = 0) == 1\n\n\ncheck(Solution().minElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = 1 << 10\n        cnt = [Counter() for _ in range(k)]\n        size = [0] * k\n        for i, v in enumerate(nums):\n            cnt[i % k][v] += 1\n            size[i % k] += 1\n        f = [inf] * n\n        f[0] = 0\n        for i in range(k):\n            g = [min(f) + size[i]] * n\n            for j in range(n):\n                for v, c in cnt[i].items():\n                    g[j] = min(g[j], f[j ^ v] + size[i] - c)\n            f = g\n        return f[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,0,3,0], k = 1) == 3\n    assert candidate(nums = [3,4,5,2,1,7,3,4,7], k = 3) == 3\n    assert candidate(nums = [1,2,4,1,2,5,1,2,6], k = 3) == 3\n\n\ncheck(Solution().minChanges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        cnt = 0\n        c1 = c2 = None\n        for a, b in zip(s1, s2):\n            if a != b:\n                cnt += 1\n                if cnt > 2 or (cnt == 2 and (a != c2 or b != c1)):\n                    return False\n                c1, c2 = a, b\n        return cnt != 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"bank\", s2 = \"kanb\") == True\n    assert candidate(s1 = \"attack\", s2 = \"defend\") == False\n    assert candidate(s1 = \"kelb\", s2 = \"kelb\") == True\n    assert candidate(s1 = \"abcd\", s2 = \"dcba\") == False\n\n\ncheck(Solution().areAlmostEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findCenter(self, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findCenter(self, edges: List[List[int]]) -> int:\n        return edges[0][0] if edges[0][0] in edges[1] else edges[0][1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[1,2],[2,3],[4,2]]) == 2\n    assert candidate(edges = [[1,2],[5,1],[1,3],[1,4]]) == 1\n\n\ncheck(Solution().findCenter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.\nReturn the maximum possible score of a good subarray.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        left = [-1] * n\n        right = [n] * n\n        stk = []\n        for i, v in enumerate(nums):\n            while stk and nums[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            v = nums[i]\n            while stk and nums[stk[-1]] > v:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        ans = 0\n        for i, v in enumerate(nums):\n            if left[i] + 1 <= k <= right[i] - 1:\n                ans = max(ans, v * (right[i] - left[i] - 1))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,3,7,4,5], k = 3) == 15\n    assert candidate(nums = [5,5,4,5,4,1,1,1], k = 0) == 20\n\n\ncheck(Solution().maximumScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string array features where features[i] is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array responses, where each responses[i] is a string containing space-separated words.\nThe popularity of a feature is the number of responses[i] that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in features. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.\nReturn the features in sorted order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortFeatures(self, features: List[str], responses: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def sortFeatures(self, features: List[str], responses: List[str]) -> List[str]:\n        cnt = Counter()\n        for s in responses:\n            for w in set(s.split()):\n                cnt[w] += 1\n        return sorted(features, key=lambda w: -cnt[w])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(features = [\"cooler\",\"lock\",\"touch\"], responses = [\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]) == [\"touch\",\"cooler\",\"lock\"]\n    assert candidate(features = [\"a\",\"aa\",\"b\",\"c\"], responses = [\"a\",\"a aa\",\"a a a a a\",\"b a\"]) == [\"a\",\"aa\",\"b\",\"c\"]\n\n\ncheck(Solution().sortFeatures)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def squareIsWhite(self, coordinates: str) -> bool:\n```",
        "solutions": "class Solution:\n    def squareIsWhite(self, coordinates: str) -> bool:\n        return (ord(coordinates[0]) + ord(coordinates[1])) % 2 == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(coordinates = \"a1\") == False\n    assert candidate(coordinates = \"h3\") == True\n    assert candidate(coordinates = \"c7\") == False\n\n\ncheck(Solution().squareIsWhite)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings sentence1 and sentence2, each representing a sentence composed of words. A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of only uppercase and lowercase English characters.\nTwo sentences s1 and s2 are considered similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. Note that the inserted sentence must be separated from existing words by spaces.\nFor example,\n\ns1 = \"Hello Jane\" and s2 = \"Hello my name is Jane\" can be made equal by inserting \"my name is\" between \"Hello\" and \"Jane\" in s1.\ns1 = \"Frog cool\" and s2 = \"Frogs are cool\" are not similar, since although there is a sentence \"s are\" inserted into s1, it is not separated from \"Frog\" by a space.\n\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n        words1, words2 = sentence1.split(), sentence2.split()\n        m, n = len(words1), len(words2)\n        if m < n:\n            words1, words2 = words2, words1\n            m, n = n, m\n        i = j = 0\n        while i < n and words1[i] == words2[i]:\n            i += 1\n        while j < n and words1[m - 1 - j] == words2[n - 1 - j]:\n            j += 1\n        return i + j >= n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence1 = \"My name is Haley\", sentence2 = \"My Haley\") == True\n    assert candidate(sentence1 = \"of\", sentence2 = \"A lot of words\") == False\n    assert candidate(sentence1 = \"Eating right now\", sentence2 = \"Eating\") == True\n    assert candidate(sentence1 = \"Luky\", sentence2 = \"Lucccky\") == False\n\n\ncheck(Solution().areSentencesSimilar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\n\n0 <= i < j < nums.length\nnums[i] + rev(nums[j]) == nums[j] + rev(nums[i])\n\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countNicePairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countNicePairs(self, nums: List[int]) -> int:\n        def rev(x):\n            y = 0\n            while x:\n                y = y * 10 + x % 10\n                x //= 10\n            return y\n\n        cnt = Counter(x - rev(x) for x in nums)\n        mod = 10**9 + 7\n        return sum(v * (v - 1) // 2 for v in cnt.values()) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [42,11,1,97]) == 2\n    assert candidate(nums = [13,10,35,24,76]) == 4\n\n\ncheck(Solution().countNicePairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.\nA subarray is defined as a contiguous sequence of numbers in an array.\nA subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi  < numsi+1. Note that a subarray of size 1 is ascending.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxAscendingSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxAscendingSum(self, nums: List[int]) -> int:\n        ans = t = 0\n        for i, v in enumerate(nums):\n            if i == 0 or v > nums[i - 1]:\n                t += v\n                ans = max(ans, t)\n            else:\n                t = v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,20,30,5,10,50]) == 65\n    assert candidate(nums = [10,20,30,40,50]) == 150\n    assert candidate(nums = [12,17,15,13,10,11,12]) == 33\n    assert candidate(nums = [100,10,1]) == 100\n\n\ncheck(Solution().maxAscendingSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:\n\n0 if it is a batch of buy orders, or\n1 if it is a batch of sell orders.\n\nNote that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\n\nIf the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.\nVice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.\n\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:\n        buy, sell = [], []\n        for p, a, t in orders:\n            if t == 0:\n                while a and sell and sell[0][0] <= p:\n                    x, y = heappop(sell)\n                    if a >= y:\n                        a -= y\n                    else:\n                        heappush(sell, (x, y - a))\n                        a = 0\n                if a:\n                    heappush(buy, (-p, a))\n            else:\n                while a and buy and -buy[0][0] >= p:\n                    x, y = heappop(buy)\n                    if a >= y:\n                        a -= y\n                    else:\n                        heappush(buy, (x, y - a))\n                        a = 0\n                if a:\n                    heappush(sell, (p, a))\n        mod = 10**9 + 7\n        return sum(v[1] for v in buy + sell) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]) == 6\n    assert candidate(orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]) == 999999984\n\n\ncheck(Solution().getNumberOfBacklogOrders)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given three positive integers:\u00a0n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\n\nnums.length == n\nnums[i] is a positive integer where 0 <= i < n.\nabs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.\nThe sum of all the elements of nums does not exceed maxSum.\nnums[index] is maximized.\n\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n        def sum(x, cnt):\n            return (\n                (x + x - cnt + 1) * cnt // 2 if x >= cnt else (x + 1) * x // 2 + cnt - x\n            )\n\n        left, right = 1, maxSum\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if sum(mid - 1, index) + sum(mid, n - index) <= maxSum:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, index = 2,  maxSum = 6) == 2\n    assert candidate(n = 6, index = 1,  maxSum = 10) == 3\n\n\ncheck(Solution().maxValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space. For example, \"a123bc34d8ef34\" will become \" 123\u00a0 34 8\u00a0 34\". Notice that you are left with some integers that are separated by at least one space: \"123\", \"34\", \"8\", and \"34\".\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numDifferentIntegers(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def numDifferentIntegers(self, word: str) -> int:\n        s = set()\n        i, n = 0, len(word)\n        while i < n:\n            if word[i].isdigit():\n                while i < n and word[i] == '0':\n                    i += 1\n                j = i\n                while j < n and word[j].isdigit():\n                    j += 1\n                s.add(word[i:j])\n                i = j\n            i += 1\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"a123bc34d8ef34\") == 3\n    assert candidate(word = \"leet1234code234\") == 2\n    assert candidate(word = \"a1b01c001\") == 1\n\n\ncheck(Solution().numDifferentIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s that contains some bracket pairs, with each pair containing a non-empty key.\n\nFor example, in the string \"(name)is(age)yearsold\", there are two bracket pairs that contain the keys \"name\" and \"age\".\n\nYou know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.\nYou are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:\n\nReplace keyi and the bracket pair with the key's corresponding valuei.\nIf you do not know the value of the key, you will replace keyi and the bracket pair with a question mark \"?\" (without the quotation marks).\n\nEach key will appear at most once in your knowledge. There will not be any nested brackets in s.\nReturn the resulting string after evaluating all of the bracket pairs.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def evaluate(self, s: str, knowledge: List[List[str]]) -> str:\n```",
        "solutions": "class Solution:\n    def evaluate(self, s: str, knowledge: List[List[str]]) -> str:\n        d = {a: b for a, b in knowledge}\n        i, n = 0, len(s)\n        ans = []\n        while i < n:\n            if s[i] == '(':\n                j = s.find(')', i + 1)\n                ans.append(d.get(s[i + 1 : j], '?'))\n                i = j\n            else:\n                ans.append(s[i])\n            i += 1\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]) == \"bobistwoyearsold\"\n    assert candidate(s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]) == \"hi?\"\n    assert candidate(s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]) == \"yesyesyesaaa\"\n\n\ncheck(Solution().evaluate)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an even integer n\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation perm of size n\u200b\u200b where perm[i] == i\u200b (0-indexed)\u200b\u200b\u200b\u200b.\nIn one operation, you will create a new array arr, and for each i:\n\nIf i % 2 == 0, then arr[i] = perm[i / 2].\nIf i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].\n\nYou will then assign arr\u200b\u200b\u200b\u200b to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reinitializePermutation(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def reinitializePermutation(self, n: int) -> int:\n        ans, i = 0, 1\n        while 1:\n            ans += 1\n            if i < n >> 1:\n                i <<= 1\n            else:\n                i = (i - (n >> 1)) << 1 | 1\n            if i == 1:\n                return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 1\n    assert candidate(n = 4) == 2\n    assert candidate(n = 6) == 4\n\n\ncheck(Solution().reinitializePermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a garden of n flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array flowers of size n and each flowers[i] represents the beauty of the ith flower.\nA garden is valid if it meets these conditions:\n\nThe garden has at least two flowers.\nThe first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.\nReturn the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBeauty(self, flowers: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumBeauty(self, flowers: List[int]) -> int:\n        s = [0] * (len(flowers) + 1)\n        d = {}\n        ans = -inf\n        for i, v in enumerate(flowers):\n            if v in d:\n                ans = max(ans, s[i] - s[d[v] + 1] + v * 2)\n            else:\n                d[v] = i\n            s[i + 1] = s[i] + max(v, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(flowers = [1,2,3,1,2]) == 8\n    assert candidate(flowers = [100,1,1,-3,1]) == 3\n    assert candidate(flowers = [-1,-2,0,-1]) == -2\n\n\ncheck(Solution().maximumBeauty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\n\nFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\n\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        ans = mx = 0\n        for v in nums:\n            ans += max(0, mx + 1 - v)\n            mx = max(mx + 1, v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1]) == 3\n    assert candidate(nums = [1,5,2,4,1]) == 14\n    assert candidate(nums = [8]) == 0\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\nFor each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the jth query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPoints(self, points: List[List[int]], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countPoints(\n        self, points: List[List[int]], queries: List[List[int]]\n    ) -> List[int]:\n        ans = []\n        for x, y, r in queries:\n            cnt = 0\n            for i, j in points:\n                dx, dy = i - x, j - y\n                cnt += dx * dx + dy * dy <= r * r\n            ans.append(cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]) == [3,2,2]\n    assert candidate(points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]) == [2,3,2,4]\n\n\ncheck(Solution().countPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:\n\nFind a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.\nRemove the last element from the current array nums.\n\nReturn an array answer, where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaximumXor(self, nums: List[int], maximumBit: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getMaximumXor(self, nums: List[int], maximumBit: int) -> List[int]:\n        ans = []\n        xs = reduce(xor, nums)\n        for x in nums[::-1]:\n            k = 0\n            for i in range(maximumBit - 1, -1, -1):\n                if (xs >> i & 1) == 0:\n                    k |= 1 << i\n            ans.append(k)\n            xs ^= x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,1,3], maximumBit = 2) == [0,3,2,3]\n    assert candidate(nums = [2,3,4,7], maximumBit = 3) == [5,2,6,5]\n    assert candidate(nums = [0,1,2,2,5,7], maximumBit = 3) == [4,3,6,4,6,7]\n\n\ncheck(Solution().getMaximumXor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings firstString and secondString that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples (i,j,a,b) that satisfy the following conditions:\n\n0 <= i <= j < firstString.length\n0 <= a <= b < secondString.length\nThe substring of firstString that starts at the ith character and ends at the jth character (inclusive) is equal to the substring of secondString that starts at the ath character and ends at the bth character (inclusive).\nj - a is the minimum possible value among all quadruples that satisfy the previous conditions.\n\nReturn the number of such quadruples.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n```",
        "solutions": "class Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n        last = {c: i for i, c in enumerate(secondString)}\n        ans, mi = 0, inf\n        for i, c in enumerate(firstString):\n            if c in last:\n                t = i - last[c]\n                if mi > t:\n                    mi = t\n                    ans = 1\n                elif mi == t:\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(firstString = \"abcd\", secondString = \"bccda\") == 1\n    assert candidate(firstString = \"ab\", secondString = \"cd\") == 0\n\n\ncheck(Solution().countQuadruples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).\n\nFor example, \"Hello World\", \"HELLO\", and \"hello world hello world\" are all sentences.\n\nYou are given a sentence s\u200b\u200b\u200b\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b\u200b. You want to truncate s\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the first k\u200b\u200b\u200b\u200b\u200b\u200b words. Return s\u200b\u200b\u200b\u200b\u200b\u200b after truncating it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        return ' '.join(s.split()[:k])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"Hello how are you Contestant\", k = 4) == \"Hello how are you\"\n    assert candidate(s = \"What is the solution to this problem\", k = 4) == \"What is the solution\"\n    assert candidate(s = \"chopper is not a tanuki\", k = 5) == \"chopper is not a tanuki\"\n\n\ncheck(Solution().truncateSentence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.\nMultiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.\nThe user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\nYou are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.\nReturn the array answer as described above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -> List[int]:\n        d = defaultdict(set)\n        for i, t in logs:\n            d[i].add(t)\n        ans = [0] * k\n        for ts in d.values():\n            ans[len(ts) - 1] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5) == [0,2,0,0,0]\n    assert candidate(logs = [[1,1],[2,2],[2,3]], k = 4) == [1,1,0,0]\n\n\ncheck(Solution().findingUsersActiveMinutes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integer arrays nums1 and nums2, both of length n.\nThe absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).\nYou can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.\nReturn the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.\n|x| is defined as:\n\nx if x >= 0, or\n-x if x < 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -> int:\n        mod = 10**9 + 7\n        nums = sorted(nums1)\n        s = sum(abs(a - b) for a, b in zip(nums1, nums2)) % mod\n        mx = 0\n        for a, b in zip(nums1, nums2):\n            d1, d2 = abs(a - b), inf\n            i = bisect_left(nums, b)\n            if i < len(nums):\n                d2 = min(d2, abs(nums[i] - b))\n            if i:\n                d2 = min(d2, abs(nums[i - 1] - b))\n            mx = max(mx, d1 - d2)\n        return (s - mx + mod) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,7,5], nums2 = [2,3,5]) == 3\n    assert candidate(nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]) == 0\n    assert candidate(nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]) == 20\n\n\ncheck(Solution().minAbsoluteSumDiff)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\n\nFor example, the GCD of the sequence [4,6,16] is 2.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nReturn the number of different GCDs among all non-empty subsequences of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:\n        mx = max(nums)\n        vis = set(nums)\n        ans = 0\n        for x in range(1, mx + 1):\n            g = 0\n            for y in range(x, mx + 1, x):\n                if y in vis:\n                    g = gcd(g, y)\n                    if g == x:\n                        ans += 1\n                        break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [6,10,3]) == 5\n    assert candidate(nums = [5,15,40,5,6]) == 7\n\n\ncheck(Solution().countDifferentSubsequenceGCDs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nImplement a function signFunc(x) that returns:\n\n1 if x is positive.\n-1 if x is negative.\n0 if x is equal to 0.\n\nYou are given an integer array nums. Let product be the product of all values in the array nums.\nReturn signFunc(product).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arraySign(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def arraySign(self, nums: List[int]) -> int:\n        ans = 1\n        for v in nums:\n            if v == 0:\n                return 0\n            if v < 0:\n                ans *= -1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,-2,-3,-4,3,2,1]) == 1\n    assert candidate(nums = [1,5,0,2,-3]) == 0\n    assert candidate(nums = [-1,1,-1,1,-1]) == -1\n\n\ncheck(Solution().arraySign)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n\nStart at the 1st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, n, and an integer k, return the winner of the game.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheWinner(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findTheWinner(self, n: int, k: int) -> int:\n        if n == 1:\n            return 1\n        ans = (k + self.findTheWinner(n - 1, k)) % n\n        return n if ans == 0 else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, k = 2) == 3\n    assert candidate(n = 6, k = 5) == 1\n\n\ncheck(Solution().findTheWinner)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\n\nFor example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.\n\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\n\nFor example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSideJumps(self, obstacles: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minSideJumps(self, obstacles: List[int]) -> int:\n        f = [1, 0, 1]\n        for v in obstacles[1:]:\n            for j in range(3):\n                if v == j + 1:\n                    f[j] = inf\n                    break\n            x = min(f) + 1\n            for j in range(3):\n                if v != j + 1:\n                    f[j] = min(f[j], x)\n        return min(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(obstacles = [0,1,2,3,0]) == 2 \n    assert candidate(obstacles = [0,1,1,3,3,0]) == 0\n    assert candidate(obstacles = [0,2,1,0,3,0]) == 2\n\n\ncheck(Solution().minSideJumps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nYou must perform an operation shift(c, x), where c is a character and x is a digit, that returns the xth character after c.\n\nFor example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.\n\nFor every odd index i, you want to replace the digit s[i] with the result of the shift(s[i-1], s[i]) operation.\nReturn s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.\nNote that shift(c, x) is not a preloaded function, but an operation to be implemented as part of the solution.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def replaceDigits(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def replaceDigits(self, s: str) -> str:\n        s = list(s)\n        for i in range(1, len(s), 2):\n            s[i] = chr(ord(s[i - 1]) + int(s[i]))\n        return ''.join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"a1c1e1\") == \"abcdef\"\n    assert candidate(s = \"a1b2c3d4e\") == \"abbdcfdhe\"\n\n\ncheck(Solution().replaceDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\n\nThe value of the first element in arr must be 1.\nThe absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.\n\nThere are 2 types of operations that you can perform any number of times:\n\nDecrease the value of any element of arr to a smaller positive integer.\nRearrange the elements of arr to be in any order.\n\nReturn the maximum possible value of an element in arr after performing the operations to satisfy the conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -> int:\n        arr.sort()\n        arr[0] = 1\n        for i in range(1, len(arr)):\n            d = max(0, arr[i] - arr[i - 1] - 1)\n            arr[i] -= d\n        return max(arr)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,2,1,2,1]) == 2\n    assert candidate(arr = [100,1,1000]) == 3\n    assert candidate(arr = [1,2,3,4,5]) == 5\n\n\ncheck(Solution().maximumElementAfterDecrementingAndRearranging)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.\nYou are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that:\n\nThe room has a size of at least minSizej, and\nabs(id - preferredj) is minimized, where abs(x) is the absolute value of x.\n\nIf there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.\nReturn an array answer of length k where answer[j] contains the answer to the jth query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def closestRoom(\n        self, rooms: List[List[int]], queries: List[List[int]]\n    ) -> List[int]:\n        rooms.sort(key=lambda x: x[1])\n        k = len(queries)\n        idx = sorted(range(k), key=lambda i: queries[i][1])\n        ans = [-1] * k\n        i, n = 0, len(rooms)\n        sl = SortedList(x[0] for x in rooms)\n        for j in idx:\n            prefer, minSize = queries[j]\n            while i < n and rooms[i][1] < minSize:\n                sl.remove(rooms[i][0])\n                i += 1\n            if i == n:\n                break\n            p = sl.bisect_left(prefer)\n            if p < len(sl):\n                ans[j] = sl[p]\n            if p and (ans[j] == -1 or ans[j] - prefer >= prefer - sl[p - 1]):\n                ans[j] = sl[p - 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]) == [3,-1,3]\n    assert candidate(rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]) == [2,1,3]\n\n\ncheck(Solution().closestRoom)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkIfPangram(self, sentence: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkIfPangram(self, sentence: str) -> bool:\n        return len(set(sentence)) == 26\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"thequickbrownfoxjumpsoverthelazydog\") == True\n    assert candidate(sentence = \"leetcode\") == False\n\n\ncheck(Solution().checkIfPangram)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIt is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        costs.sort()\n        for i, c in enumerate(costs):\n            if coins < c:\n                return i\n            coins -= c\n        return len(costs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(costs = [1,3,2,4,1], coins = 7) == 4\n    assert candidate(costs = [10,6,8,7,7,8], coins = 5) == 0\n    assert candidate(costs = [1,6,3,1,2,5], coins = 20) == 6\n\n\ncheck(Solution().maxIceCream)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given n\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\n\nIf the CPU is idle and there are no available tasks to process, the CPU remains idle.\nIf the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\nOnce a task is started, the CPU will process the entire task without stopping.\nThe CPU can finish a task then start a new one instantly.\n\nReturn the order in which the CPU will process the tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        for i, task in enumerate(tasks):\n            task.append(i)\n        tasks.sort()\n        ans = []\n        q = []\n        n = len(tasks)\n        i = t = 0\n        while q or i < n:\n            if not q:\n                t = max(t, tasks[i][0])\n            while i < n and tasks[i][0] <= t:\n                heappush(q, (tasks[i][1], tasks[i][2]))\n                i += 1\n            pt, j = heappop(q)\n            ans.append(j)\n            t += pt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [[1,2],[2,4],[3,2],[4,1]]) == [0,2,3,1]\n    assert candidate(tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]) == [4,3,2,0,1]\n\n\ncheck(Solution().getOrder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.\n\nFor example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.\n\nYou are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.\nConsider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.\nReturn the XOR sum of the aforementioned list.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:\n        a = reduce(xor, arr1)\n        b = reduce(xor, arr2)\n        return a & b\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr1 = [1,2,3], arr2 = [6,5]) == 0\n    assert candidate(arr1 = [12], arr2 = [4]) == 4\n\n\ncheck(Solution().getXORSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumBase(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def sumBase(self, n: int, k: int) -> int:\n        ans = 0\n        while n:\n            ans += n % k\n            n //= k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 34, k = 6) == 9\n    assert candidate(n = 10, k = 10) == 1\n\n\ncheck(Solution().sumBase)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string is considered beautiful if it satisfies the following conditions:\n\nEach of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.\nThe letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).\n\nFor example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestBeautifulSubstring(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestBeautifulSubstring(self, word: str) -> int:\n        arr = []\n        n = len(word)\n        i = 0\n        while i < n:\n            j = i\n            while j < n and word[j] == word[i]:\n                j += 1\n            arr.append((word[i], j - i))\n            i = j\n        ans = 0\n        for i in range(len(arr) - 4):\n            a, b, c, d, e = arr[i : i + 5]\n            if a[0] + b[0] + c[0] + d[0] + e[0] == \"aeiou\":\n                ans = max(ans, a[1] + b[1] + c[1] + d[1] + e[1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\") == 13\n    assert candidate(word = \"aeeeiiiioooauuuaeiou\") == 5\n    assert candidate(word = \"a\") == 0\n\n\ncheck(Solution().longestBeautifulSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.\nHowever, there are city restrictions on the heights of the new buildings:\n\nThe height of each building must be a non-negative integer.\nThe height of the first building must be 0.\nThe height difference between any two adjacent buildings cannot exceed 1.\n\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.\nIt is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.\nReturn the maximum possible height of the tallest building.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:\n        r = restrictions\n        r.append([1, 0])\n        r.sort()\n        if r[-1][0] != n:\n            r.append([n, n - 1])\n        m = len(r)\n        for i in range(1, m):\n            r[i][1] = min(r[i][1], r[i - 1][1] + r[i][0] - r[i - 1][0])\n        for i in range(m - 2, 0, -1):\n            r[i][1] = min(r[i][1], r[i + 1][1] + r[i + 1][0] - r[i][0])\n        ans = 0\n        for i in range(m - 1):\n            t = (r[i][1] + r[i + 1][1] + r[i + 1][0] - r[i][0]) // 2\n            ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, restrictions = [[2,1],[4,1]]) == 2\n    assert candidate(n = 6, restrictions = []) == 5\n    assert candidate(n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]) == 5\n\n\ncheck(Solution().maxBuilding)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\n\nFor example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\".\n\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortSentence(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def sortSentence(self, s: str) -> str:\n        ws = [(w[:-1], int(w[-1])) for w in s.split()]\n        ws.sort(key=lambda x: x[1])\n        return ' '.join(w for w, _ in ws)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"is2 sentence4 This1 a3\") == \"This is a sentence\"\n    assert candidate(s = \"Myself2 Me1 I4 and3\") == \"Me Myself and I\"\n\n\ncheck(Solution().sortSentence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def memLeak(self, memory1: int, memory2: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def memLeak(self, memory1: int, memory2: int) -> List[int]:\n        i = 1\n        while i <= max(memory1, memory2):\n            if memory1 >= memory2:\n                memory1 -= i\n            else:\n                memory2 -= i\n            i += 1\n        return [i, memory1, memory2]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(memory1 = 2, memory2 = 2) == [3,1,0]\n    assert candidate(memory1 = 8, memory2 = 11) == [6,0,4]\n\n\ncheck(Solution().memLeak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that\u00a0abs(x)\u00a0is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\n        return min(abs(i - start) for i, x in enumerate(nums) if x == target)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5], target = 5, start = 3) == 1\n    assert candidate(nums = [1], target = 1, start = 0) == 0\n    assert candidate(nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0) == 0\n\n\ncheck(Solution().getMinDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s that consists of only digits.\nCheck if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.\n\nFor example, the string s = \"0090089\" can be split into [\"0090\", \"089\"] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.\nAnother example, the string s = \"001\" can be split into [\"0\", \"01\"], [\"00\", \"1\"], or [\"0\", \"0\", \"1\"]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.\n\nReturn true if it is possible to split s\u200b\u200b\u200b\u200b\u200b\u200b as described above, or false otherwise.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitString(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def splitString(self, s: str) -> bool:\n        def dfs(i, x, k):\n            if i == len(s):\n                return k > 1\n            y = 0\n            for j in range(i, len(s)):\n                y = y * 10 + int(s[j])\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n            return False\n\n        return dfs(0, -1, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1234\") == False\n    assert candidate(s = \"050043\") == True\n    assert candidate(s = \"9080701\") == False\n    assert candidate(s = \"10009998\") == True\n\n\ncheck(Solution().splitString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\nYou are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n        n, m = len(intervals), len(queries)\n        intervals.sort()\n        queries = sorted((x, i) for i, x in enumerate(queries))\n        ans = [-1] * m\n        pq = []\n        i = 0\n        for x, j in queries:\n            while i < n and intervals[i][0] <= x:\n                a, b = intervals[i]\n                heappush(pq, (b - a + 1, b))\n                i += 1\n            while pq and pq[0][1] < x:\n                heappop(pq)\n            if pq:\n                ans[j] = pq[0][0]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]) == [3,3,1,4]\n    assert candidate(intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]) == [2,-1,4,6]\n\n\ncheck(Solution().minInterval)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.\n\nFor example, when num = \"5489355142\":\n\n\t\nThe 1st smallest wonderful integer is \"5489355214\".\nThe 2nd smallest wonderful integer is \"5489355241\".\nThe 3rd smallest wonderful integer is \"5489355412\".\nThe 4th smallest wonderful integer is \"5489355421\".\n\n\n\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.\nThe tests are generated in such a way that kth\u00a0smallest wonderful integer exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n        d = [[] for _ in range(10)]\n        idx = [0] * 10\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n        arr = [0] * n\n        for i, c in enumerate(s):\n            j = ord(c) - ord(\"0\")\n            arr[i] = d[j][idx[j]]\n            idx[j] += 1\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"5489355142\", k = 4) == 2\n    assert candidate(num = \"11112\", k = 4) == 4\n    assert candidate(num = \"00123\", k = 1) == 1\n\n\ncheck(Solution().getMinSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a game of tag with your friends. In tag, people are divided into two teams: people who are \"it\", and people who are not \"it\". The people who are \"it\" want to catch as many people as possible who are not \"it\".\nYou are given a 0-indexed integer array team containing only zeros (denoting people who are not \"it\") and ones (denoting people who are \"it\"), and an integer dist. A person who is \"it\" at index i can catch any one person whose index is in the range [i - dist, i + dist] (inclusive) and is not \"it\".\nReturn the maximum number of people that the people who are \"it\" can catch.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n```",
        "solutions": "class Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n        ans = j = 0\n        n = len(team)\n        for i, x in enumerate(team):\n            if x:\n                while j < n and (team[j] or i - j > dist):\n                    j += 1\n                if j < n and abs(i - j) <= dist:\n                    ans += 1\n                    j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(team = [0,1,0,1,0], dist = 3) == 2\n    assert candidate(team = [1], dist = 1) == 0\n    assert candidate(team = [0], dist = 1) == 0\n\n\ncheck(Solution().catchMaximumAmountofPeople)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn experiment is being conducted in a lab. To ensure accuracy, there are two sensors collecting data simultaneously. You are given two arrays sensor1 and sensor2, where sensor1[i] and sensor2[i] are the ith data points collected by the two sensors.\nHowever, this type of sensor has a chance of being defective, which causes exactly one data point to be dropped. After the data is dropped, all the data points to the right of the dropped data are shifted one place to the left, and the last data point is replaced with some random value. It is guaranteed that this random value will not be equal to the dropped value.\n\nFor example, if the correct data is [1,2,3,4,5] and 3 is dropped, the sensor could return [1,2,4,5,7] (the last position can be any value, not just 7).\n\nWe know that there is a defect in at most one of the sensors. Return the sensor number (1 or 2) with the defect. If there is no defect in either sensor or if it is impossible to determine the defective sensor, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        i, n = 0, len(sensor1)\n        while i < n - 1:\n            if sensor1[i] != sensor2[i]:\n                break\n            i += 1\n        while i < n - 1:\n            if sensor1[i + 1] != sensor2[i]:\n                return 1\n            if sensor1[i] != sensor2[i + 1]:\n                return 2\n            i += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sensor1 = [2,3,4,5], sensor2 = [2,1,3,4]) == 1\n    assert candidate(sensor1 = [2,2,2,2,2], sensor2 = [2,2,2,2,5]) == -1\n    assert candidate(sensor1 = [2,3,2,2,3,2], sensor2 = [2,3,2,3,2,7]) == 2\n\n\ncheck(Solution().badSensor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.\nThe population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumPopulation(self, logs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumPopulation(self, logs: List[List[int]]) -> int:\n        d = [0] * 101\n        offset = 1950\n        for a, b in logs:\n            a, b = a - offset, b - offset\n            d[a] += 1\n            d[b] -= 1\n        s = mx = j = 0\n        for i, x in enumerate(d):\n            s += x\n            if mx < s:\n                mx, j = s, i\n        return j + offset\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(logs = [[1993,1999],[2000,2010]]) == 1993\n    assert candidate(logs = [[1950,1961],[1960,1971],[1970,1981]]) == 1960\n\n\ncheck(Solution().maximumPopulation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two non-increasing 0-indexed integer arrays nums1\u200b\u200b\u200b\u200b\u200b\u200b and nums2\u200b\u200b\u200b\u200b\u200b\u200b.\nA pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i\u200b\u200b\u200b\u200b.\nReturn the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.\nAn array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = 0\n        nums2 = nums2[::-1]\n        for i, v in enumerate(nums1):\n            j = len(nums2) - bisect_left(nums2, v) - 1\n            ans = max(ans, j - i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]) == 2\n    assert candidate(nums1 = [2,2,2], nums2 = [10,10,1]) == 1\n    assert candidate(nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]) == 2\n\n\ncheck(Solution().maxDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            indeg[b] += 1\n        q = deque()\n        dp = [[0] * 26 for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][c] += 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                for k in range(26):\n                    dp[j][k] = max(dp[j][k], dp[i][k] + (c == k))\n                    ans = max(ans, dp[j][k])\n        return -1 if cnt < n else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]) == 3\n    assert candidate(colors = \"a\", edges = [[0,0]]) == -1\n\n\ncheck(Solution().largestPathValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string is good if there are no repeated characters.\nGiven a string s\u200b\u200b\u200b\u200b\u200b, return the number of good substrings of length three in s\u200b\u200b\u200b\u200b\u200b\u200b.\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count, n = 0, len(s)\n        for i in range(n - 2):\n            count += s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]\n        return count\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"xyzzaz\") == 1\n    assert candidate(s = \"aababcabc\") == 4\n\n\ncheck(Solution().countGoodSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\n\nFor example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.\n\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\n\nEach element of nums is in exactly one pair, and\nThe maximum pair sum is minimized.\n\nReturn the minimized maximum pair sum after optimally pairing up the elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        return max(x + nums[n - i - 1] for i, x in enumerate(nums[: n >> 1]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,5,2,3]) == 7\n    assert candidate(nums = [3,5,4,2,4,6]) == 8\n\n\ncheck(Solution().minPairSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2 of length n.\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\n\nFor example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.\n\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\nReturn the XOR sum after the rearrangement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumXORSum(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumXORSum(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums2)\n        f = [[inf] * (1 << n) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(nums1, 1):\n            for j in range(1 << n):\n                for k in range(n):\n                    if j >> k & 1:\n                        f[i][j] = min(f[i][j], f[i - 1][j ^ (1 << k)] + (x ^ nums2[k]))\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2], nums2 = [2,3]) == 2\n    assert candidate(nums1 = [1,0,3], nums2 = [5,3,4]) == 8\n\n\ncheck(Solution().minimumXORSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.\n\nFor example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.\n\nGiven an array nums, return the sum of all XOR totals for every subset of nums.\u00a0\nNote: Subsets with the same elements should be counted multiple times.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subsetXORSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def subsetXORSum(self, nums: List[int]) -> int:\n        ans, n = 0, len(nums)\n        for i in range(1 << n):\n            s = 0\n            for j in range(n):\n                if i >> j & 1:\n                    s ^= nums[j]\n            ans += s\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3]) == 6\n    assert candidate(nums = [5,1,6]) == 28\n    assert candidate(nums = [3,4,5,6,7,8]) == 480\n\n\ncheck(Solution().subsetXORSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.\nThe string is called alternating if no two adjacent characters are equal. For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.\nAny two characters may be swapped, even if they are\u00a0not adjacent.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwaps(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minSwaps(self, s: str) -> int:\n        s0n0 = s0n1 = s1n0 = s1n1 = 0\n        for i in range(len(s)):\n            if (i & 1) == 0:\n                if s[i] != '0':\n                    s0n0 += 1\n                else:\n                    s1n1 += 1\n            else:\n                if s[i] != '0':\n                    s1n0 += 1\n                else:\n                    s0n1 += 1\n        if s0n0 != s0n1 and s1n0 != s1n1:\n            return -1\n        if s0n0 != s0n1:\n            return s1n0\n        if s1n0 != s1n1:\n            return s0n0\n        return min(s0n0, s1n0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"111000\") == 1\n    assert candidate(s = \"010\") == 0\n    assert candidate(s = \"1110\") == -1\n\n\ncheck(Solution().minSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k\u00a0sticks are visible from the left. A stick\u00a0is visible from the left if there are no longer\u00a0sticks to the left of it.\n\nFor example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.\n\nGiven n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[i][j] = (f[i - 1][j - 1] + f[i - 1][j] * (i - 1)) % mod\n        return f[n][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, k = 2) == 3\n    assert candidate(n = 5, k = 5) == 1\n    assert candidate(n = 20, k = 11) == 647427950\n\n\ncheck(Solution().rearrangeSticks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a numeric string num, representing a very large palindrome.\nReturn the smallest palindrome larger than num that can be created by rearranging its digits. If no such palindrome exists, return an empty string \"\".\nA palindrome is a number that reads the same backward as forward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nextPalindrome(self, num: str) -> str:\n```",
        "solutions": "class Solution:\n    def nextPalindrome(self, num: str) -> str:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums) // 2\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        nums = list(num)\n        if not next_permutation(nums):\n            return \"\"\n        n = len(nums)\n        for i in range(n // 2):\n            nums[n - i - 1] = nums[i]\n        return \"\".join(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"1221\") == \"2112\"\n    assert candidate(num = \"32123\") == \"\"\n    assert candidate(num = \"45544554\") == \"54455445\"\n\n\ncheck(Solution().nextPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.\n\nFor example, in s = \"110100010\" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.\n\nNote that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkZeroOnes(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkZeroOnes(self, s: str) -> bool:\n        def f(x: str) -> int:\n            cnt = mx = 0\n            for c in s:\n                if c == x:\n                    cnt += 1\n                    mx = max(mx, cnt)\n                else:\n                    cnt = 0\n            return mx\n\n        return f(\"1\") > f(\"0\")\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1101\") == True\n    assert candidate(s = \"111000\") == False\n    assert candidate(s = \"110100010\") == False\n\n\ncheck(Solution().checkZeroOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled:\n\ni + minJump <= j <= min(i + maxJump, s.length - 1), and\ns[j] == '0'.\n\nReturn true if you can reach index s.length - 1 in s, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n```",
        "solutions": "class Solution:\n    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n        n = len(s)\n        pre = [0] * (n + 1)\n        pre[1] = 1\n        f = [True] + [False] * (n - 1)\n        for i in range(1, n):\n            if s[i] == \"0\":\n                l, r = max(0, i - maxJump), i - minJump\n                f[i] = l <= r and pre[r + 1] - pre[l] > 0\n            pre[i + 1] = pre[i] + f[i]\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"011010\", minJump = 2, maxJump = 3) == True\n    assert candidate(s = \"01101110\", minJump = 2, maxJump = 3) == False\n\n\ncheck(Solution().canReach)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, you are asked to construct the array ans of size n-k+1 where ans[i] is the number of distinct numbers in the subarray nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]].\nReturn the array ans.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctNumbers(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def distinctNumbers(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums[:k])\n        ans = [len(cnt)]\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]] == 0:\n                cnt.pop(nums[i - k])\n            ans.append(len(cnt))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,2,2,1,3], k = 3) == [3,2,2,2,3]\n    assert candidate(nums = [1,1,1,1,2,3,4], k = 4) == [1,2,3,4]\n\n\ncheck(Solution().distinctNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.\nReturn true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.\nAn integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:\n        diff = [0] * 52\n        for l, r in ranges:\n            diff[l] += 1\n            diff[r + 1] -= 1\n        cur = 0\n        for i, x in enumerate(diff):\n            cur += x\n            if left <= i <= right and cur == 0:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5) == True\n    assert candidate(ranges = [[1,10],[10,20]], left = 21, right = 21) == False\n\n\ncheck(Solution().isCovered)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.\nYou are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.\nReturn the index of the student that will replace the chalk pieces.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def chalkReplacer(self, chalk: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def chalkReplacer(self, chalk: List[int], k: int) -> int:\n        s = sum(chalk)\n        k %= s\n        for i, x in enumerate(chalk):\n            if k < x:\n                return i\n            k -= x\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(chalk = [5,1,5], k = 22) == 0\n    assert candidate(chalk = [3,4,1,2], k = 25) == 1\n\n\ncheck(Solution().chalkReplacer)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words, find the longest string in words such that every prefix of it is also in words.\n\nFor example, let words = [\"a\", \"app\", \"ap\"]. The string \"app\" has prefixes \"ap\" and \"a\", all of which are in words.\n\nReturn the string described above. If there is more than one string with the same length, return the lexicographically smallest one, and if no string exists, return \"\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestWord(self, words: List[str]) -> str:\n```",
        "solutions": "class Trie:\n    __slots__ = [\"children\", \"is_end\"]\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None] * 26\n        self.is_end: bool = False\n\n    def insert(self, w: str) -> None:\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, w: str) -> bool:\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n            if not node.is_end:\n                return False\n        return True\n\n\nclass Solution:\n    def longestWord(self, words: List[str]) -> str:\n        trie = Trie()\n        for w in words:\n            trie.insert(w)\n        ans = \"\"\n        for w in words:\n            if (len(w) > len(ans) or len(w) == len(ans) and w < ans) and trie.search(w):\n                ans = w\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"k\",\"ki\",\"kir\",\"kira\", \"kiran\"]) == \"kiran\"\n    assert candidate(words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == \"apple\"\n    assert candidate(words = [\"abc\", \"bc\", \"ab\", \"qwe\"]) == \"\"\n\n\ncheck(Solution().longestWord)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).\nThe numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.\n\nFor example, if s = \"acb\", we concatenate each letter's letter value, resulting in \"021\". After converting it, we get 21.\n\nYou are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.\nReturn true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:\n        def f(s):\n            res = 0\n            for c in s:\n                res = res * 10 + (ord(c) - ord('a'))\n            return res\n\n        return f(firstWord) + f(secondWord) == f(targetWord)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\") == True\n    assert candidate(firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\") == False\n    assert candidate(firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\") == True\n\n\ncheck(Solution().isSumEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a very large integer n, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n's numerical value by inserting x anywhere in the decimal representation of n\u200b\u200b\u200b\u200b\u200b\u200b. You cannot insert x to the left of the negative sign.\n\nFor example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.\nIf n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.\n\nReturn a string representing the maximum value of n\u200b\u200b\u200b\u200b\u200b\u200b after the insertion.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxValue(self, n: str, x: int) -> str:\n```",
        "solutions": "class Solution:\n    def maxValue(self, n: str, x: int) -> str:\n        if n[0] != '-':\n            for i, c in enumerate(n):\n                if int(c) < x:\n                    return n[:i] + str(x) + n[i:]\n            return n + str(x)\n        else:\n            for i, c in enumerate(n[1:]):\n                if int(c) > x:\n                    return n[: i + 1] + str(x) + n[i + 1 :]\n            return n + str(x)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = \"99\", x = 9) == \"999\"\n    assert candidate(n = \"-13\", x = 2) == \"-123\"\n\n\ncheck(Solution().maxValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays servers and tasks of lengths n\u200b\u200b\u200b\u200b\u200b\u200b and m\u200b\u200b\u200b\u200b\u200b\u200b respectively. servers[i] is the weight of the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b server, and tasks[j] is the time needed to process the j\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b task in seconds.\nTasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.\nAt second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.\nA server that is assigned task j at second t will be free again at second t + tasks[j].\nBuild an array ans\u200b\u200b\u200b\u200b of length m, where ans[j] is the index of the server the j\u200b\u200b\u200b\u200b\u200b\u200bth task will be assigned to.\nReturn the array ans\u200b\u200b\u200b\u200b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:\n        idle, busy = [], []\n        for i, weight in enumerate(servers):\n            heappush(idle, (weight, i))\n        res = []\n        for start, cost in enumerate(tasks):\n            while busy and busy[0][0] <= start:\n                _, s, i = heappop(busy)\n                heappush(idle, (s, i))\n            if idle:\n                s, i = heappop(idle)\n                heappush(busy, (start + cost, s, i))\n            else:\n                t, s, i = heappop(busy)\n                heappush(busy, (t + cost, s, i))\n            res.append(i)\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(servers = [3,3,2], tasks = [1,2,3,2,1,2]) == [2,2,0,2,1,2]\n    assert candidate(servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]) == [1,4,1,4,1,3,2]\n\n\ncheck(Solution().assignTasks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.\nAfter you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\n\nFor example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly\u00a02\u00a0hours, you do not need to wait.\n\nHowever, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\n\nFor example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.\n\nReturn the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:\n        n = len(dist)\n        f = [[inf] * (n + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        eps = 1e-8\n        for i, x in enumerate(dist, 1):\n            for j in range(i + 1):\n                if j < i:\n                    f[i][j] = min(f[i][j], ceil(f[i - 1][j] + x / speed - eps))\n                if j:\n                    f[i][j] = min(f[i][j], f[i - 1][j - 1] + x / speed)\n        for j in range(n + 1):\n            if f[n][j] <= hoursBefore + eps:\n                return j\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dist = [1,3,2], speed = 4, hoursBefore = 2) == 1\n    assert candidate(dist = [7,3,5,5], speed = 2, hoursBefore = 10) == 2\n    assert candidate(dist = [7,3,5,5], speed = 1, hoursBefore = 10) == -1\n\n\ncheck(Solution().minSkips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n        def rotate(matrix):\n            n = len(matrix)\n            for i in range(n // 2):\n                for j in range(i, n - 1 - i):\n                    t = matrix[i][j]\n                    matrix[i][j] = matrix[n - j - 1][i]\n                    matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                    matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                    matrix[j][n - i - 1] = t\n\n        for _ in range(4):\n            if mat == target:\n                return True\n            rotate(mat)\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[0,1],[1,0]], target = [[1,0],[0,1]]) == True\n    assert candidate(mat = [[0,1],[1,1]], target = [[1,0],[0,1]]) == False\n    assert candidate(mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]) == True\n\n\ncheck(Solution().findRotation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:\n\nFind the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.\nFind the next largest value in nums strictly smaller than largest. Let its value be nextLargest.\nReduce nums[i] to nextLargest.\n\nReturn the number of operations to make all elements in nums equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reductionOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def reductionOperations(self, nums: List[int]) -> int:\n        nums.sort()\n        ans = cnt = 0\n        for i, v in enumerate(nums[1:]):\n            if v != nums[i]:\n                cnt += 1\n            ans += cnt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,1,3]) == 3\n    assert candidate(nums = [1,1,1]) == 0\n    assert candidate(nums = [1,1,2,2,3]) == 4\n\n\ncheck(Solution().reductionOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:\n\nType-1: Remove the character at the start of the string s and append it to the end of the string.\nType-2: Pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa.\n\nReturn the minimum number of type-2 operations you need to perform such that s becomes alternating.\nThe string is called alternating if no two adjacent characters are equal.\n\nFor example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minFlips(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minFlips(self, s: str) -> int:\n        n = len(s)\n        target = \"01\"\n        cnt = sum(c != target[i & 1] for i, c in enumerate(s))\n        ans = min(cnt, n - cnt)\n        for i in range(n):\n            cnt -= s[i] != target[i & 1]\n            cnt += s[i] != target[(i + n) & 1]\n            ans = min(ans, cnt, n - cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"111000\") == 2\n    assert candidate(s = \"010\") == 0\n    assert candidate(s = \"1110\") == 1\n\n\ncheck(Solution().minFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.\nThe package sizes are given as an integer array packages, where packages[i] is the size of the ith package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.\nYou want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.\n\nFor example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6.\n\nReturn the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n        mod = 10**9 + 7\n        ans = inf\n        packages.sort()\n        for box in boxes:\n            box.sort()\n            if packages[-1] > box[-1]:\n                continue\n            s = i = 0\n            for b in box:\n                j = bisect_right(packages, b, lo=i)\n                s += (j - i) * b\n                i = j\n            ans = min(ans, s)\n        if ans == inf:\n            return -1\n        return (ans - sum(packages)) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(packages = [2,3,5], boxes = [[4,8],[2,8]]) == 6\n    assert candidate(packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]) == -1\n    assert candidate(packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]) == 9\n\n\ncheck(Solution().minWastedSpace)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nRun-length encoding is a compression algorithm that allows for an integer array nums with many segments of consecutive repeated numbers to be represented by a (generally smaller) 2D array encoded. Each encoded[i] = [vali, freqi] describes the ith segment of repeated numbers in nums where vali is the value that is repeated freqi times.\n\nFor example, nums = [1,1,1,2,2,2,2,2] is represented by the run-length encoded array encoded = [[1,3],[2,5]]. Another way to read this is \"three 1's followed by five 2's\".\n\nThe product of two run-length encoded arrays encoded1 and encoded2 can be calculated using the following steps:\n\nExpand both encoded1 and encoded2 into the full arrays nums1 and nums2 respectively.\nCreate a new array prodNums of length nums1.length and set prodNums[i] = nums1[i] * nums2[i].\nCompress prodNums into a run-length encoded array and return it.\n\nYou are given two run-length encoded arrays encoded1 and encoded2 representing full arrays nums1 and nums2 respectively. Both nums1 and nums2 have the same length. Each encoded1[i] = [vali, freqi] describes the ith segment of nums1, and each encoded2[j] = [valj, freqj] describes the jth segment of nums2.\nReturn the product of encoded1 and encoded2.\nNote: Compression should be done such that the run-length encoded array has the minimum possible length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findRLEArray(self, encoded1: List[List[int]], encoded2: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findRLEArray(\n        self, encoded1: List[List[int]], encoded2: List[List[int]]\n    ) -> List[List[int]]:\n        ans = []\n        j = 0\n        for vi, fi in encoded1:\n            while fi:\n                f = min(fi, encoded2[j][1])\n                v = vi * encoded2[j][0]\n                if ans and ans[-1][0] == v:\n                    ans[-1][1] += f\n                else:\n                    ans.append([v, f])\n                fi -= f\n                encoded2[j][1] -= f\n                if encoded2[j][1] == 0:\n                    j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(encoded1 = [[1,3],[2,3]], encoded2 = [[6,3],[3,3]]) == [[6,6]]\n    assert candidate(encoded1 = [[1,3],[2,1],[3,2]], encoded2 = [[2,3],[3,3]]) == [[2,3],[6,1],[9,2]]\n\n\ncheck(Solution().findRLEArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.\nThe array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeIncreasing(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def canBeIncreasing(self, nums: List[int]) -> bool:\n        def check(nums, i):\n            prev = -inf\n            for j, num in enumerate(nums):\n                if i == j:\n                    continue\n                if prev >= nums[j]:\n                    return False\n                prev = nums[j]\n            return True\n\n        i, n = 1, len(nums)\n        while i < n and nums[i - 1] < nums[i]:\n            i += 1\n        return check(nums, i - 1) or check(nums, i)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,10,5,7]) == True\n    assert candidate(nums = [2,3,1,2]) == False\n    assert candidate(nums = [1,1,1]) == False\n    assert candidate(nums = [1,2,3]) == True\n\n\ncheck(Solution().canBeIncreasing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:\n\nFind the leftmost occurrence of the substring part and remove it from s.\n\nReturn s after removing all occurrences of part.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeOccurrences(self, s: str, part: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeOccurrences(self, s: str, part: str) -> str:\n        while part in s:\n            s = s.replace(part, '', 1)\n        return s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"daabcbaabcbc\", part = \"abc\") == \"dab\"\n    assert candidate(s = \"axxxxyyyyb\", part = \"xy\") == \"ab\"\n\n\ncheck(Solution().removeOccurrences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.\n\nFor example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.\n\nGiven an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).\n\n\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [0] * (n + 1)\n        g = [0] * (n + 1)\n        for i, x in enumerate(nums, 1):\n            f[i] = max(g[i - 1] - x, f[i - 1])\n            g[i] = max(f[i - 1] + x, g[i - 1])\n        return max(f[n], g[n])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,5,3]) == 7\n    assert candidate(nums = [5,6,7,8]) == 8\n    assert candidate(nums = [6,2,1,2,4,5]) == 10\n\n\ncheck(Solution().maxAlternatingSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeEqual(self, words: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def makeEqual(self, words: List[str]) -> bool:\n        counter = Counter()\n        for word in words:\n            for c in word:\n                counter[c] += 1\n        n = len(words)\n        return all(count % n == 0 for count in counter.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abc\",\"aabc\",\"bc\"]) == True\n    assert candidate(words = [\"ab\",\"a\"]) == False\n\n\ncheck(Solution().makeEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\n\nChoose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].\n\n\t\nFor example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].\n\n\n\nReturn true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:\n        x, y, z = target\n        d = e = f = 0\n        for a, b, c in triplets:\n            if a <= x and b <= y and c <= z:\n                d = max(d, a)\n                e = max(e, b)\n                f = max(f, c)\n        return [d, e, f] == target\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]) == True\n    assert candidate(triplets = [[1,3,4],[2,5,8]], target = [2,5,8]) == True\n    assert candidate(triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]) == True\n    assert candidate(triplets = [[3,4,5],[4,5,6]], target = [3,2,5]) == False\n\n\ncheck(Solution().mergeTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n        def check(k):\n            i = j = 0\n            ids = set(removable[:k])\n            while i < m and j < n:\n                if i not in ids and s[i] == p[j]:\n                    j += 1\n                i += 1\n            return j == n\n\n        m, n = len(s), len(p)\n        left, right = 0, len(removable)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcacb\", p = \"ab\", removable = [3,1,0]) == 2\n    assert candidate(s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]) == 1\n    assert candidate(s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]) == 0\n\n\ncheck(Solution().maximumRemovals)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe product sum of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (0-indexed).\n\nFor example, if a = [1,2,3,4] and b = [5,2,3,1], the product sum would be 1*5 + 2*2 + 3*3 + 4*1 = 22.\n\nGiven two arrays nums1 and nums2 of length n, return the minimum product sum if you are allowed to rearrange the order of the elements in nums1.\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1.sort()\n        nums2.sort(reverse=True)\n        return sum(x * y for x, y in zip(nums1, nums2))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [5,3,4,2], nums2 = [4,2,2,5]) == 40\n    assert candidate(nums1 = [2,1,4,5,7], nums2 = [3,2,4,8,6]) == 65\n\n\ncheck(Solution().minProductSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nIn each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoEggDrop(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def twoEggDrop(self, n: int) -> int:\n        f = [0] + [inf] * n\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                f[i] = min(f[i], 1 + max(j - 1, f[i - j]))\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 2\n    assert candidate(n = 100) == 14\n\n\ncheck(Solution().twoEggDrop)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestOddNumber(self, num: str) -> str:\n```",
        "solutions": "class Solution:\n    def largestOddNumber(self, num: str) -> str:\n        for i in range(len(num) - 1, -1, -1):\n            if (int(num[i]) & 1) == 1:\n                return num[: i + 1]\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"52\") == \"5\"\n    assert candidate(num = \"4206\") == \"\"\n    assert candidate(num = \"35427\") == \"35427\"\n\n\ncheck(Solution().largestOddNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.\n\nFor example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.\n\nYou are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).\nReturn an array ans where ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\nThe value of |x| is defined as:\n\nx if x >= 0.\n-x if x < 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        m, n = len(nums), len(queries)\n        pre_sum = [[0] * 101 for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, 101):\n                t = 1 if nums[i - 1] == j else 0\n                pre_sum[i][j] = pre_sum[i - 1][j] + t\n\n        ans = []\n        for i in range(n):\n            left, right = queries[i][0], queries[i][1] + 1\n            t = inf\n            last = -1\n            for j in range(1, 101):\n                if pre_sum[right][j] - pre_sum[left][j] > 0:\n                    if last != -1:\n                        t = min(t, j - last)\n                    last = j\n            if t == inf:\n                t = -1\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]) == [2,1,4,1]\n    assert candidate(nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]) == [-1,1,1,3]\n\n\ncheck(Solution().minDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.\nAn island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.\nReturn the number of islands in grid2 that are considered sub-islands.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:\n        def dfs(i: int, j: int) -> int:\n            ok = grid1[i][j]\n            grid2[i][j] = 0\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid2[x][y] and not dfs(x, y):\n                    ok = 0\n            return ok\n\n        m, n = len(grid1), len(grid1[0])\n        dirs = (-1, 0, 1, 0, -1)\n        return sum(dfs(i, j) for i in range(m) for j in range(n) if grid2[i][j])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]) == 3\n    assert candidate(grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]) == 2 \n\n\ncheck(Solution().countSubIslands)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays nums1 and nums2 of length n, count the pairs of indices (i, j) such that i < j and nums1[i] + nums1[j] > nums2[i] + nums2[j].\nReturn the number of pairs satisfying the condition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,1,2,1], nums2 = [1,2,1,2]) == 1\n    assert candidate(nums1 = [1,10,6,2], nums2 = [1,4,1,5]) == 5\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTriples(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countTriples(self, n: int) -> int:\n        res = 0\n        for a in range(1, n + 1):\n            for b in range(1, n + 1):\n                t = a**2 + b**2\n                c = int(sqrt(t))\n                if c <= n and c**2 == t:\n                    res += 1\n        return res\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 2\n    assert candidate(n = 10) == 4\n\n\ncheck(Solution().countTriples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:\n        m, n = len(maze), len(maze[0])\n        i, j = entrance\n        q = deque([(i, j)])\n        maze[i][j] = '+'\n        ans = 0\n        while q:\n            ans += 1\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n and maze[x][y] == '.':\n                        if x == 0 or x == m - 1 or y == 0 or y == n - 1:\n                            return ans\n                        q.append((x, y))\n                        maze[x][y] = '+'\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]) == 1\n    assert candidate(maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]) == 2\n    assert candidate(maze = [[\".\",\"+\"]], entrance = [0,0]) == -1\n\n\ncheck(Solution().nearestExit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob take turns playing a game, with Alice\u00a0starting first.\nYou are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the following if there is still at least one '?' in num:\n\nChoose an index i where num[i] == '?'.\nReplace num[i] with any digit between '0' and '9'.\n\nThe game ends when there are no more '?' characters in num.\nFor Bob\u00a0to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. For Alice\u00a0to win, the sums must not be equal.\n\nFor example, if the game ended with num = \"243801\", then Bob\u00a0wins because 2+4+3 = 8+0+1. If the game ended with num = \"243803\", then Alice\u00a0wins because 2+4+3 != 8+0+3.\n\nAssuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumGame(self, num: str) -> bool:\n```",
        "solutions": "class Solution:\n    def sumGame(self, num: str) -> bool:\n        n = len(num)\n        cnt1 = num[: n // 2].count(\"?\")\n        cnt2 = num[n // 2 :].count(\"?\")\n        s1 = sum(int(x) for x in num[: n // 2] if x != \"?\")\n        s2 = sum(int(x) for x in num[n // 2 :] if x != \"?\")\n        return (cnt1 + cnt2) % 2 == 1 or s1 - s2 != 9 * (cnt2 - cnt1) // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"5023\") == False\n    assert candidate(num = \"25??\") == True\n    assert candidate(num = \"?3295???\") == False\n\n\ncheck(Solution().sumGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\nEach time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.\nIn the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).\nGiven maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(\n        self, maxTime: int, edges: List[List[int]], passingFees: List[int]\n    ) -> int:\n        m, n = maxTime, len(passingFees)\n        f = [[inf] * n for _ in range(m + 1)]\n        f[0][0] = passingFees[0]\n        for i in range(1, m + 1):\n            for x, y, t in edges:\n                if t <= i:\n                    f[i][x] = min(f[i][x], f[i - t][y] + passingFees[x])\n                    f[i][y] = min(f[i][y], f[i - t][x] + passingFees[y])\n        ans = min(f[i][n - 1] for i in range(m + 1))\n        return ans if ans < inf else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]) == 11\n    assert candidate(maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]) == 48\n    assert candidate(maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]) == -1\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\n\nFor example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.\n\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxProductDifference(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxProductDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        return nums[-1] * nums[-2] - nums[0] * nums[1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,6,2,7,4]) == 34\n    assert candidate(nums = [4,2,5,9,7,4,8]) == 64\n\n\ncheck(Solution().maxProductDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid\u200b\u200b\u200b, where m and n are both even integers, and an integer k.\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\n\nA cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:\n\nReturn the matrix after applying k cyclic rotations to it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        def rotate(p: int, k: int):\n            nums = []\n            for j in range(p, n - p - 1):\n                nums.append(grid[p][j])\n            for i in range(p, m - p - 1):\n                nums.append(grid[i][n - p - 1])\n            for j in range(n - p - 1, p, -1):\n                nums.append(grid[m - p - 1][j])\n            for i in range(m - p - 1, p, -1):\n                nums.append(grid[i][p])\n            k %= len(nums)\n            if k == 0:\n                return\n            nums = nums[k:] + nums[:k]\n            k = 0\n            for j in range(p, n - p - 1):\n                grid[p][j] = nums[k]\n                k += 1\n            for i in range(p, m - p - 1):\n                grid[i][n - p - 1] = nums[k]\n                k += 1\n            for j in range(n - p - 1, p, -1):\n                grid[m - p - 1][j] = nums[k]\n                k += 1\n            for i in range(m - p - 1, p, -1):\n                grid[i][p] = nums[k]\n                k += 1\n\n        m, n = len(grid), len(grid[0])\n        for p in range(min(m, n) >> 1):\n            rotate(p, k)\n        return grid\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[40,10],[30,20]], k = 1) == [[10,20],[40,30]]\n    assert candidate(grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2) == [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\n\n\ncheck(Solution().rotateGrid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA wonderful string is a string where at most one letter appears an odd number of times.\n\nFor example, \"ccjjc\" and \"abab\" are wonderful, but \"ab\" is not.\n\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wonderfulSubstrings(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def wonderfulSubstrings(self, word: str) -> int:\n        cnt = Counter({0: 1})\n        ans = st = 0\n        for c in word:\n            st ^= 1 << (ord(c) - ord(\"a\"))\n            ans += cnt[st]\n            for i in range(10):\n                ans += cnt[st ^ (1 << i)]\n            cnt[st] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"aba\") == 4\n    assert candidate(word = \"aabb\") == 9\n    assert candidate(word = \"he\") == 2\n\n\ncheck(Solution().wonderfulSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array ribbons, where ribbons[i] represents the length of the ith ribbon, and an integer k. You may cut any of the ribbons into any number of segments of positive integer lengths, or perform no cuts at all.\n\nFor example, if you have a ribbon of length 4, you can:\n\n\t\nKeep the ribbon of length 4,\nCut it into one ribbon of length 3 and one ribbon of length 1,\nCut it into two ribbons of length 2,\nCut it into one ribbon of length 2 and two ribbons of length 1, or\nCut it into four ribbons of length 1.\n\n\n\nYour goal is to obtain k ribbons of all the same positive integer length. You are allowed to throw away any excess ribbon as a result of cutting.\nReturn the maximum possible positive integer length that you can obtain k ribbons of, or 0 if you cannot obtain k ribbons of the same length.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxLength(self, ribbons: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxLength(self, ribbons: List[int], k: int) -> int:\n        left, right = 0, max(ribbons)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            cnt = sum(x // mid for x in ribbons)\n            if cnt >= k:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ribbons = [9,7,5], k = 3) == 5\n    assert candidate(ribbons = [7,5,9], k = 4) == 4\n    assert candidate(ribbons = [5,7,9], k = 22) == 0\n\n\ncheck(Solution().maxLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:\n        l, r = 0, len(mat) - 1\n        while l < r:\n            mid = (l + r) >> 1\n            j = mat[mid].index(max(mat[mid]))\n            if mat[mid][j] > mat[mid + 1][j]:\n                r = mid\n            else:\n                l = mid + 1\n        return [l, mat[l].index(max(mat[l]))]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,4],[3,2]]) == [0,1]\n    assert candidate(mat = [[10,20,15],[21,30,14],[7,16,32]]) == [1,1]\n\n\ncheck(Solution().findPeakGrid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.\nA zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n        return [nums[num] for num in nums]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,2,1,5,3,4]) == [0,1,2,4,5,3]\n    assert candidate(nums = [5,0,1,2,3,4]) == [4,5,0,1,2,3]\n\n\ncheck(Solution().buildArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.\nThe monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.\nYou have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge. The weapon is fully charged at the very start.\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.\nReturn the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        times = sorted((d - 1) // s for d, s in zip(dist, speed))\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(dist = [1,3,4], speed = [1,1,1]) == 3\n    assert candidate(dist = [1,1,2,3], speed = [1,1,1,1]) == 1\n    assert candidate(dist = [3,2,4], speed = [5,3,2]) == 1\n\n\ncheck(Solution().eliminateMaximum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\n\nFor example, \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, \"3245\" is not good because 3 is at an even index but is not even.\n\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countGoodNumbers(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countGoodNumbers(self, n: int) -> int:\n        mod = 10**9 + 7\n\n        def myPow(x, n):\n            res = 1\n            while n:\n                if (n & 1) == 1:\n                    res = res * x % mod\n                x = x * x % mod\n                n >>= 1\n            return res\n\n        return myPow(5, (n + 1) >> 1) * myPow(4, n >> 1) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 5\n    assert candidate(n = 4) == 400\n    assert candidate(n = 50) == 564908303\n\n\ncheck(Solution().countGoodNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n        def check(k: int) -> bool:\n            cnt = Counter()\n            for h in hh:\n                vis = set()\n                for i in range(1, len(h) - k + 1):\n                    j = i + k - 1\n                    x = (h[j] - h[i - 1] * p[j - i + 1]) % mod\n                    if x not in vis:\n                        vis.add(x)\n                        cnt[x] += 1\n            return max(cnt.values()) == m\n\n        m = len(paths)\n        mx = max(len(path) for path in paths)\n        base = 133331\n        mod = 2**64 + 1\n        p = [0] * (mx + 1)\n        p[0] = 1\n        for i in range(1, len(p)):\n            p[i] = p[i - 1] * base % mod\n        hh = []\n        for path in paths:\n            k = len(path)\n            h = [0] * (k + 1)\n            for i, x in enumerate(path, 1):\n                h[i] = h[i - 1] * base % mod + x\n            hh.append(h)\n        l, r = 0, min(len(path) for path in paths)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, paths = [[0,1,2,3,4],\n                     [2,3,4],\n                     [4,0,1,2,3]]) == 2\n    assert candidate(n = 3, paths = [[0],[1],[2]]) == 0\n    assert candidate(n = 5, paths = [[0,1,2,3,4],\n                     [4,3,2,1,0]]) == 1\n\n\ncheck(Solution().longestCommonSubpath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return true if s is a good string, or false otherwise.\nA string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areOccurrencesEqual(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def areOccurrencesEqual(self, s: str) -> bool:\n        cnt = Counter(s)\n        return len(set(cnt.values())) == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abacbc\") == True\n    assert candidate(s = \"aaabb\") == False\n\n\ncheck(Solution().areOccurrencesEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.\n\nFor example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.\n\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\nYou are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.\nReturn the chair number that the friend numbered targetFriend will sit on.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:\n        n = len(times)\n        h = list(range(n))\n        heapify(h)\n        for i in range(n):\n            times[i].append(i)\n        times.sort()\n        busy = []\n        for a, b, i in times:\n            while busy and busy[0][0] <= a:\n                heappush(h, heappop(busy)[1])\n            c = heappop(h)\n            if i == targetFriend:\n                return c\n            heappush(busy, (b, c))\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(times = [[1,4],[2,3],[4,6]], targetFriend = 1) == 1\n    assert candidate(times = [[3,10],[1,5],[2,6]], targetFriend = 0) == 2\n\n\ncheck(Solution().smallestChair)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.\nThe colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.\n\nFor example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.\n\nFor the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.\nYou want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.\n\nFor example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:\n\n\t\n[1,4) is colored {5,7} (with a sum of 12) from both the first and second segments.\n[4,7) is colored {7} from only the second segment.\n\n\n\nReturn the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:\n        d = defaultdict(int)\n        for l, r, c in segments:\n            d[l] += c\n            d[r] -= c\n        s = sorted([[k, v] for k, v in d.items()])\n        n = len(s)\n        for i in range(1, n):\n            s[i][1] += s[i - 1][1]\n        return [[s[i][0], s[i + 1][0], s[i][1]] for i in range(n - 1) if s[i][1]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(segments = [[1,4,5],[4,7,7],[1,7,9]]) == [[1,4,14],[4,7,16]]\n    assert candidate(segments = [[1,7,9],[6,8,15],[8,10,7]]) == [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]\n    assert candidate(segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]) == [[1,4,12],[4,7,12]]\n\n\ncheck(Solution().splitPainting)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n. You are initially standing at index 0. You can jump from index i to index j where i < j if:\n\nnums[i] <= nums[j] and nums[k] < nums[i] for all indexes k in the range i < k < j, or\nnums[i] > nums[j] and nums[k] >= nums[i] for all indexes k in the range i < k < j.\n\nYou are also given an integer array costs of length n where costs[i] denotes the cost of jumping to index i.\nReturn the minimum cost to jump to the index n - 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = defaultdict(list)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] < nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        f = [inf] * n\n        f[0] = 0\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,4,4,1], costs = [3,7,6,4,2]) == 8\n    assert candidate(nums = [0,1,2], costs = [1,1,1]) == 2\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\nSpecifically, ans is the concatenation of two nums arrays.\nReturn the array ans.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getConcatenation(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getConcatenation(self, nums: List[int]) -> List[int]:\n        return nums + nums\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1]) == [1,2,1,1,2,1]\n    assert candidate(nums = [1,3,2,1]) == [1,3,2,1,1,3,2,1]\n\n\ncheck(Solution().getConcatenation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, return the number of unique palindromes of length three that are a subsequence of s.\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted once.\nA palindrome is a string that reads the same forwards and backwards.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPalindromicSubsequence(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPalindromicSubsequence(self, s: str) -> int:\n        ans = 0\n        for c in ascii_lowercase:\n            l, r = s.find(c), s.rfind(c)\n            if r - l > 1:\n                ans += len(set(s[l + 1 : r]))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabca\") == 3\n    assert candidate(s = \"adc\") == 0\n    assert candidate(s = \"bbcbaba\") == 4\n\n\ncheck(Solution().countPalindromicSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def colorTheGrid(self, m: int, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def colorTheGrid(self, m: int, n: int) -> int:\n        def f1(x: int) -> bool:\n            last = -1\n            for _ in range(m):\n                if x % 3 == last:\n                    return False\n                last = x % 3\n                x //= 3\n            return True\n\n        def f2(x: int, y: int) -> bool:\n            for _ in range(m):\n                if x % 3 == y % 3:\n                    return False\n                x, y = x // 3, y // 3\n            return True\n\n        mod = 10**9 + 7\n        mx = 3**m\n        valid = {i for i in range(mx) if f1(i)}\n        d = defaultdict(list)\n        for x in valid:\n            for y in valid:\n                if f2(x, y):\n                    d[x].append(y)\n        f = [int(i in valid) for i in range(mx)]\n        for _ in range(n - 1):\n            g = [0] * mx\n            for i in valid:\n                for j in d[i]:\n                    g[i] = (g[i] + f[j]) % mod\n            f = g\n        return sum(f) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 1, n = 1) == 3\n    assert candidate(m = 1, n = 2) == 6\n    assert candidate(m = 5, n = 5) == 580986\n\n\ncheck(Solution().colorTheGrid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D array of strings equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] means that Ai / Bi = values[i].\nDetermine if there exists a contradiction in the equations. Return true if there is a contradiction, or false otherwise.\nNote:\n\nWhen checking if two numbers are equal, check that their absolute difference is less than 10-5.\nThe testcases are generated such that there are no cases targeting precision, i.e. using double is enough to solve the problem.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkContradictions(self, equations: List[List[str]], values: List[float]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkContradictions(\n        self, equations: List[List[str]], values: List[float]\n    ) -> bool:\n        def find(x: int) -> int:\n            if p[x] != x:\n                root = find(p[x])\n                w[x] *= w[p[x]]\n                p[x] = root\n            return p[x]\n\n        d = defaultdict(int)\n        n = 0\n        for e in equations:\n            for s in e:\n                if s not in d:\n                    d[s] = n\n                    n += 1\n        p = list(range(n))\n        w = [1.0] * n\n        eps = 1e-5\n        for (a, b), v in zip(equations, values):\n            a, b = d[a], d[b]\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pb] = pa\n                w[pb] = v * w[a] / w[b]\n            elif abs(v * w[a] - w[b]) >= eps:\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"a\",\"c\"]], values = [3,0.5,1.5]) == False\n    assert candidate(equations = [[\"le\",\"et\"],[\"le\",\"code\"],[\"code\",\"et\"]], values = [2,5,0.5]) == True\n\n\ncheck(Solution().checkContradictions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.\nYou are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. You are able to insert rungs at any positive integer height if a rung is not already there.\nReturn the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addRungs(self, rungs: List[int], dist: int) -> int:\n```",
        "solutions": "class Solution:\n    def addRungs(self, rungs: List[int], dist: int) -> int:\n        rungs = [0] + rungs\n        return sum((b - a - 1) // dist for a, b in pairwise(rungs))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rungs = [1,3,5,10], dist = 2) == 2\n    assert candidate(rungs = [3,6,8,10], dist = 3) == 0\n    assert candidate(rungs = [3,4,6,7], dist = 2) == 1\n    assert candidate(rungs = [5], dist = 10) == 0\n\n\ncheck(Solution().addRungs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.\nTo gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\nReturn the maximum number of points you can achieve.\nabs(x) is defined as:\n\nx for x >= 0.\n-x for x < 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        n = len(points[0])\n        f = points[0][:]\n        for p in points[1:]:\n            g = [0] * n\n            lmx = -inf\n            for j in range(n):\n                lmx = max(lmx, f[j] + j)\n                g[j] = max(g[j], p[j] + lmx - j)\n            rmx = -inf\n            for j in range(n - 1, -1, -1):\n                rmx = max(rmx, f[j] - j)\n                g[j] = max(g[j], p[j] + rmx + j)\n            f = g\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(points = [[1,2,3],[1,5,1],[3,1,1]]) == 9\n    assert candidate(points = [[1,5],[2,3],[4,2]]) == 11\n\n\ncheck(Solution().maxPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA value-equal string is a string where all characters are the same.\n\nFor example, \"1111\" and \"33\" are value-equal strings.\nIn contrast, \"123\" is not a value-equal string.\n\nGiven a digit string s, decompose the string into some number of consecutive value-equal substrings where exactly one substring has a length of 2 and the remaining substrings have a length of 3.\nReturn true if you can decompose s according to the above rules. Otherwise, return false.\nA substring is a contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isDecomposable(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isDecomposable(self, s: str) -> bool:\n        i, n = 0, len(s)\n        cnt2 = 0\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            if (j - i) % 3 == 1:\n                return False\n            cnt2 += (j - i) % 3 == 2\n            if cnt2 > 1:\n                return False\n            i = j\n        return cnt2 == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"000111000\") == False\n    assert candidate(s = \"00011111222\") == True\n    assert candidate(s = \"01110002223300\") == False\n\n\ncheck(Solution().isDecomposable)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of size n. You are asked to solve n queries for each integer i in the range 0 <= i < n.\nTo solve the ith query:\n\nFind the minimum value in each possible subarray of size i + 1 of the array nums.\nFind the maximum of those minimum values. This maximum is the answer to the query.\n\nReturn a 0-indexed integer array ans of size n such that ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximums(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findMaximums(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        left = [-1] * n\n        right = [n] * n\n        stk = []\n        for i, x in enumerate(nums):\n            while stk and nums[stk[-1]] >= x:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        ans = [0] * n\n        for i in range(n):\n            m = right[i] - left[i] - 1\n            ans[m - 1] = max(ans[m - 1], nums[i])\n        for i in range(n - 2, -1, -1):\n            ans[i] = max(ans[i], ans[i + 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,4]) == [4,2,1,0]\n    assert candidate(nums = [10,20,50,10]) == [50,20,10,10]\n\n\ncheck(Solution().findMaximums)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA perfectly straight street is represented by a number line. The street has street lamp(s) on it and is represented by a 2D integer array lights. Each lights[i] = [positioni, rangei] indicates that there is a street lamp at position positioni that lights up the area from [positioni - rangei, positioni + rangei] (inclusive).\nThe brightness of a position p is defined as the number of street lamp that light up the position p.\nGiven lights, return the brightest position on the street. If there are multiple brightest positions, return the smallest one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def brightestPosition(self, lights: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def brightestPosition(self, lights: List[List[int]]) -> int:\n        d = defaultdict(int)\n        for i, j in lights:\n            l, r = i - j, i + j\n            d[l] += 1\n            d[r + 1] -= 1\n        ans = s = mx = 0\n        for k in sorted(d):\n            s += d[k]\n            if mx < s:\n                mx = s\n                ans = k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(lights = [[-3,2],[1,2],[3,3]]) == -1\n    assert candidate(lights = [[1,0],[0,1]]) == 1\n    assert candidate(lights = [[1,2]]) == -1\n\n\ncheck(Solution().brightestPosition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of lowercase English letters, and an integer k. Your task is to convert the string into an integer by a special process, and then transform it by summing its digits repeatedly k times. More specifically, perform the following steps:\n\nConvert s into an integer by replacing each letter with its position in the alphabet (i.e.\u00a0replace 'a' with 1, 'b' with 2, ..., 'z' with 26).\nTransform the integer by replacing it with the sum of its digits.\nRepeat the transform operation (step 2) k times in total.\n\nFor example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations:\n\nConvert: \"zbax\" \u279d \"(26)(2)(1)(24)\" \u279d \"262124\" \u279d 262124\nTransform #1: 262124 \u279d 2 + 6 + 2 + 1 + 2 + 4 \u279d 17\nTransform #2: 17 \u279d 1 + 7 \u279d 8\n\nReturn the resulting integer after performing the operations described above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getLucky(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def getLucky(self, s: str, k: int) -> int:\n        s = ''.join(str(ord(c) - ord('a') + 1) for c in s)\n        for _ in range(k):\n            t = sum(int(c) for c in s)\n            s = str(t)\n        return int(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"iiii\", k = 1) == 36\n    assert candidate(s = \"leetcode\", k = 2) == 6\n\n\ncheck(Solution().getLucky)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].\nYou may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).\nReturn a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.\nA substring is a contiguous sequence of characters within the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        s = list(num)\n        for i, c in enumerate(s):\n            if change[int(c)] > int(c):\n                while i < len(s) and int(s[i]) <= change[int(s[i])]:\n                    s[i] = str(change[int(s[i])])\n                    i += 1\n                break\n        return ''.join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]) == \"832\"\n    assert candidate(num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]) == \"934\"\n    assert candidate(num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]) == \"5\"\n\n\ncheck(Solution().maximumNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).\nThe survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).\nEach student will be assigned to one mentor, and each mentor will have one student assigned to them. The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\n\nFor example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same.\n\nYou are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.\nGiven students and mentors, return the maximum compatibility score sum that can be achieved.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxCompatibilitySum(\n        self, students: List[List[int]], mentors: List[List[int]]\n    ) -> int:\n        def dfs(i, t):\n            if i == m:\n                nonlocal ans\n                ans = max(ans, t)\n                return\n            for j in range(m):\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(i + 1, t + g[i][j])\n                    vis[j] = False\n\n        m = len(students)\n        g = [[0] * m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                g[i][j] = sum(a == b for a, b in zip(students[i], mentors[j]))\n        vis = [False] * m\n        ans = 0\n        dfs(0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]) == 8\n    assert candidate(students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]) == 0\n\n\ncheck(Solution().maxCompatibilitySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).\nA good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:\n\nGiven two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkMove(self, board: List[List[str]], rMove: int, cMove: int, color: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkMove(\n        self, board: List[List[str]], rMove: int, cMove: int, color: str\n    ) -> bool:\n        for a in range(-1, 2):\n            for b in range(-1, 2):\n                if a == 0 and b == 0:\n                    continue\n                i, j = rMove, cMove\n                cnt = 0\n                while 0 <= i + a < 8 and 0 <= j + b < 8:\n                    cnt += 1\n                    i, j = i + a, j + b\n                    if cnt > 1 and board[i][j] == color:\n                        return True\n                    if board[i][j] in (color, \".\"):\n                        break\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\") == True\n    assert candidate(board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\") == False\n\n\ncheck(Solution().checkMove)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at\u00a0time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:\n        k += 1\n        n = len(nums)\n        g = [[0] * n for _ in range(n)]\n        for i in range(n):\n            s = mx = 0\n            for j in range(i, n):\n                s += nums[j]\n                mx = max(mx, nums[j])\n                g[i][j] = mx * (j - i + 1) - s\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h][i - 1])\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,20], k = 0) == 10\n    assert candidate(nums = [10,20,30], k = 1) == 10\n    assert candidate(nums = [10,20,15,30,20], k = 2) == 15\n\n\ncheck(Solution().minSpaceWastedKResizing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer n, return true if n has exactly three positive divisors. Otherwise, return false.\nAn integer m is a divisor of n if there exists an integer k such that n = k * m.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isThree(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isThree(self, n: int) -> bool:\n        return sum(n % i == 0 for i in range(2, n)) == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == False\n    assert candidate(n = 4) == True\n\n\ncheck(Solution().isThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.\nYou can work on the projects following these two rules:\n\nEvery week, you will finish exactly one milestone of one project. You\u00a0must\u00a0work every week.\nYou cannot work on two milestones from the same project for two consecutive weeks.\n\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints.\nReturn the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfWeeks(self, milestones: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfWeeks(self, milestones: List[int]) -> int:\n        mx, s = max(milestones), sum(milestones)\n        rest = s - mx\n        return rest * 2 + 1 if mx > rest + 1 else s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(milestones = [1,2,3]) == 6\n    assert candidate(milestones = [5,2,1]) == 7\n\n\ncheck(Solution().numberOfWeeks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.\n\nFor example, [0,1,2] and [0,0,1,1,1,2] are special.\nIn contrast, [2,1,0], [1], and [0,1,2,0] are not special.\n\nGiven an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [[0] * 3 for _ in range(n)]\n        f[0][0] = nums[0] == 0\n        for i in range(1, n):\n            if nums[i] == 0:\n                f[i][0] = (2 * f[i - 1][0] + 1) % mod\n                f[i][1] = f[i - 1][1]\n                f[i][2] = f[i - 1][2]\n            elif nums[i] == 1:\n                f[i][0] = f[i - 1][0]\n                f[i][1] = (f[i - 1][0] + 2 * f[i - 1][1]) % mod\n                f[i][2] = f[i - 1][2]\n            else:\n                f[i][0] = f[i - 1][0]\n                f[i][1] = f[i - 1][1]\n                f[i][2] = (f[i - 1][1] + 2 * f[i - 1][2]) % mod\n        return f[n - 1][2]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,2]) == 3\n    assert candidate(nums = [2,2,0,0]) == 0\n    assert candidate(nums = [0,1,2,0,1,2]) == 7\n\n\ncheck(Solution().countSpecialSubsequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.\n\nEach second, you may perform one of the following operations:\n\nMove the pointer one character counterclockwise or clockwise.\nType the character the pointer is currently on.\n\nGiven a string word, return the minimum number of seconds to type out the characters in word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minTimeToType(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def minTimeToType(self, word: str) -> int:\n        ans = prev = 0\n        for c in word:\n            curr = ord(c) - ord('a')\n            t = abs(prev - curr)\n            t = min(t, 26 - t)\n            ans += t + 1\n            prev = curr\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"abc\") == 5\n    assert candidate(word = \"bza\") == 7\n    assert candidate(word = \"zjpc\") == 34\n\n\ncheck(Solution().minTimeToType)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n integer matrix. You can do the following operation any number of times:\n\nChoose any two adjacent elements of matrix and multiply each of them by -1.\n\nTwo elements are considered adjacent if and only if they share a border.\nYour goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxMatrixSum(self, matrix: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxMatrixSum(self, matrix: List[List[int]]) -> int:\n        s = cnt = 0\n        mi = inf\n        for row in matrix:\n            for v in row:\n                s += abs(v)\n                mi = min(mi, abs(v))\n                if v < 0:\n                    cnt += 1\n        if cnt % 2 == 0 or mi == 0:\n            return s\n        return s - mi * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,-1],[-1,1]]) == 4\n    assert candidate(matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]) == 16\n\n\ncheck(Solution().maxMatrixSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\nYou are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.\nReturn the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPaths(self, n: int, roads: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countPaths(self, n: int, roads: List[List[int]]) -> int:\n        g = [[inf] * n for _ in range(n)]\n        for u, v, t in roads:\n            g[u][v] = g[v][u] = t\n        g[0][0] = 0\n        dist = [inf] * n\n        dist[0] = 0\n        f = [0] * n\n        f[0] = 1\n        vis = [False] * n\n        for _ in range(n):\n            t = -1\n            for j in range(n):\n                if not vis[j] and (t == -1 or dist[j] < dist[t]):\n                    t = j\n            vis[t] = True\n            for j in range(n):\n                if j == t:\n                    continue\n                ne = dist[t] + g[t][j]\n                if dist[j] > ne:\n                    dist[j] = ne\n                    f[j] = f[t]\n                elif dist[j] == ne:\n                    f[j] += f[t]\n        mod = 10**9 + 7\n        return f[-1] % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]) == 4\n    assert candidate(n = 2, roads = [[1,0,10]]) == 1\n\n\ncheck(Solution().countPaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfCombinations(self, num: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfCombinations(self, num: str) -> int:\n        def cmp(i, j, k):\n            x = lcp[i][j]\n            return x >= k or num[i + x] >= num[j + x]\n\n        mod = 10**9 + 7\n        n = len(num)\n        lcp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if num[i] == num[j]:\n                    lcp[i][j] = 1 + lcp[i + 1][j + 1]\n\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                v = 0\n                if num[i - j] != '0':\n                    if i - j - j >= 0 and cmp(i - j, i - j - j, j):\n                        v = dp[i - j][j]\n                    else:\n                        v = dp[i - j][min(j - 1, i - j)]\n                dp[i][j] = (dp[i][j - 1] + v) % mod\n        return dp[n][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"327\") == 2\n    assert candidate(num = \"094\") == 0\n    assert candidate(num = \"0\") == 0\n    assert candidate(num = \"9999999999999\") == 101\n\n\ncheck(Solution().numberOfCombinations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an array of strings words, determine whether s is a prefix string of words.\nA string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.\nReturn true if s is a prefix string of words, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPrefixString(self, s: str, words: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def isPrefixString(self, s: str, words: List[str]) -> bool:\n        n, m = len(s), 0\n        for i, w in enumerate(words):\n            m += len(w)\n            if m == n:\n                return \"\".join(words[: i + 1]) == s\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]) == True\n    assert candidate(s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]) == False\n\n\ncheck(Solution().isPrefixString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:\n\nChoose any piles[i] and remove floor(piles[i] / 2) stones from it.\n\nNotice that you can apply the operation on the same pile more than once.\nReturn the minimum possible total number of stones remaining after applying the k operations.\nfloor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        pq = [-x for x in piles]\n        heapify(pq)\n        for _ in range(k):\n            heapreplace(pq, pq[0] // 2)\n        return -sum(pq)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(piles = [5,4,9], k = 2) == 12\n    assert candidate(piles = [4,3,6,7], k = 3) == 12\n\n\ncheck(Solution().minStoneSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\n\nIt is the empty string, or\nIt can be written as AB, where both A and B are balanced strings, or\nIt can be written as [C], where C is a balanced string.\n\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwaps(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minSwaps(self, s: str) -> int:\n        x = 0\n        for c in s:\n            if c == \"[\":\n                x += 1\n            elif x:\n                x -= 1\n        return (x + 1) >> 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"][][\") == 1\n    assert candidate(s = \"]]][[[\") == 2\n    assert candidate(s = \"[]\") == 0\n\n\ncheck(Solution().minSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:\n\nYou choose any number of obstacles between 0 and i inclusive.\nYou must include the ith obstacle in the course.\nYou must put the chosen obstacles in the same order as they appear in obstacles.\nEvery obstacle (except the first) is taller than or the same height as the obstacle immediately before it.\n\nReturn an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:\n```",
        "solutions": "class BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], v)\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:\n        nums = sorted(set(obstacles))\n        n = len(nums)\n        tree = BinaryIndexedTree(n)\n        ans = []\n        for x in obstacles:\n            i = bisect_left(nums, x) + 1\n            ans.append(tree.query(i) + 1)\n            tree.update(i, ans[-1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(obstacles = [1,2,3,2]) == [1,2,3,3]\n    assert candidate(obstacles = [2,2,1]) == [1,2,1]\n    assert candidate(obstacles = [3,1,5,6,4,2]) == [1,1,2,3,2,2]\n\n\ncheck(Solution().longestObstacleCourseAtEachPosition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n```",
        "solutions": "class Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        return sum(p in word for p in patterns)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\") == 3\n    assert candidate(patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\") == 2\n    assert candidate(patterns = [\"a\",\"a\",\"a\"], word = \"ab\") == 3\n\n\ncheck(Solution().numOfStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = list(range(n + 2))\n        grid = [[False] * col for _ in range(row)]\n        top, bottom = n, n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]) == 2\n    assert candidate(row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]) == 1\n    assert candidate(row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]) == 3\n\n\ncheck(Solution().latestDayToCross)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).\nA middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].\nIf middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.\nReturn the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMiddleIndex(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMiddleIndex(self, nums: List[int]) -> int:\n        left, right = 0, sum(nums)\n        for i, x in enumerate(nums):\n            right -= x\n            if left == right:\n                return i\n            left += x\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,-1,8,4]) == 3\n    assert candidate(nums = [1,-1,4]) == 2\n    assert candidate(nums = [2,5]) == -1\n    assert candidate(nums = [1]) == 0\n\n\ncheck(Solution().findMiddleIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland.\nTo keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.\nland can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2].\nReturn a 2D array containing the 4-length arrays described above for each group of farmland in land. If there are no groups of farmland, return an empty array. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:\n        m, n = len(land), len(land[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if (\n                    land[i][j] == 0\n                    or (j > 0 and land[i][j - 1] == 1)\n                    or (i > 0 and land[i - 1][j] == 1)\n                ):\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1:\n                    x += 1\n                while y + 1 < n and land[x][y + 1] == 1:\n                    y += 1\n                ans.append([i, j, x, y])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(land = [[1,0,0],[0,1,1],[0,1,1]]) == [[0,0,0,0],[1,1,2,2]]\n    assert candidate(land = [[1,1],[1,1]]) == [[0,0,1,1]]\n    assert candidate(land = [[0]]) == []\n\n\ncheck(Solution().findFarmland)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\n\nFor example, if nums = [1, 2, 3, 4]:\n\n\t\n[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.\n[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n\n\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(f[i] for i in range(1, 1 << n)) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == 6\n    assert candidate(nums = [4,2,3,15]) == 5\n\n\ncheck(Solution().numberOfGoodSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findGCD(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findGCD(self, nums: List[int]) -> int:\n        return gcd(max(nums), min(nums))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,5,6,9,10]) == 2\n    assert candidate(nums = [7,5,6,8,3]) == 1\n    assert candidate(nums = [3,3]) == 3\n\n\ncheck(Solution().findGCD)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix mat and an integer target.\nChoose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.\nReturn the minimum absolute difference.\nThe absolute difference between two numbers a and b is the absolute value of a - b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimizeTheDifference(self, mat: List[List[int]], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimizeTheDifference(self, mat: List[List[int]], target: int) -> int:\n        f = {0}\n        for row in mat:\n            f = set(a + b for a in f for b in row)\n        return min(abs(v - target) for v in f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13) == 0\n    assert candidate(mat = [[1],[2],[3]], target = 100) == 94\n    assert candidate(mat = [[1,2,9,8,7]], target = 6) == 1\n\n\ncheck(Solution().minimizeTheDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nConsider a function that implements an algorithm similar to Binary Search. The function has two input parameters: sequence is a sequence of integers, and target is an integer value. The purpose of the function is to find if the target exists in the sequence.\nThe pseudocode of the function is as follows:\n\nfunc(sequence, target)\n  while sequence is not empty\n    randomly choose an element from sequence as the pivot\n    if pivot = target, return true\n    else if pivot < target, remove pivot and all elements to its left from the sequence\n    else, remove pivot and all elements to its right from the sequence\n  end while\n  return false\n\nWhen the sequence is sorted, the function works correctly for all values. When the sequence is not sorted, the function does not work for all values, but may still work for some values.\nGiven an integer array nums, representing the sequence, that contains unique numbers and may or may not be sorted, return the number of values that are guaranteed to be found using the function, for every possible pivot selection.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def binarySearchableNumbers(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def binarySearchableNumbers(self, nums: List[int]) -> int:\n        n = len(nums)\n        ok = [1] * n\n        mx, mi = -1000000, 1000000\n        for i, x in enumerate(nums):\n            if x < mx:\n                ok[i] = 0\n            else:\n                mx = x\n        for i in range(n - 1, -1, -1):\n            if nums[i] > mi:\n                ok[i] = 0\n            else:\n                mi = nums[i]\n        return sum(ok)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [7]) == 1\n    assert candidate(nums = [-1,5,2]) == 1\n\n\ncheck(Solution().binarySearchableNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.\nPick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.\nReturn the minimum possible difference.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        return min(nums[i + k - 1] - nums[i] for i in range(len(nums) - k + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [90], k = 1) == 0\n    assert candidate(nums = [9,4,1,7], k = 2) == 2\n\n\ncheck(Solution().minimumDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.\nReturn the string that represents the kth largest integer in nums.\nNote: Duplicate numbers should be counted distinctly. For example, if nums is [\"1\",\"2\",\"2\"], \"2\" is the first largest integer, \"2\" is the second-largest integer, and \"1\" is the third-largest integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n```",
        "solutions": "class Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        def cmp(a, b):\n            if len(a) != len(b):\n                return len(b) - len(a)\n            return 1 if b > a else -1\n\n        nums.sort(key=cmp_to_key(cmp))\n        return nums[k - 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [\"3\",\"6\",\"7\",\"10\"], k = 4) == \"3\"\n    assert candidate(nums = [\"2\",\"21\",\"12\",\"1\"], k = 3) == \"2\"\n    assert candidate(nums = [\"0\",\"0\"], k = 2) == \"0\"\n\n\ncheck(Solution().kthLargestNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.\nYou should finish the given tasks in a way that satisfies the following conditions:\n\nIf you start a task in a work session, you must complete it in the same work session.\nYou can start a new task immediately after finishing the previous one.\nYou may complete the tasks in any order.\n\nGiven tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.\nThe tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSessions(self, tasks: List[int], sessionTime: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSessions(self, tasks: List[int], sessionTime: int) -> int:\n        n = len(tasks)\n        ok = [False] * (1 << n)\n        for i in range(1, 1 << n):\n            t = sum(tasks[j] for j in range(n) if i >> j & 1)\n            ok[i] = t <= sessionTime\n        f = [inf] * (1 << n)\n        f[0] = 0\n        for i in range(1, 1 << n):\n            j = i\n            while j:\n                if ok[j]:\n                    f[i] = min(f[i], f[i ^ j] + 1)\n                j = (j - 1) & i\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [1,2,3], sessionTime = 3) == 2\n    assert candidate(tasks = [3,1,3,1,1], sessionTime = 8) == 2\n    assert candidate(tasks = [1,2,3,4,5], sessionTime = 15) == 1\n\n\ncheck(Solution().minSessions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\n\nFor example, if binary = \"001\", then all the good subsequences are [\"0\", \"0\", \"1\"], so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\", \"01\", and \"001\" are not good because they have leading zeros.\n\nReturn the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        f = g = 0\n        ans = 0\n        mod = 10**9 + 7\n        for c in binary:\n            if c == \"0\":\n                g = (g + f) % mod\n                ans = 1\n            else:\n                f = (f + g + 1) % mod\n        ans = (ans + f + g) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(binary = \"001\") == 2\n    assert candidate(binary = \"11\") == 2\n    assert candidate(binary = \"101\") == 5\n\n\ncheck(Solution().numberOfUniqueGoodSubsequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\n\nx if x >= 0.\n-x if x < 0.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countKDifference(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countKDifference(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        return sum(\n            abs(nums[i] - nums[j]) == k for i in range(n) for j in range(i + 1, n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,1], k = 1) == 4\n    assert candidate(nums = [1,3], k = 3) == 0\n    assert candidate(nums = [3,2,1,5,4], k = 2) == 3\n\n\ncheck(Solution().countKDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.\nGiven an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        changed.sort()\n        cnt = Counter(changed)\n        ans = []\n        for x in changed:\n            if cnt[x] == 0:\n                continue\n            cnt[x] -= 1\n            if cnt[x << 1] <= 0:\n                return []\n            cnt[x << 1] -= 1\n            ans.append(x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(changed = [1,3,4,2,6,8]) == [1,3,4]\n    assert candidate(changed = [6,3,0,1]) == []\n    assert candidate(changed = [1]) == []\n\n\ncheck(Solution().findOriginalArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. In one operation, you can replace any element in nums with any integer.\nnums is considered continuous if both of the following conditions are fulfilled:\n\nAll elements in nums are unique.\nThe difference between the maximum element and the minimum element in nums equals nums.length - 1.\n\nFor example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.\nReturn the minimum number of operations to make nums continuous.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        ans = n = len(nums)\n        nums = sorted(set(nums))\n        for i, v in enumerate(nums):\n            j = bisect_right(nums, v + n - 1)\n            ans = min(ans, n - (j - i))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,5,3]) == 0\n    assert candidate(nums = [1,2,3,5,6]) == 1\n    assert candidate(nums = [1,10,100,1000]) == 3\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nYou want to determine if there is a valid path that exists from vertex source to vertex destination.\nGiven edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n```",
        "solutions": "class Solution:\n    def validPath(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        def dfs(i):\n            if i == destination:\n                return True\n            vis.add(i)\n            for j in g[i]:\n                if j not in vis and dfs(j):\n                    return True\n            return False\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = set()\n        return dfs(source)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2) == True\n    assert candidate(n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5) == False\n\n\ncheck(Solution().validPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:\n\nnums[a] + nums[b] + nums[c] == nums[d], and\na < b < c < d\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        ans, n = 0, len(nums)\n        for a in range(n - 3):\n            for b in range(a + 1, n - 2):\n                for c in range(b + 1, n - 1):\n                    for d in range(c + 1, n):\n                        if nums[a] + nums[b] + nums[c] == nums[d]:\n                            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,6]) == 1\n    assert candidate(nums = [3,3,6,4,5]) == 0\n    assert candidate(nums = [1,1,1,3,5]) == 4\n\n\ncheck(Solution().countQuadruplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.\nA character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.\nReturn the number of weak characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        properties.sort(key=lambda x: (-x[0], x[1]))\n        ans = mx = 0\n        for _, x in properties:\n            ans += x < mx\n            mx = max(mx, x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(properties = [[5,5],[6,3],[3,6]]) == 0\n    assert candidate(properties = [[2,2],[3,3]]) == 1\n    assert candidate(properties = [[1,5],[10,4],[4,3]]) == 1\n\n\ncheck(Solution().numberOfWeakCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.\nInitially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:\n\nAssuming that on a day, you visit room i,\nif you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextVisit[i] where 0 <= nextVisit[i] <= i;\nif you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.\n\nReturn the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:\n        n = len(nextVisit)\n        f = [0] * n\n        mod = 10**9 + 7\n        for i in range(1, n):\n            f[i] = (f[i - 1] + 1 + f[i - 1] - f[nextVisit[i - 1]] + 1) % mod\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nextVisit = [0,0]) == 2\n    assert candidate(nextVisit = [0,0,2]) == 6\n    assert candidate(nextVisit = [0,1,2,0]) == 6\n\n\ncheck(Solution().firstDayBeenInAllRooms)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums, and you can perform the following operation any number of times on nums:\n\nSwap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].\n\nReturn true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def gcdSort(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def gcdSort(self, nums: List[int]) -> bool:\n        n = 10**5 + 10\n        p = list(range(n))\n        f = defaultdict(list)\n        mx = max(nums)\n        for i in range(2, mx + 1):\n            if f[i]:\n                continue\n            for j in range(i, mx + 1, i):\n                f[j].append(i)\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i in nums:\n            for j in f[i]:\n                p[find(i)] = find(j)\n\n        s = sorted(nums)\n        for i, num in enumerate(nums):\n            if s[i] != num and find(num) != find(s[i]):\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [7,21,3]) == True\n    assert candidate(nums = [5,2,6,2]) == False\n    assert candidate(nums = [10,5,9,3,15]) == True\n\n\ncheck(Solution().gcdSort)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing.\n\nFor example, if word = \"abcdefd\" and ch = \"d\", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be \"dcbaefd\".\n\nReturn the resulting string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reversePrefix(self, word: str, ch: str) -> str:\n```",
        "solutions": "class Solution:\n    def reversePrefix(self, word: str, ch: str) -> str:\n        i = word.find(ch)\n        return word if i == -1 else word[i::-1] + word[i + 1 :]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"abcdefd\", ch = \"d\") == \"dcbaefd\"\n    assert candidate(word = \"xyxzxe\", ch = \"z\") == \"zxyxxe\"\n    assert candidate(word = \"abcd\", ch = \"z\") == \"abcd\"\n\n\ncheck(Solution().reversePrefix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given n rectangles represented by a 0-indexed 2D integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle.\nTwo rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. More formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).\nReturn the number of pairs of interchangeable rectangles in rectangles.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:\n        ans = 0\n        cnt = Counter()\n        for w, h in rectangles:\n            g = gcd(w, h)\n            w, h = w // g, h // g\n            ans += cnt[(w, h)]\n            cnt[(w, h)] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rectangles = [[4,8],[3,6],[10,20],[15,30]]) == 6\n    assert candidate(rectangles = [[4,5],[7,8]]) == 0\n\n\ncheck(Solution().interchangeableRectangles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.\nThere are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.\nReturn an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.\nThe subtree rooted at a node x contains node x and all of its descendant nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def smallestMissingValueSubtree(\n        self, parents: List[int], nums: List[int]\n    ) -> List[int]:\n        def dfs(i: int):\n            if vis[i]:\n                return\n            vis[i] = True\n            if nums[i] < len(has):\n                has[nums[i]] = True\n            for j in g[i]:\n                dfs(j)\n\n        n = len(nums)\n        ans = [1] * n\n        g = [[] for _ in range(n)]\n        idx = -1\n        for i, p in enumerate(parents):\n            if i:\n                g[p].append(i)\n            if nums[i] == 1:\n                idx = i\n        if idx == -1:\n            return ans\n        vis = [False] * n\n        has = [False] * (n + 2)\n        i = 2\n        while idx != -1:\n            dfs(idx)\n            while has[i]:\n                i += 1\n            ans[idx] = i\n            idx = parents[idx]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(parents = [-1,0,0,2], nums = [1,2,3,4]) == [5,1,1,1]\n    assert candidate(parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]) == [7,1,1,4,2,1]\n    assert candidate(parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]) == [1,1,1,1,1,1,1]\n\n\ncheck(Solution().smallestMissingValueSubtree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with  m rows and n columns using all the elements from original.\nThe elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.\nReturn an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\n        if m * n != len(original):\n            return []\n        return [original[i : i + n] for i in range(0, m * n, n)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(original = [1,2,3,4], m = 2, n = 2) == [[1,2],[3,4]]\n    assert candidate(original = [1,2,3], m = 1, n = 3) == [[1,2,3]]\n    assert candidate(original = [1,2], m = 1, n = 1) == []\n    assert candidate(original = [3], m = 1, n = 2) == []\n\n\ncheck(Solution().construct2DArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numOfPairs(self, nums: List[str], target: str) -> int:\n```",
        "solutions": "class Solution:\n    def numOfPairs(self, nums: List[str], target: str) -> int:\n        n = len(nums)\n        return sum(\n            i != j and nums[i] + nums[j] == target for i in range(n) for j in range(n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\") == 4\n    assert candidate(nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\") == 2\n    assert candidate(nums = [\"1\",\"1\",\"1\"], target = \"11\") == 6\n\n\ncheck(Solution().numOfPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).\nYou are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:\n\nChange the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').\n\nReturn the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n        def f(c: str) -> int:\n            cnt = j = 0\n            ans = 0\n            for i, ch in enumerate(answerKey):\n                cnt += ch == c\n                while cnt > k:\n                    cnt -= answerKey[j] == c\n                    j += 1\n                ans = max(ans, i - j + 1)\n            return ans\n\n        return max(f(\"T\"), f(\"F\"))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(answerKey = \"TTFF\", k = 2) == 4\n    assert candidate(answerKey = \"TFFT\", k = 1) == 3\n    assert candidate(answerKey = \"TTFTTFTT\", k = 1) == 5\n\n\ncheck(Solution().maxConsecutiveAnswers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:\n\n1 <= pivot < n\nnums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]\n\nYou are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged.\nReturn the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToPartition(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def waysToPartition(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        s = [nums[0]] * n\n        right = defaultdict(int)\n        for i in range(1, n):\n            s[i] = s[i - 1] + nums[i]\n            right[s[i - 1]] += 1\n\n        ans = 0\n        if s[-1] % 2 == 0:\n            ans = right[s[-1] // 2]\n\n        left = defaultdict(int)\n        for v, x in zip(s, nums):\n            d = k - x\n            if (s[-1] + d) % 2 == 0:\n                t = left[(s[-1] + d) // 2] + right[(s[-1] - d) // 2]\n                if ans < t:\n                    ans = t\n            left[v] += 1\n            right[v] -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,-1,2], k = 3) == 1\n    assert candidate(nums = [0,0,0], k = 1) == 2\n    assert candidate(nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33) == 4\n\n\ncheck(Solution().waysToPartition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a programming language with only four operations and one variable X:\n\n++X and X++ increments the value of the variable X by 1.\n--X and X-- decrements the value of the variable X by 1.\n\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        return sum(1 if s[1] == '+' else -1 for s in operations)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(operations = [\"--X\",\"X++\",\"X++\"]) == 1\n    assert candidate(operations = [\"++X\",\"++X\",\"X++\"]) == 3\n    assert candidate(operations = [\"X++\",\"++X\",\"--X\",\"X--\"]) == 0\n\n\ncheck(Solution().finalValueAfterOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:\n\n2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1.\n1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied.\n0, if none of the previous conditions holds.\n\nReturn the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfBeauties(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfBeauties(self, nums: List[int]) -> int:\n        n = len(nums)\n        right = [nums[-1]] * n\n        for i in range(n - 2, -1, -1):\n            right[i] = min(right[i + 1], nums[i])\n        ans = 0\n        l = nums[0]\n        for i in range(1, n - 1):\n            r = right[i + 1]\n            if l < nums[i] < r:\n                ans += 2\n            elif nums[i - 1] < nums[i] < nums[i + 1]:\n                ans += 1\n            l = max(l, nums[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 2\n    assert candidate(nums = [2,4,6,4]) == 1\n    assert candidate(nums = [3,2,1]) == 0\n\n\ncheck(Solution().sumOfBeauties)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven three integers, k, digit1, and digit2, you want to find the smallest integer that is:\n\nLarger than k,\nA multiple of k, and\nComprised of only the digits digit1 and/or digit2.\n\nReturn the smallest such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (231 - 1), return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findInteger(self, k: int, digit1: int, digit2: int) -> int:\n```",
        "solutions": "class Solution:\n    def findInteger(self, k: int, digit1: int, digit2: int) -> int:\n        if digit1 == 0 and digit2 == 0:\n            return -1\n        if digit1 > digit2:\n            return self.findInteger(k, digit2, digit1)\n        q = deque([0])\n        while 1:\n            x = q.popleft()\n            if x > 2**31 - 1:\n                return -1\n            if x > k and x % k == 0:\n                return x\n            q.append(x * 10 + digit1)\n            if digit1 != digit2:\n                q.append(x * 10 + digit2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 2, digit1 = 0, digit2 = 2) == 20\n    assert candidate(k = 3, digit1 = 4, digit2 = 2) == 24\n    assert candidate(k = 2, digit1 = 0, digit2 = 0) == -1\n\n\ncheck(Solution().findInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array buildings, where buildings[i] = [starti, endi, heighti]. This means that there is a building with heighti in the half-closed segment [starti, endi).\nYou want to describe the heights of the buildings on the street with the minimum number of non-overlapping segments. The street can be represented by the 2D integer array street where street[j] = [leftj, rightj, averagej] describes a half-closed segment [leftj, rightj) of the road where the average heights of the buildings in the segment is averagej.\n\nFor example, if buildings = [[1,5,2],[3,10,4]], the street could be represented by street = [[1,3,2],[3,5,3],[5,10,4]] because:\n\n\t\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 5, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 5 to 10, there is only the second building with an average height of 4 / 1 = 4.\n\n\n\nGiven buildings, return the 2D integer array street as described above (excluding any areas of the street where there are no buldings). You may return the array in any order.\nThe average of n elements is the sum of the n elements divided (integer division) by n.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def averageHeightOfBuildings(self, buildings: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def averageHeightOfBuildings(self, buildings: List[List[int]]) -> List[List[int]]:\n        cnt = defaultdict(int)\n        d = defaultdict(int)\n        for start, end, height in buildings:\n            cnt[start] += 1\n            cnt[end] -= 1\n            d[start] += height\n            d[end] -= height\n        s = m = 0\n        last = -1\n        ans = []\n        for k, v in sorted(d.items()):\n            if m:\n                avg = s // m\n                if ans and ans[-1][2] == avg and ans[-1][1] == last:\n                    ans[-1][1] = k\n                else:\n                    ans.append([last, k, avg])\n            s += v\n            m += cnt[k]\n            last = k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(buildings = [[1,4,2],[3,9,4]]) == [[1,3,2],[3,4,3],[4,9,4]]\n    assert candidate(buildings = [[1,3,2],[2,5,3],[2,8,3]]) == [[1,3,2],[3,8,3]]\n    assert candidate(buildings = [[1,2,1],[5,6,1]]) == [[1,2,1],[5,6,1]]\n\n\ncheck(Solution().averageHeightOfBuildings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].\nReturn the maximum difference. If no such i and j exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumDifference(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumDifference(self, nums: List[int]) -> int:\n        mi = inf\n        ans = -1\n        for x in nums:\n            if x > mi:\n                ans = max(ans, x - mi)\n            else:\n                mi = x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [7,1,5,4]) == 4\n    assert candidate(nums = [9,4,3,2]) == -1\n    assert candidate(nums = [1,5,2,10]) == 9\n\n\ncheck(Solution().maximumDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.\nBoth robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).\nAt the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.\nThe first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def gridGame(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def gridGame(self, grid: List[List[int]]) -> int:\n        ans = inf\n        s1, s2 = sum(grid[0]), 0\n        for j, v in enumerate(grid[0]):\n            s1 -= v\n            ans = min(ans, max(s1, s2))\n            s2 += grid[1][j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,5,4],[1,5,1]]) == 4\n    assert candidate(grid = [[3,3,1],[8,5,2]]) == 4\n    assert candidate(grid = [[1,3,1,15],[1,3,3,1]]) == 7\n\n\ncheck(Solution().gridGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n matrix board, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.\nA word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:\n\nIt does not occupy a cell containing the character '#'.\nThe cell each letter is placed in must either be ' ' (empty) or match the letter already on the board.\nThere must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally.\nThere must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically.\n\nGiven a string word, return true if word can be placed in board, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:\n```",
        "solutions": "class Solution:\n    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:\n        def check(i, j, a, b):\n            x, y = i + a * k, j + b * k\n            if 0 <= x < m and 0 <= y < n and board[x][y] != '#':\n                return False\n            for c in word:\n                if (\n                    i < 0\n                    or i >= m\n                    or j < 0\n                    or j >= n\n                    or (board[i][j] != ' ' and board[i][j] != c)\n                ):\n                    return False\n                i, j = i + a, j + b\n            return True\n\n        m, n = len(board), len(board[0])\n        k = len(word)\n        for i in range(m):\n            for j in range(n):\n                left_to_right = (j == 0 or board[i][j - 1] == '#') and check(i, j, 0, 1)\n                right_to_left = (j == n - 1 or board[i][j + 1] == '#') and check(\n                    i, j, 0, -1\n                )\n                up_to_down = (i == 0 or board[i - 1][j] == '#') and check(i, j, 1, 0)\n                down_to_up = (i == m - 1 or board[i + 1][j] == '#') and check(\n                    i, j, -1, 0\n                )\n                if left_to_right or right_to_left or up_to_down or down_to_up:\n                    return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\") == True\n    assert candidate(board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\") == False\n    assert candidate(board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\") == True\n\n\ncheck(Solution().placeWordInCrossword)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:\n\nCompute multiplication, reading from left to right; Then,\nCompute addition, reading from left to right.\n\nYou are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:\n\nIf an answer equals the correct answer of the expression, this student will be rewarded 5 points;\nOtherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;\nOtherwise, this student will be rewarded 0 points.\n\nReturn the sum of the points of the students.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def scoreOfStudents(self, s: str, answers: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def scoreOfStudents(self, s: str, answers: List[int]) -> int:\n        def cal(s: str) -> int:\n            res, pre = 0, int(s[0])\n            for i in range(1, n, 2):\n                if s[i] == \"*\":\n                    pre *= int(s[i + 1])\n                else:\n                    res += pre\n                    pre = int(s[i + 1])\n            res += pre\n            return res\n\n        n = len(s)\n        x = cal(s)\n        m = (n + 1) >> 1\n        f = [[set() for _ in range(m)] for _ in range(m)]\n        for i in range(m):\n            f[i][i] = {int(s[i << 1])}\n        for i in range(m - 1, -1, -1):\n            for j in range(i, m):\n                for k in range(i, j):\n                    for l in f[i][k]:\n                        for r in f[k + 1][j]:\n                            if s[k << 1 | 1] == \"+\" and l + r <= 1000:\n                                f[i][j].add(l + r)\n                            elif s[k << 1 | 1] == \"*\" and l * r <= 1000:\n                                f[i][j].add(l * r)\n        cnt = Counter(answers)\n        ans = cnt[x] * 5\n        for k, v in cnt.items():\n            if k != x and k in f[0][m - 1]:\n                ans += v << 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"7+3*1*2\", answers = [20,13,42]) == 7\n    assert candidate(s = \"3+5*2\", answers = [13,0,10,13,13,16,16]) == 19\n    assert candidate(s = \"6+0*1\", answers = [12,9,6,4,8,6]) == 10\n\n\ncheck(Solution().scoreOfStudents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n availabe seats and n students standing in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.\nYou may perform the following move any number of times:\n\nIncrease or decrease the position of the ith student by 1 (i.e., moving the ith student from position\u00a0x\u00a0to x + 1 or x - 1)\n\nReturn the minimum number of moves required to move each student to a seat such that no two students are in the same seat.\nNote that there may be multiple seats or students in the same position at the beginning.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n        seats.sort()\n        students.sort()\n        return sum(abs(a - b) for a, b in zip(seats, students))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(seats = [3,1,5], students = [2,7,4]) == 4\n    assert candidate(seats = [4,1,5,9], students = [1,3,2,6]) == 7\n    assert candidate(seats = [2,2,6,6], students = [1,3,2,6]) == 4\n\n\ncheck(Solution().minMovesToSeat)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\n\nAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\nBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\nAlice and Bob cannot remove pieces from the edge of the line.\nIf a player cannot make a move on their turn, that player loses and the other player wins.\n\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def winnerOfGame(self, colors: str) -> bool:\n```",
        "solutions": "class Solution:\n    def winnerOfGame(self, colors: str) -> bool:\n        a = b = 0\n        for c, v in groupby(colors):\n            m = len(list(v)) - 2\n            if m > 0 and c == 'A':\n                a += m\n            elif m > 0 and c == 'B':\n                b += m\n        return a > b\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(colors = \"AAABABB\") == True\n    assert candidate(colors = \"AA\") == False\n    assert candidate(colors = \"ABBBBBBBAAA\") == False\n\n\ncheck(Solution().winnerOfGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.\nAll servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\nThe server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.\nAt the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\n\nIf it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.\nOtherwise, no more resending will occur from this server.\n\nThe network becomes idle when there are no messages passing between servers or arriving at servers.\nReturn the earliest second starting from which the network becomes idle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int:\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        q = deque([0])\n        vis = {0}\n        ans = d = 0\n        while q:\n            d += 1\n            t = d * 2\n            for _ in range(len(q)):\n                u = q.popleft()\n                for v in g[u]:\n                    if v not in vis:\n                        vis.add(v)\n                        q.append(v)\n                        ans = max(ans, (t - 1) // patience[v] * patience[v] + t + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[0,1],[1,2]], patience = [0,2,1]) == 8\n    assert candidate(edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]) == 3\n\n\ncheck(Solution().networkBecomesIdle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of n characters which are either 'X' or 'O'.\nA move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.\nReturn the minimum number of moves required so that all the characters of s are converted to 'O'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumMoves(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumMoves(self, s: str) -> int:\n        ans = i = 0\n        while i < len(s):\n            if s[i] == \"X\":\n                ans += 1\n                i += 3\n            else:\n                i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"XXX\") == 1\n    assert candidate(s = \"XXOX\") == 2\n    assert candidate(s = \"OOOO\") == 0\n\n\ncheck(Solution().minimumMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the ith stone.\nAlice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\nAssuming both players play optimally, return true if Alice wins and false if Bob wins.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def stoneGameIX(self, stones: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def stoneGameIX(self, stones: List[int]) -> bool:\n        def check(c):\n            if c[1] == 0:\n                return False\n            c[1] -= 1\n            turn = 1 + min(c[1], c[2]) * 2 + c[0]\n            if c[1] > c[2]:\n                turn += 1\n                c[1] -= 1\n            return turn % 2 == 1 and c[1] != c[2]\n\n        c = [0] * 3\n        for s in stones:\n            c[s % 3] += 1\n        c1 = [c[0], c[2], c[1]]\n        return check(c) or check(c1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(stones = [2,1]) == True\n    assert candidate(stones = [2]) == False\n    assert candidate(stones = [5,1,2,4,3]) == False\n\n\ncheck(Solution().stoneGameIX)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.\nA uni-value grid is a grid where all the elements of it are equal.\nReturn the minimum number of operations to make the grid uni-value. If it is not possible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, grid: List[List[int]], x: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, grid: List[List[int]], x: int) -> int:\n        nums = []\n        mod = grid[0][0] % x\n        for row in grid:\n            for v in row:\n                if v % x != mod:\n                    return -1\n                nums.append(v)\n        nums.sort()\n        mid = nums[len(nums) >> 1]\n        return sum(abs(v - mid) // x for v in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,4],[6,8]], x = 2) == 4\n    assert candidate(grid = [[1,5],[2,3]], x = 1) == 5\n    assert candidate(grid = [[1,2],[3,4]], x = 2) == -1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.\nReturn the minimum possible absolute difference.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n        n = len(nums) >> 1\n        f = defaultdict(set)\n        g = defaultdict(set)\n        for i in range(1 << n):\n            s = cnt = 0\n            s1 = cnt1 = 0\n            for j in range(n):\n                if (i & (1 << j)) != 0:\n                    s += nums[j]\n                    cnt += 1\n                    s1 += nums[n + j]\n                    cnt1 += 1\n                else:\n                    s -= nums[j]\n                    s1 -= nums[n + j]\n            f[cnt].add(s)\n            g[cnt1].add(s1)\n\n        ans = inf\n        for i in range(n + 1):\n            fi, gi = sorted(list(f[i])), sorted(list(g[n - i]))\n            # min(abs(f[i] + g[n - i]))\n            for a in fi:\n                left, right = 0, len(gi) - 1\n                b = -a\n                while left < right:\n                    mid = (left + right) >> 1\n                    if gi[mid] >= b:\n                        right = mid\n                    else:\n                        left = mid + 1\n                ans = min(ans, abs(a + gi[left]))\n                if left > 0:\n                    ans = min(ans, abs(a + gi[left - 1]))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,9,7,3]) == 2\n    assert candidate(nums = [-36,36]) == 72\n    assert candidate(nums = [2,-1,0,4,-2,-9]) == 0\n\n\ncheck(Solution().minimumDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthDistinct(self, arr: List[str], k: int) -> str:\n```",
        "solutions": "class Solution:\n    def kthDistinct(self, arr: List[str], k: int) -> str:\n        counter = Counter(arr)\n        for v in arr:\n            if counter[v] == 1:\n                k -= 1\n                if k == 0:\n                    return v\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2) == \"a\"\n    assert candidate(arr = [\"aaa\",\"aa\",\"a\"], k = 1) == \"aaa\"\n    assert candidate(arr = [\"a\",\"b\",\"a\"], k = 3) == \"\"\n\n\ncheck(Solution().kthDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.\n\nFor example, s = \"||**||**|*\", and a query [3, 8] denotes the substring \"*||**|\". The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.\n\nReturn an integer array answer where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        presum = [0] * (n + 1)\n        for i, c in enumerate(s):\n            presum[i + 1] = presum[i] + (c == '*')\n\n        left, right = [0] * n, [0] * n\n        l = r = -1\n        for i, c in enumerate(s):\n            if c == '|':\n                l = i\n            left[i] = l\n        for i in range(n - 1, -1, -1):\n            if s[i] == '|':\n                r = i\n            right[i] = r\n\n        ans = [0] * len(queries)\n        for k, (l, r) in enumerate(queries):\n            i, j = right[l], left[r]\n            if i >= 0 and j >= 0 and i < j:\n                ans[k] = presum[j] - presum[i + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"**|**|***|\", queries = [[2,5],[5,9]]) == [2,3]\n    assert candidate(s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]) == [9,0,0,0,0]\n\n\ncheck(Solution().platesBetweenCandles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countMaxOrSubsets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countMaxOrSubsets(self, nums: List[int]) -> int:\n        mx = ans = 0\n        for x in nums:\n            mx |= x\n\n        def dfs(i, t):\n            nonlocal mx, ans\n            if i == len(nums):\n                if t == mx:\n                    ans += 1\n                return\n            dfs(i + 1, t)\n            dfs(i + 1, t | nums[i])\n\n        dfs(0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1]) == 2\n    assert candidate(nums = [2,2,2]) == 7\n    assert candidate(nums = [3,2,1,5]) == 6\n\n\ncheck(Solution().countMaxOrSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.\nEach vertex has a traffic signal which changes its color from green to red and vice versa every\u00a0change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.\nThe second minimum value is defined as the smallest value strictly larger than the minimum value.\n\nFor example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.\n\nGiven n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.\nNotes:\n\nYou can go through any vertex any number of times, including 1 and n.\nYou can assume that when the journey starts, all signals have just turned green.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:\n```",
        "solutions": "class Solution:\n    def secondMinimum(\n        self, n: int, edges: List[List[int]], time: int, change: int\n    ) -> int:\n        g = defaultdict(set)\n        for u, v in edges:\n            g[u].add(v)\n            g[v].add(u)\n        q = deque([(1, 0)])\n        dist = [[inf] * 2 for _ in range(n + 1)]\n        dist[1][1] = 0\n        while q:\n            u, d = q.popleft()\n            for v in g[u]:\n                if d + 1 < dist[v][0]:\n                    dist[v][0] = d + 1\n                    q.append((v, d + 1))\n                elif dist[v][0] < d + 1 < dist[v][1]:\n                    dist[v][1] = d + 1\n                    if v == n:\n                        break\n                    q.append((v, d + 1))\n        ans = 0\n        for i in range(dist[n][1]):\n            ans += time\n            if i < dist[n][1] - 1 and (ans // change) % 2 == 1:\n                ans = (ans + change) // change * change\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5) == 13\n    assert candidate(n = 2, edges = [[1,2]], time = 3, change = 2) == 11\n\n\ncheck(Solution().secondMinimum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.\nA token is a valid word if all three of the following are true:\n\nIt only contains lowercase letters, hyphens, and/or punctuation (no digits).\nThere is at most one hyphen '-'. If present, it must be surrounded by lowercase characters (\"a-b\" is valid, but \"-ab\" and \"ab-\" are not valid).\nThere is at most one punctuation mark. If present, it must be at the end of the token (\"ab,\", \"cd!\", and \".\" are valid, but \"a!b\" and \"c.,\" are not valid).\n\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countValidWords(self, sentence: str) -> int:\n```",
        "solutions": "class Solution:\n    def countValidWords(self, sentence: str) -> int:\n        def check(token):\n            hyphen = False\n            for i, c in enumerate(token):\n                if c.isdigit() or (c in '!.,' and i < len(token) - 1):\n                    return False\n                if c == '-':\n                    if (\n                        hyphen\n                        or i == 0\n                        or i == len(token) - 1\n                        or not token[i - 1].islower()\n                        or not token[i + 1].islower()\n                    ):\n                        return False\n                    hyphen = True\n            return True\n\n        return sum(check(token) for token in sentence.split())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"cat and  dog\") == 3\n    assert candidate(sentence = \"!this  1-s b8d!\") == 0\n    assert candidate(sentence = \"alice and  bob are playing stone-game10\") == 5\n\n\ncheck(Solution().countValidWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def nextBeautifulNumber(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def nextBeautifulNumber(self, n: int) -> int:\n        for x in count(n + 1):\n            y = x\n            cnt = [0] * 10\n            while y:\n                y, v = divmod(y, 10)\n                cnt[v] += 1\n            if all(v == 0 or i == v for i, v in enumerate(cnt)):\n                return x\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 22\n    assert candidate(n = 1000) == 1333\n    assert candidate(n = 3000) == 3133\n\n\ncheck(Solution().nextBeautifulNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.\nEach node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.\nReturn the number of nodes that have the highest score.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countHighestScoreNodes(self, parents: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countHighestScoreNodes(self, parents: List[int]) -> int:\n        def dfs(i: int, fa: int):\n            cnt = score = 1\n            for j in g[i]:\n                if j != fa:\n                    t = dfs(j, i)\n                    score *= t\n                    cnt += t\n            if n - cnt:\n                score *= n - cnt\n            nonlocal ans, mx\n            if mx < score:\n                mx = score\n                ans = 1\n            elif mx == score:\n                ans += 1\n            return cnt\n\n        n = len(parents)\n        g = [[] for _ in range(n)]\n        for i in range(1, n):\n            g[parents[i]].append(i)\n        ans = mx = 0\n        dfs(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(parents = [-1,2,0,2,0]) == 3\n    assert candidate(parents = [-1,2,0]) == 2\n\n\ncheck(Solution().countHighestScoreNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.\nYou must find the minimum number of months needed to complete all the courses following these rules:\n\nYou may start taking a course at any time if the prerequisites are met.\nAny number of courses can be taken at the same time.\n\nReturn the minimum number of months needed to complete all the courses.\nNote: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        g = defaultdict(list)\n        indeg = [0] * n\n        for a, b in relations:\n            g[a - 1].append(b - 1)\n            indeg[b - 1] += 1\n        q = deque()\n        f = [0] * n\n        ans = 0\n        for i, (v, t) in enumerate(zip(indeg, time)):\n            if v == 0:\n                q.append(i)\n                f[i] = t\n                ans = max(ans, t)\n        while q:\n            i = q.popleft()\n            for j in g[i]:\n                f[j] = max(f[j], f[i] + time[j])\n                ans = max(ans, f[j])\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, relations = [[1,3],[2,3]], time = [3,2,5]) == 8\n    assert candidate(n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]) == 12\n\n\ncheck(Solution().minimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nTwo strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.\nGiven two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.\nThe frequency of a letter x is the number of times it occurs in the string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkAlmostEquivalent(self, word1: str, word2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkAlmostEquivalent(self, word1: str, word2: str) -> bool:\n        cnt = Counter(word1)\n        for c in word2:\n            cnt[c] -= 1\n        return all(abs(x) <= 3 for x in cnt.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"aaaa\", word2 = \"bccb\") == False\n    assert candidate(word1 = \"abcdeef\", word2 = \"abaaacc\") == True\n    assert candidate(word1 = \"cccddabba\", word2 = \"babababab\") == True\n\n\ncheck(Solution().checkAlmostEquivalent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the jth query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:\n        items.sort()\n        n, m = len(items), len(queries)\n        ans = [0] * len(queries)\n        i = mx = 0\n        for q, j in sorted(zip(queries, range(m))):\n            while i < n and items[i][0] <= q:\n                mx = max(mx, items[i][1])\n                i += 1\n            ans[j] = mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]) == [2,4,5,5,6,6]\n    assert candidate(items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]) == [4]\n    assert candidate(items = [[10,1000]], queries = [5]) == [0]\n\n\ncheck(Solution().maximumBeauty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).\nAdditionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.\nGiven the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxTaskAssign(\n        self, tasks: List[int], workers: List[int], pills: int, strength: int\n    ) -> int:\n        def check(x):\n            i = 0\n            q = deque()\n            p = pills\n            for j in range(m - x, m):\n                while i < x and tasks[i] <= workers[j] + strength:\n                    q.append(tasks[i])\n                    i += 1\n                if not q:\n                    return False\n                if q[0] <= workers[j]:\n                    q.popleft()\n                elif p == 0:\n                    return False\n                else:\n                    p -= 1\n                    q.pop()\n            return True\n\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n        left, right = 0, min(n, m)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1) == 3\n    assert candidate(tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5) == 1\n    assert candidate(tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10) == 2\n    assert candidate(tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5) == 3\n\n\ncheck(Solution().maxTaskAssign)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.\nx mod y denotes the remainder when x is divided by y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestEqual(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def smallestEqual(self, nums: List[int]) -> int:\n        for i, v in enumerate(nums):\n            if i % 10 == v:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2]) == 0\n    assert candidate(nums = [4,3,2,1]) == 2\n    assert candidate(nums = [1,2,3,4,5,6,7,8,9,0]) == -1\n    assert candidate(nums = [2,1,3,5,2]) == 1\n\n\ncheck(Solution().smallestEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any\u00a0two distinct critical points and maxDistance is the maximum distance between any\u00a0two distinct critical points. If there are fewer than two critical points, return [-1, -1].\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:\n        prev, curr = head, head.next\n        first = last = None\n        i = 1\n        ans = [inf, -inf]\n        while curr.next:\n            if curr.val < min(prev.val, curr.next.val) or curr.val > max(\n                prev.val, curr.next.val\n            ):\n                if last is None:\n                    first = last = i\n                else:\n                    ans[0] = min(ans[0], i - last)\n                    ans[1] = i - first\n                    last = i\n            i += 1\n            prev, curr = curr, curr.next\n        return ans if first != last else [-1, -1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([3,1])) == [-1,-1]\n    assert candidate(head = list_node([5,3,1,2,5,1,2])) == [1,3]\n    assert candidate(head = list_node([1,3,2,2,3,2,2,2,7])) == [3,3]\n    assert candidate(head = list_node([2,3,3,2])) == [-1,-1]\n\n\ncheck(Solution().nodesBetweenCriticalPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x:\nIf 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:\n\nx + nums[i]\nx - nums[i]\nx ^ nums[i] (bitwise-XOR)\n\nNote that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.\nReturn the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:\n        op1 = lambda x, y: x + y\n        op2 = lambda x, y: x - y\n        op3 = lambda x, y: x ^ y\n        ops = [op1, op2, op3]\n        vis = [False] * 1001\n        q = deque([(start, 0)])\n        while q:\n            x, step = q.popleft()\n            for num in nums:\n                for op in ops:\n                    nx = op(x, num)\n                    if nx == goal:\n                        return step + 1\n                    if 0 <= nx <= 1000 and not vis[nx]:\n                        q.append((nx, step + 1))\n                        vis[nx] = True\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,12], start = 2, goal = 12) == 2\n    assert candidate(nums = [3,5,7], start = 0, goal = -4) == 2\n    assert candidate(nums = [2,8,16], start = 0, goal = 1) == -1\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA substring is a contiguous (non-empty) sequence of characters within a string.\nA vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.\nGiven a string word, return the number of vowel substrings in word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countVowelSubstrings(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def countVowelSubstrings(self, word: str) -> int:\n        n = len(word)\n        s = set('aeiou')\n        return sum(set(word[i:j]) == s for i in range(n) for j in range(i + 1, n + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"aeiouu\") == 2\n    assert candidate(word = \"unicornarihan\") == 0\n    assert candidate(word = \"cuaieuouac\") == 7\n    assert candidate(word = \"bbaeixoubb\") == 0\n\n\ncheck(Solution().countVowelSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.\nA substring is a contiguous (non-empty) sequence of characters within a string.\nNote: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countVowels(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def countVowels(self, word: str) -> int:\n        n = len(word)\n        return sum((i + 1) * (n - i) for i, c in enumerate(word) if c in 'aeiou')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"aba\") == 6\n    assert candidate(word = \"abc\") == 3\n    assert candidate(word = \"ltcd\") == 0\n    assert candidate(word = \"noosabasboosa\") == 237\n\n\ncheck(Solution().countVowels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.\nA valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).\nReturn the maximum quality of a valid path.\nNote: There are at most four edges connected to each node.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximalPathQuality(\n        self, values: List[int], edges: List[List[int]], maxTime: int\n    ) -> int:\n        def dfs(u: int, cost: int, value: int):\n            if u == 0:\n                nonlocal ans\n                ans = max(ans, value)\n            for v, t in g[u]:\n                if cost + t <= maxTime:\n                    if vis[v]:\n                        dfs(v, cost + t, value)\n                    else:\n                        vis[v] = True\n                        dfs(v, cost + t, value + values[v])\n                        vis[v] = False\n\n        n = len(values)\n        g = [[] for _ in range(n)]\n        for u, v, t in edges:\n            g[u].append((v, t))\n            g[v].append((u, t))\n        vis = [False] * n\n        vis[0] = True\n        ans = 0\n        dfs(0, 0, values[0])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49) == 75\n    assert candidate(values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30) == 25\n    assert candidate(values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50) == 7\n    assert candidate(values = [0,1,2], edges = [[1,2,10]], maxTime = 10) == 0\n\n\ncheck(Solution().maximalPathQuality)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two string arrays words1 and words2, return the number of strings that appear exactly once in each\u00a0of the two arrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countWords(self, words1: List[str], words2: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def countWords(self, words1: List[str], words2: List[str]) -> int:\n        cnt1 = Counter(words1)\n        cnt2 = Counter(words2)\n        return sum(v == 1 and cnt2[w] == 1 for w, v in cnt1.items())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]) == 2\n    assert candidate(words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]) == 0\n    assert candidate(words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]) == 1\n\n\ncheck(Solution().countWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).\nThe robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.\n\nIf the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].\nIf the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].\n\nReturn the minimum total cost for this robot to return home.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, startPos: List[int], homePos: List[int], rowCosts: List[int], colCosts: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(\n        self,\n        startPos: List[int],\n        homePos: List[int],\n        rowCosts: List[int],\n        colCosts: List[int],\n    ) -> int:\n        i, j = startPos\n        x, y = homePos\n        ans = 0\n        if i < x:\n            ans += sum(rowCosts[i + 1 : x + 1])\n        else:\n            ans += sum(rowCosts[x:i])\n        if j < y:\n            ans += sum(colCosts[j + 1 : y + 1])\n        else:\n            ans += sum(colCosts[y:j])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]) == 18\n    assert candidate(startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]) == 0\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.\nA pyramidal plot of land can be defined as a set of cells with the following criteria:\n\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).\n\nAn inverse pyramidal plot of land can be defined as a set of cells with similar criteria:\n\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).\n\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\n\nGiven a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPyramids(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countPyramids(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * n for _ in range(m)]\n        ans = 0\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                elif not (i == m - 1 or j == 0 or j == n - 1):\n                    f[i][j] = min(f[i + 1][j - 1], f[i + 1][j], f[i + 1][j + 1]) + 1\n                    ans += f[i][j]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                elif i == 0 or j == 0 or j == n - 1:\n                    f[i][j] = 0\n                else:\n                    f[i][j] = min(f[i - 1][j - 1], f[i - 1][j], f[i - 1][j + 1]) + 1\n                    ans += f[i][j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,1,0],[1,1,1,1]]) == 2\n    assert candidate(grid = [[1,1,1],[1,1,1]]) == 2\n    assert candidate(grid = [[1,0,1],[0,0,0],[1,0,1]]) == 0\n    assert candidate(grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]) == 13\n\n\ncheck(Solution().countPyramids)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.\nYou are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].\nEach person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.\nReturn the time taken for the person initially at position k (0-indexed) to finish buying tickets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:\n        ans = 0\n        for i, t in enumerate(tickets):\n            if i <= k:\n                ans += min(tickets[k], t)\n            else:\n                ans += min(tickets[k] - 1, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tickets = [2,3,2], k = 2) == 6\n    assert candidate(tickets = [5,1,1,1], k = 0) == 8\n\n\ncheck(Solution().timeRequiredToBuy)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list.\nThe nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words,\n\nThe 1st node is assigned to the first group.\nThe 2nd and the 3rd nodes are assigned to the second group.\nThe 4th, 5th, and 6th nodes are assigned to the third group, and so on.\n\nNote that the length of the last group may be less than or equal to 1 + the length of the second to last group.\nReverse the nodes in each group with an even length, and return the head of the modified linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseEvenLengthGroups(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseEvenLengthGroups(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        def reverse(head, l):\n            prev, cur, tail = None, head, head\n            i = 0\n            while cur and i < l:\n                t = cur.next\n                cur.next = prev\n                prev = cur\n                cur = t\n                i += 1\n            tail.next = cur\n            return prev\n\n        n = 0\n        t = head\n        while t:\n            t = t.next\n            n += 1\n        dummy = ListNode(0, head)\n        prev = dummy\n        l = 1\n        while (1 + l) * l // 2 <= n and prev:\n            if l % 2 == 0:\n                prev.next = reverse(prev.next, l)\n            i = 0\n            while i < l and prev:\n                prev = prev.next\n                i += 1\n            l += 1\n        left = n - l * (l - 1) // 2\n        if left > 0 and left % 2 == 0:\n            prev.next = reverse(prev.next, left)\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([5,2,6,3,9,1,7,3,8,4])), list_node([5,6,2,3,9,1,4,8,3,7]))\n    assert is_same_list(candidate(head = list_node([1,1,0,6])), list_node([1,0,1,6]))\n    assert is_same_list(candidate(head = list_node([2,1])), list_node([2,1]))\n\n\ncheck(Solution().reverseEvenLengthGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.\noriginalText is placed first in a top-left to bottom-right manner.\n\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.\nencodedText is then formed by appending all characters of the matrix in a row-wise fashion.\n\nThe characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\nFor example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner:\n\nThe blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\".\nGiven the encoded string encodedText and number of rows rows, return the original string originalText.\nNote: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decodeCiphertext(self, encodedText: str, rows: int) -> str:\n```",
        "solutions": "class Solution:\n    def decodeCiphertext(self, encodedText: str, rows: int) -> str:\n        ans = []\n        cols = len(encodedText) // rows\n        for j in range(cols):\n            x, y = 0, j\n            while x < rows and y < cols:\n                ans.append(encodedText[x * cols + y])\n                x, y = x + 1, y + 1\n        return ''.join(ans).rstrip()\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(encodedText = \"ch   ie   pr\", rows = 3) == \"cipher\"\n    assert candidate(encodedText = \"iveo    eed   l te   olc\", rows = 4) == \"i love leetcode\"\n    assert candidate(encodedText = \"coding\", rows = 1) == \"coding\"\n    assert candidate(encodedText = \" b  ac\", rows = 2) == \" abc\"\n\n\ncheck(Solution().decodeCiphertext)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.\nYou are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.\nInitially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.\nA friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.\nReturn a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.\nNote: If uj and vj are already direct friends, the request is still successful.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:\n```",
        "solutions": "class Solution:\n    def friendRequests(\n        self, n: int, restrictions: List[List[int]], requests: List[List[int]]\n    ) -> List[bool]:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        p = list(range(n))\n        ans = []\n        for u, v in requests:\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                ans.append(True)\n            else:\n                ok = True\n                for x, y in restrictions:\n                    px, py = find(x), find(y)\n                    if (pu == px and pv == py) or (pu == py and pv == px):\n                        ok = False\n                        break\n                ans.append(ok)\n                if ok:\n                    p[pu] = pv\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]) == [True,False]\n    assert candidate(n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]) == [True,False]\n    assert candidate(n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]) == [True,False,True,False]\n\n\ncheck(Solution().friendRequests)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house.\nReturn the maximum distance between two houses with different colors.\nThe distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDistance(self, colors: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDistance(self, colors: List[int]) -> int:\n        ans, n = 0, len(colors)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if colors[i] != colors[j]:\n                    ans = max(ans, abs(i - j))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(colors = [1,1,1,6,1,1,1]) == 3\n    assert candidate(colors = [1,8,3,8,3]) == 4\n    assert candidate(colors = [0,1]) == 1\n\n\ncheck(Solution().maxDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).\nYou are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:\n\nCover all the empty cells.\nDo not cover any of the occupied cells.\nWe can put as many stamps as we want.\nStamps can overlap with each other.\nStamps are not allowed to be rotated.\nStamps must stay completely inside the grid.\n\nReturn true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def possibleToStamp(self, grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:\n```",
        "solutions": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3) == True\n    assert candidate(grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 ) == False \n\n\ncheck(Solution().possibleToStamp)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time.\nThe ith day is a good day to rob the bank if:\n\nThere are at least time days before and after the ith day,\nThe number of guards at the bank for the time days before i are non-increasing, and\nThe number of guards at the bank for the time days after i are non-decreasing.\n\nMore formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].\nReturn a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        return [i for i in range(n) if time <= min(left[i], right[i])]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(security = [5,3,3,3,5,6,2], time = 2) == [2,3]\n    assert candidate(security = [1,1,1,1,1], time = 0) == [0,1,2,3,4]\n    assert candidate(security = [1,2,3,4,5,6], time = 2) == []\n\n\ncheck(Solution().goodDaysToRobBank)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.\nThe bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.\nYou may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\nGiven the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumDetonation(self, bombs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumDetonation(self, bombs: List[List[int]]) -> int:\n        def check(i, j):\n            if i == j:\n                return False\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = defaultdict(list)\n        n = len(bombs)\n        for i in range(n):\n            for j in range(n):\n                if check(i, j):\n                    g[i].append(j)\n        ans = 0\n        for k in range(n):\n            q = deque([k])\n            vis = [False] * n\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.popleft()\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bombs = [[2,1,3],[6,1,4]]) == 2\n    assert candidate(bombs = [[1,1,5],[10,10,5]]) == 1\n    assert candidate(bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]) == 5\n\n\ncheck(Solution().maximumDetonation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s consisting of only lowercase English letters, and an integer count. A substring of s is said to be an equal count substring if, for each unique letter in the substring, it appears exactly count times in the substring.\nReturn the number of equal count substrings in s.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def equalCountSubstrings(self, s: str, count: int) -> int:\n```",
        "solutions": "class Solution:\n    def equalCountSubstrings(self, s: str, count: int) -> int:\n        ans = 0\n        for i in range(1, 27):\n            k = i * count\n            if k > len(s):\n                break\n            cnt = Counter()\n            t = 0\n            for j, c in enumerate(s):\n                cnt[c] += 1\n                t += cnt[c] == count\n                t -= cnt[c] == count + 1\n                if j >= k:\n                    cnt[s[j - k]] -= 1\n                    t += cnt[s[j - k]] == count\n                    t -= cnt[s[j - k]] == count - 1\n                ans += i == t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaabcbbcc\", count = 3) == 3\n    assert candidate(s = \"abcd\", count = 2) == 0\n    assert candidate(s = \"a\", count = 5) == 0\n\n\ncheck(Solution().equalCountSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and a target element target.\nA target index is an index i such that nums[i] == target.\nReturn a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:\n        nums.sort()\n        return [i for i, v in enumerate(nums) if v == target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,5,2,3], target = 2) == [1,2]\n    assert candidate(nums = [1,2,5,2,3], target = 3) == [3]\n    assert candidate(nums = [1,2,5,2,3], target = 5) == [4]\n    assert candidate(nums = [1,2,5,2,3], target = 4) == []\n\n\ncheck(Solution().targetIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums of n integers, and an integer k.\nThe k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.\nBuild and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.\nThe average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.\n\nFor example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        k = k << 1 | 1\n        n = len(nums)\n        ans = [-1] * n\n        if k > n:\n            return ans\n        s = sum(nums[:k])\n        j = k // 2\n        ans[j] = s // k\n        for i in range(k, n):\n            j += 1\n            s += nums[i] - nums[i - k]\n            ans[j] = s // k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [7,4,3,9,1,8,5,2,6], k = 3) == [-1,-1,-1,5,4,4,-1,-1,-1]\n    assert candidate(nums = [100000], k = 0) == [100000]\n    assert candidate(nums = [8], k = 100000) == [-1]\n\n\ncheck(Solution().getAverages)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of distinct integers nums.\nThere is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.\nA deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.\nReturn the minimum number of deletions it would take to remove both the minimum and maximum element from the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDeletions(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDeletions(self, nums: List[int]) -> int:\n        mi = mx = 0\n        for i, num in enumerate(nums):\n            if num < nums[mi]:\n                mi = i\n            if num > nums[mx]:\n                mx = i\n        if mi > mx:\n            mi, mx = mx, mi\n        return min(mx + 1, len(nums) - mi, mi + 1 + len(nums) - mx)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,10,7,5,4,1,8,6]) == 5\n    assert candidate(nums = [0,-4,19,1,8,-2,-3,5]) == 3\n    assert candidate(nums = [101]) == 1\n\n\ncheck(Solution().minimumDeletions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.\nPerson 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.\nThe secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\nReturn a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findAllPeople(\n        self, n: int, meetings: List[List[int]], firstPerson: int\n    ) -> List[int]:\n        vis = [False] * n\n        vis[0] = vis[firstPerson] = True\n        meetings.sort(key=lambda x: x[2])\n        i, m = 0, len(meetings)\n        while i < m:\n            j = i\n            while j + 1 < m and meetings[j + 1][2] == meetings[i][2]:\n                j += 1\n            s = set()\n            g = defaultdict(list)\n            for x, y, _ in meetings[i : j + 1]:\n                g[x].append(y)\n                g[y].append(x)\n                s.update([x, y])\n            q = deque([u for u in s if vis[u]])\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        vis[v] = True\n                        q.append(v)\n            i = j + 1\n        return [i for i, v in enumerate(vis) if v]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1) == [0,1,2,3,5]\n    assert candidate(n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3) == [0,1,3]\n    assert candidate(n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1) == [0,1,2,3,4]\n\n\ncheck(Solution().findAllPeople)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array digits, where each element is a digit. The array may contain duplicates.\nYou need to find all the unique integers that follow the given requirements:\n\nThe integer consists of the concatenation of three elements from digits in any arbitrary order.\nThe integer does not have leading zeros.\nThe integer is even.\n\nFor example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.\nReturn a sorted array of the unique integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        ans = []\n        counter = Counter(digits)\n        for i in range(100, 1000, 2):\n            t = []\n            k = i\n            while k:\n                t.append(k % 10)\n                k //= 10\n            cnt = Counter(t)\n            if all([counter[i] >= cnt[i] for i in range(10)]):\n                ans.append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(digits = [2,1,3,0]) == [102,120,130,132,210,230,302,310,312,320]\n    assert candidate(digits = [2,2,8,8,2]) == [222,228,282,288,822,828,882]\n    assert candidate(digits = [3,7,5]) == []\n\n\ncheck(Solution().findEvenNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.\nThe middle node of a linked list of size n is the \u230an / 2\u230bth node from the start using 0-based indexing, where \u230ax\u230b denotes the largest integer less than or equal to x.\n\nFor n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n        slow, fast = dummy, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        slow.next = slow.next.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,3,4,7,1,2,6])), list_node([1,3,4,1,2,6]))\n    assert is_same_list(candidate(head = list_node([1,2,3,4])), list_node([1,2,4]))\n    assert is_same_list(candidate(head = list_node([2,1])), list_node([2]))\n\n\ncheck(Solution().deleteMiddle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t.\nFind the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. Each letter indicates a specific direction:\n\n'L' means to go from a node to its left child node.\n'R' means to go from a node to its right child node.\n'U' means to go from a node to its parent node.\n\nReturn the step-by-step directions of the shortest path from node s to node t.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getDirections(\n        self, root: Optional[TreeNode], startValue: int, destValue: int\n    ) -> str:\n        edges = defaultdict(list)\n        ans = None\n        visited = set()\n\n        def traverse(root):\n            if not root:\n                return\n            if root.left:\n                edges[root.val].append([root.left.val, 'L'])\n                edges[root.left.val].append([root.val, 'U'])\n            if root.right:\n                edges[root.val].append([root.right.val, 'R'])\n                edges[root.right.val].append([root.val, 'U'])\n            traverse(root.left)\n            traverse(root.right)\n\n        def dfs(start, dest, t):\n            nonlocal ans\n            if start in visited:\n                return\n            if start == dest:\n                if ans is None or len(ans) > len(t):\n                    ans = ''.join(t)\n                return\n            visited.add(start)\n            for d, k in edges[start]:\n                t.append(k)\n                dfs(d, dest, t)\n                t.pop()\n\n        traverse(root)\n        dfs(startValue, destValue, [])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,1,2,3,None,6,4]), startValue = 3, destValue = 6) == \"UURL\"\n    assert candidate(root = tree_node([2,1]), startValue = 2, destValue = 1) == \"L\"\n\n\ncheck(Solution().getDirections)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA maze consists of n rooms numbered from 1 to n, and some rooms are connected by corridors. You are given a 2D integer array corridors where corridors[i] = [room1i, room2i] indicates that there is a corridor connecting room1i and room2i, allowing a person in the maze to go from room1i to room2i and vice versa.\nThe designer of the maze wants to know how confusing the maze is. The confusion score of the maze is the number of different cycles of length 3.\n\nFor example, 1 \u2192 2 \u2192 3 \u2192 1 is a cycle of length 3, but 1 \u2192 2 \u2192 3 \u2192 4 and 1 \u2192 2 \u2192 3 \u2192 2 \u2192 1 are not.\n\nTwo cycles are considered to be different if one or more of the rooms visited in the first cycle is not in the second cycle.\nReturn the confusion score of the maze.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPaths(self, n: int, corridors: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfPaths(self, n: int, corridors: List[List[int]]) -> int:\n        g = defaultdict(set)\n        for a, b in corridors:\n            g[a].add(b)\n            g[b].add(a)\n        ans = 0\n        for i in range(1, n + 1):\n            for j, k in combinations(g[i], 2):\n                if j in g[k]:\n                    ans += 1\n        return ans // 3\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, corridors = [[1,2],[5,2],[4,1],[2,4],[3,1],[3,4]]) == 2\n    assert candidate(n = 4, corridors = [[1,2],[3,4]]) == 0\n\n\ncheck(Solution().numberOfPaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a list of words that are separated by a single space\u00a0with no leading or trailing spaces.\nYou are given an array of strings sentences, where each sentences[i] represents a single sentence.\nReturn the maximum number of words that appear in a single sentence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        return 1 + max(s.count(' ') for s in sentences)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]) == 6\n    assert candidate(sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]) == 3\n\n\ncheck(Solution().mostWordsFound)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.\nYou are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.\nReturn a list of all the recipes that you can create. You may return the answer in any order.\nNote that two recipes may contain each other in their ingredients.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def findAllRecipes(\n        self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]\n    ) -> List[str]:\n        g = defaultdict(list)\n        indeg = defaultdict(int)\n        for a, b in zip(recipes, ingredients):\n            for v in b:\n                g[v].append(a)\n            indeg[a] += len(b)\n        q = deque(supplies)\n        ans = []\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                for j in g[i]:\n                    indeg[j] -= 1\n                    if indeg[j] == 0:\n                        ans.append(j)\n                        q.append(j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]) == [\"bread\"]\n    assert candidate(recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]) == [\"bread\",\"sandwich\"]\n    assert candidate(recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]) == [\"bread\",\"sandwich\",\"burger\"]\n    assert candidate(recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\"]) == []\n\n\ncheck(Solution().findAllRecipes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:\n\nIt is ().\nIt can be written as AB (A concatenated with B), where A and B are valid parentheses strings.\nIt can be written as (A), where A is a valid parentheses string.\n\nYou are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,\n\nIf locked[i] is '1', you cannot change s[i].\nBut if locked[i] is '0', you can change s[i] to either '(' or ')'.\n\nReturn true if you can make s a valid parentheses string. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeValid(self, s: str, locked: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canBeValid(self, s: str, locked: str) -> bool:\n        n = len(s)\n        if n & 1:\n            return False\n        x = 0\n        for i in range(n):\n            if s[i] == '(' or locked[i] == '0':\n                x += 1\n            elif x:\n                x -= 1\n            else:\n                return False\n        x = 0\n        for i in range(n - 1, -1, -1):\n            if s[i] == ')' or locked[i] == '0':\n                x += 1\n            elif x:\n                x -= 1\n            else:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"))()))\", locked = \"010100\") == True\n    assert candidate(s = \"()()\", locked = \"0000\") == True\n    assert candidate(s = \")\", locked = \"0\") == False\n\n\ncheck(Solution().canBeValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].\nSince the product may be very large, you will abbreviate it following these steps:\n\nCount all trailing zeros in the product and remove them. Let us denote this count as C.\n\n\t\nFor example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.\n\n\nDenote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged.\n\t\nFor example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.\n\n\nFinally, represent the product as a string \"<pre>...<suf>eC\".\n\t\nFor example, 12345678987600000 will be represented as \"12345...89876e5\".\n\n\n\nReturn a string denoting the abbreviated product of all integers in the inclusive range [left, right].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n```",
        "solutions": "import numpy\n\n\nclass Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        cnt2 = cnt5 = 0\n        z = numpy.float128(0)\n        for x in range(left, right + 1):\n            z += numpy.log10(x)\n            while x % 2 == 0:\n                x //= 2\n                cnt2 += 1\n            while x % 5 == 0:\n                x //= 5\n                cnt5 += 1\n        c = cnt2 = cnt5 = min(cnt2, cnt5)\n        suf = y = 1\n        gt = False\n        for x in range(left, right + 1):\n            while cnt2 and x % 2 == 0:\n                x //= 2\n                cnt2 -= 1\n            while cnt5 and x % 5 == 0:\n                x //= 5\n                cnt5 -= 1\n            suf = suf * x % 100000\n            if not gt:\n                y *= x\n                gt = y >= 1e10\n        if not gt:\n            return str(y) + \"e\" + str(c)\n        pre = int(pow(10, z - int(z) + 4))\n        return str(pre) + \"...\" + str(suf).zfill(5) + \"e\" + str(c)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(left = 1, right = 4) == \"24e0\"\n    assert candidate(left = 2, right = 11) == \"399168e2\"\n    assert candidate(left = 371, right = 375) == \"7219856259e3\"\n\n\ncheck(Solution().abbreviateProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s consisting of only lowercase English letters. Return the number of substrings in s that begin and end with the same character.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        cnt = Counter()\n        ans = 0\n        for c in s:\n            cnt[c] += 1\n            ans += cnt[c]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcba\") == 7\n    assert candidate(s = \"abacad\") == 9\n    assert candidate(s = \"a\") == 1\n\n\ncheck(Solution().numberOfSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\n\nThe first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').\nThe second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').\n\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPoints(self, rings: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPoints(self, rings: str) -> int:\n        mask = [0] * 10\n        d = {\"R\": 1, \"G\": 2, \"B\": 4}\n        for i in range(0, len(rings), 2):\n            c = rings[i]\n            j = int(rings[i + 1])\n            mask[j] |= d[c]\n        return mask.count(7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rings = \"B0B6G0R6R0R6G9\") == 1\n    assert candidate(rings = \"B0R0G0R9R0B0G0\") == 1\n    assert candidate(rings = \"G4\") == 0\n\n\ncheck(Solution().countPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.\nReturn the sum of all subarray ranges of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subArrayRanges(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def subArrayRanges(self, nums: List[int]) -> int:\n        ans, n = 0, len(nums)\n        for i in range(n - 1):\n            mi = mx = nums[i]\n            for j in range(i + 1, n):\n                mi = min(mi, nums[j])\n                mx = max(mx, nums[j])\n                ans += mx - mi\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3]) == 4\n    assert candidate(nums = [1,3,3]) == 4\n    assert candidate(nums = [4,-2,-3,4,1]) == 59\n\n\ncheck(Solution().subArrayRanges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i.\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:\n\nAlice waters the plants in order from left to right, starting from the 0th plant. Bob waters the plants in order from right to left, starting from the (n - 1)th plant. They begin watering the plants simultaneously.\nIt takes the same amount of time to water each plant regardless of how much water it needs.\nAlice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant.\nIn case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.\n\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:\n        a, b = capacityA, capacityB\n        ans = 0\n        i, j = 0, len(plants) - 1\n        while i < j:\n            if a < plants[i]:\n                ans += 1\n                a = capacityA\n            a -= plants[i]\n            if b < plants[j]:\n                ans += 1\n                b = capacityB\n            b -= plants[j]\n            i, j = i + 1, j - 1\n        ans += i == j and max(a, b) < plants[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(plants = [2,2,3,3], capacityA = 5, capacityB = 5) == 1\n    assert candidate(plants = [2,2,3,3], capacityA = 3, capacityB = 4) == 2\n    assert candidate(plants = [5], capacityA = 10, capacityB = 8) == 0\n\n\ncheck(Solution().minimumRefill)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nFruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.\nYou are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\nReturn the maximum total number of fruits you can harvest.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        ans = i = s = 0\n        for j, (pj, fj) in enumerate(fruits):\n            s += fj\n            while (\n                i <= j\n                and pj\n                - fruits[i][0]\n                + min(abs(startPos - fruits[i][0]), abs(startPos - fruits[j][0]))\n                > k\n            ):\n                s -= fruits[i][1]\n                i += 1\n            ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4) == 9\n    assert candidate(fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4) == 14\n    assert candidate(fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2) == 0\n\n\ncheck(Solution().maxTotalFruits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer discounts which represents the number of discounts you have. You can use a discount to travel across the ith highway for a cost of tolli / 2 (integer division). Each discount may only be used once, and you can only use at most one discount per highway.\nReturn the minimum total cost to go from city 0 to city n - 1, or -1 if it is not possible to go from city 0 to city n - 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n        g = defaultdict(list)\n        for a, b, c in highways:\n            g[a].append((b, c))\n            g[b].append((a, c))\n        q = [(0, 0, 0)]\n        dist = [[inf] * (discounts + 1) for _ in range(n)]\n        while q:\n            cost, i, k = heappop(q)\n            if k > discounts:\n                continue\n            if i == n - 1:\n                return cost\n            if dist[i][k] > cost:\n                dist[i][k] = cost\n                for j, v in g[i]:\n                    heappush(q, (cost + v, j, k))\n                    heappush(q, (cost + v // 2, j, k + 1))\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1) == 9\n    assert candidate(n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20) == 8\n    assert candidate(n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0) == -1\n\n\ncheck(Solution().minimumCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        return next((w for w in words if w == w[::-1]), \"\")\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]) == \"ada\"\n    assert candidate(words = [\"notapalindrome\",\"racecar\"]) == \"racecar\"\n    assert candidate(words = [\"def\",\"ghi\"]) == \"\"\n\n\ncheck(Solution().firstPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.\n\nFor example, given s = \"EnjoyYourCoffee\" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain \"Enjoy Your Coffee\".\n\nReturn the modified string after the spaces have been added.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\n```",
        "solutions": "class Solution:\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\n        ans = []\n        j = 0\n        for i, c in enumerate(s):\n            if j < len(spaces) and i == spaces[j]:\n                ans.append(' ')\n                j += 1\n            ans.append(c)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]) == \"Leetcode Helps Me Learn\"\n    assert candidate(s = \"icodeinpython\", spaces = [1,5,7,9]) == \"i code in py thon\"\n    assert candidate(s = \"spacing\", spaces = [0,1,2,3,4,5,6]) == \" s p a c i n g\"\n\n\ncheck(Solution().addSpaces)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.\nA smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule.\nReturn the number of smooth descent periods.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getDescentPeriods(self, prices: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def getDescentPeriods(self, prices: List[int]) -> int:\n        ans = 0\n        i, n = 0, len(prices)\n        while i < n:\n            j = i + 1\n            while j < n and prices[j - 1] - prices[j] == 1:\n                j += 1\n            cnt = j - i\n            ans += (1 + cnt) * cnt // 2\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prices = [3,2,1,4]) == 7\n    assert candidate(prices = [8,6,7,7]) == 4\n    assert candidate(prices = [1]) == 1\n\n\ncheck(Solution().getDescentPeriods)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.\nThe array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.\n\nFor example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because:\n\n\t\narr[0] <= arr[2] (4 <= 5)\narr[1] <= arr[3] (1 <= 2)\narr[2] <= arr[4] (5 <= 6)\narr[3] <= arr[5] (2 <= 2)\n\n\nHowever, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).\n\nIn one operation, you can choose an index i and change arr[i] into any positive integer.\nReturn the minimum number of operations required to make the array K-increasing for the given k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kIncreasing(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kIncreasing(self, arr: List[int], k: int) -> int:\n        def lis(arr):\n            t = []\n            for x in arr:\n                idx = bisect_right(t, x)\n                if idx == len(t):\n                    t.append(x)\n                else:\n                    t[idx] = x\n            return len(arr) - len(t)\n\n        return sum(lis(arr[i::k]) for i in range(k))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [5,4,3,2,1], k = 1) == 4\n    assert candidate(arr = [4,1,5,2,6,2], k = 2) == 0\n    assert candidate(arr = [4,1,5,2,6,2], k = 3) == 2\n\n\ncheck(Solution().kIncreasing)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that:\n\nIf the length of the word is 1 or 2 letters, change all letters to lowercase.\nOtherwise, change the first letter to uppercase and the remaining letters to lowercase.\n\nReturn the capitalized title.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def capitalizeTitle(self, title: str) -> str:\n```",
        "solutions": "class Solution:\n    def capitalizeTitle(self, title: str) -> str:\n        words = [w.lower() if len(w) < 3 else w.capitalize() for w in title.split()]\n        return \" \".join(words)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(title = \"capiTalIze tHe titLe\") == \"Capitalize The Title\"\n    assert candidate(title = \"First leTTeR of EACH Word\") == \"First Letter of Each Word\"\n    assert candidate(title = \"i lOve leetcode\") == \"i Love Leetcode\"\n\n\ncheck(Solution().capitalizeTitle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nIn a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.\n\nFor example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.\n\nThe twin sum is defined as the sum of a node and its twin.\nGiven the head of a linked list with even length, return the maximum twin sum of the linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        s = []\n        while head:\n            s.append(head.val)\n            head = head.next\n        n = len(s)\n        return max(s[i] + s[-(i + 1)] for i in range(n >> 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(head = list_node([5,4,2,1])) == 6\n    assert candidate(head = list_node([4,2,2,3])) == 7\n    assert candidate(head = list_node([1,100000])) == 100001\n\n\ncheck(Solution().pairSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings words. Each element of words consists of two lowercase English letters.\nCreate the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.\nReturn the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.\nA palindrome is a string that reads the same forward and backward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPalindrome(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def longestPalindrome(self, words: List[str]) -> int:\n        cnt = Counter(words)\n        ans = x = 0\n        for k, v in cnt.items():\n            if k[0] == k[1]:\n                x += v & 1\n                ans += v // 2 * 2 * 2\n            else:\n                ans += min(v, cnt[k[::-1]]) * 2\n        ans += 2 if x else 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"lc\",\"cl\",\"gg\"]) == 6\n    assert candidate(words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]) == 8\n    assert candidate(words = [\"cc\",\"ll\",\"xx\"]) == 2\n\n\ncheck(Solution().longestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nReversing an integer means to reverse all its digits.\n\nFor example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.\n\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSameAfterReversals(self, num: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isSameAfterReversals(self, num: int) -> bool:\n        return num == 0 or num % 10 != 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 526) == True\n    assert candidate(num = 1800) == False\n    assert candidate(num = 0) == True\n\n\ncheck(Solution().isSameAfterReversals)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).\nYou are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).\nThe robot can begin executing from any ith instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:\n\nThe next instruction will move the robot off the grid.\nThere are no more instructions left to execute.\n\nReturn an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:\n        ans = []\n        m = len(s)\n        mp = {\"L\": [0, -1], \"R\": [0, 1], \"U\": [-1, 0], \"D\": [1, 0]}\n        for i in range(m):\n            x, y = startPos\n            t = 0\n            for j in range(i, m):\n                a, b = mp[s[j]]\n                if 0 <= x + a < n and 0 <= y + b < n:\n                    x, y, t = x + a, y + b, t + 1\n                else:\n                    break\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, startPos = [0,1], s = \"RRDDLU\") == [1,5,4,3,1,0]\n    assert candidate(n = 2, startPos = [1,1], s = \"LURD\") == [4,1,0,0]\n    assert candidate(n = 1, startPos = [0,0], s = \"LRUD\") == [0,0,0,0]\n\n\ncheck(Solution().executeInstructions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of n integers arr.\nThe interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.\nReturn an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].\nNote: |x| is the absolute value of x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getDistances(self, arr: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getDistances(self, arr: List[int]) -> List[int]:\n        d = defaultdict(list)\n        n = len(arr)\n        for i, v in enumerate(arr):\n            d[v].append(i)\n        ans = [0] * n\n        for v in d.values():\n            m = len(v)\n            val = sum(v) - v[0] * m\n            for i, p in enumerate(v):\n                delta = v[i] - v[i - 1] if i >= 1 else 0\n                val += i * delta - (m - i) * delta\n                ans[p] = val\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [2,1,3,1,2,3,3]) == [4,2,7,2,4,4,5]\n    assert candidate(arr = [10,5,10,10]) == [5,0,3,4]\n\n\ncheck(Solution().getDistances)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:\n\nlower[i] = arr[i] - k, for every index i where 0 <= i < n\nhigher[i] = arr[i] + k, for every index i where 0 <= i < n\n\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array.\nGiven an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array.\nNote: The test cases are generated such that there exists at least one valid array arr.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        for i in range(1, n):\n            d = nums[i] - nums[0]\n            if d == 0 or d % 2 == 1:\n                continue\n            vis = [False] * n\n            vis[i] = True\n            ans = [(nums[0] + nums[i]) >> 1]\n            l, r = 1, i + 1\n            while r < n:\n                while l < n and vis[l]:\n                    l += 1\n                while r < n and nums[r] - nums[l] < d:\n                    r += 1\n                if r == n or nums[r] - nums[l] > d:\n                    break\n                vis[r] = True\n                ans.append((nums[l] + nums[r]) >> 1)\n                l, r = l + 1, r + 1\n            if len(ans) == (n >> 1):\n                return ans\n        return []\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,10,6,4,8,12]) == [3,7,11]\n    assert candidate(nums = [1,1,3,3]) == [2,2]\n    assert candidate(nums = [5,435]) == [220]\n\n\ncheck(Solution().recoverArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k. Find the largest even sum of any subsequence of nums that has a length of k.\nReturn this sum, or -1 if such a sum does not exist.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestEvenSum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def largestEvenSum(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = sum(nums[-k:])\n        if ans % 2 == 0:\n            return ans\n        n = len(nums)\n        mx1 = mx2 = -inf\n        for x in nums[: n - k]:\n            if x & 1:\n                mx1 = x\n            else:\n                mx2 = x\n        mi1 = mi2 = inf\n        for x in nums[-k:][::-1]:\n            if x & 1:\n                mi2 = x\n            else:\n                mi1 = x\n        ans = max(ans - mi1 + mx1, ans - mi2 + mx2, -1)\n        return -1 if ans < 0 else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,1,5,3,1], k = 3) == 12\n    assert candidate(nums = [4,6,2], k = 3) == 12\n    assert candidate(nums = [1,3,5], k = 1) == -1\n\n\ncheck(Solution().largestEvenSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkString(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkString(self, s: str) -> bool:\n        return \"ba\" not in s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaabbb\") == True\n    assert candidate(s = \"abab\") == False\n    assert candidate(s = \"bbb\") == True\n\n\ncheck(Solution().checkString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.\nYou can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.\nReturn true if all asteroids can be destroyed. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\n        asteroids.sort()\n        for v in asteroids:\n            if mass < v:\n                return False\n            mass += v\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mass = 10, asteroids = [3,9,19,5,21]) == True\n    assert candidate(mass = 5, asteroids = [4,9,23,4]) == False\n\n\ncheck(Solution().asteroidsDestroyed)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.\nThe employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.\nGiven a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumInvitations(self, favorite: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumInvitations(self, favorite: List[int]) -> int:\n        def max_cycle(fa: List[int]) -> int:\n            n = len(fa)\n            vis = [False] * n\n            ans = 0\n            for i in range(n):\n                if vis[i]:\n                    continue\n                cycle = []\n                j = i\n                while not vis[j]:\n                    cycle.append(j)\n                    vis[j] = True\n                    j = fa[j]\n                for k, v in enumerate(cycle):\n                    if v == j:\n                        ans = max(ans, len(cycle) - k)\n                        break\n            return ans\n\n        def topological_sort(fa: List[int]) -> int:\n            n = len(fa)\n            indeg = [0] * n\n            dist = [1] * n\n            for v in fa:\n                indeg[v] += 1\n            q = deque(i for i, v in enumerate(indeg) if v == 0)\n            while q:\n                i = q.popleft()\n                dist[fa[i]] = max(dist[fa[i]], dist[i] + 1)\n                indeg[fa[i]] -= 1\n                if indeg[fa[i]] == 0:\n                    q.append(fa[i])\n            return sum(dist[i] for i, v in enumerate(fa) if i == fa[fa[i]])\n\n        return max(max_cycle(favorite), topological_sort(favorite))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(favorite = [2,2,1,2]) == 3\n    assert candidate(favorite = [1,2,0]) == 3\n    assert candidate(favorite = [3,0,1,4,1]) == 4\n\n\ncheck(Solution().maximumInvitations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array candies, where candies[i] represents the flavor of the ith candy. Your mom wants you to share these candies with your little sister by giving her k consecutive candies, but you want to keep as many flavors of candies as possible.\nReturn the maximum number of unique flavors of candy you can keep after sharing  with your sister.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shareCandies(self, candies: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def shareCandies(self, candies: List[int], k: int) -> int:\n        cnt = Counter(candies[k:])\n        ans = len(cnt)\n        for i in range(k, len(candies)):\n            cnt[candies[i - k]] += 1\n            cnt[candies[i]] -= 1\n            if cnt[candies[i]] == 0:\n                cnt.pop(candies[i])\n            ans = max(ans, len(cnt))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candies = [1,2,2,3,4,3], k = 3) == 3\n    assert candidate(candies = [2,2,2,2,3,3], k = 2) == 2\n    assert candidate(candies = [2,4,5], k = 0) == 3\n\n\ncheck(Solution().shareCandies)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.\nThe customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.\n\nFor example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they\u00a0can take the candy with cost 1 for free, but not the candy with cost 4.\n\nGiven a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        cost.sort(reverse=True)\n        return sum(cost) - sum(cost[2::3])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cost = [1,2,3]) == 5\n    assert candidate(cost = [6,5,7,9,2,2]) == 23\n    assert candidate(cost = [5,5]) == 10\n\n\ncheck(Solution().minimumCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].\nYou are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.\n\nFor example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).\n\n\t\n[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.\n[5, 6, 3, 7] is not possible since it contains an element greater than 6.\n[1, 2, 3, 4] is not possible since the differences are not correct.\n\n\n\nReturn the number of possible hidden sequences there are. If there are no possible sequences, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:\n        num = mi = mx = 0\n        for d in differences:\n            num += d\n            mi = min(mi, num)\n            mx = max(mx, num)\n        return max(0, upper - lower - (mx - mi) + 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(differences = [1,-3,4], lower = 1, upper = 6) == 2\n    assert candidate(differences = [3,-4,5,1,-2], lower = -4, upper = 5) == 4\n    assert candidate(differences = [4,-7,2], lower = 3, upper = 6) == 0\n\n\ncheck(Solution().numberOfArrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following:\n\n0 represents a wall that you cannot pass through.\n1 represents an empty cell that you can freely move to and from.\nAll other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\nIt takes 1 step to travel between adjacent grid cells.\nYou are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k.\nYou are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:\n\nDistance, defined as the length of the shortest path from the start (shorter distance has a higher rank).\nPrice (lower price has a higher rank, but it must be in the price range).\nThe row number (smaller row number has a higher rank).\nThe column number (smaller column number has a higher rank).\n\nReturn the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def highestRankedKItems(self, grid: List[List[int]], pricing: List[int], start: List[int], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def highestRankedKItems(\n        self, grid: List[List[int]], pricing: List[int], start: List[int], k: int\n    ) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        row, col, low, high = start + pricing\n        items = []\n        if low <= grid[row][col] <= high:\n            items.append([0, grid[row][col], row, col])\n        q = deque([(row, col, 0)])\n        grid[row][col] = 0\n        while q:\n            i, j, d = q.popleft()\n            for a, b in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y]:\n                    if low <= grid[x][y] <= high:\n                        items.append([d + 1, grid[x][y], x, y])\n                    q.append((x, y, d + 1))\n                    grid[x][y] = 0\n        items.sort()\n        return [item[2:] for item in items][:k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3) == [[0,1],[1,1],[2,1]]\n    assert candidate(grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2) == [[2,1],[1,2]]\n    assert candidate(grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3) == [[2,1],[2,0]]\n\n\ncheck(Solution().highestRankedKItems)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).\nGiven an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkValid(self, matrix: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkValid(self, matrix: List[List[int]]) -> bool:\n        n = len(matrix)\n        for i in range(n):\n            seen = [False] * n\n            for j in range(n):\n                v = matrix[i][j] - 1\n                if seen[v]:\n                    return False\n                seen[v] = True\n        for j in range(n):\n            seen = [False] * n\n            for i in range(n):\n                v = matrix[i][j] - 1\n                if seen[v]:\n                    return False\n                seen[v] = True\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(matrix = [[1,2,3],[3,1,2],[2,3,1]]) == True\n    assert candidate(matrix = [[1,1,1],[1,2,3],[1,2,3]]) == False\n\n\ncheck(Solution().checkValid)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA swap is defined as taking two distinct positions in an array and swapping the values in them.\nA circular array is defined as an array where we consider the first element and the last element to be adjacent.\nGiven a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSwaps(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minSwaps(self, nums: List[int]) -> int:\n        k = nums.count(1)\n        mx = cnt = sum(nums[:k])\n        n = len(nums)\n        for i in range(k, n + k):\n            cnt += nums[i % n]\n            cnt -= nums[(i - k + n) % n]\n            mx = max(mx, cnt)\n        return k - mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,0,1,1,0,0]) == 1\n    assert candidate(nums = [0,1,1,1,0,0,1,1,0]) == 2\n    assert candidate(nums = [1,1,0,0,1]) == 0\n\n\ncheck(Solution().minSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.\nFor each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.\nThe conversion operation is described in the following two steps:\n\nAppend any lowercase letter that is not present in the string to its end.\n\n\t\nFor example, if the string is \"abc\", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be \"abcd\".\n\n\nRearrange the letters of the new string in any arbitrary order.\n\t\nFor example, \"abcd\" can be rearranged to \"acbd\", \"bacd\", \"cbda\", and so on. Note that it can also be rearranged to \"abcd\" itself.\n\n\n\nReturn the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.\nNote that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n        s = set()\n        for word in startWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            s.add(mask)\n\n        ans = 0\n        for word in targetWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            for c in word:\n                t = mask ^ (1 << (ord(c) - ord('a')))\n                if t in s:\n                    ans += 1\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]) == 2\n    assert candidate(startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]) == 1\n\n\ncheck(Solution().wordCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\n\nplantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.\ngrowTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.\n\nFrom the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:\n        ans = t = 0\n        for pt, gt in sorted(zip(plantTime, growTime), key=lambda x: -x[1]):\n            t += pt\n            ans = max(ans, t + gt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(plantTime = [1,4,3], growTime = [2,3,1]) == 9\n    assert candidate(plantTime = [1,2,3,2], growTime = [2,1,2,1]) == 9\n    assert candidate(plantTime = [1], growTime = [1]) == 2\n\n\ncheck(Solution().earliestFullBloom)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. Initially on minute 0, the array is unchanged. Every minute, the leftmost element in nums is removed until no elements remain. Then, every minute, one element is appended to the end of nums, in the order they were removed in, until the original array is restored. This process repeats indefinitely.\n\nFor example, the array [0,1,2] would change as follows: [0,1,2] \u2192 [1,2] \u2192 [2] \u2192 [] \u2192 [0] \u2192 [0,1] \u2192 [0,1,2] \u2192 [1,2] \u2192 [2] \u2192 [] \u2192 [0] \u2192 [0,1] \u2192 [0,1,2] \u2192 ...\n\nYou are also given a 2D integer array queries of size n where queries[j] = [timej, indexj]. The answer to the jth query is:\n\nnums[indexj] if indexj < nums.length at minute timej\n-1 if indexj >= nums.length at minute timej\n\nReturn an integer array ans of size n where ans[j] is the answer to the jth query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def elementInNums(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def elementInNums(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n, m = len(nums), len(queries)\n        ans = [-1] * m\n        for j, (t, i) in enumerate(queries):\n            t %= 2 * n\n            if t < n and i < n - t:\n                ans[j] = nums[i + t]\n            elif t > n and i < t - n:\n                ans[j] = nums[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2], queries = [[0,2],[2,0],[3,2],[5,0]]) == [2,2,-1,0]\n    assert candidate(nums = [2], queries = [[0,0],[1,0],[2,0],[3,0]]) == [2,-1,2,-1]\n\n\ncheck(Solution().elementInNums)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary matrix grid. In one operation, you can flip any 1 in grid to be 0.\nA binary matrix is well-isolated if there is no 1 in the matrix that is 4-directionally connected (i.e., horizontal and vertical) to another 1.\nReturn the minimum number of operations to make grid well-isolated.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, grid: List[List[int]]) -> int:\n        def find(i: int) -> int:\n            for j in g[i]:\n                if j not in vis:\n                    vis.add(j)\n                    if match[j] == -1 or find(match[j]):\n                        match[j] = i\n                        return 1\n            return 0\n\n        g = defaultdict(list)\n        m, n = len(grid), len(grid[0])\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if (i + j) % 2 and v:\n                    x = i * n + j\n                    if i < m - 1 and grid[i + 1][j]:\n                        g[x].append(x + n)\n                    if i and grid[i - 1][j]:\n                        g[x].append(x - n)\n                    if j < n - 1 and grid[i][j + 1]:\n                        g[x].append(x + 1)\n                    if j and grid[i][j - 1]:\n                        g[x].append(x - 1)\n\n        match = [-1] * (m * n)\n        ans = 0\n        for i in g.keys():\n            vis = set()\n            ans += find(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,0],[0,1,1],[1,1,1]]) == 3\n    assert candidate(grid = [[0,0,0],[0,0,0],[0,0,0]]) == 0\n    assert candidate(grid = [[0,1],[1,0]]) == 0\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string s can be partitioned into groups of size k using the following procedure:\n\nThe first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group.\nFor the last group, if the string does not have k characters remaining, a character fill is used to complete the group.\n\nNote that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.\nGiven the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\n        return [s[i : i + k].ljust(k, fill) for i in range(0, len(s), k)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcdefghi\", k = 3, fill = \"x\") == [\"abc\",\"def\",\"ghi\"]\n    assert candidate(s = \"abcdefghij\", k = 3, fill = \"x\") == [\"abc\",\"def\",\"ghi\",\"jxx\"]\n\n\ncheck(Solution().divideString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:\n\nnumsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive).\nIf i == 0, numsleft is empty, while numsright has all the elements of nums.\nIf i == n, numsleft has all the elements of nums, while numsright is empty.\n\nThe division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.\nReturn all distinct indices that have the highest possible division score. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScoreIndices(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maxScoreIndices(self, nums: List[int]) -> List[int]:\n        left, right = 0, sum(nums)\n        mx = right\n        ans = [0]\n        for i, num in enumerate(nums):\n            if num == 0:\n                left += 1\n            else:\n                right -= 1\n            t = left + right\n            if mx == t:\n                ans.append(i + 1)\n            elif mx < t:\n                mx = t\n                ans = [i + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,0,1,0]) == [2,4]\n    assert candidate(nums = [0,0,0]) == [3]\n    assert candidate(nums = [1,1]) == [0]\n\n\ncheck(Solution().maxScoreIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.\nInitially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\nNote that the batteries cannot be recharged.\nReturn the maximum number of minutes you can run all the n computers simultaneously.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        l, r = 0, sum(batteries)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(min(x, mid) for x in batteries) >= n * mid:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, batteries = [3,3,3]) == 4\n    assert candidate(n = 2, batteries = [1,1,1,1]) == 2\n\n\ncheck(Solution().maxRunTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.\n\nFor example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].\n\nReturn the minimum possible sum of new1 and new2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSum(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSum(self, num: int) -> int:\n        nums = []\n        while num:\n            nums.append(num % 10)\n            num //= 10\n        nums.sort()\n        return 10 * (nums[0] + nums[1]) + nums[2] + nums[3]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 2932) == 52\n    assert candidate(num = 4009) == 13\n\n\ncheck(Solution().minimumSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:\n\nEvery element less than pivot appears before every element greater than pivot.\nEvery element equal to pivot appears in between the elements less than and greater than pivot.\nThe relative order of the elements less than pivot and the elements greater than pivot is maintained.\n\t\nMore formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.\n\n\n\nReturn nums after the rearrangement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:\n        a, b, c = [], [], []\n        for x in nums:\n            if x < pivot:\n                a.append(x)\n            elif x == pivot:\n                b.append(x)\n            else:\n                c.append(x)\n        return a + b + c\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [9,12,5,10,14,3,10], pivot = 10) == [9,5,3,10,10,12,14]\n    assert candidate(nums = [-3,4,3,2], pivot = 2) == [-3,2,4,3]\n\n\ncheck(Solution().pivotArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA generic microwave supports cooking times for:\n\nat least 1 second.\nat most 99 minutes and 99 seconds.\n\nTo set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,\n\nYou push 9 5 4 (three digits). It is normalized as 0954 and interpreted as 9 minutes and 54 seconds.\nYou push 0 0 0 8 (four digits). It is interpreted as 0 minutes and 8 seconds.\nYou push 8 0 9 0. It is interpreted as 80 minutes and 90 seconds.\nYou push 8 1 3 0. It is interpreted as 81 minutes and 30 seconds.\n\nYou are given integers startAt, moveCost, pushCost, and targetSeconds. Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue.\nThere can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost.\nReturn the minimum cost to set targetSeconds seconds of cooking time.\nRemember that one minute consists of 60 seconds.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCostSetTime(self, startAt: int, moveCost: int, pushCost: int, targetSeconds: int) -> int:\n```",
        "solutions": "class Solution:\n    def minCostSetTime(\n        self, startAt: int, moveCost: int, pushCost: int, targetSeconds: int\n    ) -> int:\n        def f(m, s):\n            if not 0 <= m < 100 or not 0 <= s < 100:\n                return inf\n            arr = [m // 10, m % 10, s // 10, s % 10]\n            i = 0\n            while i < 4 and arr[i] == 0:\n                i += 1\n            t = 0\n            prev = startAt\n            for v in arr[i:]:\n                if v != prev:\n                    t += moveCost\n                t += pushCost\n                prev = v\n            return t\n\n        m, s = divmod(targetSeconds, 60)\n        ans = min(f(m, s), f(m - 1, s + 60))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600) == 6\n    assert candidate(startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76) == 6\n\n\ncheck(Solution().minCostSetTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums consisting of 3 * n elements.\nYou are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:\n\nThe first n elements belonging to the first part and their sum is sumfirst.\nThe next n elements belonging to the second part and their sum is sumsecond.\n\nThe difference in sums of the two parts is denoted as sumfirst - sumsecond.\n\nFor example, if sumfirst = 3 and sumsecond = 2, their difference is 1.\nSimilarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.\n\nReturn the minimum difference possible between the sums of the two parts after the removal of n elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n        m = len(nums)\n        n = m // 3\n\n        s = 0\n        pre = [0] * (m + 1)\n        q1 = []\n        for i, x in enumerate(nums[: n * 2], 1):\n            s += x\n            heappush(q1, -x)\n            if len(q1) > n:\n                s -= -heappop(q1)\n            pre[i] = s\n\n        s = 0\n        suf = [0] * (m + 1)\n        q2 = []\n        for i in range(m, n, -1):\n            x = nums[i - 1]\n            s += x\n            heappush(q2, x)\n            if len(q2) > n:\n                s -= heappop(q2)\n            suf[i] = s\n\n        return min(pre[i] - suf[i + 1] for i in range(n, n * 2 + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,2]) == -1\n    assert candidate(nums = [7,9,5,8,1,3]) == 1\n\n\ncheck(Solution().minimumDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n binary matrix grid.\nIn one operation, you can choose any row or column and flip each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nReturn true if it is possible to remove all 1's from grid using any number of operations or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeOnes(self, grid: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def removeOnes(self, grid: List[List[int]]) -> bool:\n        s = set()\n        for row in grid:\n            t = tuple(row) if row[0] == grid[0][0] else tuple(x ^ 1 for x in row)\n            s.add(t)\n        return len(s) == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,0],[1,0,1],[0,1,0]]) == True\n    assert candidate(grid = [[1,1,0],[0,0,0],[0,0,0]]) == False\n    assert candidate(grid = [[0]]) == True\n\n\ncheck(Solution().removeOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countElements(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countElements(self, nums: List[int]) -> int:\n        mi, mx = min(nums), max(nums)\n        return sum(mi < num < mx for num in nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [11,7,2,15]) == 2\n    assert candidate(nums = [-3,3,3,90]) == 2\n\n\ncheck(Solution().countElements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.\nReturn all lonely numbers in nums. You may return the answer in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLonely(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findLonely(self, nums: List[int]) -> List[int]:\n        counter = Counter(nums)\n        ans = []\n        for num, cnt in counter.items():\n            if cnt == 1 and counter[num - 1] == 0 and counter[num + 1] == 0:\n                ans.append(num)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,6,5,8]) == [10,8]\n    assert candidate(nums = [1,3,5,3]) == [1,5]\n\n\ncheck(Solution().findLonely)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.\nYou should return the array of nums such that the the array follows the given conditions:\n\nEvery consecutive pair of integers have opposite signs.\nFor all integers with the same sign, the order in which they were present in nums is preserved.\nThe rearranged array begins with a positive integer.\n\nReturn the modified array after rearranging the elements to satisfy the aforementioned conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        ans = [0] * len(nums)\n        i, j = 0, 1\n        for num in nums:\n            if num > 0:\n                ans[i] = num\n                i += 2\n            else:\n                ans[j] = num\n                j += 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,-2,-5,2,-4]) == [3,-2,1,-5,2,-4]\n    assert candidate(nums = [-1,1]) == [1,-1]\n\n\ncheck(Solution().rearrangeArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are two types of persons:\n\nThe good person: The person who always tells the truth.\nThe bad person: The person who might tell the truth and might lie.\n\nYou are given a 0-indexed 2D integer array statements of size n x n that represents the statements made by n people about each other. More specifically, statements[i][j] could be one of the following:\n\n0 which represents a statement made by person i that person j is a bad person.\n1 which represents a statement made by person i that person j is a good person.\n2 represents that no statement is made by person i about person j.\n\nAdditionally, no person ever makes a statement about themselves. Formally, we have that statements[i][i] = 2 for all 0 <= i < n.\nReturn the maximum number of people who can be good based on the statements made by the n people.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumGood(self, statements: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumGood(self, statements: List[List[int]]) -> int:\n        def check(mask):\n            cnt = 0\n            for i, s in enumerate(statements):\n                if (mask >> i) & 1:\n                    for j, v in enumerate(s):\n                        if v < 2 and ((mask >> j) & 1) != v:\n                            return 0\n                    cnt += 1\n            return cnt\n\n        return max(check(mask) for mask in range(1, 1 << len(statements)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(statements = [[2,1,2],[1,2,2],[2,0,2]]) == 2\n    assert candidate(statements = [[2,0],[0,2]]) == 1\n\n\ncheck(Solution().maximumGood)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.\nYou then do the following steps:\n\nIf original is found in nums, multiply it by two (i.e., set original = 2 * original).\nOtherwise, stop the process.\nRepeat this process with the new number as long as you keep finding the number.\n\nReturn the final value of original.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n```",
        "solutions": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        s = set(nums)\n        while original in s:\n            original <<= 1\n        return original\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,3,6,1,12], original = 3) == 24\n    assert candidate(nums = [2,7,9], original = 4) == 4\n\n\ncheck(Solution().findFinalValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:\n\nhash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m.\n\nWhere val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.\nYou are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.\nThe test cases will be generated such that an answer always exists.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:\n```",
        "solutions": "class Solution:\n    def subStrHash(\n        self, s: str, power: int, modulo: int, k: int, hashValue: int\n    ) -> str:\n        h, n = 0, len(s)\n        p = 1\n        for i in range(n - 1, n - 1 - k, -1):\n            val = ord(s[i]) - ord(\"a\") + 1\n            h = ((h * power) + val) % modulo\n            if i != n - k:\n                p = p * power % modulo\n        j = n - k\n        for i in range(n - 1 - k, -1, -1):\n            pre = ord(s[i + k]) - ord(\"a\") + 1\n            cur = ord(s[i]) - ord(\"a\") + 1\n            h = ((h - pre * p) * power + cur) % modulo\n            if h == hashValue:\n                j = i\n        return s[j : j + k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0) == \"ee\"\n    assert candidate(s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32) == \"fbx\"\n\n\ncheck(Solution().subStrHash)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.\nTwo strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:\n\nAdding exactly one letter to the set of the letters of s1.\nDeleting exactly one letter from the set of the letters of s1.\nReplacing exactly one letter from the set of the letters of s1 with any letter, including itself.\n\nThe array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:\n\nIt is connected to at least one other string of the group.\nIt is the only string present in the group.\n\nNote that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\nReturn an array ans of size 2 where:\n\nans[0] is the maximum number of groups words can be divided into, and\nans[1] is the size of the largest group.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def groupStrings(self, words: List[str]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def groupStrings(self, words: List[str]) -> List[int]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            nonlocal mx, n\n            if b not in p:\n                return\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                return\n            p[pa] = pb\n            size[pb] += size[pa]\n            mx = max(mx, size[pb])\n            n -= 1\n\n        p = {}\n        size = Counter()\n        n = len(words)\n        mx = 0\n        for word in words:\n            x = 0\n            for c in word:\n                x |= 1 << (ord(c) - ord('a'))\n            p[x] = x\n            size[x] += 1\n            mx = max(mx, size[x])\n            if size[x] > 1:\n                n -= 1\n        for x in p.keys():\n            for i in range(26):\n                union(x, x ^ (1 << i))\n                if (x >> i) & 1:\n                    for j in range(26):\n                        if ((x >> j) & 1) == 0:\n                            union(x, x ^ (1 << i) | (1 << j))\n        return [n, mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"a\",\"b\",\"ab\",\"cde\"]) == [2,3]\n    assert candidate(words = [\"a\",\"ab\",\"abc\"]) == [1,3]\n\n\ncheck(Solution().groupStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        return sum(\n            nums[i] == nums[j] and (i * j) % k == 0\n            for i in range(n)\n            for j in range(i + 1, n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,2,2,2,1,3], k = 2) == 4\n    assert candidate(nums = [1,2,3,4], k = 1) == 0\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfThree(self, num: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sumOfThree(self, num: int) -> List[int]:\n        x, mod = divmod(num, 3)\n        return [] if mod else [x - 1, x, x + 1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 33) == [10,11,12]\n    assert candidate(num = 4) == []\n\n\ncheck(Solution().sumOfThree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].\nA good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.\nReturn the total number of good triplets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        pos = {v: i for i, v in enumerate(nums2, 1)}\n        ans = 0\n        n = len(nums1)\n        tree = BinaryIndexedTree(n)\n        for num in nums1:\n            p = pos[num]\n            left = tree.query(p)\n            right = n - p - (tree.query(n) - tree.query(p))\n            ans += left * right\n            tree.update(p, 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,0,1,3], nums2 = [0,1,2,3]) == 1\n    assert candidate(nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]) == 4\n\n\ncheck(Solution().goodTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2 of length n.\nA range [l, r] (inclusive) where 0 <= l <= r < n is balanced if:\n\nFor every i in the range [l, r], you pick either nums1[i] or nums2[i].\nThe sum of the numbers you pick from nums1 equals to the sum of the numbers you pick from nums2 (the sum is considered to be 0 if you pick no numbers from an array).\n\nTwo balanced ranges from [l1, r1] and [l2, r2] are considered to be different if at least one of the following is true:\n\nl1 != l2\nr1 != r2\nnums1[i] is picked in the first range, and nums2[i] is picked in the second range or vice versa for at least one i.\n\nReturn the number of different ranges that are balanced. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubranges(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countSubranges(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        s1, s2 = sum(nums1), sum(nums2)\n        f = [[0] * (s1 + s2 + 1) for _ in range(n)]\n        ans = 0\n        mod = 10**9 + 7\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            f[i][a + s2] += 1\n            f[i][-b + s2] += 1\n            if i:\n                for j in range(s1 + s2 + 1):\n                    if j >= a:\n                        f[i][j] = (f[i][j] + f[i - 1][j - a]) % mod\n                    if j + b < s1 + s2 + 1:\n                        f[i][j] = (f[i][j] + f[i - 1][j + b]) % mod\n            ans = (ans + f[i][s2]) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,5], nums2 = [2,6,3]) == 3\n    assert candidate(nums1 = [0,1], nums2 = [1,0]) == 4\n\n\ncheck(Solution().countSubranges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\n\nSort the values at odd indices of nums in non-increasing order.\n\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\n\nSort the values at even indices of nums in non-decreasing order.\n\t\nFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\n\n\nReturn the array formed after rearranging the values of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\n        a = sorted(nums[::2])\n        b = sorted(nums[1::2], reverse=True)\n        nums[::2] = a\n        nums[1::2] = b\n        return nums\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,1,2,3]) == [2,3,4,1]\n    assert candidate(nums = [2,1]) == [2,1]\n\n\ncheck(Solution().sortEvenOdd)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.\nReturn the rearranged number with minimal value.\nNote that the sign of the number does not change after rearranging the digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 310) == 103\n    assert candidate(num = -7605) == -7650\n\n\ncheck(Solution().smallestNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:\n\nRemove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time.\nRemove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time.\nRemove a train car from anywhere in the sequence which takes 2 units of time.\n\nReturn the minimum time to remove all the cars containing illegal goods.\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTime(self, s: str) -> int:\n        n = len(s)\n        pre = [0] * (n + 1)\n        suf = [0] * (n + 1)\n        for i, c in enumerate(s):\n            pre[i + 1] = pre[i] if c == '0' else min(pre[i] + 2, i + 1)\n        for i in range(n - 1, -1, -1):\n            suf[i] = suf[i + 1] if s[i] == '0' else min(suf[i + 1] + 2, n - i)\n        return min(a + b for a, b in zip(pre[1:], suf[1:]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1100101\") == 5\n    assert candidate(s = \"0010\") == 2\n\n\ncheck(Solution().minimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\n\nFor example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.\n\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countOperations(self, num1: int, num2: int) -> int:\n```",
        "solutions": "class Solution:\n    def countOperations(self, num1: int, num2: int) -> int:\n        ans = 0\n        while num1 and num2:\n            if num1 >= num2:\n                num1, num2 = num2, num1\n            num2 -= num1\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num1 = 2, num2 = 3) == 3\n    assert candidate(num1 = 10, num2 = 10) == 1\n\n\ncheck(Solution().countOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums consisting of n positive integers.\nThe array nums is called alternating if:\n\nnums[i - 2] == nums[i], where 2 <= i <= n - 1.\nnums[i - 1] != nums[i], where 1 <= i <= n - 1.\n\nIn one operation, you can choose an index i and change nums[i] into any positive integer.\nReturn the minimum number of operations required to make the array alternating.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        def get(i):\n            c = Counter(nums[i::2]).most_common(2)\n            if not c:\n                return [(0, 0), (0, 0)]\n            if len(c) == 1:\n                return [c[0], (0, 0)]\n            return c\n\n        n = len(nums)\n        return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,1,3,2,4,3]) == 3\n    assert candidate(nums = [1,2,2,2,2]) == 2\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.\nRemove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.\nReturn the minimum number of magic beans that you have to remove.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumRemoval(self, beans: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumRemoval(self, beans: List[int]) -> int:\n        beans.sort()\n        s, n = sum(beans), len(beans)\n        return min(s - x * (n - i) for i, x in enumerate(beans))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(beans = [4,1,6,5]) == 4\n    assert candidate(beans = [2,10,3,2]) == 7\n\n\ncheck(Solution().minimumRemoval)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings words and a string pref.\nReturn the number of strings in words that contain pref as a prefix.\nA prefix of a string s is any leading contiguous substring of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def prefixCount(self, words: List[str], pref: str) -> int:\n```",
        "solutions": "class Solution:\n    def prefixCount(self, words: List[str], pref: str) -> int:\n        return sum(w.startswith(pref) for w in words)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"pay\",\"attention\",\"practice\",\"attend\"], pref = \"at\") == 2\n    assert candidate(words = [\"leetcode\",\"win\",\"loops\",\"success\"], pref = \"code\") == 0\n\n\ncheck(Solution().prefixCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and t. In one step, you can append any character to either s or t.\nReturn the minimum number of steps to make s and t anagrams of each other.\nAn anagram of a string is a string that contains the same characters with a different (or the same) ordering.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSteps(self, s: str, t: str) -> int:\n```",
        "solutions": "class Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        cnt = Counter(s)\n        for c in t:\n            cnt[c] -= 1\n        return sum(abs(v) for v in cnt.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetcode\", t = \"coats\") == 7\n    assert candidate(s = \"night\", t = \"thing\") == 0\n\n\ncheck(Solution().minSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.\n\nFor example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 22 = 12 seconds, etc.\n\nYou are also given an integer changeTime and an integer numLaps.\nThe race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changeTime seconds.\nReturn the minimum time to finish the race.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumFinishTime(self, tires: List[List[int]], changeTime: int, numLaps: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumFinishTime(\n        self, tires: List[List[int]], changeTime: int, numLaps: int\n    ) -> int:\n        cost = [inf] * 18\n        for f, r in tires:\n            i, s, t = 1, 0, f\n            while t <= changeTime + f:\n                s += t\n                cost[i] = min(cost[i], s)\n                t *= r\n                i += 1\n        f = [inf] * (numLaps + 1)\n        f[0] = -changeTime\n        for i in range(1, numLaps + 1):\n            for j in range(1, min(18, i + 1)):\n                f[i] = min(f[i], f[i - j] + cost[j])\n            f[i] += changeTime\n        return f[numLaps]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4) == 21\n    assert candidate(tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5) == 25\n\n\ncheck(Solution().minimumFinishTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a long and thin painting that can be represented by a number line. You are given a 0-indexed 2D integer array paint of length n, where paint[i] = [starti, endi]. This means that on the ith day you need to paint the area between starti and endi.\nPainting the same area multiple times will create an uneven painting so you only want to paint each area of the painting at most once.\nReturn an integer array worklog of length n, where worklog[i] is the amount of new area that you painted on the ith day.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def amountPainted(self, paint: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Node:\n    def __init__(self, l, r):\n        self.left = None\n        self.right = None\n        self.l = l\n        self.r = r\n        self.mid = (l + r) >> 1\n        self.v = 0\n        self.add = 0\n\n\nclass SegmentTree:\n    def __init__(self):\n        self.root = Node(1, 10**5 + 10)\n\n    def modify(self, l, r, v, node=None):\n        if l > r:\n            return\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            node.v = node.r - node.l + 1\n            node.add = v\n            return\n        self.pushdown(node)\n        if l <= node.mid:\n            self.modify(l, r, v, node.left)\n        if r > node.mid:\n            self.modify(l, r, v, node.right)\n        self.pushup(node)\n\n    def query(self, l, r, node=None):\n        if l > r:\n            return 0\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            return node.v\n        self.pushdown(node)\n        v = 0\n        if l <= node.mid:\n            v += self.query(l, r, node.left)\n        if r > node.mid:\n            v += self.query(l, r, node.right)\n        return v\n\n    def pushup(self, node):\n        node.v = node.left.v + node.right.v\n\n    def pushdown(self, node):\n        if node.left is None:\n            node.left = Node(node.l, node.mid)\n        if node.right is None:\n            node.right = Node(node.mid + 1, node.r)\n        if node.add:\n            left, right = node.left, node.right\n            left.v = left.r - left.l + 1\n            right.v = right.r - right.l + 1\n            left.add = node.add\n            right.add = node.add\n            node.add = 0\n\n\nclass Solution:\n    def amountPainted(self, paint: List[List[int]]) -> List[int]:\n        tree = SegmentTree()\n        ans = []\n        for i, (start, end) in enumerate(paint):\n            l, r = start + 1, end\n            v = tree.query(l, r)\n            ans.append(r - l + 1 - v)\n            tree.modify(l, r, 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(paint = [[1,4],[4,7],[5,8]]) == [3,3,1]\n    assert candidate(paint = [[1,4],[5,8],[4,7]]) == [3,3,1]\n    assert candidate(paint = [[1,5],[2,4]]) == [4,0]\n\n\ncheck(Solution().amountPainted)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.\nThe digit sum of a positive integer is the sum of all its digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countEven(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def countEven(self, num: int) -> int:\n        ans = 0\n        for x in range(1, num + 1):\n            s = 0\n            while x:\n                s += x % 10\n                x //= 10\n            ans += s % 2 == 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 4) == 2\n    assert candidate(num = 30) == 14\n\n\ncheck(Solution().countEven)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.\nFor every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.\nReturn the head of the modified linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = tail = ListNode()\n        s = 0\n        cur = head.next\n        while cur:\n            if cur.val != 0:\n                s += cur.val\n            else:\n                tail.next = ListNode(s)\n                tail = tail.next\n                s = 0\n            cur = cur.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([0,3,1,0,4,5,2,0])), list_node([4,11]))\n    assert is_same_list(candidate(head = list_node([0,1,0,3,0,2,2,0])), list_node([1,3,4]))\n\n\ncheck(Solution().mergeNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.\nReturn the lexicographically largest repeatLimitedString possible.\nA string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n```",
        "solutions": "class Solution:\n    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n        cnt = [0] * 26\n        for c in s:\n            cnt[ord(c) - ord(\"a\")] += 1\n        ans = []\n        j = 24\n        for i in range(25, -1, -1):\n            j = min(i - 1, j)\n            while 1:\n                x = min(repeatLimit, cnt[i])\n                cnt[i] -= x\n                ans.append(ascii_lowercase[i] * x)\n                if cnt[i] == 0:\n                    break\n                while j >= 0 and cnt[j] == 0:\n                    j -= 1\n                if j < 0:\n                    break\n                cnt[j] -= 1\n                ans.append(ascii_lowercase[j])\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"cczazcc\", repeatLimit = 3) == \"zzcccac\"\n    assert candidate(s = \"aababab\", repeatLimit = 2) == \"bbabaa\"\n\n\ncheck(Solution().repeatLimitedString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a digit string s, return the number of unique substrings of s where every digit appears the same number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def equalDigitFrequency(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def equalDigitFrequency(self, s: str) -> int:\n        def check(i, j):\n            v = set()\n            for k in range(10):\n                cnt = presum[j + 1][k] - presum[i][k]\n                if cnt > 0:\n                    v.add(cnt)\n                if len(v) > 1:\n                    return False\n            return True\n\n        n = len(s)\n        presum = [[0] * 10 for _ in range(n + 1)]\n        for i, c in enumerate(s):\n            presum[i + 1][int(c)] += 1\n            for j in range(10):\n                presum[i + 1][j] += presum[i][j]\n        vis = set(s[i : j + 1] for i in range(n) for j in range(i, n) if check(i, j))\n        return len(vis)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1212\") == 5\n    assert candidate(s = \"12321\") == 9\n\n\ncheck(Solution().equalDigitFrequency)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA cell (r, c) of an excel sheet is represented as a string \"<col><row>\" where:\n\n<col> denotes the column number c of the cell. It is represented by alphabetical letters.\n\n\t\nFor example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on.\n\n\n<row> is the row number r of the cell. The rth row is represented by the integer r.\n\nYou are given a string s\u00a0in\u00a0the format \"<col1><row1>:<col2><row2>\", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.\nReturn the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as\u00a0strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cellsInRange(self, s: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def cellsInRange(self, s: str) -> List[str]:\n        return [\n            chr(i) + str(j)\n            for i in range(ord(s[0]), ord(s[-2]) + 1)\n            for j in range(int(s[1]), int(s[-1]) + 1)\n        ]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"K1:L2\") == [\"K1\",\"K2\",\"L1\",\"L2\"]\n    assert candidate(s = \"A1:F1\") == [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"]\n\n\ncheck(Solution().cellsInRange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.\nReturn the sum of the k integers appended to nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimalKSum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimalKSum(self, nums: List[int], k: int) -> int:\n        nums.extend([0, 2 * 10**9])\n        nums.sort()\n        ans = 0\n        for a, b in pairwise(nums):\n            m = max(0, min(k, b - a - 1))\n            ans += (a + 1 + a + m) * m // 2\n            k -= m\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,25,10,25], k = 2) == 5\n    assert candidate(nums = [5,6], k = 6) == 25\n\n\ncheck(Solution().minimalKSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore,\n\nIf isLefti == 1, then childi is the left child of parenti.\nIf isLefti == 0, then childi is the right child of parenti.\n\nConstruct the binary tree described by descriptions and return its root.\nThe test cases will be generated such that the binary tree is valid.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def createBinaryTree(self, descriptions: List[List[int]]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def createBinaryTree(self, descriptions: List[List[int]]) -> Optional[TreeNode]:\n        g = defaultdict(TreeNode)\n        vis = set()\n        for p, c, left in descriptions:\n            if p not in g:\n                g[p] = TreeNode(p)\n            if c not in g:\n                g[c] = TreeNode(c)\n            if left:\n                g[p].left = g[c]\n            else:\n                g[p].right = g[c]\n            vis.add(c)\n        for v, node in g.items():\n            if v not in vis:\n                return node\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]), tree_node([50,20,80,15,17,19]))\n    assert is_same_tree(candidate(descriptions = [[1,2,1],[2,3,0],[3,4,1]]), tree_node([1,2,None,None,3,4]))\n\n\ncheck(Solution().createBinaryTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of integers nums. Perform the following steps:\n\nFind any two adjacent numbers in nums that are non-coprime.\nIf no such numbers are found, stop the process.\nOtherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\nRepeat this process as long as you keep finding two adjacent non-coprime numbers.\n\nReturn the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.\nThe test cases are generated such that the values in the final array are less than or equal to 108.\nTwo values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def replaceNonCoprimes(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def replaceNonCoprimes(self, nums: List[int]) -> List[int]:\n        stk = []\n        for x in nums:\n            stk.append(x)\n            while len(stk) > 1:\n                x, y = stk[-2:]\n                g = gcd(x, y)\n                if g == 1:\n                    break\n                stk.pop()\n                stk[-1] = x * y // g\n        return stk\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [6,4,3,2,7,6,2]) == [12,7,6]\n    assert candidate(nums = [2,2,1,1,3,3,3]) == [2,1,1,3]\n\n\ncheck(Solution().replaceNonCoprimes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums consisting of 2 * n integers.\nYou need to divide nums into n pairs such that:\n\nEach element belongs to exactly one pair.\nThe elements present in a pair are equal.\n\nReturn true if nums can be divided into n pairs, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divideArray(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def divideArray(self, nums: List[int]) -> bool:\n        cnt = Counter(nums)\n        return all(v % 2 == 0 for v in cnt.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,3,2,2,2]) == True\n    assert candidate(nums = [1,2,3,4]) == False\n\n\ncheck(Solution().divideArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters.\nYou can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text.\nReturn the maximum number of times pattern can occur as a subsequence of the modified text.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:\n        ans = 0\n        cnt = Counter()\n        for c in text:\n            if c == pattern[1]:\n                ans += cnt[pattern[0]]\n            cnt[c] += 1\n        ans += max(cnt[pattern[0]], cnt[pattern[1]])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(text = \"abdcdbc\", pattern = \"ac\") == 4\n    assert candidate(text = \"aabb\", pattern = \"ab\") == 6\n\n\ncheck(Solution().maximumSubsequenceCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.)\nReturn the minimum number of operations to reduce the sum of nums by at least half.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def halveArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def halveArray(self, nums: List[int]) -> int:\n        s = sum(nums) / 2\n        h = []\n        for v in nums:\n            heappush(h, -v)\n        ans = 0\n        while s > 0:\n            t = -heappop(h) / 2\n            s -= t\n            heappush(h, -t)\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,19,8,1]) == 3\n    assert candidate(nums = [3,8,20]) == 3\n\n\ncheck(Solution().halveArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.\nFor every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:\n\n0 <= i <= nums.length - 2,\nnums[i] == key and,\nnums[i + 1] == target.\n\nReturn the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostFrequent(self, nums: List[int], key: int) -> int:\n```",
        "solutions": "class Solution:\n    def mostFrequent(self, nums: List[int], key: int) -> int:\n        cnt = Counter()\n        ans = mx = 0\n        for a, b in pairwise(nums):\n            if a == key:\n                cnt[b] += 1\n                if mx < cnt[b]:\n                    mx = cnt[b]\n                    ans = b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,100,200,1,100], key = 1) == 100\n    assert candidate(nums = [2,2,2,2,3], key = 2) == 2\n\n\ncheck(Solution().mostFrequent)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n binary matrix grid.\nIn one operation, you can choose any i and j that meet the following conditions:\n\n0 <= i < m\n0 <= j < n\ngrid[i][j] == 1\n\nand change the values of all cells in row i and column j to zero.\nReturn the minimum number of operations needed to remove all 1's from grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeOnes(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def removeOnes(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        state = sum(1 << (i * n + j) for i in range(m) for j in range(n) if grid[i][j])\n        q = deque([state])\n        vis = {state}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                state = q.popleft()\n                if state == 0:\n                    return ans\n                for i in range(m):\n                    for j in range(n):\n                        if grid[i][j] == 0:\n                            continue\n                        nxt = state\n                        for r in range(m):\n                            nxt &= ~(1 << (r * n + j))\n                        for c in range(n):\n                            nxt &= ~(1 << (i * n + c))\n                        if nxt not in vis:\n                            vis.add(nxt)\n                            q.append(nxt)\n            ans += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,1],[1,1,1],[0,1,0]]) == 2\n    assert candidate(grid = [[0,1,0],[1,0,1],[0,1,0]]) == 2\n    assert candidate(grid = [[0,0],[0,0]]) == 0\n\n\ncheck(Solution().removeOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].\nNote that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.\nReturn the number of hills and valleys in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countHillValley(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countHillValley(self, nums: List[int]) -> int:\n        ans = j = 0\n        for i in range(1, len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                continue\n            if nums[i] > nums[j] and nums[i] > nums[i + 1]:\n                ans += 1\n            if nums[i] < nums[j] and nums[i] < nums[i + 1]:\n                ans += 1\n            j = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,1,1,6,5]) == 3\n    assert candidate(nums = [6,6,5,5,4,1]) == 0\n\n\ncheck(Solution().countHillValley)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.\nYou are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed.\nThe number of collisions can be calculated as follows:\n\nWhen two cars moving in opposite directions collide with each other, the number of collisions increases by 2.\nWhen a moving car collides with a stationary car, the number of collisions increases by 1.\n\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\nReturn the total number of collisions that will happen on the road.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCollisions(self, directions: str) -> int:\n```",
        "solutions": "class Solution:\n    def countCollisions(self, directions: str) -> int:\n        d = directions.lstrip('L').rstrip('R')\n        return len(d) - d.count('S')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(directions = \"RLRSLL\") == 5\n    assert candidate(directions = \"LLRR\") == 0\n\n\ncheck(Solution().countCollisions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob are opponents in an archery competition. The competition has set the following rules:\n\nAlice first shoots numArrows arrows and then Bob shoots numArrows arrows.\nThe points are then calculated as follows:\n\t\nThe target has integer scoring sections ranging from 0 to 11 inclusive.\nFor each section of the target with score k (in between 0 to 11), say Alice and Bob have shot ak and bk arrows on that section respectively. If ak >= bk, then Alice takes k points. If ak < bk, then Bob takes k points.\nHowever, if ak == bk == 0, then nobody takes k points.\n\n\n\n\n\nFor example, if Alice and Bob both shot 2 arrows on the section with score 11, then Alice takes 11 points. On the other hand, if Alice shot 0 arrows on the section with score 11 and Bob shot 2 arrows on that same section, then Bob takes 11 points.\n\n\nYou are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. Now, Bob wants to maximize the total number of points he can obtain.\nReturn the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows.\nIf there are multiple ways for Bob to earn the maximum total points, return any one of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -> List[int]:\n        n = len(aliceArrows)\n        state = 0\n        mx = -1\n        for mask in range(1 << n):\n            cnt = points = 0\n            for i, alice in enumerate(aliceArrows):\n                if (mask >> i) & 1:\n                    cnt += alice + 1\n                    points += i\n            if cnt <= numArrows and mx < points:\n                state = mask\n                mx = points\n        ans = [0] * n\n        for i, alice in enumerate(aliceArrows):\n            if (state >> i) & 1:\n                ans[i] = alice + 1\n                numArrows -= ans[i]\n        ans[0] = numArrows\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]) == [0,0,0,0,1,1,0,0,1,2,3,1]\n    assert candidate(numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]) == [0,0,0,0,0,0,0,0,1,1,1,0]\n\n\ncheck(Solution().maximumBobPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.\nThe ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i].\nReturn an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestRepeating(self, s: str, queryCharacters: str, queryIndices: List[int]) -> List[int]:\n```",
        "solutions": "class Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.lmx = 0\n        self.rmx = 0\n        self.mx = 0\n        self.size = 0\n        self.lc = None\n        self.rc = None\n\n\nN = 100010\ntr = [Node() for _ in range(N << 2)]\n\n\nclass SegmentTree:\n    def __init__(self, s):\n        n = len(s)\n        self.s = s\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        tr[u].l = l\n        tr[u].r = r\n        if l == r:\n            tr[u].lmx = tr[u].rmx = tr[u].mx = tr[u].size = 1\n            tr[u].lc = tr[u].rc = self.s[l - 1]\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n        self.pushup(u)\n\n    def modify(self, u, x, v):\n        if tr[u].l == x and tr[u].r == x:\n            tr[u].lc = tr[u].rc = v\n            return\n        mid = (tr[u].l + tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def query(self, u, l, r):\n        if tr[u].l >= l and tr[u].r <= r:\n            return tr[u]\n        mid = (tr[u].l + tr[u].r) >> 1\n        if r <= mid:\n            return self.query(u << 1, l, r)\n        if l > mid:\n            return self.query(u << 1 | 1, l, r)\n        left, right = self.query(u << 1, l, r), self.query(u << 1 | 1, l, r)\n        ans = Node()\n        self._pushup(ans, left, right)\n        return ans\n\n    def _pushup(self, root, left, right):\n        root.lc, root.rc = left.lc, right.rc\n        root.size = left.size + right.size\n\n        root.mx = max(left.mx, right.mx)\n        root.lmx, root.rmx = left.lmx, right.rmx\n\n        if left.rc == right.lc:\n            if left.lmx == left.size:\n                root.lmx += right.lmx\n            if right.rmx == right.size:\n                root.rmx += left.rmx\n            root.mx = max(root.mx, left.rmx + right.lmx)\n\n    def pushup(self, u):\n        self._pushup(tr[u], tr[u << 1], tr[u << 1 | 1])\n\n\nclass Solution:\n    def longestRepeating(\n        self, s: str, queryCharacters: str, queryIndices: List[int]\n    ) -> List[int]:\n        tree = SegmentTree(s)\n        k = len(queryIndices)\n        ans = []\n        for i, c in enumerate(queryCharacters):\n            x = queryIndices[i] + 1\n            tree.modify(1, x, c)\n            ans.append(tree.query(1, 1, len(s)).mx)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]) == [3,3,4]\n    assert candidate(s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]) == [2,3]\n\n\ncheck(Solution().longestRepeating)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.\nReturn a list of all k-distant indices sorted in increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:\n        ans = []\n        n = len(nums)\n        for i in range(n):\n            if any(abs(i - j) <= k and nums[j] == key for j in range(n)):\n                ans.append(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,9,1,3,9,5], key = 9, k = 1) == [1,2,3,4,5,6]\n    assert candidate(nums = [2,2,2,2,2], key = 2, k = 2) == [0,1,2,3,4]\n\n\ncheck(Solution().findKDistantIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.\nYou are also given a 2D integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti.\nLastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph.\nReturn the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. In case such a subgraph does not exist, return -1.\nA subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumWeight(\n        self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int\n    ) -> int:\n        def dijkstra(g, u):\n            dist = [inf] * n\n            dist[u] = 0\n            q = [(0, u)]\n            while q:\n                d, u = heappop(q)\n                if d > dist[u]:\n                    continue\n                for v, w in g[u]:\n                    if dist[v] > dist[u] + w:\n                        dist[v] = dist[u] + w\n                        heappush(q, (dist[v], v))\n            return dist\n\n        g = defaultdict(list)\n        rg = defaultdict(list)\n        for f, t, w in edges:\n            g[f].append((t, w))\n            rg[t].append((f, w))\n        d1 = dijkstra(g, src1)\n        d2 = dijkstra(g, src2)\n        d3 = dijkstra(rg, dest)\n        ans = min(sum(v) for v in zip(d1, d2, d3))\n        return -1 if ans >= inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5) == 9\n    assert candidate(n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2) == -1\n\n\ncheck(Solution().minimumWeight)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given integers height and width which specify the dimensions of a brick wall you are building. You are also given a 0-indexed array of unique integers bricks, where the ith brick has a height of 1 and a width of bricks[i]. You have an infinite supply of each type of brick and bricks may not be rotated.\nEach row in the wall must be exactly width units long. For the wall to be sturdy, adjacent rows in the wall should not join bricks at the same location, except at the ends of the wall.\nReturn the number of ways to build a sturdy wall. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def buildWall(self, height: int, width: int, bricks: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def buildWall(self, height: int, width: int, bricks: List[int]) -> int:\n        def dfs(v):\n            if v > width:\n                return\n            if v == width:\n                s.append(t[:])\n                return\n            for x in bricks:\n                t.append(x)\n                dfs(v + x)\n                t.pop()\n\n        def check(a, b):\n            s1, s2 = a[0], b[0]\n            i = j = 1\n            while i < len(a) and j < len(b):\n                if s1 == s2:\n                    return False\n                if s1 < s2:\n                    s1 += a[i]\n                    i += 1\n                else:\n                    s2 += b[j]\n                    j += 1\n            return True\n\n        mod = 10**9 + 7\n        s = []\n        t = []\n        dfs(0)\n        g = defaultdict(list)\n        n = len(s)\n        for i in range(n):\n            if check(s[i], s[i]):\n                g[i].append(i)\n            for j in range(i + 1, n):\n                if check(s[i], s[j]):\n                    g[i].append(j)\n                    g[j].append(i)\n        dp = [[0] * n for _ in range(height)]\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, height):\n            for j in range(n):\n                for k in g[j]:\n                    dp[i][j] += dp[i - 1][k]\n                    dp[i][j] %= mod\n        return sum(dp[-1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(height = 2, width = 3, bricks = [1,2]) == 2\n    assert candidate(height = 1, width = 1, bricks = [5]) == 0\n\n\ncheck(Solution().buildWall)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.\n\nFor example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc.\n\nGiven two integers start and goal, return the minimum number of bit flips to convert start to goal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n```",
        "solutions": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        t = start ^ goal\n        ans = 0\n        while t:\n            ans += t & 1\n            t >>= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(start = 10, goal = 7) == 3\n    assert candidate(start = 3, goal = 4) == 3\n\n\ncheck(Solution().minBitFlips)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).\nThe triangular sum of nums is the value of the only element present in nums after the following process terminates:\n\nLet nums comprise of n elements. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n - 1.\nFor each index i, where 0 <= i <\u00a0n - 1, assign the value of newNums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.\nReplace the array nums with newNums.\nRepeat the entire process starting from step 1.\n\nReturn the triangular sum of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def triangularSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def triangularSum(self, nums: List[int]) -> int:\n        n = len(nums)\n        for i in range(n, 0, -1):\n            for j in range(i - 1):\n                nums[j] = (nums[j] + nums[j + 1]) % 10\n        return nums[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5]) == 8\n    assert candidate(nums = [5]) == 5\n\n\ncheck(Solution().triangularSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary string s which represents the types of buildings along a street where:\n\ns[i] = '0' denotes that the ith building is an office and\ns[i] = '1' denotes that the ith building is a restaurant.\n\nAs a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.\n\nFor example, given s = \"001101\", we cannot select the 1st, 3rd, and 5th buildings as that would form \"011\" which is not allowed due to having two consecutive buildings of the same type.\n\nReturn the number of valid ways to select 3 buildings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfWays(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfWays(self, s: str) -> int:\n        n = len(s)\n        cnt0 = s.count(\"0\")\n        cnt1 = n - cnt0\n        c0 = c1 = 0\n        ans = 0\n        for c in s:\n            if c == \"0\":\n                ans += c1 * (cnt1 - c1)\n                c0 += 1\n            else:\n                ans += c0 * (cnt0 - c0)\n                c1 += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"001101\") == 6\n    assert candidate(s = \"11100\") == 0\n\n\ncheck(Solution().numberOfWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).\nReturn the largest possible value of num after any number of swaps.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestInteger(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        cnt = Counter()\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            cnt[v] += 1\n        x = num\n        ans = 0\n        t = 1\n        while x:\n            x, v = divmod(x, 10)\n            for y in range(10):\n                if ((v ^ y) & 1) == 0 and cnt[y]:\n                    ans += y * t\n                    t *= 10\n                    cnt[y] -= 1\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 1234) == 3412\n    assert candidate(num = 65875) == 87655\n\n\ncheck(Solution().largestInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1.\nReturn the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. Note that you should maximize the product before taking the modulo.\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumProduct(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumProduct(self, nums: List[int], k: int) -> int:\n        heapify(nums)\n        for _ in range(k):\n            heappush(nums, heappop(nums) + 1)\n        ans = 1\n        mod = 10**9 + 7\n        for v in nums:\n            ans = (ans * v) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,4], k = 5) == 20\n    assert candidate(nums = [6,3,3,2], k = 2) == 216\n\n\ncheck(Solution().maximumProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def intersection(self, nums: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def intersection(self, nums: List[List[int]]) -> List[int]:\n        cnt = [0] * 1001\n        for arr in nums:\n            for x in arr:\n                cnt[x] += 1\n        return [x for x, v in enumerate(cnt) if v == len(nums)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]) == [3,4]\n    assert candidate(nums = [[1,2,3],[4,5,6]]) == []\n\n\ncheck(Solution().intersection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle.\nNote:\n\nA lattice point is a point with integer coordinates.\nPoints that lie on the circumference of a circle are also considered to be inside it.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countLatticePoints(self, circles: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countLatticePoints(self, circles: List[List[int]]) -> int:\n        ans = 0\n        mx = max(x + r for x, _, r in circles)\n        my = max(y + r for _, y, r in circles)\n        for i in range(mx + 1):\n            for j in range(my + 1):\n                for x, y, r in circles:\n                    dx, dy = i - x, j - y\n                    if dx * dx + dy * dy <= r * r:\n                        ans += 1\n                        break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(circles = [[2,2,1]]) == 5\n    assert candidate(circles = [[2,2,2],[3,4,1]]) == 16\n\n\ncheck(Solution().countLatticePoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).\nThe ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).\nReturn an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.\nThe ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countRectangles(self, rectangles: List[List[int]], points: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countRectangles(\n        self, rectangles: List[List[int]], points: List[List[int]]\n    ) -> List[int]:\n        d = defaultdict(list)\n        for x, y in rectangles:\n            d[y].append(x)\n        for y in d.keys():\n            d[y].sort()\n        ans = []\n        for x, y in points:\n            cnt = 0\n            for h in range(y, 101):\n                xs = d[h]\n                cnt += len(xs) - bisect_left(xs, x)\n            ans.append(cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]) == [2,1]\n    assert candidate(rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]) == [1,3]\n\n\ncheck(Solution().countRectangles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers.\nReturn an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def fullBloomFlowers(\n        self, flowers: List[List[int]], people: List[int]\n    ) -> List[int]:\n        start, end = sorted(a for a, _ in flowers), sorted(b for _, b in flowers)\n        return [bisect_right(start, p) - bisect_left(end, p) for p in people]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]) == [1,2,2,2]\n    assert candidate(flowers = [[1,10],[3,3]], people = [3,3,2]) == [2,2,1]\n\n\ncheck(Solution().fullBloomFlowers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string number representing a positive integer and a character digit.\nReturn the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeDigit(self, number: str, digit: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeDigit(self, number: str, digit: str) -> str:\n        return max(\n            number[:i] + number[i + 1 :] for i, d in enumerate(number) if d == digit\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(number = \"123\", digit = \"3\") == \"12\"\n    assert candidate(number = \"1231\", digit = \"1\") == \"231\"\n    assert candidate(number = \"551\", digit = \"5\") == \"51\"\n\n\ncheck(Solution().removeDigit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array cards where cards[i] represents the value of the ith card. A pair of cards are matching if the cards have the same value.\nReturn the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCardPickup(self, cards: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumCardPickup(self, cards: List[int]) -> int:\n        last = {}\n        ans = inf\n        for i, x in enumerate(cards):\n            if x in last:\n                ans = min(ans, i - last[x] + 1)\n            last[x] = i\n        return -1 if ans == inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cards = [3,4,2,3,4,7]) == 4\n    assert candidate(cards = [1,0,5,3]) == -1\n\n\ncheck(Solution().minimumCardPickup)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.\nTwo arrays nums1 and nums2 are said to be distinct if:\n\nThey are of different lengths, or\nThere exists at least one index i where nums1[i] != nums2[i].\n\nA subarray is defined as a non-empty contiguous sequence of elements in an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDistinct(self, nums: List[int], k: int, p: int) -> int:\n```",
        "solutions": "class Solution:\n    def countDistinct(self, nums: List[int], k: int, p: int) -> int:\n        n = len(nums)\n        s = set()\n        for i in range(n):\n            cnt = 0\n            for j in range(i, n):\n                cnt += nums[j] % p == 0\n                if cnt > k:\n                    break\n                s.add(tuple(nums[i : j + 1]))\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,3,2,2], k = 2, p = 2) == 11\n    assert candidate(nums = [1,2,3,4], k = 4, p = 1) == 10\n\n\ncheck(Solution().countDistinct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe appeal of a string is the number of distinct characters found in the string.\n\nFor example, the appeal of \"abbca\" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'.\n\nGiven a string s, return the total appeal of all of its substrings.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def appealSum(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def appealSum(self, s: str) -> int:\n        ans = t = 0\n        pos = [-1] * 26\n        for i, c in enumerate(s):\n            c = ord(c) - ord('a')\n            t += i - pos[c]\n            ans += t\n            pos[c] = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abbca\") == 28\n    assert candidate(s = \"code\") == 20\n\n\ncheck(Solution().appealSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.\nReturn the number of strings in words that are a prefix of s.\nA prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPrefixes(self, words: List[str], s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPrefixes(self, words: List[str], s: str) -> int:\n        return sum(s.startswith(w) for w in words)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\") == 3\n    assert candidate(words = [\"a\",\"a\"], s = \"aa\") == 2\n\n\ncheck(Solution().countPrefixes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.\nA guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.\nReturn the number of unoccupied cells that are not guarded.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countUnguarded(\n        self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]\n    ) -> int:\n        g = [[0] * n for _ in range(m)]\n        for i, j in guards:\n            g[i][j] = 2\n        for i, j in walls:\n            g[i][j] = 2\n        dirs = (-1, 0, 1, 0, -1)\n        for i, j in guards:\n            for a, b in pairwise(dirs):\n                x, y = i, j\n                while 0 <= x + a < m and 0 <= y + b < n and g[x + a][y + b] < 2:\n                    x, y = x + a, y + b\n                    g[x][y] = 1\n        return sum(v == 0 for row in g for v in row)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]) == 7\n    assert candidate(m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]) == 4\n\n\ncheck(Solution().countUnguarded)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:\n\n0 represents grass,\n1 represents fire,\n2 represents a wall that you and fire cannot pass through.\n\nYou are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls.\nReturn the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return -1. If you can always reach the safehouse regardless of the minutes stayed, return 109.\nNote that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.\nA cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumMinutes(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumMinutes(self, grid: List[List[int]]) -> int:\n        def spread(q: Deque[int]) -> Deque[int]:\n            nq = deque()\n            while q:\n                i, j = q.popleft()\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n and not fire[x][y] and grid[x][y] == 0:\n                        fire[x][y] = True\n                        nq.append((x, y))\n            return nq\n\n        def check(t: int) -> bool:\n            for i in range(m):\n                for j in range(n):\n                    fire[i][j] = False\n            q1 = deque()\n            for i, row in enumerate(grid):\n                for j, x in enumerate(row):\n                    if x == 1:\n                        fire[i][j] = True\n                        q1.append((i, j))\n            while t and q1:\n                q1 = spread(q1)\n                t -= 1\n            if fire[0][0]:\n                return False\n            q2 = deque([(0, 0)])\n            vis = [[False] * n for _ in range(m)]\n            vis[0][0] = True\n            while q2:\n                for _ in range(len(q2)):\n                    i, j = q2.popleft()\n                    if fire[i][j]:\n                        continue\n                    for a, b in pairwise(dirs):\n                        x, y = i + a, j + b\n                        if (\n                            0 <= x < m\n                            and 0 <= y < n\n                            and not vis[x][y]\n                            and not fire[x][y]\n                            and grid[x][y] == 0\n                        ):\n                            if x == m - 1 and y == n - 1:\n                                return True\n                            vis[x][y] = True\n                            q2.append((x, y))\n                q1 = spread(q1)\n            return False\n\n        m, n = len(grid), len(grid[0])\n        l, r = -1, m * n\n        dirs = (-1, 0, 1, 0, -1)\n        fire = [[False] * n for _ in range(m)]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return int(1e9) if l == m * n else l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]) == 3\n    assert candidate(grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]) == -1\n    assert candidate(grid = [[0,0,0],[2,2,0],[1,2,0]]) == 1000000000\n\n\ncheck(Solution().maximumMinutes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings current and correct representing two 24-hour times.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nIn one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.\nReturn the minimum number of operations needed to convert current to correct.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n```",
        "solutions": "class Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = int(current[:2]) * 60 + int(current[3:])\n        b = int(correct[:2]) * 60 + int(correct[3:])\n        ans, d = 0, b - a\n        for i in [60, 15, 5, 1]:\n            ans += d // i\n            d %= i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(current = \"02:30\", correct = \"04:35\") == 3\n    assert candidate(current = \"11:00\", correct = \"11:01\") == 1\n\n\ncheck(Solution().convertTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.\nNote:\n\nThe average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.\nA subtree of root is a tree consisting of root and all of its descendants.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def averageOfSubtree(self, root: reeNode) -> int:\n        \n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def averageOfSubtree(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return 0, 0\n            ls, ln = dfs(root.left)\n            rs, rn = dfs(root.right)\n            s = ls + rs + root.val\n            n = ln + rn + 1\n            if s // n == root.val:\n                nonlocal ans\n                ans += 1\n            return s, n\n\n        ans = 0\n        dfs(root)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([4,8,5,0,1,None,6])) == 5\n    assert candidate(root = tree_node([1])) == 1\n\n\ncheck(Solution().averageOfSubtree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.\n\nIn order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.\n\nFor example, to add the letter 's', Alice has to press '7' four times. Similarly, to add the letter 'k', Alice has to press '5' twice.\nNote that the digits '0' and '1' do not map to any letters, so Alice does not use them.\n\nHowever, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.\n\nFor example, when Alice sent the message \"bob\", Bob received the string \"2266622\".\n\nGiven a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent.\nSince the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTexts(self, pressedKeys: str) -> int:\n```",
        "solutions": "mod = 10**9 + 7\nf = [1, 1, 2, 4]\ng = [1, 1, 2, 4]\nfor _ in range(100000):\n    f.append((f[-1] + f[-2] + f[-3]) % mod)\n    g.append((g[-1] + g[-2] + g[-3] + g[-4]) % mod)\n\n\nclass Solution:\n    def countTexts(self, pressedKeys: str) -> int:\n        ans = 1\n        for ch, s in groupby(pressedKeys):\n            m = len(list(s))\n            ans = ans * (g[m] if ch in \"79\" else f[m]) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pressedKeys = \"22233\") == 8\n    assert candidate(pressedKeys = \"222222222222222222222222222222222222\") == 82876089\n\n\ncheck(Solution().countTexts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.\nReturn the number of distinct ways you can buy some number of pens and pencils.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -> int:\n```",
        "solutions": "class Solution:\n    def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -> int:\n        ans = 0\n        for x in range(total // cost1 + 1):\n            y = (total - (x * cost1)) // cost2 + 1\n            ans += y\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(total = 20, cost1 = 10, cost2 = 5) == 9\n    assert candidate(total = 5, cost1 = 10, cost2 = 10) == 1\n\n\ncheck(Solution().waysToBuyPensPencils)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected graph with n nodes, numbered from 0 to n - 1.\nYou are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA node sequence is valid if it meets the following conditions:\n\nThere is an edge connecting every pair of adjacent nodes in the sequence.\nNo node appears more than once in the sequence.\n\nThe score of a node sequence is defined as the sum of the scores of the nodes in the sequence.\nReturn the maximum score of a valid node sequence with a length of 4. If no such sequence exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        for k in g.keys():\n            g[k] = nlargest(3, g[k], key=lambda x: scores[x])\n        ans = -1\n        for a, b in edges:\n            for c in g[a]:\n                for d in g[b]:\n                    if b != c != d != a:\n                        t = scores[a] + scores[b] + scores[c] + scores[d]\n                        ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]) == 24\n    assert candidate(scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]) == -1\n\n\ncheck(Solution().maximumScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are playing a game that has n levels numbered from 0 to n - 1. You are given a 0-indexed integer array damage where damage[i] is the amount of health you will lose to complete the ith level.\nYou are also given an integer armor. You may use your armor ability at most once during the game on any level which will protect you from at most armor damage.\nYou must complete the levels in order and your health must be greater than 0 at all times to beat the game.\nReturn the minimum health you need to start with to beat the game.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        return sum(damage) - min(max(damage), armor) + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(damage = [2,7,4,3], armor = 4) == 13\n    assert candidate(damage = [2,5,3,4], armor = 7) == 10\n    assert candidate(damage = [3,3,3], armor = 0) == 10\n\n\ncheck(Solution().minimumHealth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.\nYou are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation.\nReturn the maximum number of consecutive floors without a special floor.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:\n        special.sort()\n        ans = max(special[0] - bottom, top - special[-1])\n        for i in range(1, len(special)):\n            ans = max(ans, special[i] - special[i - 1] - 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(bottom = 2, top = 9, special = [4,6]) == 3\n    assert candidate(bottom = 6, top = 8, special = [7,6,8]) == 0\n\n\ncheck(Solution().maxConsecutive)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe bitwise AND of an array nums is the bitwise AND of all integers in nums.\n\nFor example, for nums = [1, 5, 3], the bitwise AND is equal to 1 & 5 & 3 = 1.\nAlso, for nums = [7], the bitwise AND is 7.\n\nYou are given an array of positive integers candidates. Evaluate the bitwise AND of every combination of numbers of candidates. Each number in candidates may only be used once in each combination.\nReturn the size of the largest combination of candidates with a bitwise AND greater than 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestCombination(self, candidates: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def largestCombination(self, candidates: List[int]) -> int:\n        ans = 0\n        for i in range(32):\n            t = 0\n            for x in candidates:\n                t += (x >> i) & 1\n            ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(candidates = [16,17,71,62,12,24,14]) == 4\n    assert candidate(candidates = [8,8]) == 2\n\n\ncheck(Solution().largestCombination)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n.\nnums contains a valid split at index i if the following are true:\n\nThe sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.\nThere is at least one element to the right of i. That is, 0 <= i < n - 1.\n\nReturn the number of valid splits in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToSplitArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def waysToSplitArray(self, nums: List[int]) -> int:\n        s = sum(nums)\n        ans = t = 0\n        for v in nums[:-1]:\n            t += v\n            if t >= s - t:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,4,-8,7]) == 2\n    assert candidate(nums = [2,3,1,0]) == 2\n\n\ncheck(Solution().waysToSplitArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.\nYou are also given an integer carpetLen, the length of a single carpet that can be placed anywhere.\nReturn the maximum number of white tiles that can be covered by the carpet.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -> int:\n        tiles.sort()\n        n = len(tiles)\n        s = ans = j = 0\n        for i, (li, ri) in enumerate(tiles):\n            while j < n and tiles[j][1] - li + 1 <= carpetLen:\n                s += tiles[j][1] - tiles[j][0] + 1\n                j += 1\n            if j < n and li + carpetLen > tiles[j][0]:\n                ans = max(ans, s + li + carpetLen - tiles[j][0])\n            else:\n                ans = max(ans, s)\n            s -= ri - li + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10) == 9\n    assert candidate(tiles = [[10,11],[1,1]], carpetLen = 2) == 2\n\n\ncheck(Solution().maximumWhiteTiles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.\nGiven a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestVariance(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def largestVariance(self, s: str) -> int:\n        ans = 0\n        for a, b in permutations(ascii_lowercase, 2):\n            if a == b:\n                continue\n            f = [0, -inf]\n            for c in s:\n                if c == a:\n                    f[0], f[1] = f[0] + 1, f[1] + 1\n                elif c == b:\n                    f[1] = max(f[1] - 1, f[0] - 1)\n                    f[0] = 0\n                if ans < f[1]:\n                    ans = f[1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aababbb\") == 3\n    assert candidate(s = \"abcde\") == 0\n\n\ncheck(Solution().largestVariance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of digits and an integer k.\nA round can be completed if the length of s is greater than k. In one round, do the following:\n\nDivide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. Note that the size of the last group can be smaller than k.\nReplace each group of s with a string representing the sum of all its digits. For example, \"346\" is replaced with \"13\" because 3 + 4 + 6 = 13.\nMerge consecutive groups together to form a new string. If the length of the string is greater than k, repeat from step 1.\n\nReturn s after all rounds have been completed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def digitSum(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def digitSum(self, s: str, k: int) -> str:\n        while len(s) > k:\n            t = []\n            n = len(s)\n            for i in range(0, n, k):\n                x = 0\n                for j in range(i, min(i + k, n)):\n                    x += int(s[j])\n                t.append(str(x))\n            s = \"\".join(t)\n        return s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"11111222223\", k = 3) == \"135\"\n    assert candidate(s = \"00000000\", k = 3) == \"000\"\n\n\ncheck(Solution().digitSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.\nReturn the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumRounds(self, tasks: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumRounds(self, tasks: List[int]) -> int:\n        cnt = Counter(tasks)\n        ans = 0\n        for v in cnt.values():\n            if v == 1:\n                return -1\n            ans += v // 3 + (v % 3 != 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [2,2,3,3,2,4,4,4,4,4]) == 4\n    assert candidate(tasks = [2,3,3]) == -1\n\n\ncheck(Solution().minimumRounds)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array grid of size m x n, where each cell contains a positive integer.\nA cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.\nThe product of a path is defined as the product of all the values in the path.\nReturn the maximum number of trailing zeros in the product of a cornered path found in grid.\nNote:\n\nHorizontal movement means moving in either the left or right direction.\nVertical movement means moving in either the up or down direction.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxTrailingZeros(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxTrailingZeros(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        r2 = [[0] * (n + 1) for _ in range(m + 1)]\n        c2 = [[0] * (n + 1) for _ in range(m + 1)]\n        r5 = [[0] * (n + 1) for _ in range(m + 1)]\n        c5 = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, x in enumerate(row, 1):\n                s2 = s5 = 0\n                while x % 2 == 0:\n                    x //= 2\n                    s2 += 1\n                while x % 5 == 0:\n                    x //= 5\n                    s5 += 1\n                r2[i][j] = r2[i][j - 1] + s2\n                c2[i][j] = c2[i - 1][j] + s2\n                r5[i][j] = r5[i][j - 1] + s5\n                c5[i][j] = c5[i - 1][j] + s5\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                a = min(r2[i][j] + c2[i - 1][j], r5[i][j] + c5[i - 1][j])\n                b = min(r2[i][j] + c2[m][j] - c2[i][j], r5[i][j] + c5[m][j] - c5[i][j])\n                c = min(r2[i][n] - r2[i][j] + c2[i][j], r5[i][n] - r5[i][j] + c5[i][j])\n                d = min(\n                    r2[i][n] - r2[i][j - 1] + c2[m][j] - c2[i][j],\n                    r5[i][n] - r5[i][j - 1] + c5[m][j] - c5[i][j],\n                )\n                ans = max(ans, a, b, c, d)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]) == 3\n    assert candidate(grid = [[4,3,2],[7,6,1],[8,8,8]]) == 0\n\n\ncheck(Solution().maxTrailingZeros)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nReturn the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        def dfs(i: int) -> int:\n            mx = 0\n            nonlocal ans\n            for j in g[i]:\n                x = dfs(j) + 1\n                if s[i] != s[j]:\n                    ans = max(ans, mx + x)\n                    mx = max(mx, x)\n            return mx\n\n        g = defaultdict(list)\n        for i in range(1, len(parent)):\n            g[parent[i]].append(i)\n        ans = 0\n        dfs(0)\n        return ans + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(parent = [-1,0,0,1,1,2], s = \"abacbe\") == 3\n    assert candidate(parent = [-1,0,0,0], s = \"aabc\") == 3\n\n\ncheck(Solution().longestPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def percentageLetter(self, s: str, letter: str) -> int:\n```",
        "solutions": "class Solution:\n    def percentageLetter(self, s: str, letter: str) -> int:\n        return s.count(letter) * 100 // len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"foobar\", letter = \"o\") == 33\n    assert candidate(s = \"jjjj\", letter = \"k\") == 0\n\n\ncheck(Solution().percentageLetter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.\nReturn the maximum number of bags that could have full capacity after placing the additional rocks in some bags.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumBags(\n        self, capacity: List[int], rocks: List[int], additionalRocks: int\n    ) -> int:\n        d = [a - b for a, b in zip(capacity, rocks)]\n        d.sort()\n        ans = 0\n        for v in d:\n            if v <= additionalRocks:\n                ans += 1\n                additionalRocks -= v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2) == 3\n    assert candidate(capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100) == 3\n\n\ncheck(Solution().maximumBags)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n.\nThe sum score of nums at an index i where 0 <= i < n is the maximum of:\n\nThe sum of the first i + 1 elements of nums.\nThe sum of the last n - i elements of nums.\n\nReturn the maximum sum score of nums at any index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSumScore(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSumScore(self, nums: List[int]) -> int:\n        s = [0] + list(accumulate(nums))\n        return max(max(s[i + 1], s[-1] - s[i]) for i in range(len(nums)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,-2,5]) == 10\n    assert candidate(nums = [-3,-5]) == -3\n\n\ncheck(Solution().maximumSumScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings.\nReturn the maximum number of copies of target that can be formed by taking letters from s and rearranging them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rearrangeCharacters(self, s: str, target: str) -> int:\n```",
        "solutions": "class Solution:\n    def rearrangeCharacters(self, s: str, target: str) -> int:\n        cnt1 = Counter(s)\n        cnt2 = Counter(target)\n        return min(cnt1[c] // v for c, v in cnt2.items())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ilovecodingonleetcode\", target = \"code\") == 2\n    assert candidate(s = \"abcba\", target = \"abc\") == 1\n    assert candidate(s = \"abbaccaddaeea\", target = \"aaaaa\") == 1\n\n\ncheck(Solution().rearrangeCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. A word represents a price if it is a sequence of digits preceded by a dollar sign.\n\nFor example, \"$100\", \"$23\", and \"$6\" represent prices while \"100\", \"$\", and \"$1e5\" do not.\n\nYou are given a string sentence representing a sentence and an integer discount. For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places.\nReturn a string representing the modified sentence.\nNote that all prices will contain at most 10 digits.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:\n```",
        "solutions": "class Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:\n        ans = []\n        for w in sentence.split():\n            if w[0] == '$' and w[1:].isdigit():\n                w = f'${int(w[1:]) * (1 - discount / 100):.2f}'\n            ans.append(w)\n        return ' '.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50) == \"there are $0.50 $1.00 and 5$ candies in the shop\"\n    assert candidate(sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100) == \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"\n\n\ncheck(Solution().discountPrices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.\nReturn the number of steps performed until nums becomes a non-decreasing array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalSteps(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def totalSteps(self, nums: List[int]) -> int:\n        stk = []\n        ans, n = 0, len(nums)\n        dp = [0] * n\n        for i in range(n - 1, -1, -1):\n            while stk and nums[i] > nums[stk[-1]]:\n                dp[i] = max(dp[i] + 1, dp[stk.pop()])\n            stk.append(i)\n        return max(dp)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,3,4,4,7,3,6,11,8,5,11]) == 3\n    assert candidate(nums = [4,5,7,7,13]) == 0\n\n\ncheck(Solution().totalSteps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\n0 represents an empty cell,\n1 represents an obstacle that may be removed.\n\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumObstacles(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumObstacles(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        q = deque([(0, 0, 0)])\n        vis = set()\n        dirs = (-1, 0, 1, 0, -1)\n        while 1:\n            i, j, k = q.popleft()\n            if i == m - 1 and j == n - 1:\n                return k\n            if (i, j) in vis:\n                continue\n            vis.add((i, j))\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if grid[x][y] == 0:\n                        q.appendleft((x, y, k))\n                    else:\n                        q.append((x, y, k + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,1],[1,1,0],[1,1,0]]) == 2\n    assert candidate(grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]) == 0\n\n\ncheck(Solution().minimumObstacles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string num of length n consisting of digits.\nReturn true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def digitCount(self, num: str) -> bool:\n```",
        "solutions": "class Solution:\n    def digitCount(self, num: str) -> bool:\n        cnt = Counter(num)\n        return all(cnt[str(i)] == int(v) for i, v in enumerate(num))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"1210\") == True\n    assert candidate(num = \"030\") == False\n\n\ncheck(Solution().digitCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a chat log of n messages. You are given two string arrays messages and senders where messages[i] is a message sent by senders[i].\nA message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. Note that a sender may send more than one message.\nReturn the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name.\nNote:\n\nUppercase letters come before lowercase letters in lexicographical order.\n\"Alice\" and \"alice\" are distinct.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:\n        cnt = Counter()\n        for msg, sender in zip(messages, senders):\n            cnt[sender] += msg.count(' ') + 1\n        ans = ''\n        for sender, v in cnt.items():\n            if cnt[ans] < v or (cnt[ans] == v and ans < sender):\n                ans = sender\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]) == \"Alice\"\n    assert candidate(messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]) == \"Charlie\"\n\n\ncheck(Solution().largestWordCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.\nYou are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nYou need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.\nReturn the maximum total importance of all roads possible after assigning the values optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:\n        deg = [0] * n\n        for a, b in roads:\n            deg[a] += 1\n            deg[b] += 1\n        deg.sort()\n        return sum(i * v for i, v in enumerate(deg, 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]) == 43\n    assert candidate(n = 5, roads = [[0,3],[2,4],[1,3]]) == 20\n\n\ncheck(Solution().maximumImportance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers num1 and num2, return the sum of the two integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sum(self, num1: int, num2: int) -> int:\n```",
        "solutions": "class Solution:\n    def sum(self, num1: int, num2: int) -> int:\n        return num1 + num2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num1 = 12, num2 = 5) == 17\n    assert candidate(num1 = -10, num2 = 4) == -6\n\n\ncheck(Solution().sum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child.\nReturn true if the value of the root is equal to the sum of the values of its two children, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkTree(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkTree(self, root: Optional[TreeNode]) -> bool:\n        return root.val == root.left.val + root.right.val\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([10,4,6])) == True\n    assert candidate(root = tree_node([5,3,1])) == False\n\n\ncheck(Solution().checkTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. A perfectly straight street is represented by a number line ranging from 0 to n - 1. You are given a 2D integer array lights representing the street lamp(s) on the street. Each lights[i] = [positioni, rangei] indicates that there is a street lamp at position positioni that lights up the area from [max(0, positioni - rangei), min(n - 1, positioni + rangei)] (inclusive).\nThe brightness of a position p is defined as the number of street lamps that light up the position p. You are given a 0-indexed integer array requirement of size n where requirement[i] is the minimum brightness of the ith position on the street.\nReturn the number of positions i on the street between 0 and n - 1 that have a brightness of at least requirement[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def meetRequirement(self, n: int, lights: List[List[int]], requirement: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def meetRequirement(\n        self, n: int, lights: List[List[int]], requirement: List[int]\n    ) -> int:\n        d = [0] * 100010\n        for p, r in lights:\n            i, j = max(0, p - r), min(n - 1, p + r)\n            d[i] += 1\n            d[j + 1] -= 1\n        return sum(s >= r for s, r in zip(accumulate(d), requirement))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]) == 4\n    assert candidate(n = 1, lights = [[0,1]], requirement = [2]) == 0\n\n\ncheck(Solution().meetRequirement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums whose length is a power of 2.\nApply the following algorithm on nums:\n\nLet n be the length of nums. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n / 2.\nFor every even index i where 0 <= i < n / 2, assign the value of newNums[i] as min(nums[2 * i], nums[2 * i + 1]).\nFor every odd index i where 0 <= i < n / 2, assign the value of newNums[i] as max(nums[2 * i], nums[2 * i + 1]).\nReplace the array nums with newNums.\nRepeat the entire process starting from step 1.\n\nReturn the last number that remains in nums after applying the algorithm.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMaxGame(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minMaxGame(self, nums: List[int]) -> int:\n        n = len(nums)\n        while n > 1:\n            n >>= 1\n            for i in range(n):\n                a, b = nums[i << 1], nums[i << 1 | 1]\n                nums[i] = min(a, b) if i % 2 == 0 else max(a, b)\n        return nums[0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,2,4,8,2,2]) == 1\n    assert candidate(nums = [3]) == 3\n\n\ncheck(Solution().minMaxGame)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.\nReturn the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans, a = 1, nums[0]\n        for b in nums:\n            if b - a > k:\n                a = b\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,6,1,2,5], k = 2) == 2\n    assert candidate(nums = [1,2,3], k = 1) == 2\n    assert candidate(nums = [2,2,4,5], k = 0) == 3\n\n\ncheck(Solution().partitionArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums that consists of n distinct positive integers. Apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1].\nIt is guaranteed that in the ith operation:\n\noperations[i][0] exists in nums.\noperations[i][1] does not exist in nums.\n\nReturn the array obtained after applying all the operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:\n        d = {v: i for i, v in enumerate(nums)}\n        for a, b in operations:\n            nums[d[a]] = b\n            d[b] = d[a]\n        return nums\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]) == [3,2,7,1]\n    assert candidate(nums = [1,2], operations = [[1,3],[2,1],[3,2]]) == [2,1]\n\n\ncheck(Solution().arrayChange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\n\nChoose 2 distinct names from ideas, call them ideaA and ideaB.\nSwap the first letters of ideaA and ideaB with each other.\nIf both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) is a valid company name.\nOtherwise, it is not a valid name.\n\nReturn the number of distinct valid names for the company.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n        s = set(ideas)\n        f = [[0] * 26 for _ in range(26)]\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    f[i][j] += 1\n        ans = 0\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    ans += f[j][i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]) == 6\n    assert candidate(ideas = [\"lack\",\"back\"]) == 0\n\n\ncheck(Solution().distinctNames)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA password is said to be strong if it satisfies all the following criteria:\n\nIt has at least 8 characters.\nIt contains at least one lowercase letter.\nIt contains at least one uppercase letter.\nIt contains at least one digit.\nIt contains at least one special character. The special characters are the characters in the following string: \"!@#$%^&*()-+\".\nIt does not contain 2 of the same character in adjacent positions (i.e., \"aab\" violates this condition, but \"aba\" does not).\n\nGiven a string password, return true if it is a strong password. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def strongPasswordCheckerII(self, password: str) -> bool:\n```",
        "solutions": "class Solution:\n    def strongPasswordCheckerII(self, password: str) -> bool:\n        if len(password) < 8:\n            return False\n        mask = 0\n        for i, c in enumerate(password):\n            if i and c == password[i - 1]:\n                return False\n            if c.islower():\n                mask |= 1\n            elif c.isupper():\n                mask |= 2\n            elif c.isdigit():\n                mask |= 4\n            else:\n                mask |= 8\n        return mask == 15\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(password = \"IloveLe3tcode!\") == True\n    assert candidate(password = \"Me+You--IsMyDream\") == False\n    assert candidate(password = \"1aB!\") == False\n\n\ncheck(Solution().strongPasswordCheckerII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.\nYou are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.\nReturn an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def successfulPairs(\n        self, spells: List[int], potions: List[int], success: int\n    ) -> List[int]:\n        potions.sort()\n        m = len(potions)\n        return [m - bisect_left(potions, success / v) for v in spells]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(spells = [5,1,3], potions = [1,2,3,4,5], success = 7) == [4,0,3]\n    assert candidate(spells = [3,1,2], potions = [8,5,8], success = 16) == [2,0,2]\n\n\ncheck(Solution().successfulPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:\n\nReplace a character oldi of sub with newi.\n\nEach character in sub cannot be replaced more than once.\nReturn true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. Otherwise, return false.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:\n```",
        "solutions": "class Solution:\n    def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:\n        d = defaultdict(set)\n        for a, b in mappings:\n            d[a].add(b)\n        for i in range(len(s) - len(sub) + 1):\n            if all(a == b or a in d[b] for a, b in zip(s[i : i + len(sub)], sub)):\n                return True\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]) == True\n    assert candidate(s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]) == False\n    assert candidate(s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]) == True\n\n\ncheck(Solution().matchReplacement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s and a positive integer k.\nReturn the length of the longest subsequence of s that makes up a binary number less than or equal to k.\nNote:\n\nThe subsequence can contain leading zeroes.\nThe empty string is considered to be equal to 0.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubsequence(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestSubsequence(self, s: str, k: int) -> int:\n        ans = v = 0\n        for c in s[::-1]:\n            if c == \"0\":\n                ans += 1\n            elif ans < 30 and (v | 1 << ans) <= k:\n                v |= 1 << ans\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1001010\", k = 5) == 5\n    assert candidate(s = \"00101001\", k = 1) == 6\n\n\ncheck(Solution().longestSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed.\nReturn the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo 109 + 7.\nNote that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countHousePlacements(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countHousePlacements(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = [1] * n\n        g = [1] * n\n        for i in range(1, n):\n            f[i] = g[i - 1]\n            g[i] = (f[i - 1] + g[i - 1]) % mod\n        v = f[-1] + g[-1]\n        return v * v % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 4\n    assert candidate(n = 2) == 9\n\n\ncheck(Solution().countHousePlacements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA square matrix is said to be an X-Matrix if both of the following conditions hold:\n\nAll the elements in the diagonals of the matrix are non-zero.\nAll other elements are 0.\n\nGiven a 2D integer array grid of size n x n representing a square matrix, return true if grid is an X-Matrix. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkXMatrix(self, grid: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkXMatrix(self, grid: List[List[int]]) -> bool:\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if i == j or i + j == len(grid) - 1:\n                    if v == 0:\n                        return False\n                elif v:\n                    return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]) == True\n    assert candidate(grid = [[5,7,0],[0,3,1],[0,5,0]]) == False\n\n\ncheck(Solution().checkXMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\nGet the XOR of all the values of the nodes for each of the three components respectively.\nThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\n\nFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\n\nReturn the minimum score of any possible pair of edge removals on the given tree.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:\n        def dfs(i, fa, x):\n            res = nums[i]\n            for j in g[i]:\n                if j != fa and j != x:\n                    res ^= dfs(j, i, x)\n            return res\n\n        def dfs2(i, fa, x):\n            nonlocal s, s1, ans\n            res = nums[i]\n            for j in g[i]:\n                if j != fa and j != x:\n                    a = dfs2(j, i, x)\n                    res ^= a\n                    b = s1 ^ a\n                    c = s ^ s1\n                    t = max(a, b, c) - min(a, b, c)\n                    ans = min(ans, t)\n            return res\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n\n        s = 0\n        for v in nums:\n            s ^= v\n        n = len(nums)\n        ans = inf\n        for i in range(n):\n            for j in g[i]:\n                s1 = dfs(i, -1, j)\n                dfs2(i, -1, j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]) == 9\n    assert candidate(nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]) == 0\n\n\ncheck(Solution().minimumScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.\nReturn the number of '*' in s, excluding the '*' between each pair of '|'.\nNote that each '|' will belong to exactly one pair.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countAsterisks(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countAsterisks(self, s: str) -> int:\n        ans, ok = 0, 1\n        for c in s:\n            if c == \"*\":\n                ans += ok\n            elif c == \"|\":\n                ok ^= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"l|*e*et|c**o|*de|\") == 2\n    assert candidate(s = \"iamprogrammer\") == 0\n    assert candidate(s = \"yo|uar|e**|b|e***au|tifu|l\") == 5\n\n\ncheck(Solution().countAsterisks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x).\nNote that AND is the bitwise AND operation and XOR is the bitwise XOR operation.\nReturn the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumXOR(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumXOR(self, nums: List[int]) -> int:\n        return reduce(or_, nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,4,6]) == 7\n    assert candidate(nums = [1,2,3,9,2]) == 11\n\n\ncheck(Solution().maximumXOR)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nReturn the number of pairs of different nodes that are unreachable from each other.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n        def dfs(i: int) -> int:\n            if vis[i]:\n                return 0\n            vis[i] = True\n            return 1 + sum(dfs(j) for j in g[i])\n\n        g = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = [False] * n\n        ans = s = 0\n        for i in range(n):\n            t = dfs(i)\n            ans += s * t\n            s += t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, edges = [[0,1],[0,2],[1,2]]) == 0\n    assert candidate(n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]) == 14\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:\n\nThe greatest common divisor of any adjacent values in the sequence is equal to 1.\nThere is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.\n\nReturn the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7.\nTwo sequences are considered distinct if at least one element is different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctSequences(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def distinctSequences(self, n: int) -> int:\n        if n == 1:\n            return 6\n        mod = 10**9 + 7\n        dp = [[[0] * 6 for _ in range(6)] for _ in range(n + 1)]\n        for i in range(6):\n            for j in range(6):\n                if gcd(i + 1, j + 1) == 1 and i != j:\n                    dp[2][i][j] = 1\n        for k in range(3, n + 1):\n            for i in range(6):\n                for j in range(6):\n                    if gcd(i + 1, j + 1) == 1 and i != j:\n                        for h in range(6):\n                            if gcd(h + 1, i + 1) == 1 and h != i and h != j:\n                                dp[k][i][j] += dp[k - 1][h][i]\n        ans = 0\n        for i in range(6):\n            for j in range(6):\n                ans += dp[-1][i][j]\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == 184\n    assert candidate(n = 2) == 22\n\n\ncheck(Solution().distinctSequences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a keypad with 9 buttons, numbered from 1 to 9, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as:\n\nAll 26 lowercase English letters are mapped to.\nEach character is mapped to by exactly 1 button.\nEach button maps to at most 3 characters.\n\nTo type the first character matched to a button, you press the button once. To type the second character, you press the button twice, and so on.\nGiven a string s, return the minimum number of keypresses needed to type s using your keypad.\nNote that the characters mapped to by each button, and the order they are mapped in cannot be changed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumKeypresses(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumKeypresses(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, k = 0, 1\n        for i, x in enumerate(sorted(cnt.values(), reverse=True), 1):\n            ans += k * x\n            if i % 9 == 0:\n                k += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"apple\") == 5\n    assert candidate(s = \"abcdefghijkl\") == 15\n\n\ncheck(Solution().minimumKeypresses)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:\n\nUse the first appearance of all 26 lowercase English letters in key as the order of the substitution table.\nAlign the substitution table with the regular English alphabet.\nEach letter in message is then substituted using the table.\nSpaces ' ' are transformed to themselves.\n\n\nFor example, given key = \"happy boy\" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f').\n\nReturn the decoded message.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def decodeMessage(self, key: str, message: str) -> str:\n```",
        "solutions": "class Solution:\n    def decodeMessage(self, key: str, message: str) -> str:\n        d = {\" \": \" \"}\n        i = 0\n        for c in key:\n            if c not in d:\n                d[c] = ascii_lowercase[i]\n                i += 1\n        return \"\".join(d[c] for c in message)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\") == \"this is a secret\"\n    assert candidate(key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\") == \"the five boxing wizards jump quickly\"\n\n\ncheck(Solution().decodeMessage)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nOn day 1, one person discovers a secret.\nYou are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.\nGiven an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n```",
        "solutions": "class Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n        m = (n << 1) + 10\n        d = [0] * m\n        cnt = [0] * m\n        cnt[1] = 1\n        for i in range(1, n + 1):\n            if cnt[i]:\n                d[i] += cnt[i]\n                d[i + forget] -= cnt[i]\n                nxt = i + delay\n                while nxt < i + forget:\n                    cnt[nxt] += cnt[i]\n                    nxt += 1\n        mod = 10**9 + 7\n        return sum(d[: n + 1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, delay = 2, forget = 4) == 5\n    assert candidate(n = 4, delay = 1, forget = 3) == 6\n\n\ncheck(Solution().peopleAwareOfSecret)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers m and n, which represent the dimensions of a matrix.\nYou are also given the head of a linked list of integers.\nGenerate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.\nReturn the generated matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\n        ans = [[-1] * n for _ in range(m)]\n        i = j = k = 0\n        dirs = (0, 1, 0, -1, 0)\n        while 1:\n            ans[i][j] = head.val\n            head = head.next\n            if head is None:\n                break\n            while 1:\n                x, y = i + dirs[k], j + dirs[k + 1]\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    i, j = x, y\n                    break\n                k = (k + 1) % 4\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 3, n = 5, head = list_node([3,0,2,6,8,1,7,9,4,2,5,5,0])) == [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\n    assert candidate(m = 1, n = 4, head = list_node([0,1,2])) == [[0,1,2,-1]]\n\n\ncheck(Solution().spiralMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.\nYou are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fillCups(self, amount: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def fillCups(self, amount: List[int]) -> int:\n        ans = 0\n        while sum(amount):\n            amount.sort()\n            ans += 1\n            amount[2] -= 1\n            amount[1] = max(0, amount[1] - 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(amount = [1,4,2]) == 4\n    assert candidate(amount = [5,4,4]) == 7\n    assert candidate(amount = [5,0,0]) == 5\n\n\ncheck(Solution().fillCups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:\n\nThe characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right.\nThe character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.\n\nReturn true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canChange(self, start: str, target: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canChange(self, start: str, target: str) -> bool:\n        a = [(v, i) for i, v in enumerate(start) if v != '_']\n        b = [(v, i) for i, v in enumerate(target) if v != '_']\n        if len(a) != len(b):\n            return False\n        for (c, i), (d, j) in zip(a, b):\n            if c != d:\n                return False\n            if c == 'L' and i < j:\n                return False\n            if c == 'R' and i > j:\n                return False\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(start = \"_L__R__R_\", target = \"L______RR\") == True\n    assert candidate(start = \"R_L_\", target = \"__LR\") == False\n    assert candidate(start = \"_R\", target = \"R_\") == False\n\n\ncheck(Solution().canChange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a full binary tree with the following properties:\n\nLeaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.\nNon-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND.\n\nThe evaluation of a node is as follows:\n\nIf the node is a leaf node, the evaluation is the value of the node, i.e. True or False.\nOtherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.\n\nReturn the boolean result of evaluating the root node.\nA full binary tree is a binary tree where each node has either 0 or 2 children.\nA leaf node is a node that has zero children.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n        def dfs(root):\n            if root.left is None and root.right is None:\n                return bool(root.val)\n            l, r = dfs(root.left), dfs(root.right)\n            return (l or r) if root.val == 2 else (l and r)\n\n        return dfs(root)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([2,1,3,None,None,0,1])) == True\n    assert candidate(root = tree_node([0])) == False\n\n\ncheck(Solution().evaluateTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. All bus departure times are unique. All passenger arrival times are unique.\nYou are given an integer capacity, which represents the maximum number of passengers that can get on each bus.\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. Passengers with the earliest arrival times get on the bus first.\nMore formally when a bus arrives, either:\n\nIf capacity or fewer passengers are waiting for a bus, they will all get on the bus, or\nThe capacity passengers with the earliest arrival times will get on the bus.\n\nReturn the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.\nNote: The arrays buses and passengers are not necessarily sorted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:\n```",
        "solutions": "class Solution:\n    def latestTimeCatchTheBus(\n        self, buses: List[int], passengers: List[int], capacity: int\n    ) -> int:\n        buses.sort()\n        passengers.sort()\n        j = 0\n        for t in buses:\n            c = capacity\n            while c and j < len(passengers) and passengers[j] <= t:\n                c, j = c - 1, j + 1\n        j -= 1\n        ans = buses[-1] if c else passengers[j]\n        while ~j and passengers[j] == ans:\n            ans, j = ans - 1, j - 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(buses = [10,20], passengers = [2,17,18,19], capacity = 2) == 16\n    assert candidate(buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2) == 20\n\n\ncheck(Solution().latestTimeCatchTheBus)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.\nThe sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.\nYou are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.\nReturn the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.\nNote: You are allowed to modify the array elements to become negative integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSumSquareDiff(self, nums1: List[int], nums2: List[int], k1: int, k2: int) -> int:\n```",
        "solutions": "class Solution:\n    def minSumSquareDiff(\n        self, nums1: List[int], nums2: List[int], k1: int, k2: int\n    ) -> int:\n        d = [abs(a - b) for a, b in zip(nums1, nums2)]\n        k = k1 + k2\n        if sum(d) <= k:\n            return 0\n        left, right = 0, max(d)\n        while left < right:\n            mid = (left + right) >> 1\n            if sum(max(v - mid, 0) for v in d) <= k:\n                right = mid\n            else:\n                left = mid + 1\n        for i, v in enumerate(d):\n            d[i] = min(left, v)\n            k -= max(0, v - left)\n        for i, v in enumerate(d):\n            if k == 0:\n                break\n            if v == left:\n                k -= 1\n                d[i] -= 1\n        return sum(v * v for v in d)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0) == 579\n    assert candidate(nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1) == 43\n\n\ncheck(Solution().minSumSquareDiff)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer threshold.\nFind any subarray of nums of length k such that every element in the subarray is greater than threshold / k.\nReturn the size of any such subarray. If there is no such subarray, return -1.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n```",
        "solutions": "class Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def merge(a, b):\n            pa, pb = find(a), find(b)\n            if pa == pb:\n                return\n            p[pa] = pb\n            size[pb] += size[pa]\n\n        n = len(nums)\n        p = list(range(n))\n        size = [1] * n\n        arr = sorted(zip(nums, range(n)), reverse=True)\n        vis = [False] * n\n        for v, i in arr:\n            if i and vis[i - 1]:\n                merge(i, i - 1)\n            if i < n - 1 and vis[i + 1]:\n                merge(i, i + 1)\n            if v > threshold // size[find(i)]:\n                return size[find(i)]\n            vis[i] = True\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,4,3,1], threshold = 6) == 3\n    assert candidate(nums = [6,5,6,5,8], threshold = 7) == 1\n\n\ncheck(Solution().validSubarraySize)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one operation, you may do the following:\n\nChoose two integers in nums that are equal.\nRemove both integers from nums, forming a pair.\n\nThe operation is done on nums as many times as possible.\nReturn a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPairs(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def numberOfPairs(self, nums: List[int]) -> List[int]:\n        cnt = Counter(nums)\n        s = sum(v // 2 for v in cnt.values())\n        return [s, len(nums) - s * 2]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,1,3,2,2]) == [3,1]\n    assert candidate(nums = [1,1]) == [1,0]\n    assert candidate(nums = [0]) == [0,1]\n\n\ncheck(Solution().numberOfPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:\n\nTrim each number in nums to its rightmost trimi digits.\nDetermine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.\nReset each number in nums to its original length.\n\nReturn an array answer of the same length as queries, where answer[i] is the answer to the ith query.\nNote:\n\nTo trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.\nStrings in nums may contain leading zeros.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def smallestTrimmedNumbers(\n        self, nums: List[str], queries: List[List[int]]\n    ) -> List[int]:\n        ans = []\n        for k, trim in queries:\n            t = sorted((v[-trim:], i) for i, v in enumerate(nums))\n            ans.append(t[k - 1][1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]) == [2,2,1,0]\n    assert candidate(nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]) == [3,0]\n\n\ncheck(Solution().smallestTrimmedNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.\nReturn the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.\nNote that an integer x divides y if y % x == 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        x = numsDivide[0]\n        for v in numsDivide[1:]:\n            x = gcd(x, v)\n        nums.sort()\n        for i, v in enumerate(nums):\n            if x % v == 0:\n                return i\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]) == 2\n    assert candidate(nums = [4,3,6], numsDivide = [8,2,6,10]) == -1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n 0-indexed 2D array of positive integers heights where heights[i][j] is the height of the person standing at position (i, j).\nA person standing at position (row1, col1) can see a person standing at position (row2, col2) if:\n\nThe person at (row2, col2) is to the right or below the person at (row1, col1). More formally, this means that either row1 == row2 and col1 < col2 or row1 < row2 and col1 == col2.\nEveryone in between them is shorter than both of them.\n\nReturn an m x n 2D array of integers answer where answer[i][j] is the number of people that the person at position (i, j) can see.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def seePeople(self, heights: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def seePeople(self, heights: List[List[int]]) -> List[List[int]]:\n        def f(nums: List[int]) -> List[int]:\n            n = len(nums)\n            stk = []\n            ans = [0] * n\n            for i in range(n - 1, -1, -1):\n                while stk and stk[-1] < nums[i]:\n                    ans[i] += 1\n                    stk.pop()\n                if stk:\n                    ans[i] += 1\n                while stk and stk[-1] == nums[i]:\n                    stk.pop()\n                stk.append(nums[i])\n            return ans\n\n        ans = [f(row) for row in heights]\n        m, n = len(heights), len(heights[0])\n        for j in range(n):\n            add = f([heights[i][j] for i in range(m)])\n            for i in range(m):\n                ans[i][j] += add[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(heights = [[3,1,4,2,5]]) == [[2,1,2,1,0]]\n    assert candidate(heights = [[5,1],[3,1],[4,1]]) == [[3,1],[2,1],[1,0]]\n\n\ncheck(Solution().seePeople)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays of the same length present and future where present[i] is the current price of the ith stock and future[i] is the price of the ith stock a year in the future. You may buy each stock at most once. You are also given an integer budget representing the amount of money you currently have.\nReturn the maximum amount of profit you can make.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumProfit(self, present: List[int], future: List[int], budget: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumProfit(self, present: List[int], future: List[int], budget: int) -> int:\n        f = [[0] * (budget + 1) for _ in range(len(present) + 1)]\n        for i, w in enumerate(present, 1):\n            for j in range(budget + 1):\n                f[i][j] = f[i - 1][j]\n                if j >= w and future[i - 1] > w:\n                    f[i][j] = max(f[i][j], f[i - 1][j - w] + future[i - 1] - w)\n        return f[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(present = [5,4,6,2,3], future = [8,5,4,3,5], budget = 10) == 6\n    assert candidate(present = [2,2,5], future = [3,4,10], budget = 6) == 5\n    assert candidate(present = [3,3,12], future = [0,3,15], budget = 10) == 0\n\n\ncheck(Solution().maximumProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s consisting of lowercase English letters, return the first letter to appear twice.\nNote:\n\nA letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b.\ns will contain at least one letter that appears twice.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def repeatedCharacter(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def repeatedCharacter(self, s: str) -> str:\n        cnt = Counter()\n        for c in s:\n            cnt[c] += 1\n            if cnt[c] == 2:\n                return c\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abccbaacz\") == \"c\"\n    assert candidate(s = \"abcdd\") == \"d\"\n\n\ncheck(Solution().repeatedCharacter)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal.\nA row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                ans += all(grid[i][k] == grid[k][j] for k in range(n))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[3,2,1],[1,7,6],[2,7,7]]) == 1\n    assert candidate(grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]) == 3\n\n\ncheck(Solution().equalPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the number of subarrays filled with 0.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def zeroFilledSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def zeroFilledSubarray(self, nums: List[int]) -> int:\n        ans = cnt = 0\n        for v in nums:\n            cnt = 0 if v else cnt + 1\n            ans += cnt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,0,0,2,0,0,4]) == 6\n    assert candidate(nums = [0,0,0,2,0,0]) == 9\n    assert candidate(nums = [2,10,2019]) == 0\n\n\ncheck(Solution().zeroFilledSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].\nThe following are the types of poker hands you can make from best to worst:\n\n\"Flush\": Five cards of the same suit.\n\"Three of a Kind\": Three cards of the same rank.\n\"Pair\": Two cards of the same rank.\n\"High Card\": Any single card.\n\nReturn a string representing the best type of poker hand you can make with the given cards.\nNote that the return values are case-sensitive.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\n        # if len(set(suits)) == 1:\n        if all(a == b for a, b in pairwise(suits)):\n            return 'Flush'\n        cnt = Counter(ranks)\n        if any(v >= 3 for v in cnt.values()):\n            return 'Three of a Kind'\n        if any(v == 2 for v in cnt.values()):\n            return 'Pair'\n        return 'High Card'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"Flush\"\n    assert candidate(ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]) == \"Three of a Kind\"\n    assert candidate(ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]) == \"Pair\"\n\n\ncheck(Solution().bestHand)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].\nReturn the length of the shortest sequence of rolls so that there's no such subsequence in rolls.\nA sequence of rolls of length len is the result of rolling a k sided dice len times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestSequence(self, rolls: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def shortestSequence(self, rolls: List[int], k: int) -> int:\n        ans = 1\n        s = set()\n        for v in rolls:\n            s.add(v)\n            if len(s) == k:\n                ans += 1\n                s.clear()\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(rolls = [4,2,1,2,3,3,2,4,1], k = 4) == 3\n    assert candidate(rolls = [1,1,2,2], k = 2) == 2\n    assert candidate(rolls = [1,1,3,2,2,2,3,3], k = 4) == 1\n\n\ncheck(Solution().shortestSequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a non-negative integer array nums. In one operation, you must:\n\nChoose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.\nSubtract x from every positive element in nums.\n\nReturn the minimum number of operations to make every element in nums equal to 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        return len({x for x in nums if x})\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,5,0,3,5]) == 3\n    assert candidate(nums = [0]) == 0\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\n\ni < j < k,\nnums[j] - nums[i] == diff, and\nnums[k] - nums[j] == diff.\n\nReturn the number of unique arithmetic triplets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n```",
        "solutions": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        return sum(b - a == diff and c - b == diff for a, b, c in combinations(nums, 3))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,4,6,7,10], diff = 3) == 2\n    assert candidate(nums = [4,5,6,7,8,9], diff = 2) == 2\n\n\ncheck(Solution().arithmeticTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\nt is a subsequence of the string s.\nThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\n\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [1] * n\n        d = {s[0]: 0}\n        for i in range(1, n):\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                if b in d:\n                    dp[i] = max(dp[i], dp[d[b]] + 1)\n            d[s[i]] = i\n        return max(dp)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"acfgbd\", k = 2) == 4\n    assert candidate(s = \"abcd\", k = 3) == 4\n\n\ncheck(Solution().longestIdealString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.\nReturn the maximum number of nodes you can reach from node 0 without visiting a restricted node.\nNote that node 0 will not be a restricted node.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def reachableNodes(\n        self, n: int, edges: List[List[int]], restricted: List[int]\n    ) -> int:\n        def dfs(i: int) -> int:\n            vis.add(i)\n            return 1 + sum(j not in vis and dfs(j) for j in g[i])\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = set(restricted)\n        return dfs(0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]) == 4\n    assert candidate(n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]) == 3\n\n\ncheck(Solution().reachableNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].\nReturn the total number of bad pairs in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBadPairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countBadPairs(self, nums: List[int]) -> int:\n        cnt = Counter()\n        ans = 0\n        for i, x in enumerate(nums):\n            ans += i - cnt[i - x]\n            cnt[i - x] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,1,3,3]) == 5\n    assert candidate(nums = [1,2,3,4,5]) == 0\n\n\ncheck(Solution().countBadPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.\nThe total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.\nReturn the maximum number of consecutive robots you can run such that the total cost does not exceed budget.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumRobots(self, chargeTimes: List[int], runningCosts: List[int], budget: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumRobots(\n        self, chargeTimes: List[int], runningCosts: List[int], budget: int\n    ) -> int:\n        q = deque()\n        ans = j = s = 0\n        for i, (a, b) in enumerate(zip(chargeTimes, runningCosts)):\n            while q and chargeTimes[q[-1]] <= a:\n                q.pop()\n            q.append(i)\n            s += b\n            while q and chargeTimes[q[0]] + (i - j + 1) * s > budget:\n                if q[0] == j:\n                    q.popleft()\n                s -= runningCosts[j]\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25) == 3\n    assert candidate(chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19) == 0\n\n\ncheck(Solution().maximumRobots)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.\n\nFor example, consider nums = [5,6,7]. In one operation, we can replace nums[1] with 2 and 4 and convert nums to [5,2,4,7].\n\nReturn the minimum number of operations to make an array that is sorted in non-decreasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,9,3]) == 2\n    assert candidate(nums = [1,2,3,4,5]) == 0\n\n\ncheck(Solution().minimumReplacement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an n x n integer matrix grid.\nGenerate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:\n\nmaxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.\n\nIn other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.\nReturn the generated matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:\n        n = len(grid)\n        ans = [[0] * (n - 2) for _ in range(n - 2)]\n        for i in range(n - 2):\n            for j in range(n - 2):\n                ans[i][j] = max(\n                    grid[x][y] for x in range(i, i + 3) for y in range(j, j + 3)\n                )\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]) == [[9,9],[8,6]]\n    assert candidate(grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]) == [[2,2,2],[2,2,2],[2,2,2]]\n\n\ncheck(Solution().largestLocal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge.\nThe graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i].\nThe edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i.\nReturn the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def edgeScore(self, edges: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def edgeScore(self, edges: List[int]) -> int:\n        cnt = Counter()\n        for i, v in enumerate(edges):\n            cnt[v] += i\n        ans = 0\n        for i in range(len(edges)):\n            if cnt[ans] < cnt[i]:\n                ans = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [1,0,0,0,0,7,7,5]) == 7\n    assert candidate(edges = [2,0,0,2]) == 0\n\n\ncheck(Solution().edgeScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.\nA 0-indexed string num of length n + 1 is created using the following conditions:\n\nnum consists of the digits '1' to '9', where each digit is used at most once.\nIf pattern[i] == 'I', then num[i] < num[i + 1].\nIf pattern[i] == 'D', then num[i] > num[i + 1].\n\nReturn the lexicographically smallest possible string num that meets the conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestNumber(self, pattern: str) -> str:\n```",
        "solutions": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        def dfs(u):\n            nonlocal ans\n            if ans:\n                return\n            if u == len(pattern) + 1:\n                ans = ''.join(t)\n                return\n            for i in range(1, 10):\n                if not vis[i]:\n                    if u and pattern[u - 1] == 'I' and int(t[-1]) >= i:\n                        continue\n                    if u and pattern[u - 1] == 'D' and int(t[-1]) <= i:\n                        continue\n                    vis[i] = True\n                    t.append(str(i))\n                    dfs(u + 1)\n                    vis[i] = False\n                    t.pop()\n\n        vis = [False] * 10\n        t = []\n        ans = None\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pattern = \"IIIDIDDD\") == \"123549876\"\n    assert candidate(pattern = \"DDD\") == \"4321\"\n\n\ncheck(Solution().smallestNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe call a positive integer special if all of its digits are distinct.\nGiven a positive integer n, return the number of special integers that belong to the interval [1, n].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    ans += A(10 - (m - i), i)\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 20) == 19\n    assert candidate(n = 5) == 5\n    assert candidate(n = 135) == 110\n\n\ncheck(Solution().countSpecialNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays jobs and workers of equal length, where jobs[i] is the amount of time needed to complete the ith job, and workers[j] is the amount of time the jth worker can work each day.\nEach job should be assigned to exactly one worker, such that each worker completes exactly one job.\nReturn the minimum number of days needed to complete all the jobs after assignment.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, jobs: List[int], workers: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTime(self, jobs: List[int], workers: List[int]) -> int:\n        jobs.sort()\n        workers.sort()\n        return max((a + b - 1) // b for a, b in zip(jobs, workers))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(jobs = [5,2,4], workers = [1,7,5]) == 2\n    assert candidate(jobs = [3,18,15,9], workers = [6,5,1,3]) == 3\n\n\ncheck(Solution().minimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively.\nYou are also given two 0-indexed integer arrays energy and experience, both of length n.\nYou will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.\nDefeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.\nReturn the minimum number of training hours required to defeat all n opponents.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minNumberOfHours(\n        self,\n        initialEnergy: int,\n        initialExperience: int,\n        energy: List[int],\n        experience: List[int],\n    ) -> int:\n        ans = 0\n        for a, b in zip(energy, experience):\n            if initialEnergy <= a:\n                ans += a - initialEnergy + 1\n                initialEnergy = a + 1\n            if initialExperience <= b:\n                ans += b - initialExperience + 1\n                initialExperience = b + 1\n            initialEnergy -= a\n            initialExperience += b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]) == 8\n    assert candidate(initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]) == 0\n\n\ncheck(Solution().minNumberOfHours)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.\nEach minute, a node becomes infected if:\n\nThe node is currently uninfected.\nThe node is adjacent to an infected node.\n\nReturn the number of minutes needed for the entire tree to be infected.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:\n        def dfs(node: Optional[TreeNode], fa: Optional[TreeNode]):\n            if node is None:\n                return\n            if fa:\n                g[node.val].append(fa.val)\n                g[fa.val].append(node.val)\n            dfs(node.left, node)\n            dfs(node.right, node)\n\n        def dfs2(node: int, fa: int) -> int:\n            ans = 0\n            for nxt in g[node]:\n                if nxt != fa:\n                    ans = max(ans, 1 + dfs2(nxt, node))\n            return ans\n\n        g = defaultdict(list)\n        dfs(root, None)\n        return dfs2(start, -1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,5,3,None,4,10,6,9,2]), start = 3) == 4\n    assert candidate(root = tree_node([1]), start = 1) == 0\n\n\ncheck(Solution().amountOfTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.\nWe define the K-Sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct).\nReturn the K-Sum of the array.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nNote that the empty subsequence is considered to have a sum of 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kSum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kSum(self, nums: List[int], k: int) -> int:\n        mx = 0\n        for i, x in enumerate(nums):\n            if x > 0:\n                mx += x\n            else:\n                nums[i] = -x\n        nums.sort()\n        h = [(0, 0)]\n        for _ in range(k - 1):\n            s, i = heappop(h)\n            if i < len(nums):\n                heappush(h, (s + nums[i], i + 1))\n                if i:\n                    heappush(h, (s + nums[i] - nums[i - 1], i + 1))\n        return mx - h[0][0]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,-2], k = 5) == 2\n    assert candidate(nums = [1,-2,3,4,-10,12], k = 16) == 10\n\n\ncheck(Solution().kSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively.\nYou are also given an integer k, which is the desired number of consecutive black blocks.\nIn one operation, you can recolor a white block such that it becomes a black block.\nReturn the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumRecolors(self, blocks: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumRecolors(self, blocks: str, k: int) -> int:\n        ans = cnt = blocks[:k].count('W')\n        for i in range(k, len(blocks)):\n            cnt += blocks[i] == 'W'\n            cnt -= blocks[i - k] == 'W'\n            ans = min(ans, cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(blocks = \"WBBWWBBWBW\", k = 7) == 3\n    assert candidate(blocks = \"WBWBBBW\", k = 2) == 0\n\n\ncheck(Solution().minimumRecolors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s. In one second, all occurrences of \"01\" are simultaneously replaced with \"10\". This process repeats until no occurrences of \"01\" exist.\nReturn the number of seconds needed to complete this process.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def secondsToRemoveOccurrences(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def secondsToRemoveOccurrences(self, s: str) -> int:\n        ans = 0\n        while s.count('01'):\n            s = s.replace('01', '10')\n            ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0110101\") == 4\n    assert candidate(s = \"11100\") == 0\n\n\ncheck(Solution().secondsToRemoveOccurrences)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.\nShifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').\nReturn the final string after all such shifts to s are applied.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\n```",
        "solutions": "class Solution:\n    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\n        n = len(s)\n        d = [0] * (n + 1)\n        for i, j, v in shifts:\n            if v == 0:\n                v = -1\n            d[i] += v\n            d[j + 1] -= v\n        for i in range(1, n + 1):\n            d[i] += d[i - 1]\n        return ''.join(\n            chr(ord('a') + (ord(s[i]) - ord('a') + d[i] + 26) % 26) for i in range(n)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]) == \"ace\"\n    assert candidate(s = \"dztz\", shifts = [[0,0,0],[1,1,1]]) == \"catz\"\n\n\ncheck(Solution().shiftingLetters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.\nA segment is a contiguous sequence of positive integers in nums. A segment sum is the sum of every element in a segment.\nReturn an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.\nNote: The same index will not be removed more than once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def merge(a, b):\n            pa, pb = find(a), find(b)\n            p[pa] = pb\n            s[pb] += s[pa]\n\n        n = len(nums)\n        p = list(range(n))\n        s = [0] * n\n        ans = [0] * n\n        mx = 0\n        for j in range(n - 1, 0, -1):\n            i = removeQueries[j]\n            s[i] = nums[i]\n            if i and s[find(i - 1)]:\n                merge(i, i - 1)\n            if i < n - 1 and s[find(i + 1)]:\n                merge(i, i + 1)\n            mx = max(mx, s[find(i)])\n            ans[j - 1] = mx\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]) == [14,7,2,2,0]\n    assert candidate(nums = [3,2,11,1], removeQueries = [3,2,1,0]) == [16,5,3,0]\n\n\ncheck(Solution().maximumSegmentSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s consisting of only lowercase English letters. In one operation, you can change any character of s to any other character.\nReturn true if you can make s a palindrome after performing exactly one or two operations, or return false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makePalindrome(self, s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def makePalindrome(self, s: str) -> bool:\n        i, j = 0, len(s) - 1\n        cnt = 0\n        while i < j:\n            cnt += s[i] != s[j]\n            i, j = i + 1, j - 1\n        return cnt <= 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcdba\") == True\n    assert candidate(s = \"aa\") == True\n    assert candidate(s = \"abcdef\") == False\n\n\ncheck(Solution().makePalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of length n, and an integer array queries of length m.\nReturn an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        nums.sort()\n        s = list(accumulate(nums))\n        return [bisect_right(s, q) for q in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,5,2,1], queries = [3,10,21]) == [2,3,4]\n    assert candidate(nums = [2,3,4,5], queries = [1]) == [0]\n\n\ncheck(Solution().answerQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s, which contains stars *.\nIn one operation, you can:\n\nChoose a star in s.\nRemove the closest non-star character to its left, as well as remove the star itself.\n\nReturn the string after all stars have been removed.\nNote:\n\nThe input will be generated such that the operation is always possible.\nIt can be shown that the resulting string will always be unique.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeStars(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeStars(self, s: str) -> str:\n        ans = []\n        for c in s:\n            if c == '*':\n                ans.pop()\n            else:\n                ans.append(c)\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leet**cod*e\") == \"lecoe\"\n    assert candidate(s = \"erase*****\") == \"\"\n\n\ncheck(Solution().removeStars)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute.\nYou are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1.\nThere are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.\nOnly one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.\nReturn the minimum number of minutes needed to pick up all the garbage.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:\n        last = {}\n        ans = 0\n        for i, s in enumerate(garbage):\n            ans += len(s)\n            for c in s:\n                last[c] = i\n        ts = 0\n        for i, t in enumerate(travel, 1):\n            ts += t\n            ans += sum(ts for j in last.values() if i == j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3]) == 21\n    assert candidate(garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10]) == 37\n\n\ncheck(Solution().garbageCollection)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].\nReturn the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        ans = -1\n        for v in nums:\n            x, y = 0, v\n            while y:\n                x += y % 10\n                y //= 10\n            if x in d:\n                ans = max(ans, d[x] + v)\n            d[x] = max(d[x], v)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [18,43,36,13,7]) == 54\n    assert candidate(nums = [10,12,19,14]) == -1\n\n\ncheck(Solution().maximumSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums.\nSwaps of adjacent elements are able to be performed on nums.\nA valid array meets the following conditions:\n\nThe largest element (any of the largest elements if there are multiple) is at the rightmost position in the array.\nThe smallest element (any of the smallest elements if there are multiple) is at the leftmost position in the array.\n\nReturn the minimum swaps required to make nums a valid array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        i = j = 0\n        for k, v in enumerate(nums):\n            if v < nums[i] or (v == nums[i] and k < i):\n                i = k\n            if v >= nums[j] or (v == nums[j] and k > j):\n                j = k\n        return 0 if i == j else i + len(nums) - 1 - j - (i > j)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,5,5,3,1]) == 6\n    assert candidate(nums = [9]) == 0\n\n\ncheck(Solution().minimumSwaps)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string num consisting of digits only.\nReturn the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. It should not contain leading zeroes.\nNotes:\n\nYou do not need to use all the digits of num, but you must use at least one digit.\nThe digits can be reordered.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestPalindromic(self, num: str) -> str:\n```",
        "solutions": "class Solution:\n    def largestPalindromic(self, num: str) -> str:\n        cnt = Counter(num)\n        ans = ''\n        for i in range(9, -1, -1):\n            v = str(i)\n            if cnt[v] % 2:\n                ans = v\n                cnt[v] -= 1\n                break\n        for i in range(10):\n            v = str(i)\n            if cnt[v]:\n                cnt[v] //= 2\n                s = cnt[v] * v\n                ans = s + ans + s\n        return ans.strip('0') or '0'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"444947137\") == \"7449447\"\n    assert candidate(num = \"00009\") == \"9\"\n\n\ncheck(Solution().largestPalindromic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s consisting of only lowercase English letters, where each letter in s appears exactly twice. You are also given a 0-indexed integer array distance of length 26.\nEach letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25).\nIn a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. If the ith letter does not appear in s, then distance[i] can be ignored.\nReturn true if s is a well-spaced string, otherwise return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkDistances(self, s: str, distance: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def checkDistances(self, s: str, distance: List[int]) -> bool:\n        d = defaultdict(int)\n        for i, c in enumerate(s, 1):\n            if d[c] and i - d[c] - 1 != distance[ord(c) - ord('a')]:\n                return False\n            d[c] = i\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abaccb\", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == True\n    assert candidate(s = \"aa\", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == False\n\n\ncheck(Solution().checkDistances)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nWe call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.\nReturn the length of the longest nice subarray.\nA subarray is a contiguous part of an array.\nNote that subarrays of length 1 are always considered nice.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestNiceSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestNiceSubarray(self, nums: List[int]) -> int:\n        ans = j = mask = 0\n        for i, x in enumerate(nums):\n            while mask & x:\n                mask ^= nums[j]\n                j += 1\n            ans = max(ans, i - j + 1)\n            mask |= x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,8,48,10]) == 3\n    assert candidate(nums = [3,1,5,11,13]) == 1\n\n\ncheck(Solution().longestNiceSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. There are n rooms numbered from 0 to n - 1.\nYou are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). All the values of starti are unique.\nMeetings are allocated to rooms in the following manner:\n\nEach meeting will take place in the unused room with the lowest number.\nIf there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the same duration as the original meeting.\nWhen a room becomes unused, meetings that have an earlier original start time should be given the room.\n\nReturn the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.\nA half-closed interval [a, b) is the interval between a and b including a and not including b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n        meetings.sort()\n        busy = []\n        idle = list(range(n))\n        heapify(idle)\n        cnt = [0] * n\n        for s, e in meetings:\n            while busy and busy[0][0] <= s:\n                heappush(idle, heappop(busy)[1])\n            if idle:\n                i = heappop(idle)\n                cnt[i] += 1\n                heappush(busy, (e, i))\n            else:\n                a, i = heappop(busy)\n                cnt[i] += 1\n                heappush(busy, (a + e - s, i))\n        ans = 0\n        for i, v in enumerate(cnt):\n            if cnt[ans] < v:\n                ans = i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]) == 0\n    assert candidate(n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]) == 1\n\n\ncheck(Solution().mostBooked)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic.\nGiven an integer n, return true if n is strictly palindromic and false otherwise.\nA string is palindromic if it reads the same forward and backward.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isStrictlyPalindromic(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isStrictlyPalindromic(self, n: int) -> bool:\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 9) == False\n    assert candidate(n = 4) == False\n\n\ncheck(Solution().isStrictlyPalindromic)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.\nYou are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.\nEach day, until all tasks have been completed, you must either:\n\nComplete the next task from tasks, or\nTake a break.\n\nReturn the minimum number of days needed to complete all tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def taskSchedulerII(self, tasks: List[int], space: int) -> int:\n```",
        "solutions": "class Solution:\n    def taskSchedulerII(self, tasks: List[int], space: int) -> int:\n        day = defaultdict(int)\n        ans = 0\n        for task in tasks:\n            ans += 1\n            ans = max(ans, day[task])\n            day[task] = ans + space + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [1,2,1,2,3,1], space = 3) == 9\n    assert candidate(tasks = [5,8,8,5], space = 2) == 6\n\n\ncheck(Solution().taskSchedulerII)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array peaks where peaks[i] = [xi, yi] states that mountain i has a peak at coordinates (xi, yi). A mountain can be described as a right-angled isosceles triangle, with its base along the x-axis and a right angle at its peak. More formally, the gradients of ascending and descending the mountain are 1 and -1 respectively.\nA mountain is considered visible if its peak does not lie within another mountain (including the border of other mountains).\nReturn the number of visible mountains.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def visibleMountains(self, peaks: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def visibleMountains(self, peaks: List[List[int]]) -> int:\n        arr = [(x - y, x + y) for x, y in peaks]\n        cnt = Counter(arr)\n        arr.sort(key=lambda x: (x[0], -x[1]))\n        ans, cur = 0, -inf\n        for l, r in arr:\n            if r <= cur:\n                continue\n            cur = r\n            if cnt[(l, r)] == 1:\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(peaks = [[2,2],[6,3],[5,4]]) == 2\n    assert candidate(peaks = [[1,3],[1,3]]) == 0\n\n\ncheck(Solution().visibleMountains)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostFrequentEven(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def mostFrequentEven(self, nums: List[int]) -> int:\n        cnt = Counter(x for x in nums if x % 2 == 0)\n        ans, mx = -1, 0\n        for x, v in cnt.items():\n            if v > mx or (v == mx and ans > x):\n                ans, mx = x, v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,2,2,4,4,1]) == 2\n    assert candidate(nums = [4,4,4,9,2,4]) == 4\n    assert candidate(nums = [29,47,21,41,13,37,25,7]) == -1\n\n\ncheck(Solution().mostFrequentEven)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def partitionString(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def partitionString(self, s: str) -> int:\n        ss = set()\n        ans = 1\n        for c in s:\n            if c in ss:\n                ans += 1\n                ss = set()\n            ss.add(c)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abacaba\") == 4\n    assert candidate(s = \"ssssss\") == 6\n\n\ncheck(Solution().partitionString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].\nYou have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.\nReturn the minimum number of groups you need to make.\nTwo intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        q = []\n        for left, right in sorted(intervals):\n            if q and q[0] < left:\n                heappop(q)\n            heappush(q, right)\n        return len(q)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]) == 3\n    assert candidate(intervals = [[1,3],[5,6],[8,10],[11,13]]) == 1\n\n\ncheck(Solution().minGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of size n containing each element from 0 to n - 1 (inclusive). Each of the elements from 1 to n - 1 represents an item, and the element 0 represents an empty space.\nIn one operation, you can move any item to the empty space. nums is considered to be sorted if the numbers of all the items are in ascending order and the empty space is either at the beginning or at the end of the array.\nFor example, if n = 4, nums is sorted if:\n\nnums = [0,1,2,3] or\nnums = [1,2,3,0]\n\n...and considered to be unsorted otherwise.\nReturn the minimum number of operations needed to sort nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortArray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sortArray(self, nums: List[int]) -> int:\n        def f(nums, k):\n            vis = [False] * n\n            cnt = 0\n            for i, v in enumerate(nums):\n                if i == v or vis[i]:\n                    continue\n                cnt += 1\n                j = i\n                while not vis[j]:\n                    vis[j] = True\n                    cnt += 1\n                    j = nums[j]\n            return cnt - 2 * (nums[k] != k)\n\n        n = len(nums)\n        a = f(nums, 0)\n        b = f([(v - 1 + n) % n for v in nums], n - 1)\n        return min(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,0,3,1]) == 3\n    assert candidate(nums = [1,2,3,4,0]) == 0\n    assert candidate(nums = [1,0,2,4,3]) == 2\n\n\ncheck(Solution().sortArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array books of length n where books[i] denotes the number of books on the ith shelf of a bookshelf.\nYou are going to take books from a contiguous section of the bookshelf spanning from l to r where 0 <= l <= r < n. For each index i in the range l <= i < r, you must take strictly fewer books from shelf i than shelf i + 1.\nReturn the maximum number of books you can take from the bookshelf.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n        nums = [v - i for i, v in enumerate(books)]\n        n = len(nums)\n        left = [-1] * n\n        stk = []\n        for i, v in enumerate(nums):\n            while stk and nums[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        ans = 0\n        dp = [0] * n\n        dp[0] = books[0]\n        for i, v in enumerate(books):\n            j = left[i]\n            cnt = min(v, i - j)\n            u = v - cnt + 1\n            s = (u + v) * cnt // 2\n            dp[i] = s + (0 if j == -1 else dp[j])\n            ans = max(ans, dp[i])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(books = [8,5,2,7,9]) == 19\n    assert candidate(books = [7,0,3,4,5]) == 12\n    assert candidate(books = [8,2,3,7,3,4,0,1,4,3]) == 13\n\n\ncheck(Solution().maximumBooks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestEvenMultiple(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestEvenMultiple(self, n: int) -> int:\n        return n if n % 2 == 0 else n * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 10\n    assert candidate(n = 6) == 6\n\n\ncheck(Solution().smallestEvenMultiple)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string \"abcdefghijklmnopqrstuvwxyz\".\n\nFor example, \"abc\" is an alphabetical continuous string, while \"acb\" and \"za\" are not.\n\nGiven a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestContinuousSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestContinuousSubstring(self, s: str) -> int:\n        ans = 0\n        i, j = 0, 1\n        while j < len(s):\n            ans = max(ans, j - i)\n            if ord(s[j]) - ord(s[j - 1]) != 1:\n                i = j\n            j += 1\n        ans = max(ans, j - i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abacaba\") == 2\n    assert candidate(s = \"abcde\") == 5\n\n\ncheck(Solution().longestContinuousSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a perfect binary tree, reverse the node values at each odd level of the tree.\n\nFor example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].\n\nReturn the root of the reversed tree.\nA binary tree is perfect if all parent nodes have two children and all leaves are on the same level.\nThe level of a node is the number of edges along the path between it and the root node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        q = deque([root])\n        i = 0\n        while q:\n            if i & 1:\n                l, r = 0, len(q) - 1\n                while l < r:\n                    q[l].val, q[r].val = q[r].val, q[l].val\n                    l, r = l + 1, r - 1\n            for _ in range(len(q)):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                    q.append(node.right)\n            i += 1\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([2,3,5,8,13,21,34])), tree_node([2,5,3,8,13,21,34]))\n    assert is_same_tree(candidate(root = tree_node([7,13,11])), tree_node([7,11,13]))\n    assert is_same_tree(candidate(root = tree_node([0,1,2,0,0,0,0,1,1,1,1,2,2,2,2])), tree_node([0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]))\n\n\ncheck(Solution().reverseOddLevels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array words of size n consisting of non-empty strings.\nWe define the score of a string term as the number of strings words[i] such that term is a prefix of words[i].\n\nFor example, if words = [\"a\", \"ab\", \"abc\", \"cab\"], then the score of \"ab\" is 2, since \"ab\" is a prefix of both \"ab\" and \"abc\".\n\nReturn an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i].\nNote that a string is considered as a prefix of itself.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumPrefixScores(self, words: List[str]) -> List[int]:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.cnt = 0\n\n    def insert(self, w):\n        node = self\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w):\n        node = self\n        ans = 0\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return ans\n            node = node.children[idx]\n            ans += node.cnt\n        return ans\n\n\nclass Solution:\n    def sumPrefixScores(self, words: List[str]) -> List[int]:\n        trie = Trie()\n        for w in words:\n            trie.insert(w)\n        return [trie.search(w) for w in words]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"abc\",\"ab\",\"bc\",\"b\"]) == [5,4,3,2]\n    assert candidate(words = [\"abcd\"]) == [4]\n\n\ncheck(Solution().sumPrefixScores)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice and Bob are traveling to Rome for separate business meetings.\nYou are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob (inclusive). Each will be a 5-character string in the format \"MM-DD\", corresponding to the month and day of the date.\nReturn the total number of days that Alice and Bob are in Rome together.\nYou can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDaysTogether(self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str) -> int:\n```",
        "solutions": "class Solution:\n    def countDaysTogether(\n        self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str\n    ) -> int:\n        a = max(arriveAlice, arriveBob)\n        b = min(leaveAlice, leaveBob)\n        days = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        x = sum(days[: int(a[:2]) - 1]) + int(a[3:])\n        y = sum(days[: int(b[:2]) - 1]) + int(b[3:])\n        return max(y - x + 1, 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\") == 3\n    assert candidate(arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\") == 0\n\n\ncheck(Solution().countDaysTogether)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. You are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer.\nThe ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. Additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player.\nReturn the maximum number of matchings between players and trainers that satisfy these conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:\n        players.sort()\n        trainers.sort()\n        ans = j = 0\n        for p in players:\n            while j < len(trainers) and trainers[j] < p:\n                j += 1\n            if j < len(trainers):\n                ans += 1\n                j += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(players = [4,7,9], trainers = [8,2,5,8]) == 2\n    assert candidate(players = [1,1,1], trainers = [10]) == 1\n\n\ncheck(Solution().matchPlayersAndTrainers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.\n\nIn other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1.\n\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\nReturn an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [1] * n\n        f = [-1] * 32\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[j] = i\n                elif f[j] != -1:\n                    t = max(t, f[j] - i + 1)\n            ans[i] = t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,0,2,1,3]) == [3,3,2,2,1]\n    assert candidate(nums = [1,2]) == [2,1]\n\n\ncheck(Solution().smallestSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].\nThe array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of money. In order to complete transaction i, money >= costi must hold true. After performing a transaction, money becomes money - costi + cashbacki.\nReturn the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumMoney(self, transactions: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumMoney(self, transactions: List[List[int]]) -> int:\n        s = sum(max(0, a - b) for a, b in transactions)\n        ans = 0\n        for a, b in transactions:\n            if a > b:\n                ans = max(ans, s + b)\n            else:\n                ans = max(ans, s + a)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(transactions = [[2,1],[5,0],[4,2]]) == 10\n    assert candidate(transactions = [[3,0],[0,3]]) == 3\n\n\ncheck(Solution().minimumMoney)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA train line going through a city has two routes, the regular route and the express route. Both routes go through the same n + 1 stops labeled from 0 to n. Initially, you start on the regular route at stop 0.\nYou are given two 1-indexed integer arrays regular and express, both of length n. regular[i] describes the cost it takes to go from stop i - 1 to stop i using the regular route, and express[i] describes the cost it takes to go from stop i - 1 to stop i using the express route.\nYou are also given an integer expressCost which represents the cost to transfer from the regular route to the express route.\nNote that:\n\nThere is no cost to transfer from the express route back to the regular route.\nYou pay expressCost every time you transfer from the regular route to the express route.\nThere is no extra cost to stay on the express route.\n\nReturn a 1-indexed array costs of length n, where costs[i] is the minimum cost to reach stop i from stop 0.\nNote that a stop can be counted as reached from either route.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCosts(self, regular: List[int], express: List[int], expressCost: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minimumCosts(\n        self, regular: List[int], express: List[int], expressCost: int\n    ) -> List[int]:\n        n = len(regular)\n        f = [0] * (n + 1)\n        g = [inf] * (n + 1)\n        cost = [0] * n\n        for i, (a, b) in enumerate(zip(regular, express), 1):\n            f[i] = min(f[i - 1] + a, g[i - 1] + a)\n            g[i] = min(f[i - 1] + expressCost + b, g[i - 1] + b)\n            cost[i - 1] = min(f[i], g[i])\n        return cost\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(regular = [1,6,9,5], express = [5,2,3,10], expressCost = 8) == [1,7,14,19]\n    assert candidate(regular = [11,5,13], express = [7,10,6], expressCost = 3) == [10,15,24]\n\n\ncheck(Solution().minimumCosts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.\nFor each index i, names[i] and heights[i] denote the name and height of the ith person.\nReturn names sorted in descending order by the people's heights.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        idx = list(range(len(heights)))\n        idx.sort(key=lambda i: -heights[i])\n        return [names[i] for i in idx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]) == [\"Mary\",\"Emma\",\"John\"]\n    assert candidate(names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]) == [\"Bob\",\"Alice\",\"Bob\"]\n\n\ncheck(Solution().sortPeople)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums of size n.\nConsider a non-empty subarray from nums that has the maximum possible bitwise AND.\n\nIn other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.\n\nReturn the length of the longest such subarray.\nThe bitwise AND of an array is the bitwise AND of all the numbers in it.\nA subarray is a contiguous sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        mx = max(nums)\n        ans = cnt = 0\n        for v in nums:\n            if v == mx:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,3,2,2]) == 2\n    assert candidate(nums = [1,2,3,4]) == 1\n\n\ncheck(Solution().longestSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of size n and a positive integer k.\nWe call an index i in the range k <= i < n - k good if the following conditions are satisfied:\n\nThe k elements that are just before the index i are in non-increasing order.\nThe k elements that are just after the index i are in non-decreasing order.\n\nReturn an array of all good indices sorted in increasing order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def goodIndices(self, nums: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def goodIndices(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        decr = [1] * (n + 1)\n        incr = [1] * (n + 1)\n        for i in range(2, n - 1):\n            if nums[i - 1] <= nums[i - 2]:\n                decr[i] = decr[i - 1] + 1\n        for i in range(n - 3, -1, -1):\n            if nums[i + 1] <= nums[i + 2]:\n                incr[i] = incr[i + 1] + 1\n        return [i for i in range(k, n - k) if decr[i] >= k and incr[i] >= k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,1,1,3,4,1], k = 2) == [2,3]\n    assert candidate(nums = [2,1,1,2], k = 2) == []\n\n\ncheck(Solution().goodIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.\nYou are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA good path is a simple path that satisfies the following conditions:\n\nThe starting node and the ending node have the same value.\nAll nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).\n\nReturn the number of distinct good paths.\nNote that a path and its reverse are counted as the same path. For example, 0 -> 1 is considered to be the same as 1 -> 0. A single node is also considered as a valid path.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n\n        n = len(vals)\n        p = list(range(n))\n        size = defaultdict(Counter)\n        for i, v in enumerate(vals):\n            size[i][v] = 1\n\n        ans = n\n        for v, a in sorted(zip(vals, range(n))):\n            for b in g[a]:\n                if vals[b] > v:\n                    continue\n                pa, pb = find(a), find(b)\n                if pa != pb:\n                    ans += size[pa][v] * size[pb][v]\n                    p[pa] = pb\n                    size[pb][v] += size[pa][v]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]) == 6\n    assert candidate(vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]) == 7\n    assert candidate(vals = [1], edges = []) == 1\n\n\ncheck(Solution().numberOfGoodPaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid containing distinct positive integers.\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\nThe relative order of every two elements that are in the same row or column should stay the same after the replacements.\nThe maximum number in the matrix after the replacements should be as small as possible.\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that grid[r1][c1] > grid[r2][c2] where either r1 == r2 or c1 == c2, then it must be true that grid[r1][c1] > grid[r2][c2] after the replacements.\nFor example, if grid = [[2, 4, 5], [7, 3, 9]] then a good replacement could be either grid = [[1, 2, 3], [2, 1, 4]] or grid = [[1, 2, 3], [3, 1, 4]].\nReturn the resulting matrix. If there are multiple answers, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        row_max = [0] * m\n        col_max = [0] * n\n        ans = [[0] * n for _ in range(m)]\n        for _, i, j in nums:\n            ans[i][j] = max(row_max[i], col_max[j]) + 1\n            row_max[i] = col_max[j] = ans[i][j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[3,1],[2,5]]) == [[2,1],[1,2]]\n    assert candidate(grid = [[10]]) == [[1]]\n\n\ncheck(Solution().minScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two positive integers a and b, return the number of common factors of a and b.\nAn integer x is a common factor of a and b if x divides both a and b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def commonFactors(self, a: int, b: int) -> int:\n```",
        "solutions": "class Solution:\n    def commonFactors(self, a: int, b: int) -> int:\n        g = gcd(a, b)\n        return sum(g % x == 0 for x in range(1, g + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 12, b = 6) == 4\n    assert candidate(a = 25, b = 30) == 2\n\n\ncheck(Solution().commonFactors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid.\nWe define an hourglass as a part of the matrix with the following form:\n\nReturn the maximum sum of the elements of an hourglass.\nNote that an hourglass cannot be rotated and must be entirely contained within the matrix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        ans = 0\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                s = -grid[i][j - 1] - grid[i][j + 1]\n                s += sum(\n                    grid[x][y] for x in range(i - 1, i + 2) for y in range(j - 1, j + 2)\n                )\n                ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]) == 30\n    assert candidate(grid = [[1,2,3],[4,5,6],[7,8,9]]) == 35\n\n\ncheck(Solution().maxSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:\n\n0 <= i < j <= n - 1 and\nnums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff.\n\nReturn the number of pairs that satisfy the conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n        tree = BinaryIndexedTree(10**5)\n        ans = 0\n        for a, b in zip(nums1, nums2):\n            v = a - b\n            ans += tree.query(v + diff + 40000)\n            tree.update(v + 40000, 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [3,2,5], nums2 = [2,2,1], diff = 1) == 3\n    assert candidate(nums1 = [3,-1], nums2 = [-2,2], diff = -1) == 0\n\n\ncheck(Solution().numberOfPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a weighted tree consisting of n nodes numbered from 0 to n - 1.\nThe tree is rooted at node 0 and represented with a 2D array edges of size n where edges[i] = [pari, weighti] indicates that node pari is the parent of node i, and the edge between them has a weight equal to weighti. Since the root does not have a parent, you have edges[0] = [-1, -1].\nChoose some edges from the tree such that no two chosen edges are adjacent and the sum of the weights of the chosen edges is maximized.\nReturn the maximum sum of the chosen edges.\nNote:\n\nYou are allowed to not choose any edges in the tree, the sum of weights in this case will be 0.\nTwo edges Edge1 and Edge2 in the tree are adjacent if they have a common node.\n\t\nIn other words, they are adjacent if Edge1 connects nodes a and b and Edge2 connects nodes b and c.\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n        def dfs(i):\n            a = b = t = 0\n            for j, w in g[i]:\n                x, y = dfs(j)\n                a += y\n                b += y\n                t = max(t, x - y + w)\n            b += t\n            return a, b\n\n        g = defaultdict(list)\n        for i, (p, w) in enumerate(edges[1:], 1):\n            g[p].append((i, w))\n        return dfs(0)[1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[-1,-1],[0,5],[0,10],[2,6],[2,4]]) == 11\n    assert candidate(edges = [[-1,-1],[0,5],[0,-6],[0,7]]) == 7\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n employees, each with a unique id from 0 to n - 1.\nYou are given a 2D integer array logs where logs[i] = [idi, leaveTimei] where:\n\nidi is the id of the employee that worked on the ith task, and\nleaveTimei is the time at which the employee finished the ith task. All the values leaveTimei are unique.\n\nNote that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0.\nReturn the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:\n        last = mx = ans = 0\n        for uid, t in logs:\n            t -= last\n            if mx < t or (mx == t and ans > uid):\n                ans, mx = uid, t\n            last += t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]) == 1\n    assert candidate(n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]) == 3\n    assert candidate(n = 2, logs = [[0,10],[1,20]]) == 0\n\n\ncheck(Solution().hardestWorker)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array pref of size n. Find and return the array arr of size n that satisfies:\n\npref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i].\n\nNote that ^ denotes the bitwise-xor operation.\nIt can be proven that the answer is unique.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findArray(self, pref: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findArray(self, pref: List[int]) -> List[int]:\n        return [a ^ b for a, b in pairwise([0] + pref)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(pref = [5,2,0,3,1]) == [5,7,2,3,2]\n    assert candidate(pref = [13]) == [13]\n\n\ncheck(Solution().findArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:\n\nRemove the first character of a string s and give it to the robot. The robot will append this character to the string t.\nRemove the last character of a string t and give it to the robot. The robot will write this character on paper.\n\nReturn the lexicographically smallest string that can be written on the paper.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def robotWithString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def robotWithString(self, s: str) -> str:\n        cnt = Counter(s)\n        ans = []\n        stk = []\n        mi = 'a'\n        for c in s:\n            cnt[c] -= 1\n            while mi < 'z' and cnt[mi] == 0:\n                mi = chr(ord(mi) + 1)\n            stk.append(c)\n            while stk and stk[-1] <= mi:\n                ans.append(stk.pop())\n        return ''.join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"zza\") == \"azz\"\n    assert candidate(s = \"bac\") == \"abc\"\n    assert candidate(s = \"bdda\") == \"addb\"\n\n\ncheck(Solution().robotWithString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.\nReturn the positive integer k. If there is no such integer, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n        s = set(nums)\n        return max((x for x in s if -x in s), default=-1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,2,-3,3]) == 3\n    assert candidate(nums = [-1,10,6,7,-7,1]) == 7\n    assert candidate(nums = [-10,8,6,7,-2,-3]) == -1\n\n\ncheck(Solution().findMaxK)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nYou have to take each integer in the array, reverse its digits, and add it to the end of the array. You should apply this operation to the original integers in nums.\nReturn the number of distinct integers in the final array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDistinctIntegers(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countDistinctIntegers(self, nums: List[int]) -> int:\n        s = set(nums)\n        for x in nums:\n            y = int(str(x)[::-1])\n            s.add(y)\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,13,10,12,31]) == 6\n    assert candidate(nums = [2,2,2]) == 1\n\n\ncheck(Solution().countDistinctIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k.\nFind the longest subsequence of nums that meets the following requirements:\n\nThe subsequence is strictly increasing and\nThe difference between adjacent elements in the subsequence is at most k.\n\nReturn the length of the longest subsequence that meets the requirements.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,2,1,4,3,4,5,8,15], k = 3) == 5\n    assert candidate(nums = [7,4,5,1,8,12,4,7], k = 5) == 4\n    assert candidate(nums = [1,5], k = 1) == 1\n\n\ncheck(Solution().lengthOfLIS)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and two integers minK and maxK.\nA fixed-bound subarray of nums is a subarray that satisfies the following conditions:\n\nThe minimum value in the subarray is equal to minK.\nThe maximum value in the subarray is equal to maxK.\n\nReturn the number of fixed-bound subarrays.\nA subarray is a contiguous part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n```",
        "solutions": "class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        j1 = j2 = k = -1\n        ans = 0\n        for i, v in enumerate(nums):\n            if v < minK or v > maxK:\n                k = i\n            if v == minK:\n                j1 = i\n            if v == maxK:\n                j2 = i\n            ans += max(0, min(j1, j2) - k)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,2,7,5], minK = 1, maxK = 5) == 2\n    assert candidate(nums = [1,1,1,1], minK = 1, maxK = 1) == 10\n\n\ncheck(Solution().countSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string of length 5 called time, representing the current time on a digital clock in the format \"hh:mm\". The earliest possible time is \"00:00\" and the latest possible time is \"23:59\".\nIn the string time, the digits represented by the ?\u00a0symbol are unknown, and must be replaced with a digit from 0 to 9.\nReturn an integer answer, the number of valid clock times that can be created by replacing every ?\u00a0with a digit from 0 to 9.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTime(self, time: str) -> int:\n```",
        "solutions": "class Solution:\n    def countTime(self, time: str) -> int:\n        def check(s: str, t: str) -> bool:\n            return all(a == b or b == '?' for a, b in zip(s, t))\n\n        return sum(\n            check(f'{h:02d}:{m:02d}', time) for h in range(24) for m in range(60)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(time = \"?5:00\") == 2\n    assert candidate(time = \"0?:0?\") == 100\n    assert candidate(time = \"??:??\") == 1440\n\n\ncheck(Solution().countTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.\nYou are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.\nReturn an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        powers = []\n        while n:\n            x = n & -n\n            powers.append(x)\n            n -= x\n        mod = 10**9 + 7\n        ans = []\n        for l, r in queries:\n            x = 1\n            for y in powers[l : r + 1]:\n                x = (x * y) % mod\n            ans.append(x)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 15, queries = [[0,1],[2,2],[0,3]]) == [2,4,64]\n    assert candidate(n = 2, queries = [[0,0]]) == [2]\n\n\ncheck(Solution().productQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums comprising of n non-negative integers.\nIn one operation, you must:\n\nChoose an integer i such that 1 <= i < n and nums[i] > 0.\nDecrease nums[i] by 1.\nIncrease nums[i - 1] by 1.\n\nReturn the minimum possible value of the maximum integer of nums after performing any number of operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimizeArrayValue(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimizeArrayValue(self, nums: List[int]) -> int:\n        def check(mx):\n            d = 0\n            for x in nums[:0:-1]:\n                d = max(0, d + x - mx)\n            return nums[0] + d <= mx\n\n        left, right = 0, max(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,7,1,6]) == 5\n    assert candidate(nums = [10,1]) == 10\n\n\ncheck(Solution().minimizeArrayValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected tree with n nodes labeled from 0 to n - 1.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.\nReturn the maximum number of edges you can delete, such that every connected component in the tree has the same value.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:\n        def dfs(i, fa):\n            x = nums[i]\n            for j in g[i]:\n                if j != fa:\n                    y = dfs(j, i)\n                    if y == -1:\n                        return -1\n                    x += y\n            if x > t:\n                return -1\n            return x if x < t else 0\n\n        n = len(nums)\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        s = sum(nums)\n        mx = max(nums)\n        for k in range(min(n, s // mx), 1, -1):\n            if s % k == 0:\n                t = s // k\n                if dfs(0, -1) == 0:\n                    return k - 1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] ) == 2 \n    assert candidate(nums = [2], edges = []) == 0\n\n\ncheck(Solution().componentValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.\nReturn true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.\nNote:\n\nThe frequency of a letter x is the number of times it occurs in the string.\nYou must remove exactly one letter and cannot choose to do nothing.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def equalFrequency(self, word: str) -> bool:\n```",
        "solutions": "class Solution:\n    def equalFrequency(self, word: str) -> bool:\n        cnt = Counter(word)\n        for c in cnt.keys():\n            cnt[c] -= 1\n            if len(set(v for v in cnt.values() if v)) == 1:\n                return True\n            cnt[c] += 1\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"abcc\") == True\n    assert candidate(word = \"aazz\") == False\n\n\ncheck(Solution().equalFrequency)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).\nReturn the bitwise XOR of all integers in nums3.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = 0\n        if len(nums2) & 1:\n            for v in nums1:\n                ans ^= v\n        if len(nums1) & 1:\n            for v in nums2:\n                ans ^= v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,1,3], nums2 = [10,2,5,0]) == 13\n    assert candidate(nums1 = [1,2], nums2 = [3,4]) == 0\n\n\ncheck(Solution().xorAllNums)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:\n\nevent1 = [startTime1, endTime1] and\nevent2 = [startTime2, endTime2].\n\nEvent times are valid 24 hours format in the form of HH:MM.\nA conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).\nReturn true if there is a conflict between two events. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:\n```",
        "solutions": "class Solution:\n    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:\n        return not (event1[0] > event2[1] or event1[1] < event2[0])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]) == True\n    assert candidate(event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]) == True\n    assert candidate(event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]) == False\n\n\ncheck(Solution().haveConflict)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed arrays nums and cost consisting each of n positive integers.\nYou can do the following operation any number of times:\n\nIncrease or decrease any element of the array nums by 1.\n\nThe cost of doing one operation on the ith element is cost[i].\nReturn the minimum total cost such that all the elements of the array nums become equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n        arr = sorted(zip(nums, cost))\n        n = len(arr)\n        f = [0] * (n + 1)\n        g = [0] * (n + 1)\n        for i in range(1, n + 1):\n            a, b = arr[i - 1]\n            f[i] = f[i - 1] + a * b\n            g[i] = g[i - 1] + b\n        ans = inf\n        for i in range(1, n + 1):\n            a = arr[i - 1][0]\n            l = a * g[i - 1] - f[i - 1]\n            r = f[n] - f[i] - a * (g[n] - g[i])\n            ans = min(ans, l + r)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,2], cost = [2,3,1,14]) == 8\n    assert candidate(nums = [2,2,2,2,2], cost = [4,2,8,1,3]) == 0\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integer arrays nums and target, of the same length.\nIn one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:\n\nset nums[i] = nums[i] + 2 and\nset nums[j] = nums[j] - 2.\n\nTwo arrays are considered to be similar if the frequency of each element is the same.\nReturn the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums.sort(key=lambda x: (x & 1, x))\n        target.sort(key=lambda x: (x & 1, x))\n        return sum(abs(a - b) for a, b in zip(nums, target)) // 4\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [8,12,6], target = [2,14,10]) == 2\n    assert candidate(nums = [1,2,5], target = [4,1,3]) == 1\n    assert candidate(nums = [1,1,1,1,1], target = [1,1,1,1,1]) == 0\n\n\ncheck(Solution().makeSimilar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfNumberAndReverse(self, num: int) -> bool:\n```",
        "solutions": "class Solution:\n    def sumOfNumberAndReverse(self, num: int) -> bool:\n        return any(k + int(str(k)[::-1]) == num for k in range(num + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 443) == True\n    assert candidate(num = 63) == False\n    assert candidate(num = 181) == True\n\n\ncheck(Solution().sumOfNumberAndReverse)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums of positive integers, return the average value of all even integers that are divisible by 3.\nNote that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def averageValue(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def averageValue(self, nums: List[int]) -> int:\n        s = n = 0\n        for x in nums:\n            if x % 6 == 0:\n                s += x\n                n += 1\n        return 0 if n == 0 else s // n\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,6,10,12,15]) == 9\n    assert candidate(nums = [1,2,4,7,10]) == 0\n\n\ncheck(Solution().averageValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creators[i], has an id of ids[i], and has views[i] views.\nThe popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.\n\nIf multiple creators have the highest popularity, find all of them.\nIf multiple videos have the highest view count for a creator, find the lexicographically smallest id.\n\nNote: It is possible for different videos to have the same id, meaning that ids do not uniquely identify a video. For example, two videos with the same ID are considered as distinct videos with their own viewcount.\nReturn a 2D array of strings answer where answer[i] = [creatorsi, idi] means that creatorsi has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def mostPopularCreator(\n        self, creators: List[str], ids: List[str], views: List[int]\n    ) -> List[List[str]]:\n        cnt = defaultdict(int)\n        d = defaultdict(int)\n        for k, (c, i, v) in enumerate(zip(creators, ids, views)):\n            cnt[c] += v\n            if c not in d or views[d[c]] < v or (views[d[c]] == v and ids[d[c]] > i):\n                d[c] = k\n        mx = max(cnt.values())\n        return [[c, ids[d[c]]] for c, x in cnt.items() if x == mx]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]) == [[\"alice\",\"one\"],[\"bob\",\"two\"]]\n    assert candidate(creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]) == [[\"alice\",\"b\"]]\n\n\ncheck(Solution().mostPopularCreator)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integers n and target.\nAn integer is considered beautiful if the sum of its digits is less than or equal to target.\nReturn the minimum non-negative integer x such that n + x is beautiful. The input will be generated such that it is always possible to make n beautiful.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeIntegerBeautiful(self, n: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def makeIntegerBeautiful(self, n: int, target: int) -> int:\n        def f(x: int) -> int:\n            y = 0\n            while x:\n                y += x % 10\n                x //= 10\n            return y\n\n        x = 0\n        while f(n + x) > target:\n            y = n + x\n            p = 10\n            while y % 10 == 0:\n                y //= 10\n                p *= 10\n            x = (y // 10 + 1) * p - n\n        return x\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 16, target = 6) == 4\n    assert candidate(n = 467, target = 6) == 33\n    assert candidate(n = 1, target = 1) == 0\n\n\ncheck(Solution().makeIntegerBeautiful)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.\nYou have to perform m independent queries on the tree where in the ith query you do the following:\n\nRemove the subtree rooted at the node with the value queries[i] from the tree. It is guaranteed that queries[i] will not be equal to the value of the root.\n\nReturn an array answer of size m where answer[i] is the height of the tree after performing the ith query.\nNote:\n\nThe queries are independent, so the tree returns to its initial state after each query.\nThe height of a tree is the number of edges in the longest simple path from the root to some node in the tree.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:\n        def f(root):\n            if root is None:\n                return 0\n            l, r = f(root.left), f(root.right)\n            d[root] = 1 + max(l, r)\n            return d[root]\n\n        def dfs(root, depth, rest):\n            if root is None:\n                return\n            depth += 1\n            res[root.val] = rest\n            dfs(root.left, depth, max(rest, depth + d[root.right]))\n            dfs(root.right, depth, max(rest, depth + d[root.left]))\n\n        d = defaultdict(int)\n        f(root)\n        res = [0] * (len(d) + 1)\n        dfs(root, -1, 0)\n        return [res[v] for v in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,3,4,2,None,6,5,None,None,None,None,None,7]), queries = [4]) == [2]\n    assert candidate(root = tree_node([5,8,9,2,1,3,7,4,6]), queries = [3,2,4,8]) == [3,2,3,2]\n\n\ncheck(Solution().treeQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k.\nA subarray is a contiguous non-empty sequence of elements within an array.\nThe greatest common divisor of an array is the largest integer that evenly divides all the array elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subarrayGCD(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def subarrayGCD(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(len(nums)):\n            g = 0\n            for x in nums[i:]:\n                g = gcd(g, x)\n                ans += g == k\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [9,3,1,2,6,3], k = 3) == 4\n    assert candidate(nums = [4], k = 7) == 0\n\n\ncheck(Solution().subarrayGCD)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of equal-length strings words. Assume that the length of each string is n.\nEach string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. Note that the difference between two letters is the difference between their positions in the alphabet i.e.\u00a0the position of 'a' is 0, 'b' is 1, and 'z' is 25.\n\nFor example, for the string \"acb\", the difference integer array is [2 - 0, 1 - 2] = [2, -1].\n\nAll the strings in words have the same difference integer array, except one. You should find that string.\nReturn the string in words that has different difference integer array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def oddString(self, words: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def oddString(self, words: List[str]) -> str:\n        d = defaultdict(list)\n        for s in words:\n            t = tuple(ord(b) - ord(a) for a, b in pairwise(s))\n            d[t].append(s)\n        return next(ss[0] for ss in d.values() if len(ss) == 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"adc\",\"wzy\",\"abc\"]) == \"abc\"\n    assert candidate(words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"]) == \"bob\"\n\n\ncheck(Solution().oddString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. You are also given an integer space.\nYou have a machine which can destroy targets. Seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. You want to destroy the maximum number of targets in nums.\nReturn the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def destroyTargets(self, nums: List[int], space: int) -> int:\n```",
        "solutions": "class Solution:\n    def destroyTargets(self, nums: List[int], space: int) -> int:\n        cnt = Counter(v % space for v in nums)\n        ans = mx = 0\n        for v in nums:\n            t = cnt[v % space]\n            if t > mx or (t == mx and v < ans):\n                ans = v\n                mx = t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,7,8,1,1,5], space = 2) == 1\n    assert candidate(nums = [1,3,5,2,4,6], space = 2) == 1\n    assert candidate(nums = [6,2,5], space = 100) == 2\n\n\ncheck(Solution().destroyTargets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.\nThe second greater integer of nums[i] is nums[j] such that:\n\nj > i\nnums[j] > nums[i]\nThere exists exactly one index k such that nums[k] > nums[i] and i < k < j.\n\nIf there is no such nums[j], the second greater integer is considered to be -1.\n\nFor example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3,\u00a0and that of 3 and 4 is -1.\n\nReturn an integer array answer, where answer[i] is the second greater integer of nums[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def secondGreaterElement(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def secondGreaterElement(self, nums: List[int]) -> List[int]:\n        arr = [(x, i) for i, x in enumerate(nums)]\n        arr.sort(key=lambda x: -x[0])\n        sl = SortedList()\n        n = len(nums)\n        ans = [-1] * n\n        for _, i in arr:\n            j = sl.bisect_right(i)\n            if j + 1 < len(sl):\n                ans[i] = nums[sl[j + 1]]\n            sl.add(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,0,9,6]) == [9,6,6,-1,-1]\n    assert candidate(nums = [3,3]) == [-1,-1]\n\n\ncheck(Solution().secondGreaterElement)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two string arrays, queries and dictionary. All words in each array comprise of lowercase English letters and have the same length.\nIn one edit you can take a word from queries, and change any letter in it to any other letter. Find all words from queries that, after a maximum of two edits, equal some word from dictionary.\nReturn a list of all words from queries, that match with some word from dictionary after a maximum of two edits. Return the words in the same order they appear in queries.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:\n```",
        "solutions": "class Solution:\n    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:\n        ans = []\n        for s in queries:\n            for t in dictionary:\n                if sum(a != b for a, b in zip(s, t)) < 3:\n                    ans.append(s)\n                    break\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]) == [\"word\",\"note\",\"wood\"]\n    assert candidate(queries = [\"yes\"], dictionary = [\"not\"]) == []\n\n\ncheck(Solution().twoEditWords)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums of size n consisting of non-negative integers.\nYou need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:\n\nIf nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.\n\nAfter performing all the operations, shift all the 0's to the end of the array.\n\nFor example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].\n\nReturn the resulting array.\nNote that the operations are applied sequentially, not all at once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def applyOperations(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def applyOperations(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for i in range(n - 1):\n            if nums[i] == nums[i + 1]:\n                nums[i] <<= 1\n                nums[i + 1] = 0\n        ans = [0] * n\n        i = 0\n        for x in nums:\n            if x:\n                ans[i] = x\n                i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,1,1,0]) == [1,4,2,0,0,0]\n    assert candidate(nums = [0,1]) == [1,0]\n\n\ncheck(Solution().applyOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:\n\nThe length of the subarray is k, and\nAll the elements of the subarray are distinct.\n\nReturn the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums[:k])\n        s = sum(nums[:k])\n        ans = s if len(cnt) == k else 0\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]] == 0:\n                cnt.pop(nums[i - k])\n            s += nums[i] - nums[i - k]\n            if len(cnt) == k:\n                ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,5,4,2,9,9,9], k = 3) == 15\n    assert candidate(nums = [4,4,4], k = 3) == 0\n\n\ncheck(Solution().maximumSubarraySum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker.\nYou are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:\n\nYou will run k sessions and hire exactly one worker in each session.\nIn each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index.\n\t\nFor example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2].\nIn the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process.\n\n\nIf there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\nA worker can only be chosen once.\n\nReturn the total cost to hire exactly k workers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n```",
        "solutions": "class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        n = len(costs)\n        if candidates * 2 >= n:\n            return sum(sorted(costs)[:k])\n        pq = []\n        for i, c in enumerate(costs[:candidates]):\n            heappush(pq, (c, i))\n        for i in range(n - candidates, n):\n            heappush(pq, (costs[i], i))\n        heapify(pq)\n        l, r = candidates, n - candidates - 1\n        ans = 0\n        for _ in range(k):\n            c, i = heappop(pq)\n            ans += c\n            if l > r:\n                continue\n            if i < l:\n                heappush(pq, (costs[l], l))\n                l += 1\n            else:\n                heappush(pq, (costs[r], r))\n                r -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4) == 11\n    assert candidate(costs = [1,2,4,1], k = 3, candidates = 3) == 4\n\n\ncheck(Solution().totalCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\n\nKelvin = Celsius + 273.15\nFahrenheit = Celsius * 1.80 + 32.00\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def convertTemperature(self, celsius: float) -> List[float]:\n```",
        "solutions": "class Solution:\n    def convertTemperature(self, celsius: float) -> List[float]:\n        return [celsius + 273.15, celsius * 1.8 + 32]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(celsius = 36.50) == [309.65000,97.70000]\n    assert candidate(celsius = 122.11) == [395.26000,251.79800]\n\n\ncheck(Solution().convertTemperature)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree with unique values.\nIn one operation, you can choose any two nodes at the same level and swap their values.\nReturn the minimum number of operations needed to make the values at each level sorted in a strictly increasing order.\nThe level of a node is the number of edges along the path between it and the root node.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minimumOperations(self, root: Optional[TreeNode]) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minimumOperations(self, root: Optional[TreeNode]) -> int:\n        def swap(arr, i, j):\n            arr[i], arr[j] = arr[j], arr[i]\n\n        def f(t):\n            n = len(t)\n            m = {v: i for i, v in enumerate(sorted(t))}\n            for i in range(n):\n                t[i] = m[t[i]]\n            ans = 0\n            for i in range(n):\n                while t[i] != i:\n                    swap(t, i, t[i])\n                    ans += 1\n            return ans\n\n        q = deque([root])\n        ans = 0\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans += f(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([1,4,3,7,6,8,5,None,None,None,None,9,None,10])) == 3\n    assert candidate(root = tree_node([1,3,2,7,6,5,4])) == 3\n    assert candidate(root = tree_node([1,2,3,4,5,6])) == 0\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n.\nWe call an integer k fair if the number of even digits in k is equal to the number of odd digits in it.\nReturn the smallest fair integer that is greater than or equal to n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closestFair(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def closestFair(self, n: int) -> int:\n        a = b = k = 0\n        t = n\n        while t:\n            if (t % 10) & 1:\n                a += 1\n            else:\n                b += 1\n            t //= 10\n            k += 1\n        if k & 1:\n            x = 10**k\n            y = int('1' * (k >> 1) or '0')\n            return x + y\n        if a == b:\n            return n\n        return self.closestFair(n + 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2) == 10\n    assert candidate(n = 403) == 1001\n\n\ncheck(Solution().closestFair)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of even length.\nAs long as nums is not empty, you must repetitively:\n\nFind the minimum number in nums and remove it.\nFind the maximum number in nums and remove it.\nCalculate the average of the two removed numbers.\n\nThe average of two numbers a and b is (a + b) / 2.\n\nFor example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.\n\nReturn the number of distinct averages calculated using the above process.\nNote that when there is a tie for a minimum or maximum number, any can be removed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        nums.sort()\n        return len(set(nums[i] + nums[-i - 1] for i in range(len(nums) >> 1)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,1,4,0,3,5]) == 2\n    assert candidate(nums = [1,100]) == 1\n\n\ncheck(Solution().distinctAverages)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string, message, and a positive integer, limit.\nYou must split message into one or more parts based on limit. Each resulting part should have the suffix \"<a/b>\", where \"b\" is to be replaced with the total number of parts and \"a\" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\nThe resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\nReturn the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitMessage(self, message: str, limit: int) -> List[str]:\n```",
        "solutions": "class Solution:\n    def splitMessage(self, message: str, limit: int) -> List[str]:\n        n = len(message)\n        sa = 0\n        for k in range(1, n + 1):\n            sa += len(str(k))\n            sb = len(str(k)) * k\n            sc = 3 * k\n            if limit * k - (sa + sb + sc) >= n:\n                ans = []\n                i = 0\n                for j in range(1, k + 1):\n                    tail = f'<{j}/{k}>'\n                    t = message[i : i + limit - len(tail)] + tail\n                    ans.append(t)\n                    i += limit - len(tail)\n                return ans\n        return []\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(message = \"this is really a very awesome message\", limit = 9) == [\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]\n    assert candidate(message = \"short message\", limit = 15) == [\"short mess<1/2>\",\"age<2/2>\"]\n\n\ncheck(Solution().splitMessage)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAt every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents:\n\nthe price needed to open the gate at node i, if amount[i] is negative, or,\nthe cash reward obtained on opening the gate at node i, otherwise.\n\nThe game goes on as follows:\n\nInitially, Alice is at node 0 and Bob is at node bob.\nAt every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node 0.\nFor every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n\t\nIf the gate is already open, no price will be required, nor will there be any cash reward.\nIf Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is c, then both Alice and Bob pay\u00a0c / 2 each. Similarly, if the reward at the gate is c, both of them receive c / 2 each.\n\n\nIf Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node 0, he stops moving. Note that these events are independent of each other.\n\nReturn the maximum net income Alice can have if she travels towards the optimal leaf node.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def mostProfitablePath(\n        self, edges: List[List[int]], bob: int, amount: List[int]\n    ) -> int:\n        def dfs1(i, fa, t):\n            if i == 0:\n                ts[i] = min(ts[i], t)\n                return True\n            for j in g[i]:\n                if j != fa and dfs1(j, i, t + 1):\n                    ts[j] = min(ts[j], t + 1)\n                    return True\n            return False\n\n        def dfs2(i, fa, t, v):\n            if t == ts[i]:\n                v += amount[i] // 2\n            elif t < ts[i]:\n                v += amount[i]\n            nonlocal ans\n            if len(g[i]) == 1 and g[i][0] == fa:\n                ans = max(ans, v)\n                return\n            for j in g[i]:\n                if j != fa:\n                    dfs2(j, i, t + 1, v)\n\n        n = len(edges) + 1\n        g = defaultdict(list)\n        ts = [n] * n\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        dfs1(bob, -1, 0)\n        ts[bob] = 0\n        ans = -inf\n        dfs2(0, -1, 0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]) == 6\n    assert candidate(edges = [[0,1]], bob = 1, amount = [-7280,2350]) == -7280\n\n\ncheck(Solution().mostProfitablePath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nYou can perform the following operation on the array any number of times:\n\nChoose any two adjacent elements and replace them with their sum.\n\n\t\nFor example, if nums = [1,2,3,1], you can apply one operation to make it [1,5,1].\n\n\n\nReturn the minimum number of operations needed to turn the array into a palindrome.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        i, j = 0, len(nums) - 1\n        a, b = nums[i], nums[j]\n        ans = 0\n        while i < j:\n            if a < b:\n                i += 1\n                a += nums[i]\n                ans += 1\n            elif b < a:\n                j -= 1\n                b += nums[j]\n                ans += 1\n            else:\n                i, j = i + 1, j - 1\n                a, b = nums[i], nums[j]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,2,1,2,3,1]) == 2\n    assert candidate(nums = [1,2,3,4]) == 3\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:\n\n0 <= i < j < k < nums.length\nnums[i], nums[j], and nums[k] are pairwise distinct.\n\t\nIn other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].\n\n\n\nReturn the number of triplets that meet the conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def unequalTriplets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def unequalTriplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    ans += (\n                        nums[i] != nums[j] and nums[j] != nums[k] and nums[i] != nums[k]\n                    )\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,4,2,4,3]) == 3\n    assert candidate(nums = [1,1,1,1,1]) == 0\n\n\ncheck(Solution().unequalTriplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary search tree and an array queries of size n consisting of positive integers.\nFind a 2D array answer of size n where answer[i] = [mini, maxi]:\n\nmini is the largest value in the tree that is smaller than or equal to queries[i]. If a such value does not exist, add -1 instead.\nmaxi is the smallest value in the tree that is greater than or equal to queries[i]. If a such value does not exist, add -1 instead.\n\nReturn the array answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def closestNodes(self, root: Optional[TreeNode], queries: List[int]) -> List[List[int]]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def closestNodes(\n        self, root: Optional[TreeNode], queries: List[int]\n    ) -> List[List[int]]:\n        def dfs(root: Optional[TreeNode]):\n            if root is None:\n                return\n            dfs(root.left)\n            nums.append(root.val)\n            dfs(root.right)\n\n        nums = []\n        dfs(root)\n        ans = []\n        for x in queries:\n            i = bisect_left(nums, x + 1) - 1\n            j = bisect_left(nums, x)\n            mi = nums[i] if 0 <= i < len(nums) else -1\n            mx = nums[j] if 0 <= j < len(nums) else -1\n            ans.append([mi, mx])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([6,2,13,1,4,9,15,None,None,None,None,None,None,14]), queries = [2,5,16]) == [[2,2],[4,6],[15,-1]]\n    assert candidate(root = tree_node([4,None,9]), queries = [3]) == [[-1,4]]\n\n\ncheck(Solution().closestNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nThere is a meeting for the representatives of each city. The meeting is in the capital city.\nThere is a car in each city. You are given an integer seats that indicates the number of seats in each car.\nA representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.\nReturn the minimum number of liters of fuel to reach the capital city.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:\n        def dfs(a: int, fa: int) -> int:\n            nonlocal ans\n            sz = 1\n            for b in g[a]:\n                if b != fa:\n                    t = dfs(b, a)\n                    ans += ceil(t / seats)\n                    sz += t\n            return sz\n\n        g = defaultdict(list)\n        for a, b in roads:\n            g[a].append(b)\n            g[b].append(a)\n        ans = 0\n        dfs(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(roads = [[0,1],[0,2],[0,3]], seats = 5) == 3\n    assert candidate(roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2) == 7\n    assert candidate(roads = [], seats = 1) == 0\n\n\ncheck(Solution().minimumFuelCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\nA partition of s is called beautiful if:\n\ns is partitioned into k non-intersecting substrings.\nEach substring has a length of at least minLength.\nEach substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.\n\nReturn the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n```",
        "solutions": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        g = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = g[0][0] = 1\n        for i, c in enumerate(s, 1):\n            if i >= minLength and c not in primes and (i == n or s[i] in primes):\n                for j in range(1, k + 1):\n                    f[i][j] = g[i - minLength][j - 1]\n            for j in range(k + 1):\n                g[i][j] = (g[i - 1][j] + f[i][j]) % mod\n        return f[n][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"23542185131\", k = 3, minLength = 2) == 3\n    assert candidate(s = \"23542185131\", k = 3, minLength = 3) == 1\n    assert candidate(s = \"3312958\", k = 3, minLength = 1) == 1\n\n\ncheck(Solution().beautifulPartitions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, find the pivot integer x such that:\n\nThe sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.\n\nReturn the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pivotInteger(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def pivotInteger(self, n: int) -> int:\n        for x in range(1, n + 1):\n            if (1 + x) * x == (x + n) * (n - x + 1):\n                return x\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 8) == 6\n    assert candidate(n = 1) == 1\n    assert candidate(n = 4) == -1\n\n\ncheck(Solution().pivotInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and t consisting of only lowercase English letters.\nReturn the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n```",
        "solutions": "class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        i, m = 0, len(s)\n        for j, c in enumerate(t):\n            while i < m and s[i] != c:\n                i += 1\n            if i == m:\n                return len(t) - j\n            i += 1\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"coaching\", t = \"coding\") == 4\n    assert candidate(s = \"abcde\", t = \"a\") == 0\n    assert candidate(s = \"z\", t = \"abcde\") == 5\n\n\ncheck(Solution().appendCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a linked list.\nRemove every node which has a node with a greater value anywhere to the right side of it.\nReturn the head of the modified linked list.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        stk = []\n        for v in nums:\n            while stk and stk[-1] < v:\n                stk.pop()\n            stk.append(v)\n        dummy = ListNode()\n        head = dummy\n        for v in stk:\n            head.next = ListNode(v)\n            head = head.next\n        return dummy.next\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([5,2,13,3,8])), list_node([13,8]))\n    assert is_same_list(candidate(head = list_node([1,1,1,1])), list_node([1,1,1,1]))\n\n\ncheck(Solution().removeNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\nReturn the number of non-empty subarrays in nums that have a median equal to k.\nNote:\n\nThe median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.\n\n\t\nFor example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.\n\n\nA subarray is a contiguous part of an array.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        i = nums.index(k)\n        cnt = Counter()\n        ans = 1\n        x = 0\n        for v in nums[i + 1 :]:\n            x += 1 if v > k else -1\n            ans += 0 <= x <= 1\n            cnt[x] += 1\n        x = 0\n        for j in range(i - 1, -1, -1):\n            x += 1 if nums[j] > k else -1\n            ans += 0 <= x <= 1\n            ans += cnt[-x] + cnt[-x + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,1,4,5], k = 4) == 3\n    assert candidate(nums = [2,3,1], k = 3) == 1\n\n\ncheck(Solution().countSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA valid cut in a circle can be:\n\nA cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or\nA cut that is represented by a straight line that touches one point on the edge of the circle and its center.\n\nSome valid and invalid cuts are shown in the figures below.\n\nGiven the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfCuts(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfCuts(self, n: int) -> int:\n        return n if (n > 1 and n & 1) else n >> 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4) == 2\n    assert candidate(n = 3) == 3\n\n\ncheck(Solution().numberOfCuts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':\n\nif the ith character is 'Y', it means that customers come at the ith hour\nwhereas 'N' indicates that no customers come at the ith hour.\n\nIf the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:\n\nFor every hour when the shop is open and no customers come, the penalty increases by 1.\nFor every hour when the shop is closed and customers come, the penalty increases by 1.\n\nReturn the earliest hour at which the shop must be closed to incur a minimum penalty.\nNote that if a shop closes at the jth hour, it means the shop is closed at the hour j.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestClosingTime(self, customers: str) -> int:\n```",
        "solutions": "class Solution:\n    def bestClosingTime(self, customers: str) -> int:\n        n = len(customers)\n        s = [0] * (n + 1)\n        for i, c in enumerate(customers):\n            s[i + 1] = s[i] + int(c == 'Y')\n        ans, cost = 0, inf\n        for j in range(n + 1):\n            t = j - s[j] + s[-1] - s[j]\n            if cost > t:\n                ans, cost = j, t\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(customers = \"YYNY\") == 2\n    assert candidate(customers = \"NNNNN\") == 0\n    assert candidate(customers = \"YYYY\") == 4\n\n\ncheck(Solution().bestClosingTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.\nNote:\n\nA string is palindromic if it reads the same forward and backward.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPalindromes(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        pre = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        suf = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        t = list(map(int, s))\n        c = [0] * 10\n        for i, v in enumerate(t, 1):\n            for j in range(10):\n                for k in range(10):\n                    pre[i][j][k] = pre[i - 1][j][k]\n            for j in range(10):\n                pre[i][j][v] += c[j]\n            c[v] += 1\n        c = [0] * 10\n        for i in range(n, 0, -1):\n            v = t[i - 1]\n            for j in range(10):\n                for k in range(10):\n                    suf[i][j][k] = suf[i + 1][j][k]\n            for j in range(10):\n                suf[i][j][v] += c[j]\n            c[v] += 1\n        ans = 0\n        for i in range(1, n + 1):\n            for j in range(10):\n                for k in range(10):\n                    ans += pre[i - 1][j][k] * suf[i + 1][j][k]\n                    ans %= mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"103301\") == 2\n    assert candidate(s = \"0000000\") == 21\n    assert candidate(s = \"9999900000\") == 2\n\n\ncheck(Solution().countPalindromes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nSplit the array into one or more disjoint subarrays such that:\n\nEach element of the array belongs to exactly one subarray, and\nThe GCD of the elements of each subarray is strictly greater than 1.\n\nReturn the minimum number of subarrays that can be obtained after the split.\nNote that:\n\nThe GCD of a subarray is the largest positive integer that evenly divides all the elements of the subarray.\nA subarray is a contiguous part of the array.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSplits(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSplits(self, nums: List[int]) -> int:\n        ans, g = 1, 0\n        for x in nums:\n            g = gcd(g, x)\n            if g == 1:\n                ans += 1\n                g = x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [12,6,3,14,8]) == 2\n    assert candidate(nums = [4,12,6,14]) == 1\n\n\ncheck(Solution().minimumSplits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n\nFor example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences.\n\nWords consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.\nA sentence is circular if:\n\nThe last character of a word is equal to the first character of the next word.\nThe last character of the last word is equal to the first character of the first word.\n\nFor example, \"leetcode exercises sound delightful\", \"eetcode\", \"leetcode eats soul\" are all circular sentences. However, \"Leetcode is cool\", \"happy Leetcode\", \"Leetcode\" and \"I like Leetcode\" are not circular sentences.\nGiven a string sentence, return true if it is circular. Otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isCircularSentence(self, sentence: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isCircularSentence(self, sentence: str) -> bool:\n        ss = sentence.split()\n        n = len(ss)\n        return all(s[-1] == ss[(i + 1) % n][0] for i, s in enumerate(ss))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(sentence = \"leetcode exercises sound delightful\") == True\n    assert candidate(sentence = \"eetcode\") == True\n    assert candidate(sentence = \"Leetcode is cool\") == False\n\n\ncheck(Solution().isCircularSentence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.\nThe chemistry of a team is equal to the product of the skills of the players on that team.\nReturn the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        skill.sort()\n        t = skill[0] + skill[-1]\n        i, j = 0, len(skill) - 1\n        ans = 0\n        while i < j:\n            if skill[i] + skill[j] != t:\n                return -1\n            ans += skill[i] * skill[j]\n            i, j = i + 1, j - 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(skill = [3,2,5,1,3,4]) == 22\n    assert candidate(skill = [3,4]) == 12\n    assert candidate(skill = [1,1,2,3]) == -1\n\n\ncheck(Solution().dividePlayers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. The cities graph is not necessarily connected.\nThe score of a path between two cities is defined as the minimum distance of a road in this path.\nReturn the minimum possible score of a path between cities 1 and n.\nNote:\n\nA path is a sequence of roads between two cities.\nIt is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path.\nThe test cases are generated such that there is at least one path between 1 and n.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            nonlocal ans\n            for j, d in g[i]:\n                ans = min(ans, d)\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(j)\n\n        g = defaultdict(list)\n        for a, b, d in roads:\n            g[a].append((b, d))\n            g[b].append((a, d))\n        vis = [False] * (n + 1)\n        ans = inf\n        dfs(1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]) == 5\n    assert candidate(n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]) == 2\n\n\ncheck(Solution().minScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.\nYou are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.\nDivide the nodes of the graph into m groups (1-indexed) such that:\n\nEach node in the graph belongs to exactly one group.\nFor every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.\n\nReturn the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n        g = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a - 1].append(b - 1)\n            g[b - 1].append(a - 1)\n        d = defaultdict(int)\n        for i in range(n):\n            q = deque([i])\n            dist = [0] * n\n            dist[i] = mx = 1\n            root = i\n            while q:\n                a = q.popleft()\n                root = min(root, a)\n                for b in g[a]:\n                    if dist[b] == 0:\n                        dist[b] = dist[a] + 1\n                        mx = max(mx, dist[b])\n                        q.append(b)\n                    elif abs(dist[b] - dist[a]) != 1:\n                        return -1\n            d[root] = max(d[root], mx)\n        return sum(d.values())\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]) == 4\n    assert candidate(n = 3, edges = [[1,2],[2,3],[3,1]]) == -1\n\n\ncheck(Solution().magnificentSets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\nFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\n\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\nFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\nfloor(x) is equivalent to rounding x down to the nearest integer.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfNodes(self, n: int, queries: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfNodes(self, n: int, queries: List[int]) -> int:\n        def dfs(i):\n            if i > n:\n                return\n            tree[i] ^= 1\n            dfs(i << 1)\n            dfs(i << 1 | 1)\n\n        tree = [0] * (n + 1)\n        cnt = Counter(queries)\n        for i, v in cnt.items():\n            if v & 1:\n                dfs(i)\n        return sum(tree)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5 , queries = [1,2,5]) == 3\n    assert candidate(n = 3, queries = [2,3,3]) == 1\n\n\ncheck(Solution().numberOfNodes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n matrix grid consisting of positive integers.\nPerform the following operation until grid becomes empty:\n\nDelete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\nAdd the maximum of deleted elements to the answer.\n\nNote that the number of columns decreases by one after each operation.\nReturn the answer after performing the operations described above.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def deleteGreatestValue(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def deleteGreatestValue(self, grid: List[List[int]]) -> int:\n        for row in grid:\n            row.sort()\n        return sum(max(col) for col in zip(*grid))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,4],[3,3,1]]) == 8\n    assert candidate(grid = [[10]]) == 10\n\n\ncheck(Solution().deleteGreatestValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. A subsequence of nums is called a square streak if:\n\nThe length of the subsequence is at least 2, and\nafter sorting the subsequence, each element (except the first element) is the square of the previous number.\n\nReturn the length of the longest square streak in nums, or return -1 if there is no square streak.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            while v in s:\n                v *= v\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,6,16,8,2]) == 3\n    assert candidate(nums = [2,3,5,6,7]) == -1\n\n\ncheck(Solution().longestSquareStreak)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an m x n integer matrix grid and an array queries of size k.\nFind an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\n\nIf queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\nOtherwise, you do not get any points, and you end this process.\n\nAfter the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\nReturn the resulting array answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n        m, n = len(grid), len(grid[0])\n        qs = sorted((v, i) for i, v in enumerate(queries))\n        ans = [0] * len(qs)\n        q = [(grid[0][0], 0, 0)]\n        cnt = 0\n        vis = [[False] * n for _ in range(m)]\n        vis[0][0] = True\n        for v, k in qs:\n            while q and q[0][0] < v:\n                _, i, j = heappop(q)\n                cnt += 1\n                for a, b in pairwise((-1, 0, 1, 0, -1)):\n                    x, y = i + a, j + b\n                    if 0 <= x < m and 0 <= y < n and not vis[x][y]:\n                        heappush(q, (grid[x][y], x, y))\n                        vis[x][y] = True\n            ans[k] = cnt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]) == [5,8,1]\n    assert candidate(grid = [[5,2,1],[1,1,2]], queries = [3]) == [0]\n\n\ncheck(Solution().maxPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe value of an alphanumeric string can be defined as:\n\nThe numeric representation of the string in base 10, if it comprises of digits only.\nThe length of the string, otherwise.\n\nGiven an array strs of alphanumeric strings, return the maximum value of any string in strs.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumValue(self, strs: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumValue(self, strs: List[str]) -> int:\n        def f(s: str) -> int:\n            return int(s) if all(c.isdigit() for c in s) else len(s)\n\n        return max(f(s) for s in strs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(strs = [\"alic3\",\"bob\",\"3\",\"4\",\"00000\"]) == 5\n    assert candidate(strs = [\"1\",\"01\",\"001\",\"0001\"]) == 1\n\n\ncheck(Solution().maximumValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.\nYou are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\nThe image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.\n\nThe star sum is the sum of the values of all the nodes present in the star graph.\nGiven an integer k, return the maximum star sum of a star graph containing at most k edges.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            if vals[b] > 0:\n                g[a].append(vals[b])\n            if vals[a] > 0:\n                g[b].append(vals[a])\n        for bs in g.values():\n            bs.sort(reverse=True)\n        return max(v + sum(g[i][:k]) for i, v in enumerate(vals))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2) == 16\n    assert candidate(vals = [-5], edges = [], k = 0) == -5\n\n\ncheck(Solution().maxStarSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.\nA frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.\nThe length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.\n\nMore formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|.\n\nThe cost of a path is the maximum length of a jump among all jumps in the path.\nReturn the minimum cost of a path for the frog.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxJump(self, stones: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxJump(self, stones: List[int]) -> int:\n        ans = stones[1] - stones[0]\n        for i in range(2, len(stones)):\n            ans = max(ans, stones[i] - stones[i - 2])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(stones = [0,2,5,6,7]) == 5\n    assert candidate(stones = [0,3,9]) == 9\n\n\ncheck(Solution().maxJump)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\nIn one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\nFind the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\nReturn the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = same = 0\n        cnt = Counter()\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if a == b:\n                same += 1\n                ans += i\n                cnt[a] += 1\n\n        m = lead = 0\n        for k, v in cnt.items():\n            if v * 2 > same:\n                m = v * 2 - same\n                lead = k\n                break\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if m and a != b and a != lead and b != lead:\n                ans += i\n                m -= 1\n        return -1 if m else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]) == 10\n    assert candidate(nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]) == 10\n    assert candidate(nums1 = [1,2,2], nums2 = [1,2,2]) == -1\n\n\ncheck(Solution().minimumTotalCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s and a positive integer k.\nYou can apply the following operation on the string any number of times:\n\nChoose any substring of size k from s and flip all its characters, that is, turn all 1's into 0's, and all 0's into 1's.\n\nReturn the number of distinct strings you can obtain. Since the answer may be too large, return it modulo 109 + 7.\nNote that:\n\nA binary string is a string that consists only of the characters 0 and 1.\nA substring is a contiguous part of a string.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDistinctStrings(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countDistinctStrings(self, s: str, k: int) -> int:\n        return pow(2, len(s) - k + 1) % (10**9 + 7)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1001\", k = 3) == 4\n    assert candidate(s = \"10110\", k = 5) == 2\n\n\ncheck(Solution().countDistinctStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string array words.\nTwo strings are similar if they consist of the same characters.\n\nFor example, \"abca\" and \"cba\" are similar since both consist of characters 'a', 'b', and 'c'.\nHowever, \"abacba\" and \"bcfd\" are not similar since they do not consist of the same characters.\n\nReturn the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def similarPairs(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def similarPairs(self, words: List[str]) -> int:\n        ans = 0\n        cnt = Counter()\n        for w in words:\n            v = 0\n            for c in w:\n                v |= 1 << (ord(c) - ord(\"A\"))\n            ans += cnt[v]\n            cnt[v] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"]) == 2\n    assert candidate(words = [\"aabb\",\"ab\",\"ba\"]) == 3\n    assert candidate(words = [\"nba\",\"cba\",\"dba\"]) == 0\n\n\ncheck(Solution().similarPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n.\nContinuously replace n with the sum of its prime factors.\n\nNote that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n.\n\nReturn the smallest value n will take on.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestValue(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def smallestValue(self, n: int) -> int:\n        while 1:\n            t, s, i = n, 0, 2\n            while i <= n // i:\n                while n % i == 0:\n                    n //= i\n                    s += i\n                i += 1\n            if n > 1:\n                s += n\n            if s == t:\n                return t\n            n = s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 15) == 5\n    assert candidate(n = 3) == 3\n\n\ncheck(Solution().smallestValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\nYou can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\nReturn true if it is possible to make the degree of each node in the graph even, otherwise return false.\nThe degree of a node is the number of edges connected to it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n        g = defaultdict(set)\n        for a, b in edges:\n            g[a].add(b)\n            g[b].add(a)\n        vs = [i for i, v in g.items() if len(v) & 1]\n        if len(vs) == 0:\n            return True\n        if len(vs) == 2:\n            a, b = vs\n            if a not in g[b]:\n                return True\n            return any(a not in g[c] and c not in g[b] for c in range(1, n + 1))\n        if len(vs) == 4:\n            a, b, c, d = vs\n            if a not in g[b] and c not in g[d]:\n                return True\n            if a not in g[c] and b not in g[d]:\n                return True\n            if a not in g[d] and b not in g[c]:\n                return True\n            return False\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]) == True\n    assert candidate(n = 4, edges = [[1,2],[3,4]]) == True\n    assert candidate(n = 4, edges = [[1,2],[1,3],[1,4]]) == False\n\n\ncheck(Solution().isPossible)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\n\nThe left node has the value 2 * val, and\nThe right node has the value 2 * val + 1.\n\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\n\nAdd an edge between the nodes with values ai and bi.\nFind the length of the cycle in the graph.\nRemove the added edge between nodes with values ai and bi.\n\nNote that:\n\nA cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.\nThe length of a cycle is the number of edges visited in the cycle.\nThere could be multiple edges between two nodes in the tree after adding the edge of the query.\n\nReturn an array answer of length m where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        for a, b in queries:\n            t = 1\n            while a != b:\n                if a > b:\n                    a >>= 1\n                else:\n                    b >>= 1\n                t += 1\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, queries = [[5,3],[4,7],[2,3]]) == [4,5,3]\n    assert candidate(n = 2, queries = [[1,2]]) == [2]\n\n\ncheck(Solution().cycleLengthQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed circular string array words and a string target. A circular array means that the array's end connects to the array's beginning.\n\nFormally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words.\n\nStarting from startIndex, you can move to either the next word or the previous word with 1 step at a time.\nReturn the shortest distance needed to reach the string target. If the string target does not exist in words, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:\n```",
        "solutions": "class Solution:\n    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:\n        n = len(words)\n        ans = n\n        for i, w in enumerate(words):\n            if w == target:\n                t = abs(i - startIndex)\n                ans = min(ans, t, n - t)\n        return -1 if ans == n else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1) == 1\n    assert candidate(words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0) == 1\n    assert candidate(words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0) == -1\n\n\ncheck(Solution().closetTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. Each minute, you may take either the leftmost character of s, or the rightmost character of s.\nReturn the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = Counter(s)\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n        mx = j = 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while cnt[c] < k:\n                cnt[s[j]] += 1\n                j += 1\n            mx = max(mx, i - j + 1)\n        return len(s) - mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aabaaaacaabc\", k = 2) == 8\n    assert candidate(s = \"a\", k = 1) == -1\n\n\ncheck(Solution().takeCharacters)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.\nThe store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.\nReturn the maximum tastiness of a candy basket.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            cnt, pre = 0, -x\n            for cur in price:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price.sort()\n        l, r = 0, price[-1] - price[0]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(price = [13,5,1,8,21,2], k = 3) == 8\n    assert candidate(price = [1,3,1], k = 2) == 2\n    assert candidate(price = [7,7,7,7], k = 2) == 0\n\n\ncheck(Solution().maximumTastiness)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers and an integer k.\nPartition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.\nReturn the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.\nTwo partitions are considered distinct if some element nums[i] is in different groups in the two partitions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPartitions(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countPartitions(self, nums: List[int], k: int) -> int:\n        if sum(nums) < k * 2:\n            return 0\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [[0] * k for _ in range(n + 1)]\n        f[0][0] = 1\n        ans = 1\n        for i in range(1, n + 1):\n            ans = ans * 2 % mod\n            for j in range(k):\n                f[i][j] = f[i - 1][j]\n                if j >= nums[i - 1]:\n                    f[i][j] = (f[i][j] + f[i - 1][j - nums[i - 1]]) % mod\n        return (ans - sum(f[-1]) * 2 + mod) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4], k = 4) == 6\n    assert candidate(nums = [3,3,3], k = 4) == 0\n    assert candidate(nums = [6,6], k = 2) == 2\n\n\ncheck(Solution().countPartitions)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where:\n\n-1 represents there is no fort at the ith position.\n0 indicates there is an enemy fort at the ith position.\n1 indicates the fort at the ith the position is under your command.\n\nNow you have decided to move your army from one of your forts at position i to an empty position j such that:\n\n0 <= i, j <= n - 1\nThe army travels over enemy forts only. Formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0.\n\nWhile moving the army, all the enemy forts that come in the way are captured.\nReturn the maximum number of enemy forts that can be captured. In case it is impossible to move your army, or you do not have any fort under your command, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def captureForts(self, forts: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def captureForts(self, forts: List[int]) -> int:\n        n = len(forts)\n        i = ans = 0\n        while i < n:\n            j = i + 1\n            if forts[i]:\n                while j < n and forts[j] == 0:\n                    j += 1\n                if j < n and forts[i] + forts[j] == 0:\n                    ans = max(ans, j - i - 1)\n            i = j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(forts = [1,0,0,-1,0,0,0,0,1]) == 4\n    assert candidate(forts = [0,0,1,-1]) == 0\n\n\ncheck(Solution().captureForts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.\nInitially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.\nYou are given n feedback reports, represented by a 0-indexed string array report\u00a0and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.\nGiven an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def topStudents(self, positive_feedback: List[str], negative_feedback: List[str], report: List[str], student_id: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def topStudents(\n        self,\n        positive_feedback: List[str],\n        negative_feedback: List[str],\n        report: List[str],\n        student_id: List[int],\n        k: int,\n    ) -> List[int]:\n        ps = set(positive_feedback)\n        ns = set(negative_feedback)\n        arr = []\n        for sid, r in zip(student_id, report):\n            t = 0\n            for w in r.split():\n                if w in ps:\n                    t += 3\n                elif w in ns:\n                    t -= 1\n            arr.append((t, sid))\n        arr.sort(key=lambda x: (-x[0], x[1]))\n        return [v[1] for v in arr[:k]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2) == [1,2]\n    assert candidate(positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2) == [2,1]\n\n\ncheck(Solution().topStudents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:\n\nChoose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. In other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k.\n\nnums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].\nReturn the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        ans = x = 0\n        for a, b in zip(nums1, nums2):\n            if k == 0:\n                if a != b:\n                    return -1\n                continue\n            if (a - b) % k:\n                return -1\n            y = (a - b) // k\n            ans += abs(y)\n            x += y\n        return -1 if x else ans // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3) == 2\n    assert candidate(nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1) == -1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n binary matrix grid.\nA 0-indexed m x n difference matrix diff is created with the following procedure:\n\nLet the number of ones in the ith row be onesRowi.\nLet the number of ones in the jth column be onesColj.\nLet the number of zeros in the ith row be zerosRowi.\nLet the number of zeros in the jth column be zerosColj.\ndiff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj\n\nReturn the difference matrix diff.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        rows = [0] * m\n        cols = [0] * n\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                rows[i] += v\n                cols[j] += v\n        diff = [[0] * n for _ in range(m)]\n        for i, r in enumerate(rows):\n            for j, c in enumerate(cols):\n                diff[i][j] = r + c - (n - r) - (m - c)\n        return diff\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,1],[1,0,1],[0,0,1]]) == [[0,0,4],[0,0,4],[-2,-2,2]]\n    assert candidate(grid = [[1,1,1],[1,1,1]]) == [[5,5,5],[5,5,5]]\n\n\ncheck(Solution().onesMinusZeros)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer num, return the number of digits in num that divide num.\nAn integer val divides nums if nums % val == 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countDigits(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def countDigits(self, num: int) -> int:\n        ans, x = 0, num\n        while x:\n            x, val = divmod(x, 10)\n            ans += num % val == 0\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 7) == 1\n    assert candidate(num = 121) == 2\n    assert candidate(num = 1248) == 4\n\n\ncheck(Solution().countDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.\nNote that:\n\nA number greater than 1 is called prime if it is divisible by only 1 and itself.\nAn integer val1 is a factor of another integer val2 if val2 / val1 is an integer.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctPrimeFactors(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def distinctPrimeFactors(self, nums: List[int]) -> int:\n        s = set()\n        for n in nums:\n            i = 2\n            while i <= n // i:\n                if n % i == 0:\n                    s.add(i)\n                    while n % i == 0:\n                        n //= i\n                i += 1\n            if n > 1:\n                s.add(n)\n        return len(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,3,7,10,6]) == 4\n    assert candidate(nums = [2,4,8,16]) == 1\n\n\ncheck(Solution().distinctPrimeFactors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads, where roads[i] = [ai, bi, costi] indicates that there is a bidirectional road between cities ai and bi with a cost of traveling equal to costi.\nYou can buy apples in any city you want, but some cities have different costs to buy apples. You are given the 1-based array appleCost where appleCost[i] is the cost of buying one apple from city i.\nYou start at some city, traverse through various roads, and eventually buy exactly one apple from any city. After you buy that apple, you have to return back to the city you started at, but now the cost of all the roads will be multiplied by a given factor k.\nGiven the integer k, return a 1-based array answer of size n where answer[i] is the minimum total cost to buy an apple if you start at city i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, n: int, roads: List[List[int]], appleCost: List[int], k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def minCost(\n        self, n: int, roads: List[List[int]], appleCost: List[int], k: int\n    ) -> List[int]:\n        def dijkstra(i):\n            q = [(0, i)]\n            dist = [inf] * n\n            dist[i] = 0\n            ans = inf\n            while q:\n                d, u = heappop(q)\n                ans = min(ans, appleCost[u] + d * (k + 1))\n                for v, w in g[u]:\n                    if dist[v] > dist[u] + w:\n                        dist[v] = dist[u] + w\n                        heappush(q, (dist[v], v))\n            return ans\n\n        g = defaultdict(list)\n        for a, b, c in roads:\n            a, b = a - 1, b - 1\n            g[a].append((b, c))\n            g[b].append((a, c))\n        return [dijkstra(i) for i in range(n)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, roads = [[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]], appleCost = [56,42,102,301], k = 2) == [54,42,48,51]\n    assert candidate(n = 3, roads = [[1,2,5],[2,3,1],[3,1,2]], appleCost = [2,3,1], k = 3) == [2,3,1]\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.\n\nIn other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.\n\nNote that 0 is neither positive nor negative.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumCount(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumCount(self, nums: List[int]) -> int:\n        a = sum(x > 0 for x in nums)\n        b = sum(x < 0 for x in nums)\n        return max(a, b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-2,-1,-1,1,2,3]) == 3\n    assert candidate(nums = [-3,-2,-1,0,0,1,2]) == 3\n    assert candidate(nums = [5,20,66,1314]) == 4\n\n\ncheck(Solution().maximumCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed strings word1 and word2.\nA move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j].\nReturn true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. Return false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isItPossible(self, word1: str, word2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isItPossible(self, word1: str, word2: str) -> bool:\n        cnt1 = [0] * 26\n        cnt2 = [0] * 26\n        for c in word1:\n            cnt1[ord(c) - ord('a')] += 1\n        for c in word2:\n            cnt2[ord(c) - ord('a')] += 1\n        for i, a in enumerate(cnt1):\n            for j, b in enumerate(cnt2):\n                if a and b:\n                    cnt1[i], cnt2[j] = cnt1[i] - 1, cnt2[j] - 1\n                    cnt1[j], cnt2[i] = cnt1[j] + 1, cnt2[i] + 1\n                    if sum(v > 0 for v in cnt1) == sum(v > 0 for v in cnt2):\n                        return True\n                    cnt1[i], cnt2[j] = cnt1[i] + 1, cnt2[j] + 1\n                    cnt1[j], cnt2[i] = cnt1[j] - 1, cnt2[i] - 1\n        return False\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word1 = \"ac\", word2 = \"b\") == False\n    assert candidate(word1 = \"abcc\", word2 = \"aab\") == True\n    assert candidate(word1 = \"abcde\", word2 = \"fghij\") == True\n\n\ncheck(Solution().isItPossible)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.\nIn one operation:\n\nchoose an index i such that 0 <= i < nums.length,\nincrease your score by nums[i], and\nreplace nums[i] with ceil(nums[i] / 3).\n\nReturn the maximum possible score you can attain after applying exactly k operations.\nThe ceiling function ceil(val) is the least integer greater than or equal to val.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxKelements(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxKelements(self, nums: List[int], k: int) -> int:\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            heappush(h, -(ceil(v / 3)))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [10,10,10,10,10], k = 5) == 50\n    assert candidate(nums = [1,10,3,3,3], k = 3) == 17\n\n\ncheck(Solution().maxKelements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n persons numbered from 0 to n - 1 and a door. Each person can enter or exit through the door once, taking one second.\nYou are given a non-decreasing integer array arrival of size n, where arrival[i] is the arrival time of the ith person at the door. You are also given an array state of size n, where state[i] is 0 if person i wants to enter through the door or 1 if they want to exit through the door.\nIf two or more persons want to use the door at the same time, they follow the following rules:\n\nIf the door was not used in the previous second, then the person who wants to exit goes first.\nIf the door was used in the previous second for entering, the person who wants to enter goes first.\nIf the door was used in the previous second for exiting, the person who wants to exit goes first.\nIf multiple persons want to go in the same direction, the person with the smallest index goes first.\n\nReturn an array answer of size n where answer[i] is the second at which the ith person crosses the door.\nNote that:\n\nOnly one person can cross the door at each second.\nA person may arrive at the door and wait without entering or exiting to follow the mentioned rules.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def timeTaken(self, arrival: List[int], state: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def timeTaken(self, arrival: List[int], state: List[int]) -> List[int]:\n        q = [deque(), deque()]\n        n = len(arrival)\n        t = i = 0\n        st = 1\n        ans = [0] * n\n        while i < n or q[0] or q[1]:\n            while i < n and arrival[i] <= t:\n                q[state[i]].append(i)\n                i += 1\n            if q[0] and q[1]:\n                ans[q[st].popleft()] = t\n            elif q[0] or q[1]:\n                st = 0 if q[0] else 1\n                ans[q[st].popleft()] = t\n            else:\n                st = 1\n            t += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arrival = [0,1,1,2,4], state = [0,1,0,0,1]) == [0,3,1,2,4]\n    assert candidate(arrival = [0,0,0], state = [1,0,1]) == [0,2,1]\n\n\ncheck(Solution().timeTaken)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\nEach power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\n\nNote that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.\n\nThe power of a city is the total number of power stations it is being provided power from.\nThe government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\nGiven the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\nNote that you can build the k power stations in multiple cities.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPower(self, stations: List[int], r: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxPower(self, stations: List[int], r: int, k: int) -> int:\n        def check(x, k):\n            d = [0] * (n + 1)\n            t = 0\n            for i in range(n):\n                t += d[i]\n                dist = x - (s[i] + t)\n                if dist > 0:\n                    if k < dist:\n                        return False\n                    k -= dist\n                    j = min(i + r, n - 1)\n                    left, right = max(0, j - r), min(j + r, n - 1)\n                    d[left] += dist\n                    d[right + 1] -= dist\n                    t += dist\n            return True\n\n        n = len(stations)\n        d = [0] * (n + 1)\n        for i, v in enumerate(stations):\n            left, right = max(0, i - r), min(i + r, n - 1)\n            d[left] += v\n            d[right + 1] -= v\n        s = list(accumulate(d))\n        left, right = 0, 1 << 40\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid, k):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(stations = [1,2,4,5,0], r = 1, k = 2) == 5\n    assert candidate(stations = [4,4,4,4], r = 0, k = 3) == 4\n\n\ncheck(Solution().maxPower)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.\n\nThe box is \"Bulky\" if:\n\n\t\nAny of the dimensions of the box is greater or equal to 104.\nOr, the volume of the box is greater or equal to 109.\n\n\nIf the mass of the box is greater or equal to 100, it is \"Heavy\".\nIf the box is both \"Bulky\" and \"Heavy\", then its category is \"Both\".\nIf the box is neither \"Bulky\" nor \"Heavy\", then its category is \"Neither\".\nIf the box is \"Bulky\" but not \"Heavy\", then its category is \"Bulky\".\nIf the box is \"Heavy\" but not \"Bulky\", then its category is \"Heavy\".\n\nNote that the volume of the box is the product of its length, width and height.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\n```",
        "solutions": "class Solution:\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\n        v = length * width * height\n        bulky = int(any(x >= 10000 for x in (length, width, height)) or v >= 10**9)\n        heavy = int(mass >= 100)\n        i = heavy << 1 | bulky\n        d = ['Neither', 'Bulky', 'Heavy', 'Both']\n        return d[i]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(length = 1000, width = 35, height = 700, mass = 300) == \"Heavy\"\n    assert candidate(length = 200, width = 50, height = 800, mass = 50) == \"Neither\"\n\n\ncheck(Solution().categorizeBox)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums.\nThe effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).\nThe xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.\nReturn the xor-beauty of nums.\nNote that:\n\nval1 | val2 is bitwise OR of val1 and val2.\nval1 & val2 is bitwise AND of val1 and val2.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def xorBeauty(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def xorBeauty(self, nums: List[int]) -> int:\n        return reduce(xor, nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4]) == 5\n    assert candidate(nums = [15,45,20,2,34,35,5,44,32,30]) == 34\n\n\ncheck(Solution().xorBeauty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. The root of the tree is the node labeled 0.\nEach node has an associated value. You are given an array values of length n, where values[i] is the value of the ith node.\nSelect any two non-overlapping subtrees. Your score is the bitwise XOR of the sum of the values within those subtrees.\nReturn the maximum possible score you can achieve. If it is impossible to find two nonoverlapping subtrees, return 0.\nNote that:\n\nThe subtree of a node is the tree consisting of that node and all of its descendants.\nTwo subtrees are non-overlapping if they do not share any common node.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxXor(self, n: int, edges: List[List[int]], values: List[int]) -> int:\n```",
        "solutions": "class Trie:\n    def __init__(self):\n        self.children = [None] * 2\n\n    def insert(self, x):\n        node = self\n        for i in range(47, -1, -1):\n            v = (x >> i) & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, x):\n        node = self\n        res = 0\n        for i in range(47, -1, -1):\n            v = (x >> i) & 1\n            if node is None:\n                return res\n            if node.children[v ^ 1]:\n                res = res << 1 | 1\n                node = node.children[v ^ 1]\n            else:\n                res <<= 1\n                node = node.children[v]\n        return res\n\n\nclass Solution:\n    def maxXor(self, n: int, edges: List[List[int]], values: List[int]) -> int:\n        def dfs1(i, fa):\n            t = values[i]\n            for j in g[i]:\n                if j != fa:\n                    t += dfs1(j, i)\n            s[i] = t\n            return t\n\n        def dfs2(i, fa):\n            nonlocal ans\n            ans = max(ans, tree.search(s[i]))\n            for j in g[i]:\n                if j != fa:\n                    dfs2(j, i)\n            tree.insert(s[i])\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        s = [0] * n\n        dfs1(0, -1)\n        ans = 0\n        tree = Trie()\n        dfs2(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], values = [2,8,3,6,2,5]) == 24\n    assert candidate(n = 3, edges = [[0,1],[1,2]], values = [4,6,1]) == 0\n\n\ncheck(Solution().maxXor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer array nums.\n\nThe element sum is the sum of all the elements in nums.\nThe digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.\n\nReturn the absolute difference between the element sum and digit sum of nums.\nNote that the absolute difference between two integers x and y is defined as |x - y|.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def differenceOfSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def differenceOfSum(self, nums: List[int]) -> int:\n        a, b = sum(nums), 0\n        for x in nums:\n            while x:\n                b += x % 10\n                x //= 10\n        return abs(a - b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,15,6,3]) == 9\n    assert candidate(nums = [1,2,3,4]) == 0\n\n\ncheck(Solution().differenceOfSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n, indicating that we initially have an n x n\u00a00-indexed integer matrix mat filled with zeroes.\nYou are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:\n\nAdd 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). That is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i.\n\nReturn the matrix mat after performing every query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rangeAddQueries(self, n: int, queries: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def rangeAddQueries(self, n: int, queries: List[List[int]]) -> List[List[int]]:\n        mat = [[0] * n for _ in range(n)]\n        for x1, y1, x2, y2 in queries:\n            mat[x1][y1] += 1\n            if x2 + 1 < n:\n                mat[x2 + 1][y1] -= 1\n            if y2 + 1 < n:\n                mat[x1][y2 + 1] -= 1\n            if x2 + 1 < n and y2 + 1 < n:\n                mat[x2 + 1][y2 + 1] += 1\n\n        for i in range(n):\n            for j in range(n):\n                if i:\n                    mat[i][j] += mat[i - 1][j]\n                if j:\n                    mat[i][j] += mat[i][j - 1]\n                if i and j:\n                    mat[i][j] -= mat[i - 1][j - 1]\n        return mat\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, queries = [[1,1,2,2],[0,0,1,1]]) == [[1,1,0],[1,2,1],[0,1,1]]\n    assert candidate(n = 2, queries = [[0,0,1,1]]) == [[1,1],[1,1]]\n\n\ncheck(Solution().rangeAddQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums and an integer k, return the number of good subarrays of nums.\nA subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        ans = cur = 0\n        i = 0\n        for x in nums:\n            cur += cnt[x]\n            cnt[x] += 1\n            while cur - cnt[nums[i]] + 1 >= k:\n                cnt[nums[i]] -= 1\n                cur -= cnt[nums[i]]\n                i += 1\n            if cur >= k:\n                ans += i + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,1,1,1,1], k = 10) == 1\n    assert candidate(nums = [3,1,4,3,2,2,4], k = 2) == 4\n\n\ncheck(Solution().countGood)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nEach node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\nThe price sum of a given path is the sum of the prices of all nodes lying on that path.\nThe tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\nReturn the maximum possible cost amongst all possible root choices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n        def dfs(i, fa):\n            a, b = price[i], 0\n            for j in g[i]:\n                if j != fa:\n                    c, d = dfs(j, i)\n                    nonlocal ans\n                    ans = max(ans, a + d, b + c)\n                    a = max(a, price[i] + c)\n                    b = max(b, price[i] + d)\n            return a, b\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        ans = 0\n        dfs(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]) == 24\n    assert candidate(n = 3, edges = [[0,1],[1,2]], price = [1,1,1]) == 2\n\n\ncheck(Solution().maxOutput)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s, and two integers num1 and num2. num1 and num2 are coprime numbers.\nA ratio substring is a substring of s where the ratio between the number of 0's and the number of 1's in the substring is exactly num1 : num2.\n\nFor example, if num1 = 2 and num2 = 3, then \"01011\" and \"1110000111\" are ratio substrings, while \"11000\" is not.\n\nReturn the number of non-empty ratio substrings of s.\nNote that:\n\nA substring is a contiguous sequence of characters within a string.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fixedRatio(self, s: str, num1: int, num2: int) -> int:\n```",
        "solutions": "class Solution:\n    def fixedRatio(self, s: str, num1: int, num2: int) -> int:\n        n0 = n1 = 0\n        ans = 0\n        cnt = Counter({0: 1})\n        for c in s:\n            n0 += c == '0'\n            n1 += c == '1'\n            x = n1 * num1 - n0 * num2\n            ans += cnt[x]\n            cnt[x] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0110011\", num1 = 1, num2 = 2) == 4\n    assert candidate(s = \"10101\", num1 = 3, num2 = 1) == 0\n\n\ncheck(Solution().fixedRatio)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n. Each digit of n has a sign according to the following rules:\n\nThe most significant digit is assigned a positive sign.\nEach other digit has an opposite sign to its adjacent digits.\n\nReturn the sum of all digits with their corresponding sign.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def alternateDigitSum(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def alternateDigitSum(self, n: int) -> int:\n        return sum((-1) ** i * int(x) for i, x in enumerate(str(n)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 521) == 4\n    assert candidate(n = 111) == 1\n    assert candidate(n = 886996) == 0\n\n\ncheck(Solution().alternateDigitSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only.\nYou are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth\u00a0(0-indexed) exam from the highest to the lowest.\nReturn the matrix after sorting it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\n        return sorted(score, key=lambda x: -x[k])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2) == [[7,5,11,2],[10,6,9,1],[4,8,3,15]]\n    assert candidate(score = [[3,4],[5,6]], k = 0) == [[5,6],[3,4]]\n\n\ncheck(Solution().sortTheStudents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times:\n\nChoose two different indices i and j where 0 <= i, j < n.\nSimultaneously, replace s[i] with (s[i] OR s[j]) and s[j] with (s[i] XOR s[j]).\n\nFor example, if s = \"0110\", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = \"1110\".\nReturn true if you can make the string s equal to target, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeStringsEqual(self, s: str, target: str) -> bool:\n```",
        "solutions": "class Solution:\n    def makeStringsEqual(self, s: str, target: str) -> bool:\n        return (\"1\" in s) == (\"1\" in target)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"1010\", target = \"0110\") == True\n    assert candidate(s = \"11\", target = \"00\") == False\n\n\ncheck(Solution().makeStringsEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst nums1 and nums2, return -1.\nNote that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i = j = 0\n        m, n = len(nums1), len(nums2)\n        while i < m and j < n:\n            if nums1[i] == nums2[j]:\n                return nums1[i]\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3], nums2 = [2,4]) == 2\n    assert candidate(nums1 = [1,2,3,6], nums2 = [2,3,4,5]) == 2\n\n\ncheck(Solution().getCommon)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\n\n(x, y - x)\n(x - y, y)\n(2 * x, y)\n(x, 2 * y)\n\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n        x = gcd(targetX, targetY)\n        return x & (x - 1) == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(targetX = 6, targetY = 9) == False\n    assert candidate(targetX = 4, targetY = 7) == True\n\n\ncheck(Solution().isReachable)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.\nFor chosen indices i0, i1, ..., ik - 1, your score is defined as:\n\nThe sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.\nIt can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).\n\nReturn the maximum possible score.\nA subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        nums = sorted(zip(nums2, nums1), reverse=True)\n        q = []\n        ans = s = 0\n        for a, b in nums:\n            s += b\n            heappush(q, b)\n            if len(q) == k:\n                ans = max(ans, s * a)\n                s -= heappop(q)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3) == 12\n    assert candidate(nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1) == 30\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums, return the number of subarrays of nums having an even product.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        ans, last = 0, -1\n        for i, v in enumerate(nums):\n            if v % 2 == 0:\n                last = i\n            ans += last + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [9,6,7,13]) == 6\n    assert candidate(nums = [7,3,5]) == 0\n\n\ncheck(Solution().evenProduct)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.\nTo separate the digits of an integer is to get all the digits it has in the same order.\n\nFor example, for the integer 10921, the separation of its digits is [1,0,9,2,1].\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def separateDigits(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def separateDigits(self, nums: List[int]) -> List[int]:\n        ans = []\n        for x in nums:\n            t = []\n            while x:\n                t.append(x % 10)\n                x //= 10\n            ans.extend(t[::-1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [13,25,83,77]) == [1,3,2,5,8,3,7,7]\n    assert candidate(nums = [7,1,3,9]) == [7,1,3,9]\n\n\ncheck(Solution().separateDigits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:\n\nThe chosen integers have to be in the range [1, n].\nEach integer can be chosen at most once.\nThe chosen integers should not be in the array banned.\nThe sum of the chosen integers should not exceed maxSum.\n\nReturn the maximum number of integers you can choose following the mentioned rules.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        ans = s = 0\n        ban = set(banned)\n        for i in range(1, n + 1):\n            if s + i > maxSum:\n                break\n            if i not in ban:\n                ans += 1\n                s += i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(banned = [1,6,5], n = 5, maxSum = 6) == 2\n    assert candidate(banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1) == 0\n    assert candidate(banned = [11], n = 7, maxSum = 50) == 7\n\n\ncheck(Solution().maxCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1.\u00a0The matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1).\nYou can flip the value of at most one (possibly none) cell. You cannot flip the cells (0, 0) and (m - 1, n - 1).\nReturn true if it is possible to make the matrix disconnect or false otherwise.\nNote that flipping a cell changes its value from 0 to 1 or from 1 to 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:\n        def dfs(i, j):\n            if i >= m or j >= n or grid[i][j] == 0:\n                return False\n            grid[i][j] = 0\n            if i == m - 1 and j == n - 1:\n                return True\n            return dfs(i + 1, j) or dfs(i, j + 1)\n\n        m, n = len(grid), len(grid[0])\n        a = dfs(0, 0)\n        grid[0][0] = grid[-1][-1] = 1\n        b = dfs(0, 0)\n        return not (a and b)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,1,1],[1,0,0],[1,1,1]]) == True\n    assert candidate(grid = [[1,1,1],[1,0,1],[1,1,1]]) == False\n\n\ncheck(Solution().isPossibleToCutPath)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti].\nThe warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following:\n\nCross the bridge to the right side in righti minutes.\nPick a box from the right warehouse in picki minutes.\nCross the bridge to the left side in lefti minutes.\nPut the box into the left warehouse in puti minutes.\n\nThe ith worker is less efficient than the jth worker if either condition is met:\n\nlefti + righti > leftj + rightj\nlefti + righti == leftj + rightj and i > j\n\nThe following rules regulate the movement of the workers through the bridge:\n\nOnly one worker can use the bridge at a time.\nWhen the bridge is unused prioritize the least efficient worker on the right side to cross. If there are no workers on the right side, prioritize the least efficient worker on the left side to cross.\nIf enough workers have already been dispatched from the left side to pick up all the remaining boxes, no more workers will be sent from the left side.\n\nReturn the elapsed minutes at which the last box reaches the left side of the bridge.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n        time.sort(key=lambda x: x[0] + x[2])\n        cur = 0\n        wait_in_left, wait_in_right = [], []\n        work_in_left, work_in_right = [], []\n        for i in range(k):\n            heappush(wait_in_left, -i)\n        while 1:\n            while work_in_left:\n                t, i = work_in_left[0]\n                if t > cur:\n                    break\n                heappop(work_in_left)\n                heappush(wait_in_left, -i)\n            while work_in_right:\n                t, i = work_in_right[0]\n                if t > cur:\n                    break\n                heappop(work_in_right)\n                heappush(wait_in_right, -i)\n            left_to_go = n > 0 and wait_in_left\n            right_to_go = bool(wait_in_right)\n            if not left_to_go and not right_to_go:\n                nxt = inf\n                if work_in_left:\n                    nxt = min(nxt, work_in_left[0][0])\n                if work_in_right:\n                    nxt = min(nxt, work_in_right[0][0])\n                cur = nxt\n                continue\n            if right_to_go:\n                i = -heappop(wait_in_right)\n                cur += time[i][2]\n                if n == 0 and not wait_in_right and not work_in_right:\n                    return cur\n                heappush(work_in_left, (cur + time[i][3], i))\n            else:\n                i = -heappop(wait_in_left)\n                cur += time[i][0]\n                n -= 1\n                heappush(work_in_right, (cur + time[i][1], i))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]) == 6\n    assert candidate(n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]) == 50\n\n\ncheck(Solution().findCrossingTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums, return the value of the bitwise OR of the sum of all possible subsequences in the array.\nA subsequence is a sequence that can be derived from another sequence by removing zero or more elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subsequenceSumOr(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def subsequenceSumOr(self, nums: List[int]) -> int:\n        cnt = [0] * 64\n        ans = 0\n        for v in nums:\n            for i in range(31):\n                if (v >> i) & 1:\n                    cnt[i] += 1\n        for i in range(63):\n            if cnt[i]:\n                ans |= 1 << i\n            cnt[i + 1] += cnt[i] // 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,0,3]) == 7\n    assert candidate(nums = [0,0,0]) == 0\n\n\ncheck(Solution().subsequenceSumOr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\nFor example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on.\n\nGiven the two positive integers n and time, return the index of the person holding the pillow after time seconds.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def passThePillow(self, n: int, time: int) -> int:\n```",
        "solutions": "class Solution:\n    def passThePillow(self, n: int, time: int) -> int:\n        ans = k = 1\n        for _ in range(time):\n            ans += k\n            if ans == 1 or ans == n:\n                k *= -1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, time = 5) == 2\n    assert candidate(n = 3, time = 2) == 3\n\n\ncheck(Solution().passThePillow)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the root of a binary tree and a positive integer k.\nThe level sum in the tree is the sum of the values of the nodes that are on the same level.\nReturn the kth largest level sum in the tree (not necessarily distinct). If there are fewer than k levels in the tree, return -1.\nNote that two nodes are on the same level if they have the same distance from the root.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthLargestLevelSum(self, root: Optional[TreeNode], k: int) -> int:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthLargestLevelSum(self, root: Optional[TreeNode], k: int) -> int:\n        arr = []\n        q = deque([root])\n        while q:\n            t = 0\n            for _ in range(len(q)):\n                root = q.popleft()\n                t += root.val\n                if root.left:\n                    q.append(root.left)\n                if root.right:\n                    q.append(root.right)\n            arr.append(t)\n        return -1 if len(arr) < k else nlargest(k, arr)[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(root = tree_node([5,8,9,2,1,3,7,4,6]), k = 2) == 13\n    assert candidate(root = tree_node([1,2,None,3]), k = 1) == 3\n\n\ncheck(Solution().kthLargestLevelSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n.\nA split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.\n\nFor example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1.\n\nReturn the smallest index i at which the array can be split validly or -1 if there is no such split.\nTwo values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findValidSplit(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findValidSplit(self, nums: List[int]) -> int:\n        first = {}\n        n = len(nums)\n        last = list(range(n))\n        for i, x in enumerate(nums):\n            j = 2\n            while j <= x // j:\n                if x % j == 0:\n                    if j in first:\n                        last[first[j]] = i\n                    else:\n                        first[j] = i\n                    while x % j == 0:\n                        x //= j\n                j += 1\n            if x > 1:\n                if x in first:\n                    last[first[x]] = i\n                else:\n                    first[x] = i\n        mx = last[0]\n        for i, x in enumerate(last):\n            if mx < i:\n                return mx\n            mx = max(mx, x)\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,7,8,15,3,5]) == 2\n    assert candidate(nums = [4,7,15,8,3,5]) == -1\n\n\ncheck(Solution().findValidSplit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\n\n\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\nNote that questions of the same type are indistinguishable.\n\nFor example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            count, marks = types[i - 1]\n            for j in range(target + 1):\n                for k in range(count + 1):\n                    if j >= k * marks:\n                        f[i][j] = (f[i][j] + f[i - 1][j - k * marks]) % mod\n        return f[n][target]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(target = 6, types = [[6,1],[3,2],[2,3]]) == 7\n    assert candidate(target = 5, types = [[50,1],[50,2],[50,5]]) == 4\n    assert candidate(target = 18, types = [[6,1],[3,2],[2,3]]) == 1\n\n\ncheck(Solution().waysToReachTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes:\n\nAt the first minute, color any arbitrary unit cell blue.\nEvery minute thereafter, color blue every uncolored cell that touches a blue cell.\n\nBelow is a pictorial representation of the state of the grid after minutes 1, 2, and 3.\n\nReturn the number of colored cells at the end of n minutes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def coloredCells(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def coloredCells(self, n: int) -> int:\n        return 2 * n * (n - 1) + 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 1) == 1\n    assert candidate(n = 2) == 5\n\n\ncheck(Solution().coloredCells)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer num, split it into two non-negative integers num1 and num2 such that:\n\nThe concatenation of num1 and num2 is a permutation of num.\n\n\t\nIn other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num.\n\n\nnum1 and num2 can contain leading zeros.\n\nReturn the minimum possible sum of num1 and num2.\nNotes:\n\nIt is guaranteed that num does not contain any leading zeros.\nThe order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitNum(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def splitNum(self, num: int) -> int:\n        cnt = Counter()\n        n = 0\n        while num:\n            cnt[num % 10] += 1\n            num //= 10\n            n += 1\n        ans = [0] * 2\n        j = 0\n        for i in range(n):\n            while cnt[j] == 0:\n                j += 1\n            cnt[j] -= 1\n            ans[i & 1] = ans[i & 1] * 10 + j\n        return sum(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 4325) == 59\n    assert candidate(num = 687) == 75\n\n\ncheck(Solution().splitNum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAlice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n\nChooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\nHe tells Alice that u is the parent of v in the tree.\n\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def rootCount(\n        self, edges: List[List[int]], guesses: List[List[int]], k: int\n    ) -> int:\n        def dfs1(i, fa):\n            nonlocal cnt\n            for j in g[i]:\n                if j != fa:\n                    cnt += gs[(i, j)]\n                    dfs1(j, i)\n\n        def dfs2(i, fa):\n            nonlocal ans, cnt\n            ans += cnt >= k\n            for j in g[i]:\n                if j != fa:\n                    cnt -= gs[(i, j)]\n                    cnt += gs[(j, i)]\n                    dfs2(j, i)\n                    cnt -= gs[(j, i)]\n                    cnt += gs[(i, j)]\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        gs = Counter((u, v) for u, v in guesses)\n        cnt = 0\n        dfs1(0, -1)\n        ans = 0\n        dfs2(0, -1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3) == 3\n    assert candidate(edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1) == 5\n\n\ncheck(Solution().rootCount)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of string words and two integers left and right.\nA string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.\nReturn the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n```",
        "solutions": "class Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n        return sum(\n            w[0] in 'aeiou' and w[-1] in 'aeiou' for w in words[left : right + 1]\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"are\",\"amy\",\"u\"], left = 0, right = 2) == 2\n    assert candidate(words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4) == 3\n\n\ncheck(Solution().vowelStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. You can rearrange the elements of nums to any order (including the given order).\nLet prefix be the array containing the prefix sums of nums after rearranging it. In other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. The score of nums is the number of positive integers in the array prefix.\nReturn the maximum score you can achieve.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, nums: List[int]) -> int:\n        nums.sort(reverse=True)\n        s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s <= 0:\n                return i\n        return len(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,-1,0,1,-3,3,-3]) == 6\n    assert candidate(nums = [-2,-3,0]) == 0\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. In one operation, you can:\n\nChoose two different indices i and j such that 0 <= i, j < nums.length.\nChoose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1.\nSubtract 2k from nums[i] and nums[j].\n\nA subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times.\nReturn the number of beautiful subarrays in the array nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulSubarrays(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def beautifulSubarrays(self, nums: List[int]) -> int:\n        cnt = Counter({0: 1})\n        ans = mask = 0\n        for x in nums:\n            mask ^= x\n            ans += cnt[mask]\n            cnt[mask] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,1,2,4]) == 2\n    assert candidate(nums = [1,10,4]) == 0\n\n\ncheck(Solution().beautifulSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\nReturn the minimum time during which the computer should be turned on to complete all tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[1])\n        vis = [0] * 2010\n        ans = 0\n        for start, end, duration in tasks:\n            duration -= sum(vis[start : end + 1])\n            i = end\n            while i >= start and duration > 0:\n                if not vis[i]:\n                    duration -= 1\n                    vis[i] = 1\n                    ans += 1\n                i -= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(tasks = [[2,3,1],[4,5,1],[1,5,2]]) == 2\n    assert candidate(tasks = [[1,3,2],[2,5,3],[5,6,2]]) == 4\n\n\ncheck(Solution().findMinimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and a positive integer k.\nWe call an index i k-big if the following conditions are satisfied:\n\nThere exist at least k different indices idx1 such that idx1 < i and nums[idx1] < nums[i].\nThere exist at least k different indices idx2 such that idx2 > i and nums[idx2] < nums[i].\n\nReturn the number of k-big indices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kBigIndices(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += x & -x\n\n    def query(self, x):\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def kBigIndices(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        tree1 = BinaryIndexedTree(n)\n        tree2 = BinaryIndexedTree(n)\n        for v in nums:\n            tree2.update(v, 1)\n        ans = 0\n        for v in nums:\n            tree2.update(v, -1)\n            ans += tree1.query(v - 1) >= k and tree2.query(v - 1) >= k\n            tree1.update(v, 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,6,5,2,3], k = 2) == 2\n    assert candidate(nums = [1,1,1], k = 3) == 0\n\n\ncheck(Solution().kBigIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n.\nLet even denote the number of even indices in the binary representation of n with value 1.\nLet odd denote the number of odd indices in the binary representation of n with value 1.\nNote that bits are indexed from right to left in the binary representation of a number.\nReturn the array [even, odd].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        ans = [0, 0]\n        i = 0\n        while n:\n            ans[i] += n & 1\n            i ^= 1\n            n >>= 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 17) == [2,0]\n    assert candidate(n = 2) == [0,1]\n\n\ncheck(Solution().evenOddBit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer value.\nIn one operation, you can add or subtract value from any element of nums.\n\nFor example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3].\n\nThe MEX (minimum excluded) of an array is the smallest missing non-negative integer in it.\n\nFor example, the MEX of [-1,2,3] is 0 while the MEX of [1,0,3] is 2.\n\nReturn the maximum MEX of nums after applying the mentioned operation any number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n```",
        "solutions": "class Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n        cnt = Counter(x % value for x in nums)\n        for i in range(len(nums) + 1):\n            if cnt[i % value] == 0:\n                return i\n            cnt[i % value] -= 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-10,7,13,6,8], value = 5) == 4\n    assert candidate(nums = [1,-10,7,13,6,8], value = 7) == 2\n\n\ncheck(Solution().findSmallestInteger)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to.\nYou have to distribute the money according to the following rules:\n\nAll money must be distributed.\nEveryone must receive at least 1 dollar.\nNobody receives 4 dollars.\n\nReturn the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distMoney(self, money: int, children: int) -> int:\n```",
        "solutions": "class Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        if money < children:\n            return -1\n        if money > 8 * children:\n            return children - 1\n        if money == 8 * children - 4:\n            return children - 2\n        # money-8x >= children-x, x <= (money-children)/7\n        return (money - children) // 7\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(money = 20, children = 3) == 1\n    assert candidate(money = 16, children = 2) == 2\n\n\ncheck(Solution().distMoney)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing.\nWe define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].\nReturn the maximum possible greatness you can achieve after permuting nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n        nums.sort()\n        i = 0\n        for x in nums:\n            i += x > nums[i]\n        return i\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,5,2,1,3,1]) == 4\n    assert candidate(nums = [1,2,3,4]) == 3\n\n\ncheck(Solution().maximizeGreatness)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = 100\n        for a in nums1:\n            for b in nums2:\n                if a == b:\n                    ans = min(ans, a)\n                else:\n                    ans = min(ans, 10 * a + b, 10 * b + a)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [4,1,3], nums2 = [5,7]) == 15\n    assert candidate(nums1 = [3,5,2,6], nums2 = [3,1,7]) == 3\n\n\ncheck(Solution().minNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars.\nThe cost of the substring is the sum of the values of each character in the substring. The cost of an empty string is considered 0.\nThe value of the character is defined in the following way:\n\nIf the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet.\n\n\t\nFor example, the value of 'a' is 1, the value of 'b' is 2, and so on. The value of 'z' is 26.\n\n\nOtherwise, assuming i is the index where the character occurs in the string chars, then its value is vals[i].\n\nReturn the maximum cost among all substrings of the string s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        ans = tot = mi = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            tot += v\n            ans = max(ans, tot - mi)\n            mi = min(mi, tot)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"adaa\", chars = \"d\", vals = [-1000]) == 2\n    assert candidate(s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]) == 0\n\n\ncheck(Solution().maximumCostSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array arr and an integer k. The array arr is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\nYou can do the following operation any number of times:\n\nPick any element from arr and increase or decrease it by 1.\n\nReturn the minimum number of operations such that the sum of each subarray of length k is equal.\nA subarray is a contiguous part of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        g = gcd(n, k)\n        ans = 0\n        for i in range(g):\n            t = sorted(arr[i:n:g])\n            mid = t[len(t) >> 1]\n            ans += sum(abs(x - mid) for x in t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,4,1,3], k = 2) == 1\n    assert candidate(arr = [2,5,5,7], k = 3) == 5\n\n\ncheck(Solution().makeSubKSumEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findShortestCycle(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findShortestCycle(self, n: int, edges: List[List[int]]) -> int:\n        def bfs(u: int, v: int) -> int:\n            dist = [inf] * n\n            dist[u] = 0\n            q = deque([u])\n            while q:\n                i = q.popleft()\n                for j in g[i]:\n                    if (i, j) != (u, v) and (j, i) != (u, v) and dist[j] == inf:\n                        dist[j] = dist[i] + 1\n                        q.append(j)\n            return dist[v] + 1\n\n        g = defaultdict(set)\n        for u, v in edges:\n            g[u].add(v)\n            g[v].add(u)\n        ans = min(bfs(u, v) for u, v in edges)\n        return ans if ans < inf else -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]) == 3\n    assert candidate(n = 4, edges = [[0,1],[0,2]]) == -1\n\n\ncheck(Solution().findShortestCycle)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given four integers minLength, maxLength, oneGroup and zeroGroup.\nA binary string is good if it satisfies the following conditions:\n\nThe length of the string is in the range [minLength, maxLength].\nThe size of each block of consecutive 1's is a multiple of oneGroup.\n\t\nFor example in a binary string 00110111100 sizes of each block of consecutive ones are [2,4].\n\n\nThe size of each block of consecutive 0's is a multiple of zeroGroup.\n\t\nFor example, in a binary string 00110111100 sizes of each block of consecutive zeros are [2,1,2].\n\n\n\nReturn the number of good binary strings. Since the answer may be too large, return it modulo 109 + 7.\nNote that 0 is considered a multiple of all the numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def goodBinaryStrings(self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int) -> int:\n```",
        "solutions": "class Solution:\n    def goodBinaryStrings(\n        self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * maxLength\n        for i in range(1, len(f)):\n            if i - oneGroup >= 0:\n                f[i] += f[i - oneGroup]\n            if i - zeroGroup >= 0:\n                f[i] += f[i - zeroGroup]\n            f[i] %= mod\n        return sum(f[minLength:]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(minLength = 2, maxLength = 3, oneGroup = 1, zeroGroup = 2) == 5\n    assert candidate(minLength = 4, maxLength = 4, oneGroup = 4, zeroGroup = 3) == 1\n\n\ncheck(Solution().goodBinaryStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.\nYou are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\nFor example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.\n\nReturn the maximum number of prizes you can win if you choose the two segments optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n        n = len(prizePositions)\n        f = [0] * (n + 1)\n        ans = 0\n        for i, x in enumerate(prizePositions, 1):\n            j = bisect_left(prizePositions, x - k)\n            ans = max(ans, f[j] + i - j)\n            f[i] = max(f[i - 1], i - j)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prizePositions = [1,1,2,2,3,3,5], k = 2) == 7\n    assert candidate(prizePositions = [1,2,3,4], k = 0) == 2\n\n\ncheck(Solution().maximizeWin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. You can apply the following operation any number of times:\n\nPick any element from nums and put it at the end of nums.\n\nThe prefix sum array of nums is an array prefix of the same length as nums such that prefix[i] is the sum of all the integers nums[j] where j is in the inclusive range [0, i].\nReturn the minimum number of operations such that the prefix sum array does not contain negative integers. The test cases are generated such that it is always possible to make the prefix sum array non-negative.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makePrefSumNonNegative(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def makePrefSumNonNegative(self, nums: List[int]) -> int:\n        h = []\n        ans = s = 0\n        for x in nums:\n            s += x\n            if x < 0:\n                heappush(h, x)\n            while s < 0:\n                s -= heappop(h)\n                ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,-5,4]) == 0\n    assert candidate(nums = [3,-5,-2,6]) == 1\n\n\ncheck(Solution().makePrefSumNonNegative)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.\n\nFor example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.\n\nReturn an integer array ans of size n where ans[i] is the width of the ith column.\nThe length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n        return [max(len(str(x)) for x in col) for col in zip(*grid)]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1],[22],[333]]) == [3]\n    assert candidate(grid = [[-15,1,3],[15,7,12],[5,6,-2]]) == [3,1,2]\n\n\ncheck(Solution().findColumnWidth)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define the conversion array conver of an array arr as follows:\n\nconver[i] = arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i.\n\nWe also define the score of an array arr as the sum of the values of the conversion array of arr.\nGiven a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPrefixScore(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findPrefixScore(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [0] * n\n        mx = 0\n        for i, x in enumerate(nums):\n            mx = max(mx, x)\n            ans[i] = x + mx + (0 if i == 0 else ans[i - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,7,5,10]) == [4,10,24,36,56]\n    assert candidate(nums = [1,1,2,4,8,16]) == [2,4,8,16,32,64]\n\n\ncheck(Solution().findPrefixScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nReturn the root of the modified tree.\nNote that the depth of a node is the number of edges in the path from the root node to it.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n```",
        "solutions": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def dfs1(root: Optional[TreeNode], depth: int):\n            if root is None:\n                return\n            if len(s) <= depth:\n                s.append(0)\n            s[depth] += root.val\n            dfs1(root.left, depth + 1)\n            dfs1(root.right, depth + 1)\n\n        def dfs2(root: Optional[TreeNode], depth: int):\n            sub = (root.left.val if root.left else 0) + (\n                root.right.val if root.right else 0\n            )\n            depth += 1\n            if root.left:\n                root.left.val = s[depth] - sub\n                dfs2(root.left, depth)\n            if root.right:\n                root.right.val = s[depth] - sub\n                dfs2(root.right, depth)\n\n        s = []\n        dfs1(root, 0)\n        root.val = 0\n        dfs2(root, 0)\n        return root\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_tree(candidate(root = tree_node([5,4,9,1,10,None,7])), tree_node([0,0,0,7,7,None,11]))\n    assert is_same_tree(candidate(root = tree_node([3,1,2])), tree_node([0,0,0]))\n\n\ncheck(Solution().replaceValueInTree)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure:\n\nFor each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1.\nThen, place those numbers on the board.\n\nReturn the number of distinct integers present on the board after 109 days have elapsed.\nNote:\n\nOnce a number is placed on the board, it will remain on it until the end.\n%\u00a0stands\u00a0for the modulo operation. For example,\u00a014 % 3 is 2.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctIntegers(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def distinctIntegers(self, n: int) -> int:\n        return max(1, n - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 4\n    assert candidate(n = 3 ) == 2\n\n\ncheck(Solution().distinctIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.\nDivide the marbles into the k bags according to the following rules:\n\nNo bag is empty.\nIf the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.\nIf a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].\n\nThe score after distributing the marbles is the sum of the costs of all the k bags.\nReturn the difference between the maximum and minimum scores among marble distributions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def putMarbles(self, weights: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def putMarbles(self, weights: List[int], k: int) -> int:\n        arr = sorted(a + b for a, b in pairwise(weights))\n        return sum(arr[len(arr) - k + 1 :]) - sum(arr[: k - 1])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(weights = [1,3,5,1], k = 2) == 4\n    assert candidate(weights = [1, 3], k = 2) == 0\n\n\ncheck(Solution().putMarbles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.\nA quadruplet (i, j, k, l) is increasing if:\n\n0 <= i < j < k < l < n, and\nnums[i] < nums[k] < nums[j] < nums[l].\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    cnt -= 1\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    cnt -= 1\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,4,5]) == 2\n    assert candidate(nums = [1,2,3,4]) == 0\n\n\ncheck(Solution().countQuadruplets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.\nThe bowling game consists of n turns, and the number of pins in each turn is exactly 10.\nAssume a player hits xi pins in the ith turn. The value of the ith turn for the player is:\n\n2xi if the player hits 10 pins in either (i - 1)th or (i - 2)th turn.\nOtherwise, it is xi.\n\nThe score of the player is the sum of the values of their n turns.\nReturn\n\n1 if the score of player 1 is more than the score of player 2,\n2 if the score of player 2 is more than the score of player 1, and\n0 in case of a draw.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isWinner(self, player1: List[int], player2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def isWinner(self, player1: List[int], player2: List[int]) -> int:\n        def f(arr: List[int]) -> int:\n            s = 0\n            for i, x in enumerate(arr):\n                k = 2 if (i and arr[i - 1] == 10) or (i > 1 and arr[i - 2] == 10) else 1\n                s += k * x\n            return s\n\n        a, b = f(player1), f(player2)\n        return 1 if a > b else (2 if b > a else 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(player1 = [4,10,7,9], player2 = [6,5,2,3]) == 1\n    assert candidate(player1 = [3,5,7,6], player2 = [8,10,10,2]) == 2\n    assert candidate(player1 = [2,3], player2 = [4,1]) == 0\n\n\ncheck(Solution().isWinner)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].\nGo through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].\nReturn the smallest index i at which either a row or a column will be completely painted in mat.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        idx = {}\n        for i in range(m):\n            for j in range(n):\n                idx[mat[i][j]] = (i, j)\n        row = [0] * m\n        col = [0] * n\n        for k in range(len(arr)):\n            i, j = idx[arr[k]]\n            row[i] += 1\n            col[j] += 1\n            if row[i] == n or col[j] == m:\n                return k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arr = [1,3,4,2], mat = [[1,4],[2,3]]) == 2\n    assert candidate(arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]) == 3\n\n\ncheck(Solution().firstCompleteIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array start where start = [startX, startY] represents your initial position (startX, startY) in a 2D space. You are also given the array target where target = [targetX, targetY] represents your target position (targetX, targetY).\nThe cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.\nThere are also some special roads. You are given a 2D array specialRoads where specialRoads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road goes in one direction from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. You can use each special road any number of times.\nReturn the minimum cost required to go from (startX, startY) to (targetX, targetY).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, start: List[int], target: List[int], specialRoads: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumCost(\n        self, start: List[int], target: List[int], specialRoads: List[List[int]]\n    ) -> int:\n        def dist(x1: int, y1: int, x2: int, y2: int) -> int:\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        q = [(0, start[0], start[1])]\n        vis = set()\n        ans = inf\n        while q:\n            d, x, y = heappop(q)\n            if (x, y) in vis:\n                continue\n            vis.add((x, y))\n            ans = min(ans, d + dist(x, y, *target))\n            for x1, y1, x2, y2, cost in specialRoads:\n                heappush(q, (d + dist(x, y, x1, y1) + cost, x2, y2))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]) == 5\n    assert candidate(start = [3,2], target = [5,7], specialRoads = [[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]) == 7\n\n\ncheck(Solution().minimumCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA string is beautiful if:\n\nIt consists of the first k letters of the English lowercase alphabet.\nIt does not contain any substring of length 2 or more which is a palindrome.\n\nYou are given a beautiful string s of length n and a positive integer k.\nReturn the lexicographically smallest string of length n, which is larger than s and is beautiful. If there is no such string, return an empty string.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.\n\nFor example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = list(s)\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                return ''.join(cs)\n        return ''\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcz\", k = 26) == \"abda\"\n    assert candidate(s = \"dc\", k = 4) == \"\"\n\n\ncheck(Solution().smallestBeautifulString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:\n\nChose two indices i and j, and swap the ith\u00a0fruit of basket1 with the jth\u00a0fruit of basket2.\nThe cost of the swap is min(basket1[i],basket2[j]).\n\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\nReturn the minimum cost to make both the baskets equal or -1 if impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, basket1: List[int], basket2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, basket1: List[int], basket2: List[int]) -> int:\n        cnt = Counter()\n        for a, b in zip(basket1, basket2):\n            cnt[a] += 1\n            cnt[b] -= 1\n        mi = min(cnt)\n        nums = []\n        for x, v in cnt.items():\n            if v % 2:\n                return -1\n            nums.extend([x] * (abs(v) // 2))\n        nums.sort()\n        m = len(nums) // 2\n        return sum(min(x, mi * 2) for x in nums[:m])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(basket1 = [4,2,2,2], basket2 = [1,4,1,2]) == 1\n    assert candidate(basket1 = [2,3,4,1], basket2 = [3,2,5,1]) == -1\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of strings words and a 2D array of integers queries.\nEach query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.\nReturn an array ans of size queries.length, where ans[i] is the answer to the ith query.\nNote that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\n        vowels = set(\"aeiou\")\n        nums = [i for i, w in enumerate(words) if w[0] in vowels and w[-1] in vowels]\n        return [bisect_right(nums, r) - bisect_left(nums, l) for l, r in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]) == [2,3,0]\n    assert candidate(words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]) == [3,2,1]\n\n\ncheck(Solution().vowelStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:\n\nChoose the pile with the maximum number of gifts.\nIf there is more than one pile with the maximum number of gifts, choose any.\nLeave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.\n\nReturn the number of gifts remaining after k seconds.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n        h = [-v for v in gifts]\n        heapify(h)\n        for _ in range(k):\n            heapreplace(h, -int(sqrt(-h[0])))\n        return -sum(h)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(gifts = [25,64,9,4,100], k = 4) == 29\n    assert candidate(gifts = [1,1,1,1], k = 4) == 4\n\n\ncheck(Solution().pickGifts)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array items where items[i] = [pricei, weighti] denotes the price and weight of the ith item, respectively.\nYou are also given a positive integer capacity.\nEach item can be divided into two items with ratios part1 and part2, where part1 + part2 == 1.\n\nThe weight of the first item is weighti * part1 and the price of the first item is pricei * part1.\nSimilarly, the weight of the second item is weighti * part2 and the price of the second item is pricei * part2.\n\nReturn the maximum total price to fill a bag of capacity capacity with given items. If it is impossible to fill a bag return -1. Answers within 10-5 of the actual answer will be considered accepted.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n```",
        "solutions": "class Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n        ans = 0\n        for p, w in sorted(items, key=lambda x: x[1] / x[0]):\n            v = min(w, capacity)\n            ans += v / w * p\n            capacity -= v\n        return -1 if capacity else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(items = [[50,1],[10,8]], capacity = 5) == 55.00000\n    assert candidate(items = [[100,30]], capacity = 50) == -1.00000\n\n\ncheck(Solution().maxPrice)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integer arrays nums and divisors.\nThe divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i].\nReturn the integer divisors[i] with the maximum divisibility score. If multiple integers have the maximum score, return the smallest one.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:\n        ans, mx = divisors[0], 0\n        for div in divisors:\n            cnt = sum(x % div == 0 for x in nums)\n            if mx < cnt:\n                mx, ans = cnt, div\n            elif mx == cnt and ans > div:\n                ans = div\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,7,9,3,9], divisors = [5,2,3]) == 3\n    assert candidate(nums = [20,14,21,10], divisors = [5,7,5]) == 5\n    assert candidate(nums = [12], divisors = [10,16]) == 10\n\n\ncheck(Solution().maxDivScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nStarting with score = 0, apply the following algorithm:\n\nChoose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.\nAdd the value of the chosen integer to score.\nMark the chosen element and its two adjacent elements if they exist.\nRepeat until all the array elements are marked.\n\nReturn the score you get after applying the above algorithm.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findScore(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        vis = [False] * n\n        q = [(x, i) for i, x in enumerate(nums)]\n        heapify(q)\n        ans = 0\n        while q:\n            x, i = heappop(q)\n            ans += x\n            vis[i] = True\n            for j in (i - 1, i + 1):\n                if 0 <= j < n:\n                    vis[j] = True\n            while q and vis[q[0][1]]:\n                heappop(q)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,3,4,5,2]) == 7\n    assert candidate(nums = [2,3,5,1,3,2]) == 5\n\n\ncheck(Solution().findScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums of positive integers and a positive integer k.\nA subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.\nReturn the number of non-empty beautiful subsets of the array nums.\nA subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulSubsets(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def beautifulSubsets(self, nums: List[int], k: int) -> int:\n        def dfs(i: int) -> None:\n            nonlocal ans\n            if i >= len(nums):\n                ans += 1\n                return\n            dfs(i + 1)\n            if cnt[nums[i] + k] == 0 and cnt[nums[i] - k] == 0:\n                cnt[nums[i]] += 1\n                dfs(i + 1)\n                cnt[nums[i]] -= 1\n\n        ans = -1\n        cnt = Counter()\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,4,6], k = 2) == 4\n    assert candidate(nums = [1], k = 1) == 1\n\n\ncheck(Solution().beautifulSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0).\nStarting from the cell (i, j), you can move to one of the following cells:\n\nCells (i, k) with j < k <= grid[i][j] + j (rightward movement), or\nCells (k, j) with i < k <= grid[i][j] + i (downward movement).\n\nReturn the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumVisitedCells(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumVisitedCells(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        dist = [[-1] * n for _ in range(m)]\n        dist[0][0] = 1\n        row = [[] for _ in range(m)]\n        col = [[] for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                while row[i] and grid[i][row[i][0][1]] + row[i][0][1] < j:\n                    heappop(row[i])\n                if row[i] and (dist[i][j] == -1 or dist[i][j] > row[i][0][0] + 1):\n                    dist[i][j] = row[i][0][0] + 1\n                while col[j] and grid[col[j][0][1]][j] + col[j][0][1] < i:\n                    heappop(col[j])\n                if col[j] and (dist[i][j] == -1 or dist[i][j] > col[j][0][0] + 1):\n                    dist[i][j] = col[j][0][0] + 1\n                if dist[i][j] != -1:\n                    heappush(row[i], (dist[i][j], j))\n                    heappush(col[j], (dist[i][j], i))\n        return dist[-1][-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]) == 4\n    assert candidate(grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]) == 3\n    assert candidate(grid = [[2,1,0],[1,0,0]]) == -1\n\n\ncheck(Solution().minimumVisitedCells)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums.\nThe concatenation of two numbers is the number formed by concatenating their numerals.\n\nFor example, the concatenation of 15, 49 is 1549.\n\nThe concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty:\n\nIf there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums.\nIf one element exists, add its value to the concatenation value of nums, then delete it.\n\nReturn the concatenation value of the nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n        ans = 0\n        i, j = 0, len(nums) - 1\n        while i < j:\n            ans += int(str(nums[i]) + str(nums[j]))\n            i, j = i + 1, j - 1\n        if i == j:\n            ans += nums[i]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [7,52,2,4]) == 596\n    assert candidate(nums = [5,14,13,8,12]) == 673\n\n\ncheck(Solution().findTheArrayConcVal)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.\nA pair (i, j) is fair if:\n\n0 <= i < j < n, and\nlower <= nums[i] + nums[j] <= upper\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n```",
        "solutions": "class Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n        nums.sort()\n        ans = 0\n        for i, x in enumerate(nums):\n            j = bisect_left(nums, lower - x, lo=i + 1)\n            k = bisect_left(nums, upper - x + 1, lo=i + 1)\n            ans += k - j\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,7,4,4,5], lower = 3, upper = 6) == 6\n    assert candidate(nums = [1,7,9,2,5], lower = 11, upper = 11) == 1\n\n\ncheck(Solution().countFairPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi].\nFor the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi.\nThe answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti.\nReturn an array ans where ans[i] = [lefti, righti] is the answer to the ith query.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        d = {}\n        n = len(s)\n        for i in range(n):\n            x = 0\n            for j in range(32):\n                if i + j >= n:\n                    break\n                x = x << 1 | int(s[i + j])\n                if x not in d:\n                    d[x] = [i, i + j]\n                if x == 0:\n                    break\n        return [d.get(first ^ second, [-1, -1]) for first, second in queries]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"101101\", queries = [[0,5],[1,2]]) == [[0,2],[2,3]]\n    assert candidate(s = \"0101\", queries = [[12,8]]) == [[-1,-1]]\n    assert candidate(s = \"1\", queries = [[4,5]]) == [[0,0]]\n\n\ncheck(Solution().substringXorQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:\n\nFor a query of type 1, queries[i]\u00a0= [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1\u00a0from index l to index r. Both l and r are 0-indexed.\nFor a query of type 2, queries[i]\u00a0= [2, p, 0]. For every index 0 <= i < n, set\u00a0nums2[i] =\u00a0nums2[i]\u00a0+ nums1[i]\u00a0* p.\nFor a query of type 3, queries[i]\u00a0= [3, 0, 0]. Find the sum of the elements in nums2.\n\nReturn an array containing all the answers to the third type\u00a0queries.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def handleQuery(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Node:\n    def __init__(self):\n        self.l = self.r = 0\n        self.s = self.lazy = 0\n\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        n = len(nums)\n        self.tr = [Node() for _ in range(n << 2)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l, self.tr[u].r = l, r\n        if l == r:\n            self.tr[u].s = self.nums[l - 1]\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n        self.pushup(u)\n\n    def modify(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            self.tr[u].lazy ^= 1\n            self.tr[u].s = self.tr[u].r - self.tr[u].l + 1 - self.tr[u].s\n            return\n        self.pushdown(u)\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if l <= mid:\n            self.modify(u << 1, l, r)\n        if r > mid:\n            self.modify(u << 1 | 1, l, r)\n        self.pushup(u)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].s\n        self.pushdown(u)\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        res = 0\n        if l <= mid:\n            res += self.query(u << 1, l, r)\n        if r > mid:\n            res += self.query(u << 1 | 1, l, r)\n        return res\n\n    def pushup(self, u):\n        self.tr[u].s = self.tr[u << 1].s + self.tr[u << 1 | 1].s\n\n    def pushdown(self, u):\n        if self.tr[u].lazy:\n            mid = (self.tr[u].l + self.tr[u].r) >> 1\n            self.tr[u << 1].s = mid - self.tr[u].l + 1 - self.tr[u << 1].s\n            self.tr[u << 1].lazy ^= 1\n            self.tr[u << 1 | 1].s = self.tr[u].r - mid - self.tr[u << 1 | 1].s\n            self.tr[u << 1 | 1].lazy ^= 1\n            self.tr[u].lazy ^= 1\n\n\nclass Solution:\n    def handleQuery(\n        self, nums1: List[int], nums2: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        tree = SegmentTree(nums1)\n        s = sum(nums2)\n        ans = []\n        for op, a, b in queries:\n            if op == 1:\n                tree.modify(1, a + 1, b + 1)\n            elif op == 2:\n                s += a * tree.query(1, 1, len(nums1))\n            else:\n                ans.append(s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]) == [3]\n    assert candidate(nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]) == [5]\n\n\ncheck(Solution().handleQuery)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer num. You know that Bob will sneakily remap one of the 10 possible digits (0 to 9) to another digit.\nReturn the difference between the maximum and minimum\u00a0values Bob can make by remapping\u00a0exactly one digit in num.\nNotes:\n\nWhen Bob remaps a digit d1\u00a0to another digit d2, Bob replaces all occurrences of d1\u00a0in num\u00a0with d2.\nBob can remap a digit to itself, in which case num\u00a0does not change.\nBob can remap different digits for obtaining minimum and maximum values respectively.\nThe resulting number after remapping can contain leading zeroes.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMaxDifference(self, num: int) -> int:\n```",
        "solutions": "class Solution:\n    def minMaxDifference(self, num: int) -> int:\n        s = str(num)\n        mi = int(s.replace(s[0], '0'))\n        for c in s:\n            if c != '9':\n                return int(s.replace(c, '9')) - mi\n        return num - mi\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 11891) == 99009\n    assert candidate(num = 90) == 99\n\n\ncheck(Solution().minMaxDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed\u00a0integer array nums.\nWe say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums.\nReturn the minimum positive non-zero integer\u00a0that is not expressible from nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minImpossibleOR(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minImpossibleOR(self, nums: List[int]) -> int:\n        s = set(nums)\n        return next(1 << i for i in range(32) if 1 << i not in s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1]) == 4\n    assert candidate(nums = [5,3,2]) == 1\n\n\ncheck(Solution().minImpossibleOR)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums.\n\nThe low score of nums is the minimum absolute difference between any two integers.\nThe high score of nums is the maximum absolute difference between any two integers.\nThe score of nums is the sum of the high and low scores.\n\nReturn the minimum score after changing two elements of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(nums[-1] - nums[2], nums[-2] - nums[1], nums[-3] - nums[0])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,4,3]) == 0\n    assert candidate(nums = [1,4,7,8,5]) == 3\n\n\ncheck(Solution().minimizeSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\n\nlcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].\n\nGiven an\u00a0n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n```",
        "solutions": "class Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n        n = len(lcp)\n        s = [\"\"] * n\n        i = 0\n        for c in ascii_lowercase:\n            while i < n and s[i]:\n                i += 1\n            if i == n:\n                break\n            for j in range(i, n):\n                if lcp[i][j]:\n                    s[j] = c\n        if \"\" in s:\n            return \"\"\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if s[i] == s[j]:\n                    if i == n - 1 or j == n - 1:\n                        if lcp[i][j] != 1:\n                            return \"\"\n                    elif lcp[i][j] != lcp[i + 1][j + 1] + 1:\n                        return \"\"\n                elif lcp[i][j]:\n                    return \"\"\n        return \"\".join(s)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]) == \"abab\"\n    assert candidate(lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]) == \"aaaa\"\n    assert candidate(lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]) == \"\"\n\n\ncheck(Solution().findTheString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer 0-indexed\u00a0array nums.\nA subset of the array nums is square-free if the product of its elements is a square-free integer.\nA square-free integer is an integer that is divisible by no square number other than 1.\nReturn the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo 109 + 7.\nA non-empty\u00a0subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(v for v in f) % mod - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,4,5]) == 3\n    assert candidate(nums = [1]) == 1\n\n\ncheck(Solution().squareFreeSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n, you can do the following operation any number of times:\n\nAdd or subtract a power of 2 from n.\n\nReturn the minimum number of operations to make n equal to 0.\nA number x is power of 2 if x == 2i\u00a0where i >= 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, n: int) -> int:\n        ans = cnt = 0\n        while n:\n            if n & 1:\n                cnt += 1\n            elif cnt:\n                ans += 1\n                cnt = 0 if cnt == 1 else 1\n            n >>= 1\n        if cnt == 1:\n            ans += 1\n        elif cnt > 1:\n            ans += 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 39) == 3\n    assert candidate(n = 54) == 3\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\nYou are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\nReturn the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        if grid[0][1] > 1 and grid[1][0] > 1:\n            return -1\n        m, n = len(grid), len(grid[0])\n        dist = [[inf] * n for _ in range(m)]\n        dist[0][0] = 0\n        q = [(0, 0, 0)]\n        dirs = (-1, 0, 1, 0, -1)\n        while 1:\n            t, i, j = heappop(q)\n            if i == m - 1 and j == n - 1:\n                return t\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    nt = t + 1\n                    if nt < grid[x][y]:\n                        nt = grid[x][y] + (grid[x][y] - nt) % 2\n                    if nt < dist[x][y]:\n                        dist[x][y] = nt\n                        heappush(q, (nt, x, y))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]) == 7\n    assert candidate(grid = [[0,2,4],[3,2,1],[1,0,4]]) == -1\n\n\ncheck(Solution().minimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums.\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\nPick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.\n\nReturn the maximum possible number of marked indices in nums using the above operation any number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        i, j = 0, (n + 1) // 2\n        ans = 0\n        while j < n:\n            while j < n and nums[i] * 2 > nums[j]:\n                j += 1\n            if j < n:\n                ans += 2\n            i, j = i + 1, j + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,5,2,4]) == 2\n    assert candidate(nums = [9,2,5,4]) == 4\n    assert candidate(nums = [7,6,8]) == 0\n\n\ncheck(Solution().maxNumOfMarkedIndices)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string word of length n\u00a0consisting of digits, and a positive integer\u00a0m.\nThe divisibility array div of word is an integer array of length n such that:\n\ndiv[i] = 1 if the\u00a0numeric value\u00a0of\u00a0word[0,...,i] is divisible by m, or\ndiv[i] = 0 otherwise.\n\nReturn the divisibility array of word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\n        ans = []\n        x = 0\n        for c in word:\n            x = (x * 10 + int(c)) % m\n            ans.append(1 if x == 0 else 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"998244353\", m = 3) == [1,1,0,0,0,1,1,0,0]\n    assert candidate(word = \"1010\", m = 10) == [0,1,0,1]\n\n\ncheck(Solution().divisibilityArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere is a bag that consists of items, each item\u00a0has a number 1, 0, or -1 written on it.\nYou are given four non-negative integers numOnes, numZeros, numNegOnes, and k.\nThe bag initially contains:\n\nnumOnes items with 1s written on them.\nnumZeroes items with 0s written on them.\nnumNegOnes items with -1s written on them.\n\nWe want to pick exactly k items among the available items. Return the maximum possible sum of numbers written on the items.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kItemsWithMaximumSum(self, numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        if numOnes >= k:\n            return k\n        if numZeros >= k - numOnes:\n            return numOnes\n        return numOnes - (k - numOnes - numZeros)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2) == 2\n    assert candidate(numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4) == 3\n\n\ncheck(Solution().kItemsWithMaximumSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n.\nYou can perform the following operation as many times as you want:\n\nPick an index i that you haven\u2019t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].\n\nReturn true if you can make nums a strictly increasing array using the above operation and false otherwise.\nA strictly increasing array is an array whose each element is strictly greater than its preceding element.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def primeSubOperation(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def primeSubOperation(self, nums: List[int]) -> bool:\n        p = []\n        for i in range(2, max(nums)):\n            for j in p:\n                if i % j == 0:\n                    break\n            else:\n                p.append(i)\n\n        n = len(nums)\n        for i in range(n - 2, -1, -1):\n            if nums[i] < nums[i + 1]:\n                continue\n            j = bisect_right(p, nums[i] - nums[i + 1])\n            if j == len(p) or p[j] >= nums[i]:\n                return False\n            nums[i] -= p[j]\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,9,6,10]) == True\n    assert candidate(nums = [6,8,11,12]) == True\n    assert candidate(nums = [5,8,3]) == False\n\n\ncheck(Solution().primeSubOperation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given\u00a0an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.\nInitially, you choose to start at any vertex in\u00a0the tree.\u00a0Then, you can perform\u00a0the following operations any number of times:\u00a0\n\nCollect all the coins that are at a distance of at most 2 from the current vertex, or\nMove to any adjacent vertex in the tree.\n\nFind the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.\nNote that if you pass an edge several times, you need to count it into the answer several times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:\n        g = defaultdict(set)\n        for a, b in edges:\n            g[a].add(b)\n            g[b].add(a)\n        n = len(coins)\n        q = deque(i for i in range(n) if len(g[i]) == 1 and coins[i] == 0)\n        while q:\n            i = q.popleft()\n            for j in g[i]:\n                g[j].remove(i)\n                if coins[j] == 0 and len(g[j]) == 1:\n                    q.append(j)\n            g[i].clear()\n        for k in range(2):\n            q = [i for i in range(n) if len(g[i]) == 1]\n            for i in q:\n                for j in g[i]:\n                    g[j].remove(i)\n                g[i].clear()\n        return sum(len(g[a]) > 0 and len(g[b]) > 0 for a, b in edges) * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]) == 2\n    assert candidate(coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]) == 2\n\n\ncheck(Solution().collectTheCoins)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2 of the same length. A pair of indices (i,j) is called beautiful if|nums1[i] - nums1[j]| + |nums2[i] - nums2[j]| is the smallest amongst all possible indices pairs where i < j.\nReturn the beautiful pair. In the case that there are multiple beautiful pairs, return the lexicographically smallest pair.\nNote that\n\n|x| denotes the absolute value of x.\nA pair of indices (i1, j1) is lexicographically smaller than (i2, j2) if i1 < i2 or i1 == i2 and j1 < j2.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulPair(self, nums1: List[int], nums2: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def beautifulPair(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        def dist(x1: int, y1: int, x2: int, y2: int) -> int:\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        def dfs(l: int, r: int):\n            if l >= r:\n                return inf, -1, -1\n            m = (l + r) >> 1\n            x = points[m][0]\n            d1, pi1, pj1 = dfs(l, m)\n            d2, pi2, pj2 = dfs(m + 1, r)\n            if d1 > d2 or (d1 == d2 and (pi1 > pi2 or (pi1 == pi2 and pj1 > pj2))):\n                d1, pi1, pj1 = d2, pi2, pj2\n            t = [p for p in points[l : r + 1] if abs(p[0] - x) <= d1]\n            t.sort(key=lambda x: x[1])\n            for i in range(len(t)):\n                for j in range(i + 1, len(t)):\n                    if t[j][1] - t[i][1] > d1:\n                        break\n                    pi, pj = sorted([t[i][2], t[j][2]])\n                    d = dist(t[i][0], t[i][1], t[j][0], t[j][1])\n                    if d < d1 or (d == d1 and (pi < pi1 or (pi == pi1 and pj < pj1))):\n                        d1, pi1, pj1 = d, pi, pj\n            return d1, pi1, pj1\n\n        pl = defaultdict(list)\n        for i, (x, y) in enumerate(zip(nums1, nums2)):\n            pl[(x, y)].append(i)\n        points = []\n        for i, (x, y) in enumerate(zip(nums1, nums2)):\n            if len(pl[(x, y)]) > 1:\n                return [i, pl[(x, y)][1]]\n            points.append((x, y, i))\n        points.sort()\n        _, pi, pj = dfs(0, len(points) - 1)\n        return [pi, pj]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3,2,4], nums2 = [2,3,1,2,3]) == [0,3]\n    assert candidate(nums1 = [1,2,4,3,2,5], nums2 = [1,4,2,3,5,1]) == [1,4]\n\n\ncheck(Solution().beautifulPair)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. There exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. If there is no such j, set arr[i] to be 0.\nReturn the array arr.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distance(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def distance(self, nums: List[int]) -> List[int]:\n        d = defaultdict(list)\n        for i, x in enumerate(nums):\n            d[x].append(i)\n        ans = [0] * len(nums)\n        for idx in d.values():\n            left, right = 0, sum(idx) - len(idx) * idx[0]\n            for i in range(len(idx)):\n                ans[idx[i]] = left + right\n                if i + 1 < len(idx):\n                    left += (idx[i + 1] - idx[i]) * (i + 1)\n                    right -= (idx[i + 1] - idx[i]) * (len(idx) - i - 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,1,1,2]) == [5,0,3,4,0]\n    assert candidate(nums = [0,5,3]) == [0,0,0]\n\n\ncheck(Solution().distance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed two-dimensional integer array nums.\nReturn the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0.\nNote that:\n\nAn integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself.\nAn integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.\n\n\nIn the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def diagonalPrime(self, nums: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def diagonalPrime(self, nums: List[List[int]]) -> int:\n        def is_prime(x: int) -> bool:\n            if x < 2:\n                return False\n            return all(x % i for i in range(2, int(sqrt(x)) + 1))\n\n        n = len(nums)\n        ans = 0\n        for i, row in enumerate(nums):\n            if is_prime(row[i]):\n                ans = max(ans, row[i])\n            if is_prime(row[n - i - 1]):\n                ans = max(ans, row[n - i - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[1,2,3],[5,6,7],[9,10,11]]) == 11\n    assert candidate(nums = [[1,2,3],[5,17,7],[9,11,10]]) == 17\n\n\ncheck(Solution().diagonalPrime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary string s consisting only of zeroes and ones.\nA substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\nReturn the length of the longest balanced substring of s.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findTheLongestBalancedSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def findTheLongestBalancedSubstring(self, s: str) -> int:\n        def check(i, j):\n            cnt = 0\n            for k in range(i, j + 1):\n                if s[k] == '1':\n                    cnt += 1\n                elif cnt:\n                    return False\n            return cnt * 2 == (j - i + 1)\n\n        n = len(s)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if check(i, j):\n                    ans = max(ans, j - i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"01000111\") == 6\n    assert candidate(s = \"00111\") == 4\n    assert candidate(s = \"111\") == 0\n\n\ncheck(Solution().findTheLongestBalancedSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse.\nA point of the cheese with index i (0-indexed) is:\n\nreward1[i] if the first mouse eats it.\nreward2[i] if the second mouse eats it.\n\nYou are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k.\nReturn the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def miceAndCheese(self, reward1: List[int], reward2: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def miceAndCheese(self, reward1: List[int], reward2: List[int], k: int) -> int:\n        n = len(reward1)\n        idx = sorted(range(n), key=lambda i: reward1[i] - reward2[i], reverse=True)\n        return sum(reward1[i] for i in idx[:k]) + sum(reward2[i] for i in idx[k:])\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2) == 15\n    assert candidate(reward1 = [1,1], reward2 = [1,1], k = 2) == 2\n\n\ncheck(Solution().miceAndCheese)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n and an integer p representing an array arr of length n where all elements are set to 0's, except position p which is set to 1. You are also given an integer array banned containing restricted positions. Perform the following operation on arr:\n\nReverse a subarray with size k if the single 1 is not set to a position in banned.\n\nReturn an integer array answer with n results where the ith result is the minimum number of operations needed to bring the single 1 to position i in arr, or -1 if it is impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n```",
        "solutions": "from sortedcontainers import SortedSet\n\n\nclass Solution:\n    def minReverseOperations(\n        self, n: int, p: int, banned: List[int], k: int\n    ) -> List[int]:\n        ans = [-1] * n\n        ans[p] = 0\n        ts = [SortedSet() for _ in range(2)]\n        for i in range(n):\n            ts[i % 2].add(i)\n        ts[p % 2].remove(p)\n        for i in banned:\n            ts[i % 2].remove(i)\n        ts[0].add(n)\n        ts[1].add(n)\n        q = deque([p])\n        while q:\n            i = q.popleft()\n            mi = max(i - k + 1, k - i - 1)\n            mx = min(i + k - 1, n * 2 - k - i - 1)\n            s = ts[mi % 2]\n            j = s.bisect_left(mi)\n            while s[j] <= mx:\n                q.append(s[j])\n                ans[s[j]] = ans[i] + 1\n                s.remove(s[j])\n                j = s.bisect_left(mi)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, p = 0, banned = [1,2], k = 4) == [0,-1,-1,1]\n    assert candidate(n = 5, p = 0, banned = [2,4], k = 3) == [0,-1,-1,-1,-1]\n    assert candidate(n = 4, p = 2, banned = [0,1,3], k = 1) == [-1,-1,0,-1]\n\n\ncheck(Solution().minReverseOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:\n\nThe first ten characters consist of the phone number of passengers.\nThe next character denotes the gender of the person.\nThe following two characters are used to indicate the age of the person.\nThe last two characters determine the seat allotted to that person.\n\nReturn the number of passengers who are strictly more than 60 years old.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSeniors(self, details: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def countSeniors(self, details: List[str]) -> int:\n        return sum(int(x[11:13]) > 60 for x in details)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]) == 2\n    assert candidate(details = [\"1313579440F2036\",\"2921522980M5644\"]) == 0\n\n\ncheck(Solution().countSeniors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\n\nFrom each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\nIdentify the highest number amongst all those removed in step 1. Add that number to your score.\n\nReturn the final score.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n        for row in nums:\n            row.sort()\n        return sum(map(max, zip(*nums)))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]) == 15\n    assert candidate(nums = [[1]]) == 1\n\n\ncheck(Solution().matrixSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and two integers x and y. In one operation, you must choose an index i such that 0 <= i < nums.length and perform the following:\n\nDecrement nums[i] by x.\nDecrement values by y at all indices except the ith one.\n\nReturn the minimum number of operations to make all the integers in nums less than or equal to zero.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], x: int, y: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int], x: int, y: int) -> int:\n        def check(t: int) -> bool:\n            cnt = 0\n            for v in nums:\n                if v > t * y:\n                    cnt += ceil((v - t * y) / (x - y))\n            return cnt <= t\n\n        l, r = 0, max(nums)\n        while l < r:\n            mid = (l + r) >> 1\n            if check(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,1,7,6], x = 4, y = 2) == 3\n    assert candidate(nums = [1,2,1], x = 2, y = 1) == 1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of length n and an integer k. In an operation, you can choose an element and multiply it by 2.\nReturn the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times.\nNote that a | b denotes the bitwise or between two integers a and b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        suf = [0] * (n + 1)\n        for i in range(n - 1, -1, -1):\n            suf[i] = suf[i + 1] | nums[i]\n        ans = pre = 0\n        for i, x in enumerate(nums):\n            ans = max(ans, pre | (x << k) | suf[i + 1])\n            pre |= x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [12,9], k = 1) == 30\n    assert candidate(nums = [8,1,2], k = 2) == 35\n\n\ncheck(Solution().maximumOr)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string word to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid.\nA string is called valid if it can be formed by concatenating the string \"abc\" several times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addMinimum(self, word: str) -> int:\n```",
        "solutions": "class Solution:\n    def addMinimum(self, word: str) -> int:\n        s = 'abc'\n        ans, n = 0, len(word)\n        i = j = 0\n        while j < n:\n            if word[j] != s[i]:\n                ans += 1\n            else:\n                j += 1\n            i = (i + 1) % 3\n        if word[-1] != 'c':\n            ans += 1 if word[-1] == 'b' else 2\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"b\") == 2\n    assert candidate(word = \"aaa\") == 6\n    assert candidate(word = \"abc\") == 0\n\n\ncheck(Solution().addMinimum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.\nIn case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.\nReturn an array containing the index of the row, and the number of ones in it.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n        ans = [0, 0]\n        for i, row in enumerate(mat):\n            cnt = row.count(1)\n            if ans[1] < cnt:\n                ans = [i, cnt]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[0,1],[1,0]]) == [0,1]\n    assert candidate(mat = [[0,0,0],[0,1,1]]) == [1,2]\n    assert candidate(mat = [[0,0],[1,1],[0,0]]) == [1,2]\n\n\ncheck(Solution().rowAndMaximumOnes)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums,\u00a0which contains distinct elements and an integer k.\nA subset is called a k-Free subset if it contains no two elements with an absolute difference equal to k. Notice that the empty set is a k-Free subset.\nReturn the number of k-Free subsets of nums.\nA subset of an array is a selection of elements (possibly none) of the array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTheNumOfKFreeSubsets(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countTheNumOfKFreeSubsets(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        g = defaultdict(list)\n        for x in nums:\n            g[x % k].append(x)\n        ans = 1\n        for arr in g.values():\n            m = len(arr)\n            f = [0] * (m + 1)\n            f[0] = 1\n            f[1] = 2\n            for i in range(2, m + 1):\n                if arr[i - 1] - arr[i - 2] == k:\n                    f[i] = f[i - 1] + f[i - 2]\n                else:\n                    f[i] = f[i - 1] * 2\n            ans *= f[m]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,4,6], k = 1) == 5\n    assert candidate(nums = [2,3,5,8], k = 5) == 12\n    assert candidate(nums = [10,5,9,11], k = 20) == 16\n\n\ncheck(Solution().countTheNumOfKFreeSubsets)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nEach node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\nThe price sum of a given path is the sum of the prices of all nodes lying on that path.\nAdditionally, you are given a 2D integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like.\nBefore performing your first trip, you can choose some non-adjacent nodes and halve the prices.\nReturn the minimum total price sum to perform all the given trips.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTotalPrice(self, n: int, edges: List[List[int]], price: List[int], trips: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTotalPrice(\n        self, n: int, edges: List[List[int]], price: List[int], trips: List[List[int]]\n    ) -> int:\n        def dfs(i: int, fa: int, k: int) -> bool:\n            cnt[i] += 1\n            if i == k:\n                return True\n            ok = any(j != fa and dfs(j, i, k) for j in g[i])\n            if not ok:\n                cnt[i] -= 1\n            return ok\n\n        def dfs2(i: int, fa: int) -> (int, int):\n            a = cnt[i] * price[i]\n            b = a // 2\n            for j in g[i]:\n                if j != fa:\n                    x, y = dfs2(j, i)\n                    a += min(x, y)\n                    b += x\n            return a, b\n\n        g = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        cnt = Counter()\n        for start, end in trips:\n            dfs(start, -1, end)\n        return min(dfs2(0, -1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]) == 23\n    assert candidate(n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]) == 1\n\n\ncheck(Solution().minimumTotalPrice)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer arrivalTime denoting the arrival time of a train in hours, and another positive integer delayedTime denoting the amount of delay in hours.\nReturn the time when the train will arrive at the station.\nNote that the time in this problem is in 24-hours format.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findDelayedArrivalTime(self, arrivalTime: int, delayedTime: int) -> int:\n```",
        "solutions": "class Solution:\n    def findDelayedArrivalTime(self, arrivalTime: int, delayedTime: int) -> int:\n        return (arrivalTime + delayedTime) % 24\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(arrivalTime = 15, delayedTime = 5 ) == 20 \n    assert candidate(arrivalTime = 13, delayedTime = 11) == 0\n\n\ncheck(Solution().findDelayedArrivalTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an integer array nums containing n integers, find the beauty of each subarray of size k.\nThe beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.\nReturn an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.\n\n\nA subarray is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:\n        def f(x: int) -> int:\n            s = 0\n            for i in range(50):\n                s += cnt[i]\n                if s >= x:\n                    return i - 50\n            return 0\n\n        cnt = [0] * 101\n        for v in nums[:k]:\n            cnt[v + 50] += 1\n        ans = [f(x)]\n        for i in range(k, len(nums)):\n            cnt[nums[i] + 50] += 1\n            cnt[nums[i - k] + 50] -= 1\n            ans.append(f(x))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,-1,-3,-2,3], k = 3, x = 2) == [-1,-2,-2]\n    assert candidate(nums = [-1,-2,-3,-4,-5], k = 2, x = 2) == [-1,-2,-3,-4]\n    assert candidate(nums = [-3,1,2,-3,0,-3], k = 2, x = 1) == [-3,0,-3,-3,-3]\n\n\ncheck(Solution().getSubarrayBeauty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfMultiples(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfMultiples(self, n: int) -> int:\n        return sum(x for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0 or x % 7 == 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7) == 21\n    assert candidate(n = 10) == 40\n    assert candidate(n = 9) == 30\n\n\ncheck(Solution().sumOfMultiples)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed\u00a0array nums consisiting of positive integers. You can do the following operation on the array any number of times:\n\nSelect an index i such that 0 <= i < n - 1 and replace either of\u00a0nums[i] or nums[i+1] with their gcd value.\n\nReturn the minimum number of operations to make all elements of nums equal to 1. If it is impossible, return -1.\nThe gcd of two integers is the greatest common divisor of the two integers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        n = len(nums)\n        cnt = nums.count(1)\n        if cnt:\n            return n - cnt\n        mi = n + 1\n        for i in range(n):\n            g = 0\n            for j in range(i, n):\n                g = gcd(g, nums[j])\n                if g == 1:\n                    mi = min(mi, j - i + 1)\n        return -1 if mi > n else n - 1 + mi - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,6,3,4]) == 4\n    assert candidate(nums = [2,10,6,14]) == -1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b].\nReturn the maximum strength of a group the teacher can create.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        ans = -inf\n        for i in range(1, 1 << len(nums)):\n            t = 1\n            for j, x in enumerate(nums):\n                if i >> j & 1:\n                    t *= x\n            ans = max(ans, t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,-1,-5,2,5,-9]) == 1350\n    assert candidate(nums = [-4,-5,-4]) == 20\n\n\ncheck(Solution().maxStrength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minExtraChar(self, s: str, dictionary: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def minExtraChar(self, s: str, dictionary: List[str]) -> int:\n        ss = set(dictionary)\n        n = len(s)\n        f = [0] * (n + 1)\n        for i in range(1, n + 1):\n            f[i] = f[i - 1] + 1\n            for j in range(i):\n                if s[j:i] in ss and f[j] < f[i]:\n                    f[i] = f[j]\n        return f[n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]) == 1\n    assert candidate(s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]) == 3\n\n\ncheck(Solution().minExtraChar)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money.\nYou must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\nReturn the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def buyChoco(self, prices: List[int], money: int) -> int:\n```",
        "solutions": "class Solution:\n    def buyChoco(self, prices: List[int], money: int) -> int:\n        prices.sort()\n        cost = prices[0] + prices[1]\n        return money if money < cost else money - cost\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(prices = [1,2,2], money = 3) == 0\n    assert candidate(prices = [3,2,3], money = 3) == 3\n\n\ncheck(Solution().buyChoco)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:\n\nA land cell if grid[r][c] = 0, or\nA water cell containing grid[r][c] fish, if grid[r][c] > 0.\n\nA fisher can start at any water cell (r, c) and can do the following operations any number of times:\n\nCatch all the fish at cell (r, c), or\nMove to any adjacent water cell.\n\nReturn the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.\nAn adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaxFish(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def findMaxFish(self, grid: List[List[int]]) -> int:\n        def dfs(i: int, j: int) -> int:\n            cnt = grid[i][j]\n            grid[i][j] = 0\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and grid[x][y]:\n                    cnt += dfs(x, y)\n            return cnt\n\n        m, n = len(grid), len(grid[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    ans = max(ans, dfs(i, j))\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]) == 7\n    assert candidate(grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]) == 1\n\n\ncheck(Solution().findMaxFish)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:\n\nIf the first element has the smallest value, remove it\nOtherwise, put the first element at the end of the array.\n\nReturn an integer denoting the number of operations it takes to make nums empty.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n        pos = {x: i for i, x in enumerate(nums)}\n        nums.sort()\n        sl = SortedList()\n        ans = pos[nums[0]] + 1\n        n = len(nums)\n        for k, (a, b) in enumerate(pairwise(nums)):\n            i, j = pos[a], pos[b]\n            d = j - i - sl.bisect(j) + sl.bisect(i)\n            ans += d + (n - k) * int(i > j)\n            sl.add(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,4,-1]) == 5\n    assert candidate(nums = [1,2,4,3]) == 5\n    assert candidate(nums = [1,2,3]) == 3\n\n\ncheck(Solution().countOperationsToEmptyArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer permutations A and B of length n.\nA prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.\nReturn the prefix common array of A and B.\nA sequence of n integers is called a\u00a0permutation if it contains all integers from 1 to n exactly once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:\n        ans = []\n        cnt1 = Counter()\n        cnt2 = Counter()\n        for a, b in zip(A, B):\n            cnt1[a] += 1\n            cnt2[b] += 1\n            t = sum(min(v, cnt2[x]) for x, v in cnt1.items())\n            ans.append(t)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(A = [1,3,2,4], B = [3,1,2,4]) == [0,2,3,4]\n    assert candidate(A = [2,3,1], B = [3,1,2]) == [0,1,3]\n\n\ncheck(Solution().findThePrefixCommonArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:\n\nSelect an element m from nums.\nRemove the selected element m from the array.\nAdd a new element with a value of m + 1 to the array.\nIncrease your score by m.\n\nReturn the maximum score you can achieve after performing the operation exactly k times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        x = max(nums)\n        return k * x + k * (k - 1) // 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5], k = 3) == 18\n    assert candidate(nums = [5,5,5], k = 2) == 11\n\n\ncheck(Solution().maximizeSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums of length n.\nThe distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].\nReturn the distinct difference array of nums.\nNote that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distinctDifferenceArray(self, nums: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def distinctDifferenceArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        suf = [0] * (n + 1)\n        s = set()\n        for i in range(n - 1, -1, -1):\n            s.add(nums[i])\n            suf[i] = len(s)\n        s.clear()\n        ans = [0] * n\n        for i, x in enumerate(nums):\n            s.add(x)\n            ans[i] = len(s) - suf[i + 1]\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4,5]) == [-3,-1,1,3,5]\n    assert candidate(nums = [3,2,3,4,2]) == [-2,-1,0,2,3]\n\n\ncheck(Solution().distinctDifferenceArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n representing an array colors of length n where all elements are set to 0's meaning uncolored. You are also given a 2D integer array queries where queries[i] = [indexi, colori]. For the ith query:\n\nSet colors[indexi] to colori.\nCount adjacent pairs in colors set to the same color (regardless of colori).\n\nReturn an array answer of the same length as queries where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n        nums = [0] * n\n        ans = [0] * len(queries)\n        x = 0\n        for k, (i, c) in enumerate(queries):\n            if i > 0 and nums[i] and nums[i - 1] == nums[i]:\n                x -= 1\n            if i < n - 1 and nums[i] and nums[i + 1] == nums[i]:\n                x -= 1\n            if i > 0 and nums[i - 1] == c:\n                x += 1\n            if i < n - 1 and nums[i + 1] == c:\n                x += 1\n            ans[k] = x\n            nums[i] = c\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]) == [0,1,1,0,2]\n    assert candidate(n = 1, queries = [[0,100000]]) == [0]\n\n\ncheck(Solution().colorTheArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.\nEach node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times.\nReturn the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.\nNote:\n\nA perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.\nThe cost of a path is the sum of costs of nodes in the path.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minIncrements(self, n: int, cost: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minIncrements(self, n: int, cost: List[int]) -> int:\n        ans = 0\n        for i in range(n >> 1, 0, -1):\n            l, r = i << 1, i << 1 | 1\n            ans += abs(cost[l - 1] - cost[r - 1])\n            cost[i - 1] += max(cost[l - 1], cost[r - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 7, cost = [1,5,2,2,3,3,1]) == 6\n    assert candidate(n = 3, cost = [5,3,3]) == 0\n\n\ncheck(Solution().minIncrements)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums representing the strength of some heroes. The power of a group of heroes is defined as follows:\n\nLet i0, i1, ... ,ik be the indices of the heroes in a group. Then, the power of this group is max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik]).\n\nReturn the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        nums.sort()\n        ans = 0\n        p = 0\n        for x in nums[::-1]:\n            ans = (ans + (x * x % mod) * x) % mod\n            ans = (ans + x * p) % mod\n            p = (p * 2 + x * x) % mod\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,4]) == 141\n    assert candidate(nums = [1,1,1]) == 7\n\n\ncheck(Solution().sumOfPower)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed permutation of n integers nums.\nA permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:\n\nPick two adjacent elements in nums, then swap them.\n\nReturn the minimum number of operations to make nums a semi-ordered permutation.\nA permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -> int:\n        n = len(nums)\n        i = nums.index(1)\n        j = nums.index(n)\n        k = 1 if i < j else 2\n        return i + n - j - k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,4,3]) == 2\n    assert candidate(nums = [2,4,1,3]) == 3\n    assert candidate(nums = [1,3,4,2,5]) == 0\n\n\ncheck(Solution().semiOrderedPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a digit string s that consists of digits from 0 to 9.\nA string is called semi-repetitive if there is at most one adjacent pair of the same digit. For example, \"0010\", \"002020\", \"0123\", \"2002\", and \"54944\" are semi-repetitive while the following are not: \"00101022\" (adjacent same digit pairs are 00 and 22), and \"1101234883\" (adjacent same digit pairs are 11 and 88).\nReturn the length of the longest semi-repetitive substring of s.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n        ans, n = 1, len(s)\n        cnt = j = 0\n        for i in range(1, n):\n            cnt += s[i] == s[i - 1]\n            while cnt > 1:\n                cnt -= s[j] == s[j + 1]\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"52233\") == 4\n    assert candidate(s = \"5494\") == 4\n    assert candidate(s = \"1111111\") == 2\n\n\ncheck(Solution().longestSemiRepetitiveSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nSome robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array nums and will start moving once given the command to move. The robots will move a unit distance each second.\nYou are given a string s denoting the direction in which robots will move on command. 'L' means the robot will move towards the left side or negative side of the number line, whereas 'R' means the robot will move towards the right side or positive side of the number line.\nIf two robots collide, they will start moving in opposite directions.\nReturn the sum of distances between all the\u00a0pairs of robots d seconds after\u00a0the command. Since the sum can be very large, return it modulo 109 + 7.\nNote: \n\nFor two robots at the index i and j, pair (i,j) and pair (j,i) are considered the same pair.\nWhen robots collide, they instantly change their directions without wasting any time.\nCollision happens\u00a0when two robots share the same place in a\u00a0moment.\n\t\nFor example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.\nFor example,\u00a0if a robot is positioned in 0 going to the right and another is positioned in 1\u00a0going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n```",
        "solutions": "class Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n        mod = 10**9 + 7\n        for i, c in enumerate(s):\n            nums[i] += d if c == \"R\" else -d\n        nums.sort()\n        ans = s = 0\n        for i, x in enumerate(nums):\n            ans += i * x - s\n            s += x\n        return ans % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-2,0,2], s = \"RLL\", d = 3) == 8\n    assert candidate(nums = [1,0], s = \"RL\", d = 2) == 5\n\n\ncheck(Solution().sumDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n1st friend receives the ball.\n\nAfter that, 1st friend passes it to the friend who is k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth.\n\nIn other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction.\nThe game is finished when some friend receives the ball for the second time.\nThe losers of the game are friends who did not receive the ball in the entire game.\nGiven the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def circularGameLosers(self, n: int, k: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def circularGameLosers(self, n: int, k: int) -> List[int]:\n        vis = [False] * n\n        i, p = 0, 1\n        while not vis[i]:\n            vis[i] = True\n            i = (i + p * k) % n\n            p += 1\n        return [i + 1 for i in range(n) if not vis[i]]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, k = 2) == [4,5]\n    assert candidate(n = 4, k = 4) == [2,3,4]\n\n\ncheck(Solution().circularGameLosers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA 0-indexed array derived with length n is derived by computing the bitwise XOR\u00a0(\u2295) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\n\nIf i = n - 1, then derived[i] = original[i] \u2295 original[0].\nOtherwise, derived[i] = original[i] \u2295 original[i + 1].\n\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\n\nA binary array is an array containing only 0's and 1's\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def doesValidArrayExist(self, derived: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def doesValidArrayExist(self, derived: List[int]) -> bool:\n        return reduce(xor, derived) == 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(derived = [1,1,0]) == True\n    assert candidate(derived = [1,1]) == True\n    assert candidate(derived = [1,0]) == False\n\n\ncheck(Solution().doesValidArrayExist)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.\nReturn the number of complete connected components of the graph.\nA connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.\nA connected component is said to be complete if there exists an edge between every pair of its vertices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCompleteComponents(self, n: int, edges: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def countCompleteComponents(self, n: int, edges: List[List[int]]) -> int:\n        def dfs(i: int) -> (int, int):\n            vis[i] = True\n            x, y = 1, len(g[i])\n            for j in g[i]:\n                if not vis[j]:\n                    a, b = dfs(j)\n                    x += a\n                    y += b\n            return x, y\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = [False] * n\n        ans = 0\n        for i in range(n):\n            if not vis[i]:\n                a, b = dfs(i)\n                ans += a * (a - 1) == b\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]) == 3\n    assert candidate(n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]) == 1\n\n\ncheck(Solution().countCompleteComponents)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n matrix grid consisting of positive integers.\nYou can start at any cell in the first column of the matrix, and traverse the grid in the following way:\n\nFrom a cell (row, col), you can move to any of the cells: (row - 1, col + 1), (row, col + 1) and (row + 1, col + 1) such that the value of the cell you move to, should be strictly bigger than the value of the current cell.\n\nReturn the maximum number of moves that you can perform.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxMoves(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxMoves(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        q = set(range(m))\n        for j in range(n - 1):\n            t = set()\n            for i in q:\n                for k in range(i - 1, i + 2):\n                    if 0 <= k < m and grid[i][j] < grid[k][j + 1]:\n                        t.add(k)\n            if not t:\n                return j\n            q = t\n        return n - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]) == 3\n    assert candidate(grid = [[3,2,4],[2,1,9],[1,1,7]]) == 0\n\n\ncheck(Solution().maxMoves)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of uppercase English letters.\nYou can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s.\nReturn the minimum possible length of the resulting string that you can obtain.\nNote that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minLength(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minLength(self, s: str) -> int:\n        stk = [\"\"]\n        for c in s:\n            if (c == \"B\" and stk[-1] == \"A\") or (c == \"D\" and stk[-1] == \"C\"):\n                stk.pop()\n            else:\n                stk.append(c)\n        return len(stk) - 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"ABFCACDB\") == 2\n    assert candidate(s = \"ACBBD\") == 5\n\n\ncheck(Solution().minLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 2D grid of size m x n, you should find the matrix answer of size m x n.\nThe cell answer[r][c] is calculated by looking at the diagonal values of the cell grid[r][c]:\n\nLet leftAbove[r][c] be the number of distinct values on the diagonal to the left and above the cell grid[r][c] not including the cell grid[r][c] itself.\nLet rightBelow[r][c] be the number of distinct values on the diagonal to the right and below the cell grid[r][c], not including the cell grid[r][c] itself.\nThen answer[r][c] = |leftAbove[r][c] - rightBelow[r][c]|.\n\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached.\n\nFor example, in the below diagram the diagonal is highlighted using the cell with indices (2, 3) colored gray:\n\n\t\nRed-colored cells are left and above the cell.\nBlue-colored cells are right and below the cell.\n\n\n\n\nReturn the matrix answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                x, y = i, j\n                s = set()\n                while x and y:\n                    x, y = x - 1, y - 1\n                    s.add(grid[x][y])\n                tl = len(s)\n                x, y = i, j\n                s = set()\n                while x + 1 < m and y + 1 < n:\n                    x, y = x + 1, y + 1\n                    s.add(grid[x][y])\n                br = len(s)\n                ans[i][j] = abs(tl - br)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2,3],[3,1,5],[3,2,1]]) == [[1,1,0],[1,0,1],[0,1,1]]\n    assert candidate(grid = [[1]]) == [[0]]\n\n\ncheck(Solution().differenceOfDistinctValues)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\n1 <= i <= n\nThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def punishmentNumber(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def punishmentNumber(self, n: int) -> int:\n        def check(s: str, i: int, x: int) -> bool:\n            m = len(s)\n            if i >= m:\n                return x == 0\n            y = 0\n            for j in range(i, m):\n                y = y * 10 + int(s[j])\n                if y > x:\n                    break\n                if check(s, j + 1, x - y):\n                    return True\n            return False\n\n        ans = 0\n        for i in range(1, n + 1):\n            x = i * i\n            if check(str(x), 0, i):\n                ans += x\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == 182\n    assert candidate(n = 37) == 1478\n\n\ncheck(Solution().punishmentNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i\u00a0is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0i\u00a0is of ith type.\nIn one operation, you can do the following with an incurred cost of x:\n\nSimultaneously change the chocolate of ith type to ((i + 1) mod n)th type for all chocolates.\n\nReturn the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n```",
        "solutions": "class Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(n)]\n        for i, v in enumerate(nums):\n            f[i][0] = v\n            for j in range(1, n):\n                f[i][j] = min(f[i][j - 1], nums[(i - j) % n])\n        return min(sum(f[i][j] for i in range(n)) + x * j for j in range(n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [20,1,15], x = 5) == 13\n    assert candidate(nums = [1,2,3], x = 4) == 6\n\n\ncheck(Solution().minCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers,\u00a0n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n        s, i = 0, 1\n        vis = set()\n        for _ in range(n):\n            while i in vis:\n                i += 1\n            vis.add(i)\n            vis.add(k - i)\n            s += i\n        return s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, k = 4) == 18\n    assert candidate(n = 2, k = 6) == 3\n\n\ncheck(Solution().minimumSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two integers, num and t. A number is achievable if it can become equal to num after applying the following operation:\n\nIncrease or decrease the number by 1, and simultaneously increase or decrease num by 1.\n\nReturn the maximum achievable number after applying the operation at most t times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n```",
        "solutions": "class Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n        return num + t * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = 4, t = 1) == 6\n    assert candidate(num = 3, t = 2) == 7\n\n\ncheck(Solution().theMaximumAchievableX)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given\u00a0an integer n\u00a0which is the length of a 0-indexed array nums, and a 0-indexed 2D-array ranges, which is a list of sub-ranges of nums\u00a0(sub-ranges may overlap).\nEach row ranges[i] has exactly 2 cells:\n\nranges[i][0], which shows the start of the ith range (inclusive)\nranges[i][1], which shows the end of the ith range (inclusive)\n\nThese ranges cover some cells of nums\u00a0and leave\u00a0some cells uncovered. Your task is to find all of the uncovered ranges with maximal length.\nReturn a 2D-array answer of the uncovered ranges, sorted by the starting point in ascending order.\nBy all of the\u00a0uncovered ranges with maximal length, we mean satisfying two conditions:\n\nEach uncovered cell should belong to exactly one sub-range\nThere should not exist\u00a0two ranges (l1, r1) and (l2, r2) such that r1 + 1 = l2\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximalUncoveredRanges(self, n: int, ranges: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findMaximalUncoveredRanges(\n        self, n: int, ranges: List[List[int]]\n    ) -> List[List[int]]:\n        ranges.sort()\n        last = -1\n        ans = []\n        for l, r in ranges:\n            if last + 1 < l:\n                ans.append([last + 1, l - 1])\n            last = max(last, r)\n        if last + 1 < n:\n            ans.append([last + 1, n - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10, ranges = [[3,5],[7,8]]) == [[0,2],[6,6],[9,9]]\n    assert candidate(n = 3, ranges = [[0,2]]) == []\n    assert candidate(n = 7, ranges = [[2,4],[0,3]]) == [[5,6]]\n\n\ncheck(Solution().findMaximalUncoveredRanges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n        cs = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            cs[i] = cs[j] = min(cs[i], cs[j])\n            i, j = i + 1, j - 1\n        return \"\".join(cs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"egcfe\") == \"efcfe\"\n    assert candidate(s = \"abcd\") == \"abba\"\n    assert candidate(s = \"seven\") == \"neven\"\n\n\ncheck(Solution().makeSmallestPalindrome)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed binary string s of length n on which you can apply two types of operations:\n\nChoose an index i and invert all characters from\u00a0index 0 to index i\u00a0(both inclusive), with a cost of i + 1\nChoose an index i and invert all characters\u00a0from\u00a0index i to index n - 1\u00a0(both inclusive), with a cost of n - i\n\nReturn the minimum cost to make all characters of the string equal.\nInvert a character means\u00a0if its value is '0' it becomes '1' and vice-versa.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimumCost(self, s: str) -> int:\n        ans, n = 0, len(s)\n        for i in range(1, n):\n            if s[i] != s[i - 1]:\n                ans += min(i, n - i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"0011\") == 2\n    assert candidate(s = \"010101\") == 9\n\n\ncheck(Solution().minimumCost)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 1-indexed\u00a0m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        g = defaultdict(list)\n        for i in range(m):\n            for j in range(n):\n                g[mat[i][j]].append((i, j))\n        rowMax = [0] * m\n        colMax = [0] * n\n        ans = 0\n        for _, pos in sorted(g.items()):\n            mx = []\n            for i, j in pos:\n                mx.append(1 + max(rowMax[i], colMax[j]))\n                ans = max(ans, mx[-1])\n            for k, (i, j) in enumerate(pos):\n                rowMax[i] = max(rowMax[i], mx[k])\n                colMax[j] = max(colMax[j], mx[k])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mat = [[3,1],[3,4]]) == 2\n    assert candidate(mat = [[1,1],[1,1]]) == 1\n    assert candidate(mat = [[3,1,6],[-9,5,7]]) == 4\n\n\ncheck(Solution().maxIncreasingCells)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a positive integer num represented as a string, return the integer num without trailing zeros as a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeTrailingZeros(self, num: str) -> str:\n```",
        "solutions": "class Solution:\n    def removeTrailingZeros(self, num: str) -> str:\n        return num.rstrip(\"0\")\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(num = \"51230100\") == \"512301\"\n    assert candidate(num = \"123\") == \"123\"\n\n\ncheck(Solution().removeTrailingZeros)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n that consists of exactly 3 digits.\nWe call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's:\n\nConcatenate n with the numbers 2 * n and 3 * n.\n\nReturn true if n is fascinating, or false otherwise.\nConcatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isFascinating(self, n: int) -> bool:\n```",
        "solutions": "class Solution:\n    def isFascinating(self, n: int) -> bool:\n        s = str(n) + str(2 * n) + str(3 * n)\n        return \"\".join(sorted(s)) == \"123456789\"\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 192) == True\n    assert candidate(n = 100) == False\n\n\ncheck(Solution().isFascinating)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s, you have two types of operation:\n\nChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if exists).\nChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the right of i (if exists).\n\nYour task is to minimize the length of s by performing the above operations zero or more times.\nReturn an integer denoting the length of the minimized string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimizedStringLength(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def minimizedStringLength(self, s: str) -> int:\n        return len(set(s))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"aaabc\") == 3\n    assert candidate(s = \"cbbd\") == 3\n    assert candidate(s = \"dddaaa\") == 2\n\n\ncheck(Solution().minimizedStringLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed m x n binary matrix grid.\nLet us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset.\nMore formally, if the length of the chosen subset of rows is k, then the sum of each column should be at most floor(k / 2).\nReturn an integer array that contains row indices of a good subset sorted in ascending order.\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\nA subset of rows of the matrix grid is any matrix that can be obtained by deleting some (possibly none or all) rows from grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n        g = {}\n        for i, row in enumerate(grid):\n            mask = 0\n            for j, x in enumerate(row):\n                mask |= x << j\n            if mask == 0:\n                return [i]\n            g[mask] = i\n        for a, i in g.items():\n            for b, j in g.items():\n                if (a & b) == 0:\n                    return sorted([i, j])\n        return []\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]) == [0,1]\n    assert candidate(grid = [[0]]) == [0]\n    assert candidate(grid = [[1,1,1],[1,1,1]]) == []\n\n\ncheck(Solution().goodSubsetofBinaryMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor.\nYour task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j.\nReturn true if it is possible to traverse between all such pairs of indices, or false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n\nmx = 100010\np = defaultdict(list)\nfor x in range(1, mx + 1):\n    v = x\n    i = 2\n    while i <= v // i:\n        if v % i == 0:\n            p[x].append(i)\n            while v % i == 0:\n                v //= i\n        i += 1\n    if v > 1:\n        p[x].append(v)\n\n\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n        n = len(nums)\n        m = max(nums)\n        uf = UnionFind(n + m + 1)\n        for i, x in enumerate(nums):\n            for j in p[x]:\n                uf.union(i, j + n)\n        return len(set(uf.find(i) for i in range(n))) == 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,6]) == True\n    assert candidate(nums = [3,9,5]) == False\n    assert candidate(nums = [4,3,12,8]) == True\n\n\ncheck(Solution().canTraverseAllPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s consisting of lowercase English letters. Perform the following operation:\n\nSelect any non-empty substring then replace every letter of the substring with the preceding letter of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\nReturn the lexicographically smallest string after performing the operation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def smallestString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"cbabc\") == \"baabc\"\n    assert candidate(s = \"acbbc\") == \"abaab\"\n    assert candidate(s = \"leetcode\") == \"kddsbncd\"\n\n\ncheck(Solution().smallestString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. A pair of indices i, j where 0 <=\u00a0i < j < nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime.\nReturn the total number of beautiful pairs in nums.\nTwo integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBeautifulPairs(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countBeautifulPairs(self, nums: List[int]) -> int:\n        cnt = [0] * 10\n        ans = 0\n        for x in nums:\n            for y in range(10):\n                if cnt[y] and gcd(x % 10, y) == 1:\n                    ans += cnt[y]\n            cnt[int(str(x)[0])] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,5,1,4]) == 5\n    assert candidate(nums = [11,21,12]) == 2\n\n\ncheck(Solution().countBeautifulPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer k.\nA subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\nReturn the length of the longest possible equal subarray after deleting at most k elements from nums.\nA subarray is a contiguous, possibly empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        l = 0\n        mx = 0\n        for r, x in enumerate(nums):\n            cnt[x] += 1\n            mx = max(mx, cnt[x])\n            if r - l + 1 - mx > k:\n                cnt[nums[l]] -= 1\n                l += 1\n        return mx\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,3,1,3], k = 3) == 3\n    assert candidate(nums = [1,1,2,2,1,1], k = 2) == 4\n\n\ncheck(Solution().longestEqualSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.\nYou are also given an integer x and a 0-indexed integer array queries.\nReturn a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].\nNote that the time intervals are inclusive.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countServers(\n        self, n: int, logs: List[List[int]], x: int, queries: List[int]\n    ) -> List[int]:\n        cnt = Counter()\n        logs.sort(key=lambda x: x[1])\n        ans = [0] * len(queries)\n        j = k = 0\n        for r, i in sorted(zip(queries, count())):\n            l = r - x\n            while k < len(logs) and logs[k][1] <= r:\n                cnt[logs[k][0]] += 1\n                k += 1\n            while j < len(logs) and logs[j][1] < l:\n                cnt[logs[j][0]] -= 1\n                if cnt[logs[j][0]] == 0:\n                    cnt.pop(logs[j][0])\n                j += 1\n            ans[i] = n - len(cnt)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]) == [1,2]\n    assert candidate(n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]) == [0,1]\n\n\ncheck(Solution().countServers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n\nWe call a position occupied if there is at least one marble in that position.\nThere may be multiple marbles in a single position.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def relocateMarbles(\n        self, nums: List[int], moveFrom: List[int], moveTo: List[int]\n    ) -> List[int]:\n        pos = set(nums)\n        for f, t in zip(moveFrom, moveTo):\n            pos.remove(f)\n            pos.add(t)\n        return sorted(pos)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]) == [5,6,8,9]\n    assert candidate(nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]) == [2]\n\n\ncheck(Solution().relocateMarbles)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n and a 0-indexed\u00a02D array queries where queries[i] = [typei, indexi, vali].\nInitially, there is a 0-indexed n x n matrix filled with 0's. For each query, you must apply one of the following changes:\n\nif typei == 0, set the values in the row with indexi to vali, overwriting any previous values.\nif typei == 1, set the values in the column with indexi to vali, overwriting any previous values.\n\nReturn the sum of integers in the matrix after all queries are applied.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:\n        row = set()\n        col = set()\n        ans = 0\n        for t, i, v in queries[::-1]:\n            if t == 0:\n                if i not in row:\n                    ans += v * (n - len(col))\n                    row.add(i)\n            else:\n                if i not in col:\n                    ans += v * (n - len(row))\n                    col.add(i)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]) == 23\n    assert candidate(n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]) == 17\n\n\ncheck(Solution().matrixSumQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi].\nFor the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n```",
        "solutions": "class BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [-1] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], v)\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        mx = -1\n        while x:\n            mx = max(mx, self.c[x])\n            x -= x & -x\n        return mx\n\n\nclass Solution:\n    def maximumSumQueries(\n        self, nums1: List[int], nums2: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        nums = sorted(zip(nums1, nums2), key=lambda x: -x[0])\n        nums2.sort()\n        n, m = len(nums1), len(queries)\n        ans = [-1] * m\n        j = 0\n        tree = BinaryIndexedTree(n)\n        for i in sorted(range(m), key=lambda i: -queries[i][0]):\n            x, y = queries[i]\n            while j < n and nums[j][0] >= x:\n                k = n - bisect_left(nums2, nums[j][1])\n                tree.update(k, nums[j][0] + nums[j][1])\n                j += 1\n            k = n - bisect_left(nums2, y)\n            ans[i] = tree.query(k)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]) == [6,10,7]\n    assert candidate(nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]) == [9,9,9]\n    assert candidate(nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]) == [-1]\n\n\ncheck(Solution().maximumSumQueries)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n        n = len(nums)\n        return sum(x * x for i, x in enumerate(nums, 1) if n % i == 0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,3,4]) == 21\n    assert candidate(nums = [2,7,1,19,18,3]) == 63\n\n\ncheck(Solution().sumOfSquares)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer array nums.\nPartition nums into two arrays,\u00a0nums1 and nums2, such that:\n\nEach element of the array nums belongs to either the array nums1 or the array nums2.\nBoth arrays are non-empty.\nThe value of the partition is minimized.\n\nThe value of the partition is |max(nums1) - min(nums2)|.\nHere, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.\nReturn the integer denoting the value of such partition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(b - a for a, b in pairwise(nums))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,2,4]) == 1\n    assert candidate(nums = [100,1,10]) == 9\n\n\ncheck(Solution().findValueOfPartition)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n 1-indexed robots, each having a position on a line, health, and movement direction.\nYou are given 0-indexed integer arrays positions, healths, and a string directions (directions[i] is either 'L' for left or 'R' for right). All integers in positions are unique.\nAll robots start moving on the line simultaneously at the same speed in their given directions. If two robots ever share the same position while moving, they will collide.\nIf two robots collide, the robot with lower health is removed from the line, and the health of the other robot decreases by one. The surviving robot continues in the same direction it was going. If both robots have the same health, they are both removed from the line.\nYour task is to determine the health of the robots that survive the collisions, in the same order that the robots were given, i.e. final health of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array.\nReturn an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur.\nNote: The positions may be unsorted.\n\u00a0\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def survivedRobotsHealths(self, positions: List[int], healths: List[int], directions: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def survivedRobotsHealths(\n        self, positions: List[int], healths: List[int], directions: str\n    ) -> List[int]:\n        n = len(positions)\n        indices = list(range(n))\n        stack = []\n\n        indices.sort(key=lambda i: positions[i])\n\n        for currentIndex in indices:\n            if directions[currentIndex] == \"R\":\n                stack.append(currentIndex)\n            else:\n                while stack and healths[currentIndex] > 0:\n                    topIndex = stack.pop()\n\n                    if healths[topIndex] > healths[currentIndex]:\n                        healths[topIndex] -= 1\n                        healths[currentIndex] = 0\n                        stack.append(topIndex)\n                    elif healths[topIndex] < healths[currentIndex]:\n                        healths[currentIndex] -= 1\n                        healths[topIndex] = 0\n                    else:\n                        healths[currentIndex] = 0\n                        healths[topIndex] = 0\n\n        result = [health for health in healths if health > 0]\n        return result\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = \"RRRRR\") == [2,17,9,15,10]\n    assert candidate(positions = [3,5,2,6], healths = [10,10,15,12], directions = \"RLRL\") == [14]\n    assert candidate(positions = [1,2,5,6], healths = [10,10,11,11], directions = \"RLRL\") == []\n\n\ncheck(Solution().survivedRobotsHealths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array words consisting of distinct strings.\nThe string words[i] can be paired with the string words[j] if:\n\nThe string words[i] is equal to the reversed string of words[j].\n0 <= i < j < words.length.\n\nReturn the maximum number of pairs that can be formed from the array words.\nNote that\u00a0each string can belong in\u00a0at most one pair.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumNumberOfStringPairs(self, words: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def maximumNumberOfStringPairs(self, words: List[str]) -> int:\n        cnt = Counter()\n        ans = 0\n        for w in words:\n            ans += cnt[w[::-1]]\n            cnt[w] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]) == 2\n    assert candidate(words = [\"ab\",\"ba\",\"cc\"]) == 1\n    assert candidate(words = [\"aa\",\"ab\"]) == 0\n\n\ncheck(Solution().maximumNumberOfStringPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a\u00a00-indexed\u00a0integer array\u00a0nums\u00a0containing\u00a0n\u00a0distinct positive integers. A permutation of\u00a0nums\u00a0is called special if:\n\nFor all indexes\u00a00 <= i < n - 1, either\u00a0nums[i] % nums[i+1] == 0\u00a0or\u00a0nums[i+1] % nums[i] == 0.\n\nReturn\u00a0the total number of special permutations.\u00a0As the answer could be large, return it\u00a0modulo\u00a0109\u00a0+ 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def specialPerm(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def specialPerm(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        m = 1 << n\n        f = [[0] * n for _ in range(m)]\n        for i in range(1, m):\n            for j, x in enumerate(nums):\n                if i >> j & 1:\n                    ii = i ^ (1 << j)\n                    if ii == 0:\n                        f[i][j] = 1\n                        continue\n                    for k, y in enumerate(nums):\n                        if x % y == 0 or y % x == 0:\n                            f[i][j] = (f[i][j] + f[ii][k]) % mod\n        return sum(f[-1]) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,6]) == 2\n    assert candidate(nums = [1,4,3]) == 2\n\n\ncheck(Solution().specialPerm)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\n\n0 <= i < n - 1, and\nsarr[i+1] - sarr[i] > 1\n\nHere, sorted(arr) is the function that returns the sorted version of arr.\nGiven a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            sl = SortedList()\n            cnt = 0\n            for j in range(i, n):\n                k = sl.bisect_left(nums[j])\n                h = k - 1\n                if h >= 0 and nums[j] - sl[h] > 1:\n                    cnt += 1\n                if k < len(sl) and sl[k] - nums[j] > 1:\n                    cnt += 1\n                if h >= 0 and k < len(sl) and sl[k] - sl[h] > 1:\n                    cnt -= 1\n                sl.add(nums[j])\n                ans += cnt\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,1,4]) == 3\n    assert candidate(nums = [1,3,3,3,5]) == 8\n\n\ncheck(Solution().sumImbalanceNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given three integers x, y, and z.\nYou have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring.\nReturn the maximum possible length of the new string.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n        if x < y:\n            return (x * 2 + z + 1) * 2\n        if x > y:\n            return (y * 2 + z + 1) * 2\n        return (x + y + z) * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(x = 2, y = 5, z = 1) == 12\n    assert candidate(x = 3, y = 2, z = 2) == 14\n\n\ncheck(Solution().longestString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\n\nThe number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.\n\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -> int:\n        cnt = len(set(nums))\n        ans, n = 0, len(nums)\n        for i in range(n):\n            s = set()\n            for x in nums[i:]:\n                s.add(x)\n                if len(s) == cnt:\n                    ans += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,3,1,2,2]) == 4\n    assert candidate(nums = [5,5,5,5]) == 10\n\n\ncheck(Solution().countCompleteSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters.\nThe truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank.\nReturn the maximum distance which can be traveled.\nNote: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n```",
        "solutions": "class Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n        ans = cur = 0\n        while mainTank:\n            cur += 1\n            ans += 10\n            mainTank -= 1\n            if cur % 5 == 0 and additionalTank:\n                additionalTank -= 1\n                mainTank += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(mainTank = 5, additionalTank = 10) == 60\n    assert candidate(mainTank = 1, additionalTank = 2) == 10\n\n\ncheck(Solution().distanceTraveled)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n which is the number of nodes of a 0-indexed undirected weighted connected graph and a 0-indexed 2D array edges where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi.\nYou are also given two\u00a0nodes s and d, and a positive integer k, your task is to find the shortest path from s to d, but you can hop over at most k edges. In other words,\u00a0make the weight of at most k edges 0 and then find the shortest path from s to d.\nReturn the length of the shortest path from s to d with the given condition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestPathWithHops(self, n: int, edges: List[List[int]], s: int, d: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def shortestPathWithHops(\n        self, n: int, edges: List[List[int]], s: int, d: int, k: int\n    ) -> int:\n        g = [[] for _ in range(n)]\n        for u, v, w in edges:\n            g[u].append((v, w))\n            g[v].append((u, w))\n        dist = [[inf] * (k + 1) for _ in range(n)]\n        dist[s][0] = 0\n        pq = [(0, s, 0)]\n        while pq:\n            dis, u, t = heappop(pq)\n            for v, w in g[u]:\n                if t + 1 <= k and dist[v][t + 1] > dis:\n                    dist[v][t + 1] = dis\n                    heappush(pq, (dis, v, t + 1))\n                if dist[v][t] > dis + w:\n                    dist[v][t] = dis + w\n                    heappush(pq, (dis + w, v, t))\n        return int(min(dist[d]))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[0,1,4],[0,2,2],[2,3,6]], s = 1, d = 3, k = 2) == 2\n    assert candidate(n = 7, edges = [[3,1,9],[3,2,4],[4,0,9],[0,5,6],[3,6,2],[6,0,4],[1,2,4]], s = 4, d = 1, k = 2) == 6\n    assert candidate(n = 5, edges = [[0,4,2],[0,1,3],[0,2,1],[2,1,4],[1,3,4],[3,4,7]], s = 2, d = 3, k = 1) == 3\n\n\ncheck(Solution().shortestPathWithHops)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer threshold.\nFind the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions:\n\nnums[l] % 2 == 0\nFor all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2\nFor all indices i in the range [l, r], nums[i] <= threshold\n\nReturn an integer denoting the length of the longest such subarray.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n```",
        "solutions": "class Solution:\n    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n        ans, n = 0, len(nums)\n        for l in range(n):\n            if nums[l] % 2 == 0 and nums[l] <= threshold:\n                r = l + 1\n                while r < n and nums[r] % 2 != nums[r - 1] % 2 and nums[r] <= threshold:\n                    r += 1\n                ans = max(ans, r - l)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,5,4], threshold = 5) == 3\n    assert candidate(nums = [1,2], threshold = 2) == 1\n    assert candidate(nums = [2,3,4,5], threshold = 4) == 3\n\n\ncheck(Solution().longestAlternatingSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a binary array nums.\nA subarray of an array is good if it contains exactly one element with the value 1.\nReturn an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        ans, j = 1, -1\n        for i, x in enumerate(nums):\n            if x == 0:\n                continue\n            if j > -1:\n                ans = ans * (i - j) % mod\n            j = i\n        return 0 if j == -1 else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0,1,0,0,1]) == 3\n    assert candidate(nums = [0,1,0]) == 1\n\n\ncheck(Solution().numberOfGoodSubarraySplits)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\n\nLet i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.\n\nReturn the total number of continuous subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def continuousSubarrays(self, nums: List[int]) -> int:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def continuousSubarrays(self, nums: List[int]) -> int:\n        ans = i = 0\n        sl = SortedList()\n        for x in nums:\n            sl.add(x)\n            while sl[-1] - sl[0] > 2:\n                sl.remove(nums[i])\n                i += 1\n            ans += len(sl)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [5,4,2,4]) == 8\n    assert candidate(nums = [1,2,3]) == 6\n\n\ncheck(Solution().continuousSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2 of length n.\nLet's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i].\nYour task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally.\nReturn an integer representing the length of the longest non-decreasing subarray in nums3.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        f = g = 1\n        ans = 1\n        for i in range(1, n):\n            ff = gg = 1\n            if nums1[i] >= nums1[i - 1]:\n                ff = max(ff, f + 1)\n            if nums1[i] >= nums2[i - 1]:\n                ff = max(ff, g + 1)\n            if nums2[i] >= nums1[i - 1]:\n                gg = max(gg, f + 1)\n            if nums2[i] >= nums2[i - 1]:\n                gg = max(gg, g + 1)\n            f, g = ff, gg\n            ans = max(ans, f, g)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [2,3,1], nums2 = [1,2,1]) == 2\n    assert candidate(nums1 = [1,3,2,1], nums2 = [2,2,3,4]) == 4\n    assert candidate(nums1 = [1,1], nums2 = [2,2]) == 2\n\n\ncheck(Solution().maxNonDecreasingLength)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\n\nm is greater than 1.\ns1 = s0 + 1.\nThe 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.\n\nReturn the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n        ans, n = -1, len(nums)\n        for i in range(n):\n            k = 1\n            j = i\n            while j + 1 < n and nums[j + 1] - nums[j] == k:\n                j += 1\n                k *= -1\n            if j - i + 1 > 1:\n                ans = max(ans, j - i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,4,3,4]) == 4\n    assert candidate(nums = [4,5,6]) == 2\n\n\ncheck(Solution().alternatingSubarray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.\nReturn the head of the linked list after doubling it.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        def reverse(head):\n            dummy = ListNode()\n            cur = head\n            while cur:\n                next = cur.next\n                cur.next = dummy.next\n                dummy.next = cur\n                cur = next\n            return dummy.next\n\n        head = reverse(head)\n        dummy = cur = ListNode()\n        mul, carry = 2, 0\n        while head:\n            x = head.val * mul + carry\n            carry = x // 10\n            cur.next = ListNode(x % 10)\n            cur = cur.next\n            head = head.next\n        if carry:\n            cur.next = ListNode(carry)\n        return reverse(dummy.next)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([1,8,9])), list_node([3,7,8]))\n    assert is_same_list(candidate(head = list_node([9,9,9])), list_node([1,9,9,8]))\n\n\ncheck(Solution().doubleIt)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums consisting of positive integers.\nYou can do the following operation on the array any number of times:\n\nChoose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array.\n\nReturn the value of the largest element that you can possibly obtain in the final array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] <= nums[i + 1]:\n                nums[i] += nums[i + 1]\n        return max(nums)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,7,9,3]) == 21\n    assert candidate(nums = [5,3,3]) == 11\n\n\ncheck(Solution().maxArrayValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n. We say that two integers x and y form a prime number pair if:\n\n1 <= x <= y <= n\nx + y == n\nx and y are prime numbers\n\nReturn the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.\nNote: A prime number is a natural number greater than 1 with only two factors, itself and 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPrimePairs(self, n: int) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def findPrimePairs(self, n: int) -> List[List[int]]:\n        primes = [True] * n\n        for i in range(2, n):\n            if primes[i]:\n                for j in range(i + i, n, i):\n                    primes[j] = False\n        ans = []\n        for x in range(2, n // 2 + 1):\n            y = n - x\n            if primes[x] and primes[y]:\n                ans.append([x, y])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 10) == [[3,7],[5,5]]\n    assert candidate(n = 2) == []\n\n\ncheck(Solution().findPrimePairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThere are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n        return sum(x >= target for x in hours)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(hours = [0,1,2,3,4], target = 2) == 3\n    assert candidate(hours = [5,1,4,2,2], target = 6) == 0\n\n\ncheck(Solution().numberOfEmployeesWhoMetTarget)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings.\nIf there are multiple such strings, return the lexicographically smallest one.\nReturn a string denoting the answer to the problem.\nNotes\n\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nA substring is a contiguous sequence of characters within a string.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n```",
        "solutions": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        def f(s: str, t: str) -> str:\n            if s in t:\n                return t\n            if t in s:\n                return s\n            m, n = len(s), len(t)\n            for i in range(min(m, n), 0, -1):\n                if s[-i:] == t[:i]:\n                    return s + t[i:]\n            return s + t\n\n        ans = \"\"\n        for a, b, c in permutations((a, b, c)):\n            s = f(f(a, b), c)\n            if ans == \"\" or len(s) < len(ans) or (len(s) == len(ans) and s < ans):\n                ans = s\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = \"abc\", b = \"bca\", c = \"aaa\") == \"aaabca\"\n    assert candidate(a = \"ab\", b = \"ba\", c = \"aba\") == \"aba\"\n\n\ncheck(Solution().minimumString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\n\nChoose any subarray of size k from the array and decrease all its elements by 1.\n\nReturn true if you can make all the array elements equal to 0, or false otherwise.\nA subarray is a contiguous non-empty part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkArray(self, nums: List[int], k: int) -> bool:\n```",
        "solutions": "class Solution:\n    def checkArray(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        d = [0] * (n + 1)\n        s = 0\n        for i, x in enumerate(nums):\n            s += d[i]\n            x += s\n            if x == 0:\n                continue\n            if x < 0 or i + k > n:\n                return False\n            s -= x\n            d[i + k] += x\n        return True\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,2,3,1,1,0], k = 3) == True\n    assert candidate(nums = [1,3,1,1], k = 2) == False\n\n\ncheck(Solution().checkArray)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome\u00a0are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\nChoose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\nFor a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc.\nThe string is considered a semi-palindrome if each of these groups forms a palindrome.\n\nConsider the string \"abcabc\":\n\nThe length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3.\nFor d = 1: The entire string \"abcabc\" forms one group. Not a palindrome.\nFor d = 2:\n\t\nGroup 1 (positions 1, 3, 5): \"acb\"\nGroup 2 (positions 2, 4, 6): \"bac\"\nNeither group forms a palindrome.\n\n\nFor d = 3:\n\t\nGroup 1 (positions 1, 4): \"aa\"\nGroup 2 (positions 2, 5): \"bb\"\nGroup 3 (positions 3, 6): \"cc\"\nAll groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        g = [[inf] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                m = j - i + 1\n                for d in range(1, m):\n                    if m % d == 0:\n                        cnt = 0\n                        for l in range(m):\n                            r = (m // d - 1 - l // d) * d + l % d\n                            if l >= r:\n                                break\n                            if s[i - 1 + l] != s[i - 1 + r]:\n                                cnt += 1\n                        g[i][j] = min(g[i][j], cnt)\n\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i - 1):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h + 1][i])\n        return f[n][k]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcac\", k = 2) == 1\n    assert candidate(s = \"abcdef\", k = 2) == 2\n    assert candidate(s = \"aabbaa\", k = 3) == 0\n\n\ncheck(Solution().minimumChanges)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a positive integer n which is the number of nodes of a 0-indexed directed weighted graph and a 0-indexed 2D array edges where edges[i] = [ui, vi, wi] indicates that there is an edge from node ui to node vi with weight wi.\nYou are also given a node s and a node array marked; your task is to find the minimum distance from s to any of the nodes in marked.\nReturn an integer denoting the minimum distance from s to any node in marked or -1 if there are no paths from s to any of the marked nodes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDistance(self, n: int, edges: List[List[int]], s: int, marked: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumDistance(\n        self, n: int, edges: List[List[int]], s: int, marked: List[int]\n    ) -> int:\n        g = [[inf] * n for _ in range(n)]\n        for u, v, w in edges:\n            g[u][v] = min(g[u][v], w)\n        dist = [inf] * n\n        vis = [False] * n\n        dist[s] = 0\n        for _ in range(n):\n            t = -1\n            for j in range(n):\n                if not vis[j] and (t == -1 or dist[t] > dist[j]):\n                    t = j\n            vis[t] = True\n            for j in range(n):\n                dist[j] = min(dist[j], dist[t] + g[t][j])\n        ans = min(dist[i] for i in marked)\n        return -1 if ans >= inf else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 4, edges = [[0,1,1],[1,2,3],[2,3,2],[0,3,4]], s = 0, marked = [2,3]) == 4\n    assert candidate(n = 5, edges = [[0,1,2],[0,2,4],[1,3,1],[2,3,3],[3,4,2]], s = 1, marked = [0,4]) == 3\n    assert candidate(n = 4, edges = [[0,1,1],[1,2,3],[2,3,2]], s = 3, marked = [0,1]) == -1\n\n\ncheck(Solution().minimumDistance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words and a character separator, split each string in words by separator.\nReturn an array of strings containing the new strings formed after the splits, excluding empty strings.\nNotes\n\nseparator is used to determine where the split should occur, but it is not included as part of the resulting strings.\nA split may result in more than two strings.\nThe resulting strings must maintain the same order as they were initially given.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n        return [s for w in words for s in w.split(separator) if s]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\") == [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]\n    assert candidate(words = [\"$easy$\",\"$problem$\"], separator = \"$\") == [\"easy\",\"problem\"]\n    assert candidate(words = [\"|||\"], separator = \"|\") == []\n\n\ncheck(Solution().splitWordsBySeparator)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n```",
        "solutions": "class Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n        s = set(forbidden)\n        ans = i = 0\n        for j in range(len(word)):\n            for k in range(j, max(j - 10, i - 1), -1):\n                if word[k : j + 1] in s:\n                    i = k + 1\n                    break\n            ans = max(ans, j - i + 1)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]) == 4\n    assert candidate(word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]) == 4\n\n\ncheck(Solution().longestValidSubstring)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYour laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected.\nYou are given a 0-indexed string s, and you type each character of s using your faulty keyboard.\nReturn the final string that will be present on your laptop screen.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def finalString(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def finalString(self, s: str) -> str:\n        t = []\n        for c in s:\n            if c == \"i\":\n                t = t[::-1]\n            else:\n                t.append(c)\n        return \"\".join(t)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"string\") == \"rtsng\"\n    assert candidate(s = \"poiinter\") == \"ponter\"\n\n\ncheck(Solution().finalString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed string s, permute s to get a new string t such that:\n\nAll consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].\nThe vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].\n\nReturn the resulting string.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortVowels(self, s: str) -> str:\n```",
        "solutions": "class Solution:\n    def sortVowels(self, s: str) -> str:\n        vs = [c for c in s if c.lower() in \"aeiou\"]\n        vs.sort()\n        cs = list(s)\n        j = 0\n        for i, c in enumerate(cs):\n            if c.lower() in \"aeiou\":\n                cs[i] = vs[j]\n                j += 1\n        return \"\".join(cs)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"lEetcOde\") == \"lEOtcede\"\n    assert candidate(s = \"lYmpH\") == \"lYmpH\"\n\n\ncheck(Solution().sortVowels)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nAn element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element.\nYou are given a 0-indexed integer array nums of length n with one dominant element.\nYou can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if:\n\n0 <= i < n - 1\nnums[0, ..., i], and nums[i + 1, ..., n - 1] have the same dominant element.\n\nHere, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray.\nReturn the minimum index of a valid split. If no valid split exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n        x, cnt = Counter(nums).most_common(1)[0]\n        cur = 0\n        for i, v in enumerate(nums, 1):\n            if v == x:\n                cur += 1\n                if cur * 2 > i and (cnt - cur) * 2 > len(nums) - i:\n                    return i - 1\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,2,2]) == 2\n    assert candidate(nums = [2,1,3,1,1,1,7,1,2,1]) == 4\n    assert candidate(nums = [3,3,3,3,7,2,2]) == -1\n\n\ncheck(Solution().minimumIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two integers m and n representing the dimensions of a\u00a00-indexed\u00a0m x n grid.\nYou are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\nA block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\nReturn a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBlackBlocks(self, m: int, n: int, coordinates: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def countBlackBlocks(\n        self, m: int, n: int, coordinates: List[List[int]]\n    ) -> List[int]:\n        cnt = Counter()\n        for x, y in coordinates:\n            for a, b in pairwise((0, 0, -1, -1, 0)):\n                i, j = x + a, y + b\n                if 0 <= i < m - 1 and 0 <= j < n - 1:\n                    cnt[(i, j)] += 1\n        ans = [0] * 5\n        for x in cnt.values():\n            ans[x] += 1\n        ans[0] = (m - 1) * (n - 1) - len(cnt.values())\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(m = 3, n = 3, coordinates = [[0,0]]) == [3,1,0,0,0]\n    assert candidate(m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]) == [0,2,2,0,0]\n\n\ncheck(Solution().countBlackBlocks)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string s consisting only of lowercase English letters. We call a substring special if it contains no character which has occurred at least twice (in other words, it does not contain a repeating character). Your task is to count the number of special substrings. For example, in the string \"pop\", the substring \"po\" is a special substring, however, \"pop\" is not special (since 'p' has occurred twice).\nReturn the number of special substrings.\nA substring is a contiguous sequence of characters within a string. For example, \"abc\" is a substring of \"abcd\", but \"acd\" is not.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSpecialSubstrings(self, s: str) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfSpecialSubstrings(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while cnt[c] > 1:\n                cnt[s[j]] -= 1\n                j += 1\n            ans += i - j + 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcd\") == 10\n    assert candidate(s = \"ooo\") == 3\n    assert candidate(s = \"abab\") == 7\n\n\ncheck(Solution().numberOfSpecialSubstrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums and a non-negative integer k.\nIn one operation, you can do the following:\n\nChoose an index i that hasn't been chosen before from the range [0, nums.length - 1].\nReplace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].\n\nThe beauty of the array is the length of the longest subsequence consisting of equal elements.\nReturn the maximum possible beauty of the array nums after applying the operation any number of times.\nNote that you can apply the operation to each index only once.\nA\u00a0subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n        m = max(nums) + k * 2 + 2\n        d = [0] * m\n        for x in nums:\n            d[x] += 1\n            d[x + k * 2 + 1] -= 1\n        ans = s = 0\n        for x in d:\n            s += x\n            ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,6,1,2], k = 2) == 3\n    assert candidate(nums = [1,1,1,1], k = 10) == 4\n\n\ncheck(Solution().maximumBeauty)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isGood(self, nums: List[int]) -> bool:\n```",
        "solutions": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        cnt = Counter(nums)\n        n = len(nums) - 1\n        return cnt[n] == 2 and all(cnt[i] for i in range(1, n))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2, 1, 3]) == False\n    assert candidate(nums = [1, 3, 3, 2]) == True\n    assert candidate(nums = [1, 1]) == True\n    assert candidate(nums = [3, 4, 4, 1, 2, 1]) == False\n\n\ncheck(Solution().isGood)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and a positive integer x.\nYou are initially at position 0 in the array and you can visit other positions according to the following rules:\n\nIf you are currently in position i, then you can move to any position j such that i < j.\nFor each position i that you visit, you get a score of nums[i].\nIf you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x.\n\nReturn the maximum total score you can get.\nNote that initially you have nums[0] points.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n        f = [-inf] * 2\n        f[nums[0] & 1] = nums[0]\n        for v in nums[1:]:\n            f[v & 1] = max(f[v & 1] + v, f[v & 1 ^ 1] + v - x)\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,3,6,1,9,2], x = 5) == 13\n    assert candidate(nums = [2,4,6,8], x = 3) == 20\n\n\ncheck(Solution().maxScore)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        items.sort(key=lambda x: -x[0])\n        tot = 0\n        vis = set()\n        dup = []\n        for p, c in items[:k]:\n            tot += p\n            if c not in vis:\n                vis.add(c)\n            else:\n                dup.append(p)\n        ans = tot + len(vis) ** 2\n        for p, c in items[k:]:\n            if c in vis or not dup:\n                continue\n            vis.add(c)\n            tot += p - dup.pop()\n            ans = max(ans, tot + len(vis) ** 2)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(items = [[3,2],[5,1],[10,1]], k = 2) == 17\n    assert candidate(items = [[3,1],[3,1],[2,2],[5,3]], k = 3) == 19\n    assert candidate(items = [[1,1],[2,1],[3,1]], k = 3) == 7\n\n\ncheck(Solution().findMaximumElegance)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal.\nFor example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.\nReturn the maximum sum or -1 if no such pair exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxSum(self, nums: List[int]) -> int:\n        ans = -1\n        for i, x in enumerate(nums):\n            for y in nums[i + 1 :]:\n                v = x + y\n                if ans < v and max(str(x)) == max(str(y)):\n                    ans = v\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [51,71,17,24,42]) == 88\n    assert candidate(nums = [1,2,3,4]) == -1\n\n\ncheck(Solution().maxSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven the head of a linked list head, in which each node contains an integer value.\nBetween every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.\nReturn the linked list after insertion.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```",
        "solutions": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertGreatestCommonDivisors(\n        self, head: Optional[ListNode]\n    ) -> Optional[ListNode]:\n        pre, cur = head, head.next\n        while cur:\n            x = gcd(pre.val, cur.val)\n            pre.next = ListNode(x, cur)\n            pre, cur = cur, cur.next\n        return head\n",
        "tests": {
            "functional": "def check(candidate):\n    assert is_same_list(candidate(head = list_node([18,6,10,3])), list_node([18,6,6,2,10,1,3]))\n    assert is_same_list(candidate(head = list_node([7])), list_node([7]))\n\n\ncheck(Solution().insertGreatestCommonDivisors)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums. Each element in nums is 1, 2 or 3. In each operation, you can remove an element from\u00a0nums. Return the minimum number of operations to make nums non-decreasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        f = g = h = 0\n        for x in nums:\n            ff = gg = hh = 0\n            if x == 1:\n                ff = f\n                gg = min(f, g) + 1\n                hh = min(f, g, h) + 1\n            elif x == 2:\n                ff = f + 1\n                gg = min(f, g)\n                hh = min(f, g, h) + 1\n            else:\n                ff = f + 1\n                gg = min(f, g) + 1\n                hh = min(f, g, h)\n            f, g, h = ff, gg, hh\n        return min(f, g, h)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,1,3,2,1]) == 3\n    assert candidate(nums = [1,3,2,1,3,3]) == 2\n    assert candidate(nums = [2,2,2,2,3,3]) == 0\n\n\ncheck(Solution().minimumOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPalindromePaths(self, parent: List[int], s: str) -> int:\n```",
        "solutions": "class Solution:\n    def countPalindromePaths(self, parent: List[int], s: str) -> int:\n        def dfs(i: int, xor: int):\n            nonlocal ans\n            for j, v in g[i]:\n                x = xor ^ v\n                ans += cnt[x]\n                for k in range(26):\n                    ans += cnt[x ^ (1 << k)]\n                cnt[x] += 1\n                dfs(j, x)\n\n        n = len(parent)\n        g = defaultdict(list)\n        for i in range(1, n):\n            p = parent[i]\n            g[p].append((i, 1 << (ord(s[i]) - ord('a'))))\n        ans = 0\n        cnt = Counter({0: 1})\n        dfs(0, 0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(parent = [-1,0,0,1,1,2], s = \"acaabc\") == 8\n    assert candidate(parent = [-1,0,0,0,0], s = \"aaaaa\") == 10\n\n\ncheck(Solution().countPalindromePaths)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n\nA cell containing a thief if grid[r][c] = 1\nAn empty cell if grid[r][c] = 0\n\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:\n```",
        "solutions": "class UnionFind:\n    def __init__(self, n):\n        self.p = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb:\n            return False\n        if self.size[pa] > self.size[pb]:\n            self.p[pb] = pa\n            self.size[pa] += self.size[pb]\n        else:\n            self.p[pa] = pb\n            self.size[pb] += self.size[pa]\n        return True\n\n\nclass Solution:\n    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        if grid[0][0] or grid[n - 1][n - 1]:\n            return 0\n        q = deque()\n        dist = [[inf] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j]:\n                    q.append((i, j))\n                    dist[i][j] = 0\n        dirs = (-1, 0, 1, 0, -1)\n        while q:\n            i, j = q.popleft()\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and dist[x][y] == inf:\n                    dist[x][y] = dist[i][j] + 1\n                    q.append((x, y))\n\n        q = ((dist[i][j], i, j) for i in range(n) for j in range(n))\n        q = sorted(q, reverse=True)\n        uf = UnionFind(n * n)\n        for d, i, j in q:\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and dist[x][y] >= d:\n                    uf.union(i * n + j, x * n + y)\n            if uf.find(0) == uf.find(n * n - 1):\n                return int(d)\n        return 0\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,0,0],[0,0,0],[0,0,1]]) == 0\n    assert candidate(grid = [[0,0,1],[0,0,0],[0,0,0]]) == 2\n    assert candidate(grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]) == 2\n\n\ncheck(Solution().maximumSafenessFactor)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums, an integer modulo, and an integer k.\nYour task is to find the count of subarrays that are interesting.\nA subarray nums[l..r] is interesting if the following condition holds:\n\nLet cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k.\n\nReturn an integer denoting the count of interesting subarrays. \nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n        arr = [int(x % modulo == k) for x in nums]\n        cnt = Counter()\n        cnt[0] = 1\n        ans = s = 0\n        for x in arr:\n            s += x\n            ans += cnt[(s - k) % modulo]\n            cnt[s % modulo] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [3,2,4], modulo = 2, k = 1) == 3\n    assert candidate(nums = [3,1,9,6], modulo = 3, k = 0) == 2\n\n\ncheck(Solution().countInterestingSubarrays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        ans = 0\n        for j, x in enumerate(nums):\n            i = bisect_left(nums, target - x, hi=j)\n            ans += i\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [-1,1,2,3,1], target = 2) == 3\n    assert candidate(nums = [-6,2,5,-2,-7,-1,3], target = -2) == 10\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed integer 2D array nodes, your task is to determine if the given array represents the preorder traversal of some binary tree.\nFor each index i, nodes[i] = [id, parentId], where id is the id of the node at the index i and parentId is the id of its parent in the tree (if the node has no parent, then parentId == -1).\nReturn true if the given array represents the preorder traversal of some tree, and false otherwise.\nNote: the preorder traversal of a tree is a recursive way to traverse a tree in which we first visit the current node, then we do the preorder traversal for the left child, and finally, we do it for the right child.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n```",
        "solutions": "class Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n        def dfs(i: int) -> int:\n            nonlocal k\n            if i != nodes[k][0]:\n                return False\n            k += 1\n            return all(dfs(j) for j in g[i])\n\n        g = defaultdict(list)\n        for i, p in nodes:\n            g[p].append(i)\n        k = 0\n        return dfs(nodes[0][0]) and k == len(nodes)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]) == True\n    assert candidate(nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]) == False\n\n\ncheck(Solution().isPreorder)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array usageLimits of length n.\nYour task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\n\nEach group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.\nEach group (except the first one) must have a length strictly greater than the previous group.\n\nReturn an integer denoting the maximum number of groups you can create while satisfying these conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n        usageLimits.sort()\n        k, n = 0, len(usageLimits)\n        for i in range(n):\n            if usageLimits[i] > k:\n                k += 1\n                usageLimits[i] -= k\n            if i + 1 < n:\n                usageLimits[i + 1] += usageLimits[i]\n        return k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(usageLimits = [1,2,5]) == 3\n    assert candidate(usageLimits = [2,1,2]) == 2\n    assert candidate(usageLimits = [1,1]) == 1\n\n\ncheck(Solution().maxIncreasingGroups)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums containing n integers.\nAt each second, you perform the following operation on the array:\n\nFor every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n].\n\nNote that all the elements get replaced simultaneously.\nReturn the minimum number of seconds needed to make all elements in the array nums equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n        d = defaultdict(list)\n        for i, x in enumerate(nums):\n            d[x].append(i)\n        ans = inf\n        n = len(nums)\n        for idx in d.values():\n            t = idx[0] + n - idx[-1]\n            for i, j in pairwise(idx):\n                t = max(t, j - i)\n            ans = min(ans, t // 2)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,1,2]) == 1\n    assert candidate(nums = [2,1,3,3,2]) == 2\n    assert candidate(nums = [5,5,5,5]) == 0\n\n\ncheck(Solution().minimumSeconds)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n\nChoose an index 0 <= i < nums1.length and make nums1[i] = 0.\n\nYou are also given an integer x.\nReturn the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n        n = len(nums1)\n        f = [[0] * (n + 1) for _ in range(n + 1)]\n        for i, (a, b) in enumerate(sorted(zip(nums1, nums2), key=lambda z: z[1]), 1):\n            for j in range(n + 1):\n                f[i][j] = f[i - 1][j]\n                if j > 0:\n                    f[i][j] = max(f[i][j], f[i - 1][j - 1] + a + b * j)\n        s1 = sum(nums1)\n        s2 = sum(nums2)\n        for j in range(n + 1):\n            if s1 + s2 * j - f[n][j] <= x:\n                return j\n        return -1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums1 = [1,2,3], nums2 = [1,2,3], x = 4) == 3\n    assert candidate(nums1 = [1,2,3], nums2 = [3,3,3], x = 4) == -1\n\n\ncheck(Solution().minimumTime)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane.\nWe define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation.\nReturn the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n        cnt = Counter()\n        ans = 0\n        for x2, y2 in coordinates:\n            for a in range(k + 1):\n                b = k - a\n                x1, y1 = a ^ x2, b ^ y2\n                ans += cnt[(x1, y1)]\n            cnt[(x2, y2)] += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5) == 2\n    assert candidate(coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0) == 10\n\n\ncheck(Solution().countPairs)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array nums and two positive integers m and k.\nReturn the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\nA subarray of nums is almost unique if it contains at least m distinct elements.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums: List[int], m: int, k: int) -> int:\n```",
        "solutions": "class Solution:\n    def maxSum(self, nums: List[int], m: int, k: int) -> int:\n        cnt = Counter(nums[:k])\n        s = sum(nums[:k])\n        ans = s if len(cnt) >= m else 0\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            cnt[nums[i - k]] -= 1\n            s += nums[i] - nums[i - k]\n            if cnt[nums[i - k]] == 0:\n                cnt.pop(nums[i - k])\n            if len(cnt) >= m:\n                ans = max(ans, s)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [2,6,7,3,1,7], m = 3, k = 4) == 18\n    assert candidate(nums = [5,9,9,2,4,5,4], m = 1, k = 3) == 23\n    assert candidate(nums = [1,2,1,2,1,2,1], m = 3, k = 3) == 0\n\n\ncheck(Solution().maxSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise. \n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n        return \"\".join(w[0] for w in words) == s\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\") == True\n    assert candidate(words = [\"an\",\"apple\"], s = \"a\") == False\n    assert candidate(words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\") == True\n\n\ncheck(Solution().isAcronym)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s1 and s2, both of length n, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n\nChoose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.\n\nReturn true if you can make the strings s1 and s2 equal, and\u00a0false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkStrings(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def checkStrings(self, s1: str, s2: str) -> bool:\n        return sorted(s1[::2]) == sorted(s2[::2]) and sorted(s1[1::2]) == sorted(\n            s2[1::2]\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"abcdba\", s2 = \"cabdab\") == True\n    assert candidate(s1 = \"abe\", s2 = \"bea\") == False\n\n\ncheck(Solution().checkStrings)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\nAdditionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\nAs a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\nReturn the maximum amount of gold you can earn.\nNote that different buyers can't buy the same house, and some houses may remain unsold.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        offers.sort(key=lambda x: x[1])\n        f = [0] * (len(offers) + 1)\n        g = [x[1] for x in offers]\n        for i, (s, _, v) in enumerate(offers, 1):\n            j = bisect_left(g, s)\n            f[i] = max(f[i - 1], f[j] + v)\n        return f[-1]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]) == 3\n    assert candidate(n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]) == 10\n\n\ncheck(Solution().maximizeTheProfit)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two positive integers low and high.\nAn integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.\nReturn the number of symmetric integers in the range [low, high].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n```",
        "solutions": "class Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n        def f(x: int) -> bool:\n            s = str(x)\n            if len(s) & 1:\n                return False\n            n = len(s) // 2\n            return sum(map(int, s[:n])) == sum(map(int, s[n:]))\n\n        return sum(f(x) for x in range(low, high + 1))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(low = 1, high = 100) == 9\n    assert candidate(low = 1200, high = 1230) == 4\n\n\ncheck(Solution().countSymmetricIntegers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s1 and s2, both of length 4, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n\nChoose any two indices i and j such that j - i = 2, then swap the two characters at those indices in the string.\n\nReturn true if you can make the strings s1 and s2 equal, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeEqual(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canBeEqual(self, s1: str, s2: str) -> bool:\n        return sorted(s1[::2]) == sorted(s2[::2]) and sorted(s1[1::2]) == sorted(\n            s2[1::2]\n        )\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"abcd\", s2 = \"cdab\") == True\n    assert candidate(s1 = \"abcd\", s2 = \"dacb\") == False\n\n\ncheck(Solution().canBeEqual)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed integer array nums and an integer x.\nFind the minimum absolute difference between two elements in the array that are at least x indices apart.\nIn other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\nReturn an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:\n```",
        "solutions": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:\n        sl = SortedList()\n        ans = inf\n        for i in range(x, len(nums)):\n            sl.add(nums[i - x])\n            j = bisect_left(sl, nums[i])\n            if j < len(sl):\n                ans = min(ans, sl[j] - nums[i])\n            if j:\n                ans = min(ans, nums[i] - sl[j - 1])\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [4,3,2,4], x = 2) == 0\n    assert candidate(nums = [5,3,2,10,15], x = 1) == 1\n    assert candidate(nums = [1,2,3,4], x = 3) == 3\n\n\ncheck(Solution().minAbsoluteDifference)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two 0-indexed strings str1 and str2.\nIn an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.\nReturn true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.\nNote: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n        i = 0\n        for c in str1:\n            d = \"a\" if c == \"z\" else chr(ord(c) + 1)\n            if i < len(str2) and str2[i] in (c, d):\n                i += 1\n        return i == len(str2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(str1 = \"abc\", str2 = \"ad\") == True\n    assert candidate(str1 = \"zc\", str2 = \"ad\") == True\n    assert candidate(str1 = \"ab\", str2 = \"d\") == False\n\n\ncheck(Solution().canMakeSubsequence)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.\nIn the ith move, you can choose one of the following directions:\n\nmove to the left if moves[i] = 'L' or moves[i] = '_'\nmove to the right if moves[i] = 'R' or moves[i] = '_'\n\nReturn the distance from the origin of the furthest point you can get to after n moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def furthestDistanceFromOrigin(self, moves: str) -> int:\n```",
        "solutions": "class Solution:\n    def furthestDistanceFromOrigin(self, moves: str) -> int:\n        return abs(moves.count(\"L\") - moves.count(\"R\")) + moves.count(\"_\")\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(moves = \"L_RL__R\") == 3\n    assert candidate(moves = \"_R__LL_\") == 5\n    assert candidate(moves = \"_______\") == 7\n\n\ncheck(Solution().furthestDistanceFromOrigin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given two strings s and t of equal length n. You can perform the following operation on the string s:\n\nRemove a suffix of s of length l where 0 < l < n and append it at the start of s.\n\tFor example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.\n\nYou are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\nSince the answer can be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfWays(self, s: str, t: str, k: int) -> int:\n```",
        "solutions": "\"\"\"\nDP, Z-algorithm, Fast mod.\nApproach\nHow to represent a string?\nEach operation is just a rotation. Each result string can be represented by an integer from 0 to n - 1. Namely, it's just the new index of s[0].\nHow to find the integer(s) that can represent string t?\nCreate a new string s + t + t (length = 3 * n).\nUse Z-algorithm (or KMP), for each n <= index < 2 * n, calculate the maximum prefix length that each substring starts from index can match, if the length >= n, then (index - n) is a valid integer representation.\nHow to get the result?\nIt's a very obvious DP.\nIf we use an integer to represent a string, we only need to consider the transition from zero to non-zero and from non-zero to zero. In other words, all the non-zero strings should have the same result.\nSo let dp[t][i = 0/1] be the number of ways to get the zero/nonzero string\nafter excatly t steps.\nThen\ndp[t][0] = dp[t - 1][1] * (n - 1).\nAll the non zero strings can make it.\ndp[t][1] = dp[t - 1][0] + dp[t - 1] * (n - 2).\nFor a particular non zero string, all the other non zero strings and zero string can make it.\nWe have dp[0][0] = 1 and dp[0][1] = 0\nUse matrix multiplication.\nHow to calculate dp[k][x = 0, 1] faster?\nUse matrix multiplication\nvector (dp[t - 1][0], dp[t - 1][1])\nmultiplies matrix\n[0 1]\n[n - 1 n - 2]\n== vector (dp[t][0], dp[t - 1][1]).\nSo we just need to calculate the kth power of the matrix which can be done by fast power algorith.\nComplexity\nTime complexity:\nO(n + logk)\nSpace complexity:\nO(n)\n\"\"\"\n\n\nclass Solution:\n    M: int = 1000000007\n\n    def add(self, x: int, y: int) -> int:\n        x += y\n        if x >= self.M:\n            x -= self.M\n        return x\n\n    def mul(self, x: int, y: int) -> int:\n        return int(x * y % self.M)\n\n    def getZ(self, s: str) -> List[int]:\n        n = len(s)\n        z = [0] * n\n        left = right = 0\n        for i in range(1, n):\n            if i <= right and z[i - left] <= right - i:\n                z[i] = z[i - left]\n            else:\n                z_i = max(0, right - i + 1)\n                while i + z_i < n and s[i + z_i] == s[z_i]:\n                    z_i += 1\n                z[i] = z_i\n            if i + z[i] - 1 > right:\n                left = i\n                right = i + z[i] - 1\n        return z\n\n    def matrixMultiply(self, a: List[List[int]], b: List[List[int]]) -> List[List[int]]:\n        m = len(a)\n        n = len(a[0])\n        p = len(b[0])\n        r = [[0] * p for _ in range(m)]\n        for i in range(m):\n            for j in range(p):\n                for k in range(n):\n                    r[i][j] = self.add(r[i][j], self.mul(a[i][k], b[k][j]))\n        return r\n\n    def matrixPower(self, a: List[List[int]], y: int) -> List[List[int]]:\n        n = len(a)\n        r = [[0] * n for _ in range(n)]\n        for i in range(n):\n            r[i][i] = 1\n        x = [a[i][:] for i in range(n)]\n        while y > 0:\n            if y & 1:\n                r = self.matrixMultiply(r, x)\n            x = self.matrixMultiply(x, x)\n            y >>= 1\n        return r\n\n    def numberOfWays(self, s: str, t: str, k: int) -> int:\n        n = len(s)\n        dp = self.matrixPower([[0, 1], [n - 1, n - 2]], k)[0]\n        s += t + t\n        z = self.getZ(s)\n        m = n + n\n        result = 0\n        for i in range(n, m):\n            if z[i] >= n:\n                result = self.add(result, dp[0] if i - n == 0 else dp[1])\n        return result\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s = \"abcd\", t = \"cdab\", k = 2) == 2\n    assert candidate(s = \"ababab\", t = \"ababab\", k = 1) == 2\n\n\ncheck(Solution().numberOfWays)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\nIn one operation, you must apply the following changes to the array:\n\nChoose any element of the array nums[i] such that nums[i] > 1.\nRemove nums[i] from the array.\nAdd two occurrences of nums[i] / 2 to the end of nums.\n\nReturn the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n```",
        "solutions": "class Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n        s = sum(nums)\n        if s < target:\n            return -1\n        cnt = [0] * 32\n        for x in nums:\n            for i in range(32):\n                if x >> i & 1:\n                    cnt[i] += 1\n        i = j = 0\n        ans = 0\n        while 1:\n            while i < 32 and (target >> i & 1) == 0:\n                i += 1\n            if i == 32:\n                break\n            while j < i:\n                cnt[j + 1] += cnt[j] // 2\n                cnt[j] %= 2\n                j += 1\n            while cnt[j] == 0:\n                cnt[j] = 1\n                j += 1\n            ans += j - i\n            cnt[j] -= 1\n            j = i\n            i += 1\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [1,2,8], target = 7) == 1\n    assert candidate(nums = [1,32,1,2], target = 12) == 2\n    assert candidate(nums = [1,32,1], target = 35) == -1\n\n\ncheck(Solution().minOperations)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given positive integers n and target.\nAn array nums is beautiful if it meets the following conditions:\n\nnums.length == n.\nnums consists of pairwise distinct positive integers.\nThere doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.\n\nReturn the minimum possible sum that a beautiful array could have modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumPossibleSum(self, n: int, target: int) -> int:\n```",
        "solutions": "class Solution:\n    def minimumPossibleSum(self, n: int, target: int) -> int:\n        mod = 10**9 + 7\n        m = target // 2\n        if n <= m:\n            return ((1 + n) * n // 2) % mod\n        return ((1 + m) * m // 2 + (target + target + n - m - 1) * (n - m) // 2) % mod\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 2, target = 3) == 4\n    assert candidate(n = 3, target = 3) == 8\n    assert candidate(n = 1, target = 1) == 1\n\n\ncheck(Solution().minimumPossibleSum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWe know that 4 and 7 are lucky digits. Also, a number is called lucky\u00a0if it contains only lucky digits.\nYou are given an integer k, return the kth\u00a0lucky number represented as a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def kthLuckyNumber(self, k: int) -> str:\n```",
        "solutions": "class Solution:\n    def kthLuckyNumber(self, k: int) -> str:\n        n = 1\n        while k > 1 << n:\n            k -= 1 << n\n            n += 1\n        ans = []\n        while n:\n            n -= 1\n            if k <= 1 << n:\n                ans.append(\"4\")\n            else:\n                ans.append(\"7\")\n                k -= 1 << n\n        return \"\".join(ans)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(k = 4) == \"47\"\n    assert candidate(k = 10) == \"477\"\n    assert candidate(k = 1000) == \"777747447\"\n\n\ncheck(Solution().kthLuckyNumber)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:\n\nEach element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345.\n\nReturn the product matrix of grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n```",
        "solutions": "class Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n        n, m = len(grid), len(grid[0])\n        p = [[0] * m for _ in range(n)]\n        mod = 12345\n        suf = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(m - 1, -1, -1):\n                p[i][j] = suf\n                suf = suf * grid[i][j] % mod\n        pre = 1\n        for i in range(n):\n            for j in range(m):\n                p[i][j] = p[i][j] * pre % mod\n                pre = pre * grid[i][j] % mod\n        return p\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(grid = [[1,2],[3,4]]) == [[24,12],[8,6]]\n    assert candidate(grid = [[12345],[2],[1]]) == [[2],[0],[0]]\n\n\ncheck(Solution().constructProductMatrix)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game.\nYou choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i].\nReturn\u00a0the maximum\u00a0possible score.\nNotes:\n\nreceiver may contain duplicates.\nreceiver[i] may be equal to i.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n```",
        "solutions": "class Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n        n, m = len(receiver), k.bit_length()\n        f = [[0] * m for _ in range(n)]\n        g = [[0] * m for _ in range(n)]\n        for i, x in enumerate(receiver):\n            f[i][0] = x\n            g[i][0] = i\n        for j in range(1, m):\n            for i in range(n):\n                f[i][j] = f[f[i][j - 1]][j - 1]\n                g[i][j] = g[i][j - 1] + g[f[i][j - 1]][j - 1]\n        ans = 0\n        for i in range(n):\n            p, t = i, 0\n            for j in range(m):\n                if k >> j & 1:\n                    t += g[p][j]\n                    p = f[p][j]\n            ans = max(ans, t + p)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(receiver = [2,0,1], k = 4) == 6\n    assert candidate(receiver = [1,1,1,2,3], k = 3) == 10\n\n\ncheck(Solution().getMaxFunctionValue)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.\nReturn the number of integer points on the line that are covered with any part of a car.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n        d = [0] * 110\n        for a, b in nums:\n            d[a] += 1\n            d[b + 1] -= 1\n        return sum(s > 0 for s in accumulate(d))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [[3,6],[1,5],[4,7]]) == 7\n    assert candidate(nums = [[1,3],[5,8]]) == 7\n\n\ncheck(Solution().numberOfPoints)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nEnglish description is not available for the problem. Please switch to Chinese.\r\n\u00a0\n\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def fraction(self, cont: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def fraction(self, cont: List[int]) -> List[int]:\n        def dfs(i: int) -> List[int]:\n            if i == len(cont) - 1:\n                return [cont[i], 1]\n            a, b = dfs(i + 1)\n            x, y = a * cont[i] + b, a\n            g = gcd(x, y)\n            return [x // g, y // g]\n\n        return dfs(0)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(cont = [3, 2, 0, 2]) == [13, 4]\n    assert candidate(cont = [0, 0, 3]) == [3, 1]\n\n\ncheck(Solution().fraction)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nEnglish description is not available for the problem. Please switch to Chinese.\r\n\u00a0\n\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def game(self, guess: List[int], answer: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def game(self, guess: List[int], answer: List[int]) -> int:\n        return sum(a == b for a, b in zip(guess, answer))\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(guess = [1,2,3], answer = [1,2,3]) == 3\n    assert candidate(guess = [2,2,3], answer = [3,2,1]) == 1\n\n\ncheck(Solution().game)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings,write a method to decide if one is a permutation of the other.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def CheckPermutation(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def CheckPermutation(self, s1: str, s2: str) -> bool:\n        return Counter(s1) == Counter(s2)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"abc\", s2 = \"bca\") == True\n    assert candidate(s1 = \"abc\", s2 = \"bad\") == False\n\n\ncheck(Solution().CheckPermutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters,and that you are given the \"true\" length of the string. (Note: If implementing in Java,please use a character array so that you can perform this operation in place.)\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def replaceSpaces(self, S: str, length: int) -> str:\n```",
        "solutions": "class Solution:\n    def replaceSpaces(self, S: str, length: int) -> str:\n        return S[:length].replace(' ', '%20')\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"Mr John Smith    \", 13) == \"Mr%20John%20Smith\"\n    assert candidate(\"               \", 5) == \"%20%20%20%20%20\"\n\n\ncheck(Solution().replaceSpaces)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nImplement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the \"compressed\" string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a - z).\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def compressString(self, S: str) -> str:\n```",
        "solutions": "class Solution:\n    def compressString(self, S: str) -> str:\n        t = \"\".join(a + str(len(list(b))) for a, b in groupby(S))\n        return min(S, t, key=len)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(\"aabcccccaaa\") == \"a2b1c5a3\"\n    assert candidate(\"abbccd\") == \"abbccd\"\n\n\ncheck(Solution().compressString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven two strings, s1\u00a0and s2, write code to check if s2 is a rotation of s1 (e.g.,\"waterbottle\" is a rotation of\"erbottlewat\").\u00a0Can you use\u00a0only one call to the method that\u00a0checks if one word is a substring of another?\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isFlipedString(self, s1: str, s2: str) -> bool:\n```",
        "solutions": "class Solution:\n    def isFlipedString(self, s1: str, s2: str) -> bool:\n        return len(s1) == len(s2) and s2 in s1 * 2\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(s1 = \"waterbottle\", s2 = \"erbottlewat\") == True\n    assert candidate(s1 = \"aa\", s2 = \"aba\") == False\n\n\ncheck(Solution().isFlipedString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA monochrome screen is stored as a single array of int, allowing 32 consecutive pixels to be stored in one int. The screen has width w, where w is divisible by 32\u00a0(that is, no byte will be split across rows). The height of the screen, of course, can be derived from the length of the array and the width. Implement a function that draws a horizontal line from (x1, y) to (x2, y).\nGiven the length of the array, the width of the array (in bit), start position x1\u00a0(in bit) of the line, end position x2 (in bit) of the line and the row number\u00a0y of the line, return the array after drawing.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def drawLine(self, length: int, w: int, x1: int, x2: int, y: int) -> List[int]:\n```",
        "solutions": "class Solution:\n    def drawLine(self, length: int, w: int, x1: int, x2: int, y: int) -> List[int]:\n        ans = [0] * length\n        i = (y * w + x1) // 32\n        j = (y * w + x2) // 32\n        for k in range(i, j + 1):\n            ans[k] = -1\n        ans[i] = (ans[i] & 0xFFFFFFFF) >> (x1 % 32) if x1 % 32 else -1\n        ans[j] &= -0x80000000 >> (x2 % 32)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(length = 1, w = 32, x1 = 30, x2 = 31, y = 0) == [3]\n    assert candidate(length = 3, w = 96, x1 = 0, x2 = 95, y = 0) == [-1, -1, -1]\n\n\ncheck(Solution().drawLine)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA child is running up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time. Implement a method to count how many possible ways the child can run up the stairs.\u00a0The result may be large, so return it modulo 1000000007.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToStep(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def waysToStep(self, n: int) -> int:\n        a, b, c = 1, 2, 4\n        mod = 10**9 + 7\n        for _ in range(n - 1):\n            a, b, c = b, c, (a + b + c) % mod\n        return a\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 3) == 4\n    assert candidate(n = 5) == 13\n\n\ncheck(Solution().waysToStep)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a recursive function to multiply two positive integers without using the * operator. You can use addition, subtraction, and bit shifting, but you should minimize the number of those operations.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def multiply(self, A: int, B: int) -> int:\n```",
        "solutions": "class Solution:\n    def multiply(self, A: int, B: int) -> int:\n        if B == 1:\n            return A\n        if B & 1:\n            return (self.multiply(A, B >> 1) << 1) + A\n        return self.multiply(A, B >> 1) << 1\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(A = 1, B = 10) == 10\n    assert candidate(A = 3, B = 4) == 12\n\n\ncheck(Solution().multiply)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nYou have a stack of n boxes, with widths wi, depths di, and heights hi. The boxes cannot be rotated and can only be stacked on top of one another if each box in the stack is strictly larger than the box above it in width, height, and depth. Implement a method to compute the height of the tallest possible stack. The height of a stack is the sum of the heights of each box.\nThe input use [wi, di, hi]\u00a0to represents each box.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def pileBox(self, box: List[List[int]]) -> int:\n```",
        "solutions": "class Solution:\n    def pileBox(self, box: List[List[int]]) -> int:\n        box.sort(key=lambda x: (x[0], -x[1]))\n        n = len(box)\n        f = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if box[j][1] < box[i][1] and box[j][2] < box[i][2]:\n                    f[i] = max(f[i], f[j])\n            f[i] += box[i][2]\n        return max(f)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(box = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 6\n    assert candidate(box = [[1, 1, 1], [2, 3, 4], [2, 6, 7], [3, 4, 5]]) == 10\n\n\ncheck(Solution().pileBox)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a real number between 0 and 1 (e.g., 0.72) that is passed in as a double, print the binary representation. If the number cannot be represented accurately in binary with at most 32 characters, print \"ERROR\".\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def printBin(self, num: float) -> str:\n```",
        "solutions": "class Solution:\n    def printBin(self, num: float) -> str:\n        ans = '0.'\n        while len(ans) < 32 and num:\n            num *= 2\n            x = int(num)\n            ans += str(x)\n            num -= x\n        return 'ERROR' if num else ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(0.625) == \"0.101\"\n    assert candidate(0.1) == \"ERROR\"\n\n\ncheck(Solution().printBin)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an infinite number of quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent), write code to calculate the number of ways of representing n cents.\u00a0(The result may be large, so you should return it modulo 1000000007)\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def waysToChange(self, n: int) -> int:\n```",
        "solutions": "class Solution:\n    def waysToChange(self, n: int) -> int:\n        mod = 10**9 + 7\n        coins = [25, 10, 5, 1]\n        f = [[0] * (n + 1) for _ in range(5)]\n        f[0][0] = 1\n        for i, c in enumerate(coins, 1):\n            for j in range(n + 1):\n                f[i][j] = f[i - 1][j]\n                if j >= c:\n                    f[i][j] = (f[i][j] + f[i][j - c]) % mod\n        return f[-1][n]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(n = 5) == 2\n    assert candidate(n = 10) == 4\n\n\ncheck(Solution().waysToChange)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite an algorithm to print all ways of arranging n queens on an n x n\u00a0chess board so that none of them share the same row, column, or diagonal. In this case, \"diagonal\" means all diagonals, not just the two that bisect the board.\nNotes: This\u00a0problem is a generalization of the original one in the book.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n```",
        "solutions": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append([\"\".join(row) for row in g])\n                return\n            for j in range(n):\n                if col[j] + dg[i + j] + udg[n - i + j] == 0:\n                    g[i][j] = \"Q\"\n                    col[j] = dg[i + j] = udg[n - i + j] = 1\n                    dfs(i + 1)\n                    col[j] = dg[i + j] = udg[n - i + j] = 0\n                    g[i][j] = \".\"\n\n        ans = []\n        g = [[\".\"] * n for _ in range(n)]\n        col = [0] * n\n        dg = [0] * (n << 1)\n        udg = [0] * (n << 1)\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(4) == [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n\n\ncheck(Solution().solveNQueens)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nA magic index in an array A[0...n-1] is defined to be an index such that A[i] = i. Given a sorted array of\u00a0integers, write a method to find a magic index, if one exists, in array A. If not, return -1. If there are more than one magic index, return the smallest one.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMagicIndex(self, nums: List[int]) -> int:\n```",
        "solutions": "class Solution:\n    def findMagicIndex(self, nums: List[int]) -> int:\n        def dfs(i: int, j: int) -> int:\n            if i > j:\n                return -1\n            mid = (i + j) >> 1\n            l = dfs(i, mid - 1)\n            if l != -1:\n                return l\n            if nums[mid] == mid:\n                return mid\n            return dfs(mid + 1, j)\n\n        return dfs(0, len(nums) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(nums = [0, 2, 3, 4, 5]) == 0\n    assert candidate(nums = [1, 1, 1]) == 1\n\n\ncheck(Solution().findMagicIndex)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a sorted array of strings that is interspersed with empty strings, write a method to find the location of a given string.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findString(self, words: List[str], s: str) -> int:\n```",
        "solutions": "class Solution:\n    def findString(self, words: List[str], s: str) -> int:\n        def dfs(i: int, j: int) -> int:\n            if i > j:\n                return -1\n            mid = (i + j) >> 1\n            l = dfs(i, mid - 1)\n            if l != -1:\n                return l\n            if words[mid] == s:\n                return mid\n            return dfs(mid + 1, j)\n\n        return dfs(0, len(words) - 1)\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(words = [\"at\", \"\", \"\", \"\", \"ball\", \"\", \"\", \"car\", \"\", \"\",\"dad\", \"\", \"\"], s = \"ta\") == -1\n    assert candidate(words = [\"at\", \"\", \"\", \"\", \"ball\", \"\", \"\", \"car\", \"\", \"\",\"dad\", \"\", \"\"], s = \"ball\") == 4\n\n\ncheck(Solution().findString)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a function to swap a number in place (that is, without temporary variables).\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def swapNumbers(self, numbers: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def swapNumbers(self, numbers: List[int]) -> List[int]:\n        numbers[0] ^= numbers[1]\n        numbers[1] ^= numbers[0]\n        numbers[0] ^= numbers[1]\n        return numbers\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(numbers = [1,2]) == [2,1]\n\n\ncheck(Solution().swapNumbers)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nDesign an algorithm to figure out if someone has won a game of tic-tac-toe.\u00a0Input is a string array\u00a0of size N x N, including characters \" \", \"X\" and \"O\", where \" \" represents a empty grid.\nThe rules of tic-tac-toe are as follows:\n\nPlayers place characters into an empty grid(\" \") in turn.\nThe first player always place character \"O\", and the second one place \"X\".\nPlayers are only allowed to place characters in empty grid. Replacing a character is not allowed.\nIf there is any row, column or diagonal filled with N\u00a0same characters, the game ends. The player who place the last charater wins.\nWhen there is no empty grid, the game ends.\nIf the game ends, players cannot place any character further.\n\nIf there is any winner, return the character that the winner used. If there's a draw, return \"Draw\". If the game doesn't end and there is no winner, return \"Pending\".\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def tictactoe(self, board: List[str]) -> str:\n```",
        "solutions": "class Solution:\n    def tictactoe(self, board: List[str]) -> str:\n        n = len(board)\n        rows = [0] * n\n        cols = [0] * n\n        dg = udg = 0\n        has_empty_grid = False\n        for i, row in enumerate(board):\n            for j, c in enumerate(row):\n                v = 1 if c == 'X' else -1\n                if c == ' ':\n                    has_empty_grid = True\n                    v = 0\n                rows[i] += v\n                cols[j] += v\n                if i == j:\n                    dg += v\n                if i + j + 1 == n:\n                    udg += v\n                if (\n                    abs(rows[i]) == n\n                    or abs(cols[j]) == n\n                    or abs(dg) == n\n                    or abs(udg) == n\n                ):\n                    return c\n        return 'Pending' if has_empty_grid else 'Draw'\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(board = [\"O X\",\" XO\",\"X O\"]) == \"X\"\n    assert candidate(board = [\"OOX\",\"XXO\",\"OXO\"]) == \"Draw\"\n    assert candidate(board = [\"OOX\",\"XXO\",\"OX \"]) == \"Pending\"\n\n\ncheck(Solution().tictactoe)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a method to compute all permutations of a string whose characters are not necessarily unique. The list of permutations should not have duplicates.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def permutation(self, S: str) -> List[str]:\n```",
        "solutions": "class Solution:\n    def permutation(self, S: str) -> List[str]:\n        def dfs(i: int):\n            if i == n:\n                ans.append(\"\".join(t))\n                return\n            for j in range(n):\n                if vis[j] or (j and cs[j] == cs[j - 1] and not vis[j - 1]):\n                    continue\n                t[i] = cs[j]\n                vis[j] = True\n                dfs(i + 1)\n                vis[j] = False\n\n        cs = sorted(S)\n        n = len(cs)\n        ans = []\n        t = [None] * n\n        vis = [False] * n\n        dfs(0)\n        return ans\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(S = \"qqe\") == [\"eqq\",\"qeq\",\"qqe\"]\n    assert candidate(S = \"ab\") == [\"ab\", \"ba\"]\n\n\ncheck(Solution().permutation)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nWrite a method that finds the maximum of two numbers. You should not use if-else or any other comparison operator.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximum(self, a: int, b: int) -> int:\n```",
        "solutions": "class Solution:\n    def maximum(self, a: int, b: int) -> int:\n        k = (int(((a - b) & 0xFFFFFFFFFFFFFFFF) >> 63)) & 1\n        return a * (k ^ 1) + b * k\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(a = 1, b = 2) == 2\n\n\ncheck(Solution().maximum)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven a two-dimensional graph with points on it, find a line which passes the most number of points.\nAssume all the points that passed by the line are stored in list S\u00a0sorted by their number. You need to return [S[0], S[1]], that is , two points that have smallest number. If there are more than one line that passes the most number of points, choose the one that has the smallest S[0].\u00a0If there are more that one line that has the same S[0], choose the one that has smallest S[1].\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def bestLine(self, points: List[List[int]]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def bestLine(self, points: List[List[int]]) -> List[int]:\n        n = len(points)\n        mx = 0\n        for i in range(n):\n            x1, y1 = points[i]\n            for j in range(i + 1, n):\n                x2, y2 = points[j]\n                cnt = 2\n                for k in range(j + 1, n):\n                    x3, y3 = points[k]\n                    a = (y2 - y1) * (x3 - x1)\n                    b = (y3 - y1) * (x2 - x1)\n                    cnt += a == b\n                if mx < cnt:\n                    mx = cnt\n                    x, y = i, j\n        return [x, y]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([[0,0],[1,1],[1,0],[2,0]]) == [0,2]\n\n\ncheck(Solution().bestLine)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nThe Game of Master Mind is played as follows:\nThe computer has four slots, and each slot will contain a ball that is red (R). yellow (Y). green (G) or blue (B). For example, the computer might have RGGB (Slot #1 is red, Slots #2 and #3 are green, Slot #4 is blue).\nYou, the user, are trying to guess the solution. You might, for example, guess YRGB.\nWhen you guess the correct color for the correct slot, you get a \"hit:' If you guess a color that exists but is in the wrong slot, you get a \"pseudo-hit:' Note that a slot that is a hit can never count as a pseudo-hit.\nFor example, if the actual solution is RGBY and you guess GGRR, you have one hit and one pseudo-hit. Write a method that, given a guess and a solution, returns the number of hits and pseudo-hits.\nGiven a sequence of colors solution, and a guess, write a method that return the number of hits and pseudo-hit answer, where answer[0] is the number of hits and answer[1] is the number of pseudo-hit.\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def masterMind(self, solution: str, guess: str) -> List[int]:\n```",
        "solutions": "class Solution:\n    def masterMind(self, solution: str, guess: str) -> List[int]:\n        x = sum(a == b for a, b in zip(solution, guess))\n        y = sum((Counter(solution) & Counter(guess)).values())\n        return [x, y - x]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate(solution=\"RGBY\",guess=\"GGRR\") == [1,1]\n\n\ncheck(Solution().masterMind)"
        }
    },
    {
        "problem": "Please solve the programming task below using a self-contained code snippet in a markdown code block.\n\nGiven an array of integers, write a method to find indices m and n such that if you sorted\u00a0elements m through n, the entire array would be sorted. Minimize n - m (that is, find the smallest such sequence).\nReturn [m,n]. If there are no such m and n (e.g. the array is already sorted), return [-1, -1].\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def subSort(self, array: List[int]) -> List[int]:\n```",
        "solutions": "class Solution:\n    def subSort(self, array: List[int]) -> List[int]:\n        n = len(array)\n        mi, mx = inf, -inf\n        left = right = -1\n        for i, x in enumerate(array):\n            if x < mx:\n                right = i\n            else:\n                mx = x\n        for i in range(n - 1, -1, -1):\n            if array[i] > mi:\n                left = i\n            else:\n                mi = array[i]\n        return [left, right]\n",
        "tests": {
            "functional": "def check(candidate):\n    assert candidate([1,2,4,7,10,11,7,12,6,7,16,18,19]) == [3,9]\n\n\ncheck(Solution().subSort)"
        }
    }
]